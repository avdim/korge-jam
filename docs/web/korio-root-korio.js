(function (root, factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', 'kotlin', 'kotlinx-coroutines-core', 'kmem-root-kmem', 'kds-root-kds', 'klock-root-klock'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('kotlin'), require('kotlinx-coroutines-core'), require('kmem-root-kmem'), require('kds-root-kds'), require('klock-root-klock'));
  else {
    if (typeof kotlin === 'undefined') {
      throw new Error("Error loading module 'korio-root-korio'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'korio-root-korio'.");
    }if (typeof this['kotlinx-coroutines-core'] === 'undefined') {
      throw new Error("Error loading module 'korio-root-korio'. Its dependency 'kotlinx-coroutines-core' was not found. Please, check whether 'kotlinx-coroutines-core' is loaded prior to 'korio-root-korio'.");
    }if (typeof this['kmem-root-kmem'] === 'undefined') {
      throw new Error("Error loading module 'korio-root-korio'. Its dependency 'kmem-root-kmem' was not found. Please, check whether 'kmem-root-kmem' is loaded prior to 'korio-root-korio'.");
    }if (typeof this['kds-root-kds'] === 'undefined') {
      throw new Error("Error loading module 'korio-root-korio'. Its dependency 'kds-root-kds' was not found. Please, check whether 'kds-root-kds' is loaded prior to 'korio-root-korio'.");
    }if (typeof this['klock-root-klock'] === 'undefined') {
      throw new Error("Error loading module 'korio-root-korio'. Its dependency 'klock-root-klock' was not found. Please, check whether 'klock-root-klock' is loaded prior to 'korio-root-korio'.");
    }root['korio-root-korio'] = factory(typeof this['korio-root-korio'] === 'undefined' ? {} : this['korio-root-korio'], kotlin, this['kotlinx-coroutines-core'], this['kmem-root-kmem'], this['kds-root-kds'], this['klock-root-klock']);
  }
}(this, function (_, Kotlin, $module$kotlinx_coroutines_core, $module$kmem_root_kmem, $module$kds_root_kds, $module$klock_root_klock) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var CoroutineScope = $module$kotlinx_coroutines_core.kotlinx.coroutines.CoroutineScope_1fupul$;
  var COROUTINE_SUSPENDED = Kotlin.kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED;
  var CoroutineImpl = Kotlin.kotlin.coroutines.CoroutineImpl;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var Annotation = Kotlin.kotlin.Annotation;
  var Unit = Kotlin.kotlin.Unit;
  var Channel = $module$kotlinx_coroutines_core.kotlinx.coroutines.channels.Channel_ww73n8$;
  var ilog2 = $module$kmem_root_kmem.com.soywiz.kmem.ilog2_za3lpa$;
  var ByteArrayDeque = $module$kds_root_kds.com.soywiz.kds.ByteArrayDeque;
  var Deferred = $module$kotlinx_coroutines_core.kotlinx.coroutines.Deferred;
  var throwCCE = Kotlin.throwCCE;
  var LinkedHashMap_init = Kotlin.kotlin.collections.LinkedHashMap_init_q3lmfv$;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var Throwable = Error;
  var Any = Object;
  var defineInlineFunction = Kotlin.defineInlineFunction;
  var wrapFunction = Kotlin.wrapFunction;
  var CoroutineStart = $module$kotlinx_coroutines_core.kotlinx.coroutines.CoroutineStart;
  var coroutineScope = $module$kotlinx_coroutines_core.kotlinx.coroutines.coroutineScope_awg8ri$;
  var CancellationException = $module$kotlinx_coroutines_core.kotlinx.coroutines.CancellationException;
  var launch = $module$kotlinx_coroutines_core.kotlinx.coroutines.launch_s496o7$;
  var async = $module$kotlinx_coroutines_core.kotlinx.coroutines.async_pda6u4$;
  var TimeSpan = $module$klock_root_klock.com.soywiz.klock.TimeSpan;
  var ensureNotNull = Kotlin.ensureNotNull;
  var TimeProvider = $module$klock_root_klock.com.soywiz.klock.TimeProvider;
  var equals = Kotlin.equals;
  var CompletableDeferred = $module$kotlinx_coroutines_core.kotlinx.coroutines.CompletableDeferred_mh5how$;
  var toList = Kotlin.kotlin.collections.toList_7wnvza$;
  var produce = $module$kotlinx_coroutines_core.kotlinx.coroutines.channels.produce_f6xzli$;
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  var FlowCollector = $module$kotlinx_coroutines_core.kotlinx.coroutines.flow.FlowCollector;
  var Math_0 = Math;
  var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
  var coroutines = Kotlin.kotlin.coroutines;
  var Continuation = Kotlin.kotlin.coroutines.Continuation;
  var delay = $module$kotlinx_coroutines_core.kotlinx.coroutines.delay_s8cxhz$;
  var withTimeout = $module$kotlinx_coroutines_core.kotlinx.coroutines.withTimeout_ms3uf5$;
  var CompletableDeferred_0 = $module$kotlinx_coroutines_core.kotlinx.coroutines.CompletableDeferred_xptg6w$;
  var CompletableDeferred_1 = $module$kotlinx_coroutines_core.kotlinx.coroutines.CompletableDeferred;
  var Result = Kotlin.kotlin.Result;
  var createFailure = Kotlin.kotlin.createFailure_tcv7n7$;
  var intercepted = Kotlin.kotlin.coroutines.intrinsics.intercepted_f9mg25$;
  var SafeContinuation_init = Kotlin.kotlin.coroutines.SafeContinuation_init_wj8d80$;
  var Job = $module$kotlinx_coroutines_core.kotlinx.coroutines.Job_5dx9e$;
  var to = Kotlin.kotlin.to_ujzrz7$;
  var CancellableContinuationImpl_init = $module$kotlinx_coroutines_core.kotlinx.coroutines.CancellableContinuationImpl;
  var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
  var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
  var AbstractCoroutineContextElement = Kotlin.kotlin.coroutines.AbstractCoroutineContextElement;
  var ContinuationInterceptor = Kotlin.kotlin.coroutines.ContinuationInterceptor;
  var Delay = $module$kotlinx_coroutines_core.kotlinx.coroutines.Delay;
  var throwUPAE = Kotlin.throwUPAE;
  var throwOnFailure = Kotlin.kotlin.throwOnFailure_iacion$;
  var numberToInt = Kotlin.numberToInt;
  var ByteArrayBuilder_init = $module$kmem_root_kmem.com.soywiz.kmem.ByteArrayBuilder_init_za3lpa$;
  var lazy = Kotlin.kotlin.lazy_klfg04$;
  var L65535 = Kotlin.Long.fromInt(65535);
  var toByte = Kotlin.toByte;
  var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
  var arrayfill = $module$kmem_root_kmem.com.soywiz.kmem.arrayfill_7lcbvb$;
  var extract = $module$kmem_root_kmem.com.soywiz.kmem.extract_e4yvb3$;
  var extract_0 = $module$kmem_root_kmem.com.soywiz.kmem.extract_dqglrj$;
  var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
  var Exception_init = Kotlin.kotlin.Exception_init_pdl1vj$;
  var L_1 = Kotlin.Long.NEG_ONE;
  var toShort = Kotlin.toShort;
  var L0 = Kotlin.Long.ZERO;
  var L4278190080 = new Kotlin.Long(-16777216, 0);
  var L16777215 = Kotlin.Long.fromInt(16777215);
  var Array_0 = Array;
  var readU16LE = $module$kmem_root_kmem.com.soywiz.kmem.readU16LE_mrm5p$;
  var readS32LE = $module$kmem_root_kmem.com.soywiz.kmem.readS32LE_mrm5p$;
  var readS32BE = $module$kmem_root_kmem.com.soywiz.kmem.readS32BE_mrm5p$;
  var trim = Kotlin.kotlin.text.trim_wqw3xr$;
  var L8 = Kotlin.Long.fromInt(8);
  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;
  var listOf = Kotlin.kotlin.collections.listOf_i5x0yv$;
  var toIntClamp = $module$kmem_root_kmem.com.soywiz.kmem.toIntClamp_jfhjuu$;
  var until = Kotlin.kotlin.ranges.until_dqglrj$;
  var sliceArray = Kotlin.kotlin.collections.sliceArray_dww5cs$;
  var copyOfRange = Kotlin.kotlin.collections.copyOfRange_ietg8x$;
  var endsWith = Kotlin.kotlin.text.endsWith_7epoxm$;
  var substringBeforeLast = Kotlin.kotlin.text.substringBeforeLast_8cymmc$;
  var substringAfterLast = Kotlin.kotlin.text.substringAfterLast_8cymmc$;
  var listOf_0 = Kotlin.kotlin.collections.listOf_mh5how$;
  var plus = Kotlin.kotlin.collections.plus_mydzjv$;
  var DateTime = $module$klock_root_klock.com.soywiz.klock.DateTime;
  var L4294967295 = new Kotlin.Long(-1, 0);
  var Map = Kotlin.kotlin.collections.Map;
  var toString = Kotlin.toString;
  var Lazy = Kotlin.kotlin.Lazy;
  var L1 = Kotlin.Long.ONE;
  var MutableMap = Kotlin.kotlin.collections.MutableMap;
  var MutableList = Kotlin.kotlin.collections.MutableList;
  var List = Kotlin.kotlin.collections.List;
  var Iterable = Kotlin.kotlin.collections.Iterable;
  var numberToByte = Kotlin.numberToByte;
  var first = Kotlin.kotlin.text.first_gw00vp$;
  var numberToChar = Kotlin.numberToChar;
  var toBoxedChar = Kotlin.toBoxedChar;
  var numberToShort = Kotlin.numberToShort;
  var numberToLong = Kotlin.numberToLong;
  var numberToDouble = Kotlin.numberToDouble;
  var toIntOrNull = Kotlin.kotlin.text.toIntOrNull_6ic1pp$;
  var toLongOrNull = Kotlin.kotlin.text.toLongOrNull_6ic1pp$;
  var IntArrayList = $module$kds_root_kds.com.soywiz.kds.IntArrayList;
  var toIntArray = Kotlin.kotlin.collections.toIntArray_fx3nzu$;
  var FloatArrayList = $module$kds_root_kds.com.soywiz.kds.FloatArrayList;
  var toFloatArray = Kotlin.kotlin.collections.toFloatArray_zwy31$;
  var DoubleArrayList = $module$kds_root_kds.com.soywiz.kds.DoubleArrayList;
  var toDoubleArray = Kotlin.kotlin.collections.toDoubleArray_tcduak$;
  var toLongArray = Kotlin.kotlin.collections.toLongArray_558emf$;
  var emptyList = Kotlin.kotlin.collections.emptyList_287e2$;
  var ArrayList_init_1 = Kotlin.kotlin.collections.ArrayList_init_mqih57$;
  var toSet = Kotlin.kotlin.collections.toSet_7wnvza$;
  var HashSet_init = Kotlin.kotlin.collections.HashSet_init_mqih57$;
  var toLinkedMap = $module$kds_root_kds.com.soywiz.kds.toLinkedMap_6hr0sd$;
  var toMap = Kotlin.kotlin.collections.toMap_6hr0sd$;
  var PrimitiveClasses$anyClass = Kotlin.kotlin.reflect.js.internal.PrimitiveClasses.anyClass;
  var println = Kotlin.kotlin.io.println_s8jyv4$;
  var PrimitiveClasses$booleanClass = Kotlin.kotlin.reflect.js.internal.PrimitiveClasses.booleanClass;
  var PrimitiveClasses$byteClass = Kotlin.kotlin.reflect.js.internal.PrimitiveClasses.byteClass;
  var getKClass = Kotlin.getKClass;
  var Char = Kotlin.BoxedChar;
  var PrimitiveClasses$shortClass = Kotlin.kotlin.reflect.js.internal.PrimitiveClasses.shortClass;
  var PrimitiveClasses$intClass = Kotlin.kotlin.reflect.js.internal.PrimitiveClasses.intClass;
  var Long = Kotlin.Long;
  var PrimitiveClasses$floatClass = Kotlin.kotlin.reflect.js.internal.PrimitiveClasses.floatClass;
  var PrimitiveClasses$doubleClass = Kotlin.kotlin.reflect.js.internal.PrimitiveClasses.doubleClass;
  var Set = Kotlin.kotlin.collections.Set;
  var toMutableList = Kotlin.kotlin.collections.toMutableList_4c7yge$;
  var PrimitiveClasses$stringClass = Kotlin.kotlin.reflect.js.internal.PrimitiveClasses.stringClass;
  var replace = Kotlin.kotlin.text.replace_r2fvfm$;
  var substringBefore = Kotlin.kotlin.text.substringBefore_8cymmc$;
  var substringAfter = Kotlin.kotlin.text.substringAfter_8cymmc$;
  var split = Kotlin.kotlin.text.split_o64adg$;
  var indexOf = Kotlin.kotlin.text.indexOf_l5u8uk$;
  var startsWith = Kotlin.kotlin.text.startsWith_7epoxm$;
  var split_0 = Kotlin.kotlin.text.split_ip8yn$;
  var joinToString = Kotlin.kotlin.collections.joinToString_fmv235$;
  var trimEnd = Kotlin.kotlin.text.trimEnd_wqw3xr$;
  var contains = Kotlin.kotlin.text.contains_sgbm27$;
  var UnsupportedOperationException_init = Kotlin.kotlin.UnsupportedOperationException_init;
  var L2147483646 = Kotlin.Long.fromInt(2147483646);
  var emitAll = $module$kotlinx_coroutines_core.kotlinx.coroutines.flow.emitAll_s9b6ou$;
  var flow = $module$kotlinx_coroutines_core.kotlinx.coroutines.flow.flow_sxz0o1$;
  var Enum = Kotlin.kotlin.Enum;
  var throwISE = Kotlin.throwISE;
  var emptyFlow = $module$kotlinx_coroutines_core.kotlinx.coroutines.flow.emptyFlow_287e2$;
  var copyToArray = Kotlin.kotlin.collections.copyToArray;
  var toList_0 = Kotlin.kotlin.collections.toList_us0mfu$;
  var toList_1 = $module$kotlinx_coroutines_core.kotlinx.coroutines.channels.toList_6u4434$;
  var lines = Kotlin.kotlin.text.lines_gw00vp$;
  var print = Kotlin.kotlin.io.print_s8jyv4$;
  var println_0 = Kotlin.kotlin.io.println;
  var Extra = $module$kds_root_kds.com.soywiz.kds.Extra;
  var Extra$Mixin = $module$kds_root_kds.com.soywiz.kds.Extra.Mixin;
  var trimStart = Kotlin.kotlin.text.trimStart_wqw3xr$;
  var toIntOrNull_0 = Kotlin.kotlin.text.toIntOrNull_pdl1vz$;
  var L2048 = Kotlin.Long.fromInt(2048);
  var toChar = Kotlin.toChar;
  var UnsupportedOperationException_init_0 = Kotlin.kotlin.UnsupportedOperationException_init_pdl1vj$;
  var LinkedHashSet_init = Kotlin.kotlin.collections.LinkedHashSet_init_287e2$;
  var plus_0 = Kotlin.kotlin.collections.plus_qloxvw$;
  var asFlow = $module$kotlinx_coroutines_core.kotlinx.coroutines.flow.asFlow_7wnvza$;
  var getPropertyCallableRef = Kotlin.getPropertyCallableRef;
  var hashMapOf = Kotlin.kotlin.collections.hashMapOf_qfcya0$;
  var copyOf = Kotlin.kotlin.collections.copyOf_mrm5p$;
  var toMap_0 = Kotlin.kotlin.collections.toMap_v2dak7$;
  var mapOf = Kotlin.kotlin.collections.mapOf_x2b85n$;
  var mapCapacity = Kotlin.kotlin.collections.mapCapacity_za3lpa$;
  var LinkedHashMap_init_0 = Kotlin.kotlin.collections.LinkedHashMap_init_bwtc7$;
  var first_0 = Kotlin.kotlin.collections.first_2p1efm$;
  var firstOrNull = Kotlin.kotlin.collections.firstOrNull_2p1efm$;
  var removeAll = Kotlin.kotlin.collections.removeAll_qafx1e$;
  var sortWith = Kotlin.kotlin.collections.sortWith_nqfjgj$;
  var Comparator = Kotlin.kotlin.Comparator;
  var startsWith_0 = Kotlin.kotlin.text.startsWith_sgbm27$;
  var plus_1 = Kotlin.kotlin.collections.plus_iwxh38$;
  var minus = Kotlin.kotlin.collections.minus_uk696c$;
  var minus_0 = Kotlin.kotlin.collections.minus_4pa84t$;
  var coerceAtLeast = Kotlin.kotlin.ranges.coerceAtLeast_dqglrj$;
  var linkedMapOf = Kotlin.kotlin.collections.linkedMapOf_qfcya0$;
  var RuntimeException = Kotlin.kotlin.RuntimeException;
  var linkedHashMapOf = $module$kds_root_kds.com.soywiz.kds.linkedHashMapOf_qfcya0$;
  var toLongOrNull_0 = Kotlin.kotlin.text.toLongOrNull_pdl1vz$;
  var get_indices = Kotlin.kotlin.collections.get_indices_964n91$;
  var Collection = Kotlin.kotlin.collections.Collection;
  var Pool_init = $module$kds_root_kds.com.soywiz.kds.Pool_init_rz0iom$;
  var IntIntMap_init = $module$kds_root_kds.com.soywiz.kds.IntIntMap_init_14dthe$;
  var readS16 = $module$kmem_root_kmem.com.soywiz.kmem.readS16_v6bsu2$;
  var write16 = $module$kmem_root_kmem.com.soywiz.kmem.write16_vahp5y$;
  var StringBuilder_init = Kotlin.kotlin.text.StringBuilder_init;
  var CancellationException_init = $module$kotlinx_coroutines_core.kotlinx.coroutines.CancellationException_init_pdl1vj$;
  var Exception = Kotlin.kotlin.Exception;
  var String_0 = String;
  var String_1 = Kotlin.kotlin.text.String_8chfmy$;
  var Regex_init = Kotlin.kotlin.text.Regex_init_61zpoe$;
  var substring = Kotlin.kotlin.text.substring_fc3b62$;
  var indexOf_0 = Kotlin.kotlin.text.indexOf_8eortd$;
  var get_lastIndex = Kotlin.kotlin.text.get_lastIndex_gw00vp$;
  var lastIndexOf = Kotlin.kotlin.text.lastIndexOf_8eortd$;
  var clamp = $module$kmem_root_kmem.com.soywiz.kmem.clamp_e4yvb3$;
  var toLong = Kotlin.kotlin.text.toLong_6ic1pp$;
  var toInt = Kotlin.kotlin.text.toInt_pdl1vz$;
  var StringBuilder_init_0 = Kotlin.kotlin.text.StringBuilder_init_za3lpa$;
  var charArray = Kotlin.charArray;
  var unboxChar = Kotlin.unboxChar;
  var get_lastIndex_0 = Kotlin.kotlin.collections.get_lastIndex_55thoc$;
  var addAll = Kotlin.kotlin.collections.addAll_ipc267$;
  var dropLast = Kotlin.kotlin.text.dropLast_6ic1pp$;
  var toInt_0 = Kotlin.kotlin.text.toInt_6ic1pp$;
  var CharRange = Kotlin.kotlin.ranges.CharRange;
  var DateFormat = $module$klock_root_klock.com.soywiz.klock.DateFormat;
  var equals_0 = Kotlin.kotlin.text.equals_igcy3c$;
  var contains_0 = Kotlin.kotlin.collections.contains_2ws7j4$;
  var filterNotNull = Kotlin.kotlin.collections.filterNotNull_m3lr2h$;
  var trim_0 = Kotlin.kotlin.text.trim_gw00vp$;
  var sortedWith = Kotlin.kotlin.collections.sortedWith_eknfly$;
  var reversed = Kotlin.kotlin.collections.reversed_7wnvza$;
  var getCyclic = $module$kds_root_kds.com.soywiz.kds.getCyclic_yzln2o$;
  var slice = Kotlin.kotlin.collections.slice_6bjbi1$;
  var emptyMap = Kotlin.kotlin.collections.emptyMap_q3lmfv$;
  var Random = Kotlin.kotlin.random.Random;
  var trimEnd_0 = Kotlin.kotlin.text.trimEnd_gw00vp$;
  var iterator = Kotlin.kotlin.text.iterator_gw00vp$;
  var plus_2 = Kotlin.kotlin.collections.plus_2ws7j4$;
  var NoSuchElementException = Kotlin.kotlin.NoSuchElementException;
  var toList_2 = Kotlin.kotlin.collections.toList_abgq59$;
  var firstOrNull_0 = Kotlin.kotlin.collections.firstOrNull_7wnvza$;
  var toLong_0 = Kotlin.kotlin.text.toLong_pdl1vz$;
  var toDouble = Kotlin.kotlin.text.toDouble_pdl1vz$;
  var toDoubleOrNull = Kotlin.kotlin.text.toDoubleOrNull_pdl1vz$;
  var flip = $module$kds_root_kds.com.soywiz.kds.flip_go3l1a$;
  var sequence = Kotlin.kotlin.sequences.sequence_o0x0bg$;
  var toCaseInsensitiveMap = $module$kds_root_kds.com.soywiz.kds.toCaseInsensitiveMap_yrl0k6$;
  var first_1 = Kotlin.kotlin.collections.first_7wnvza$;
  var contains_1 = Kotlin.kotlin.text.contains_li3zpu$;
  var ListReader = $module$kds_root_kds.com.soywiz.kds.ListReader;
  var repeat = Kotlin.kotlin.text.repeat_94bcnn$;
  var TGenDeque_init = $module$kds_root_kds.com.soywiz.kds.TGenDeque_init_287e2$;
  var isWhitespace = Kotlin.kotlin.text.isWhitespace_myv2d0$;
  var replace_0 = Kotlin.kotlin.text.replace_680rmw$;
  var last = Kotlin.kotlin.collections.last_2p1efm$;
  var isBlank = Kotlin.kotlin.text.isBlank_gw00vp$;
  var sum = Kotlin.kotlin.collections.sum_dmxgdv$;
  var clamp_0 = $module$kmem_root_kmem.com.soywiz.kmem.clamp_ekzx8g$;
  var Pair = Kotlin.kotlin.Pair;
  var readU24LE = $module$kmem_root_kmem.com.soywiz.kmem.readU24LE_mrm5p$;
  var readU32LE = $module$kmem_root_kmem.com.soywiz.kmem.readU32LE_mrm5p$;
  var readS16LE = $module$kmem_root_kmem.com.soywiz.kmem.readS16LE_mrm5p$;
  var readS24LE = $module$kmem_root_kmem.com.soywiz.kmem.readS24LE_mrm5p$;
  var readS64LE = $module$kmem_root_kmem.com.soywiz.kmem.readS64LE_mrm5p$;
  var readF32LE = $module$kmem_root_kmem.com.soywiz.kmem.readF32LE_mrm5p$;
  var readF64LE = $module$kmem_root_kmem.com.soywiz.kmem.readF64LE_mrm5p$;
  var readU16BE = $module$kmem_root_kmem.com.soywiz.kmem.readU16BE_mrm5p$;
  var readU24BE = $module$kmem_root_kmem.com.soywiz.kmem.readU24BE_mrm5p$;
  var readU32BE = $module$kmem_root_kmem.com.soywiz.kmem.readU32BE_mrm5p$;
  var readS16BE = $module$kmem_root_kmem.com.soywiz.kmem.readS16BE_mrm5p$;
  var readS24BE = $module$kmem_root_kmem.com.soywiz.kmem.readS24BE_mrm5p$;
  var readS64BE = $module$kmem_root_kmem.com.soywiz.kmem.readS64BE_mrm5p$;
  var readF32BE = $module$kmem_root_kmem.com.soywiz.kmem.readF32BE_mrm5p$;
  var readF64BE = $module$kmem_root_kmem.com.soywiz.kmem.readF64BE_mrm5p$;
  var readShortArrayLE = $module$kmem_root_kmem.com.soywiz.kmem.readShortArrayLE_ietg8x$;
  var readShortArrayBE = $module$kmem_root_kmem.com.soywiz.kmem.readShortArrayBE_ietg8x$;
  var readCharArrayLE = $module$kmem_root_kmem.com.soywiz.kmem.readCharArrayLE_ietg8x$;
  var readCharArrayBE = $module$kmem_root_kmem.com.soywiz.kmem.readCharArrayBE_ietg8x$;
  var readIntArrayLE = $module$kmem_root_kmem.com.soywiz.kmem.readIntArrayLE_ietg8x$;
  var readIntArrayBE = $module$kmem_root_kmem.com.soywiz.kmem.readIntArrayBE_ietg8x$;
  var readLongArrayLE = $module$kmem_root_kmem.com.soywiz.kmem.readLongArrayLE_ietg8x$;
  var readFloatArrayLE = $module$kmem_root_kmem.com.soywiz.kmem.readFloatArrayLE_ietg8x$;
  var readFloatArrayBE = $module$kmem_root_kmem.com.soywiz.kmem.readFloatArrayBE_ietg8x$;
  var readDoubleArrayLE = $module$kmem_root_kmem.com.soywiz.kmem.readDoubleArrayLE_ietg8x$;
  var readDoubleArrayBE = $module$kmem_root_kmem.com.soywiz.kmem.readDoubleArrayBE_ietg8x$;
  var write16LE = $module$kmem_root_kmem.com.soywiz.kmem.write16LE_ietg8x$;
  var write24LE = $module$kmem_root_kmem.com.soywiz.kmem.write24LE_ietg8x$;
  var write32LE = $module$kmem_root_kmem.com.soywiz.kmem.write32LE_ietg8x$;
  var write32LE_0 = $module$kmem_root_kmem.com.soywiz.kmem.write32LE_2iihii$;
  var write64LE = $module$kmem_root_kmem.com.soywiz.kmem.write64LE_2iihii$;
  var writeF32LE = $module$kmem_root_kmem.com.soywiz.kmem.writeF32LE_6tgd4e$;
  var writeF64LE = $module$kmem_root_kmem.com.soywiz.kmem.writeF64LE_2mkvlt$;
  var write16BE = $module$kmem_root_kmem.com.soywiz.kmem.write16BE_ietg8x$;
  var write24BE = $module$kmem_root_kmem.com.soywiz.kmem.write24BE_ietg8x$;
  var write32BE = $module$kmem_root_kmem.com.soywiz.kmem.write32BE_ietg8x$;
  var write32BE_0 = $module$kmem_root_kmem.com.soywiz.kmem.write32BE_2iihii$;
  var write64BE = $module$kmem_root_kmem.com.soywiz.kmem.write64BE_2iihii$;
  var writeF32BE = $module$kmem_root_kmem.com.soywiz.kmem.writeF32BE_6tgd4e$;
  var writeF64BE = $module$kmem_root_kmem.com.soywiz.kmem.writeF64BE_2mkvlt$;
  var nextAlignedTo = $module$kmem_root_kmem.com.soywiz.kmem.nextAlignedTo_2p08ub$;
  var writeArrayLE = $module$kmem_root_kmem.com.soywiz.kmem.writeArrayLE_ns39l7$;
  var writeArrayLE_0 = $module$kmem_root_kmem.com.soywiz.kmem.writeArrayLE_744o0l$;
  var writeArrayLE_1 = $module$kmem_root_kmem.com.soywiz.kmem.writeArrayLE_ir5l5k$;
  var writeArrayLE_2 = $module$kmem_root_kmem.com.soywiz.kmem.writeArrayLE_nitnbj$;
  var writeArrayLE_3 = $module$kmem_root_kmem.com.soywiz.kmem.writeArrayLE_l7896z$;
  var writeArrayLE_4 = $module$kmem_root_kmem.com.soywiz.kmem.writeArrayLE_t2mdne$;
  var writeArrayBE = $module$kmem_root_kmem.com.soywiz.kmem.writeArrayBE_ns39l7$;
  var writeArrayBE_0 = $module$kmem_root_kmem.com.soywiz.kmem.writeArrayBE_744o0l$;
  var writeArrayBE_1 = $module$kmem_root_kmem.com.soywiz.kmem.writeArrayBE_ir5l5k$;
  var writeArrayBE_2 = $module$kmem_root_kmem.com.soywiz.kmem.writeArrayBE_nitnbj$;
  var writeArrayBE_3 = $module$kmem_root_kmem.com.soywiz.kmem.writeArrayBE_l7896z$;
  var writeArrayBE_4 = $module$kmem_root_kmem.com.soywiz.kmem.writeArrayBE_t2mdne$;
  var contains_2 = Kotlin.kotlin.ranges.contains_8sy4e8$;
  var UByteArray_init = Kotlin.kotlin.UByteArray;
  var arrayfill_0 = $module$kmem_root_kmem.com.soywiz.kmem.arrayfill_diwe25$;
  var nextAlignedTo_0 = $module$kmem_root_kmem.com.soywiz.kmem.nextAlignedTo_dqglrj$;
  var readS8 = $module$kmem_root_kmem.com.soywiz.kmem.readS8_mrm5p$;
  var readU8 = $module$kmem_root_kmem.com.soywiz.kmem.readU8_mrm5p$;
  var readByteArray = $module$kmem_root_kmem.com.soywiz.kmem.readByteArray_ietg8x$;
  var readLongArrayBE = $module$kmem_root_kmem.com.soywiz.kmem.readLongArrayBE_ietg8x$;
  var toIntSafe = $module$kmem_root_kmem.com.soywiz.kmem.toIntSafe_mts6qi$;
  var Long$Companion$MAX_VALUE = Kotlin.Long.MAX_VALUE;
  var ByteArrayBuilder = $module$kmem_root_kmem.com.soywiz.kmem.ByteArrayBuilder;
  var indexOf_1 = Kotlin.kotlin.collections.indexOf_jlnu8a$;
  var RuntimeException_init = Kotlin.kotlin.RuntimeException_init_pdl1vj$;
  var signExtend = $module$kmem_root_kmem.com.soywiz.kmem.signExtend_dqglrj$;
  var toBits = Kotlin.floatToBits;
  var toBits_0 = Kotlin.doubleToBits;
  var arrayListOf = Kotlin.kotlin.collections.arrayListOf_i5x0yv$;
  var toString_0 = Kotlin.kotlin.text.toString_k13f4a$;
  var toString_1 = Kotlin.kotlin.text.toString_hc3rh$;
  var round = Kotlin.kotlin.math.round_14dthe$;
  var endsWith_0 = Kotlin.kotlin.text.endsWith_sgbm27$;
  var UInt_init = Kotlin.kotlin.UInt;
  var ULong_init = Kotlin.kotlin.ULong;
  var abs = Kotlin.kotlin.math.abs_za3lpa$;
  var toCollection = Kotlin.kotlin.collections.toCollection_5n4o2z$;
  var sorted = Kotlin.kotlin.collections.sorted_exjks8$;
  var distinct = Kotlin.kotlin.collections.distinct_7wnvza$;
  var joinToString_0 = Kotlin.kotlin.collections.joinToString_cgipc5$;
  var kotlin_js_internal_DoubleCompanionObject = Kotlin.kotlin.js.internal.DoubleCompanionObject;
  var substringAfter_0 = Kotlin.kotlin.text.substringAfter_j4ogox$;
  var substringBefore_0 = Kotlin.kotlin.text.substringBefore_j4ogox$;
  var substringAfterLast_0 = Kotlin.kotlin.text.substringAfterLast_j4ogox$;
  var substringBeforeLast_0 = Kotlin.kotlin.text.substringBeforeLast_j4ogox$;
  var UByteArrayInt = $module$kmem_root_kmem.com.soywiz.kmem.UByteArrayInt_za3lpa$;
  var asByteArray = $module$kmem_root_kmem.com.soywiz.kmem.asByteArray_ngdjuy$;
  var asUByteArrayInt = $module$kmem_root_kmem.com.soywiz.kmem.asUByteArrayInt_964n91$;
  var RegexOption = Kotlin.kotlin.text.RegexOption;
  var Regex_init_0 = Kotlin.kotlin.text.Regex_init_sb3q2$;
  var get_indices_0 = Kotlin.kotlin.text.get_indices_gw00vp$;
  var toTypedArray = Kotlin.kotlin.collections.toTypedArray_964n91$;
  var zipWithNext = Kotlin.kotlin.collections.zipWithNext_7wnvza$;
  var drop = Kotlin.kotlin.collections.drop_ba2ldo$;
  var coroutines_0 = $module$kotlinx_coroutines_core.kotlinx.coroutines;
  var promise = $module$kotlinx_coroutines_core.kotlinx.coroutines.promise_pda6u4$;
  var klock = $module$klock_root_klock.com.soywiz.klock;
  var toList_3 = Kotlin.kotlin.collections.toList_964n91$;
  var asList = Kotlin.kotlin.collections.asList_us0mfu$;
  EmptyContinuation$Companion.prototype = Object.create(EmptyContinuation.prototype);
  EmptyContinuation$Companion.prototype.constructor = EmptyContinuation$Companion;
  AsyncSignal.prototype = Object.create(BaseSignal.prototype);
  AsyncSignal.prototype.constructor = AsyncSignal;
  Signal.prototype = Object.create(BaseSignal.prototype);
  Signal.prototype.constructor = Signal;
  runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral.prototype = Object.create(AbstractCoroutineContextElement.prototype);
  runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral.prototype.constructor = runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral;
  DeflatePortable$Companion.prototype = Object.create(DeflatePortable.prototype);
  DeflatePortable$Companion.prototype.constructor = DeflatePortable$Companion;
  GZIP.prototype = Object.create(GZIPBase.prototype);
  GZIP.prototype.constructor = GZIP;
  GZIP$Companion.prototype = Object.create(GZIP.prototype);
  GZIP$Companion.prototype.constructor = GZIP$Companion;
  GZIPNoCrc.prototype = Object.create(GZIPBase.prototype);
  GZIPNoCrc.prototype.constructor = GZIPNoCrc;
  GZIPNoCrc$Companion.prototype = Object.create(GZIPNoCrc.prototype);
  GZIPNoCrc$Companion.prototype.constructor = GZIPNoCrc$Companion;
  ZLib$Companion.prototype = Object.create(ZLib.prototype);
  ZLib$Companion.prototype.constructor = ZLib$Companion;
  SevenZip$LzmaEncoder$LenPriceTableEncoder.prototype = Object.create(SevenZip$LzmaEncoder$LenEncoder.prototype);
  SevenZip$LzmaEncoder$LenPriceTableEncoder.prototype.constructor = SevenZip$LzmaEncoder$LenPriceTableEncoder;
  SevenZip$LzBinTree.prototype = Object.create(SevenZip$LzInWindow.prototype);
  SevenZip$LzBinTree.prototype.constructor = SevenZip$LzBinTree;
  KDynamic$Companion.prototype = Object.create(KDynamic.prototype);
  KDynamic$Companion.prototype.constructor = KDynamic$Companion;
  ObjectMapper$TypeContext.prototype = Object.create(KDynamic.prototype);
  ObjectMapper$TypeContext.prototype.constructor = ObjectMapper$TypeContext;
  Vfs$Proxy.prototype = Object.create(Vfs.prototype);
  Vfs$Proxy.prototype.constructor = Vfs$Proxy;
  Vfs$Decorator.prototype = Object.create(Vfs$Proxy.prototype);
  Vfs$Decorator.prototype.constructor = Vfs$Decorator;
  Vfs$FileEvent$Kind.prototype = Object.create(Enum.prototype);
  Vfs$FileEvent$Kind.prototype.constructor = Vfs$FileEvent$Kind;
  VfsV2.prototype = Object.create(Vfs.prototype);
  VfsV2.prototype.constructor = VfsV2;
  VfsOpenMode.prototype = Object.create(Enum.prototype);
  VfsOpenMode.prototype.constructor = VfsOpenMode;
  IOException.prototype = Object.create(Exception.prototype);
  IOException.prototype.constructor = IOException;
  VfsProcessException.prototype = Object.create(IOException.prototype);
  VfsProcessException.prototype.constructor = VfsProcessException;
  VfsFile$execToString$ObjectLiteral.prototype = Object.create(VfsProcessHandler.prototype);
  VfsFile$execToString$ObjectLiteral.prototype.constructor = VfsFile$execToString$ObjectLiteral;
  VfsFile$passthru$ObjectLiteral.prototype = Object.create(VfsProcessHandler.prototype);
  VfsFile$passthru$ObjectLiteral.prototype.constructor = VfsFile$passthru$ObjectLiteral;
  VfsFile$redirected$ObjectLiteral.prototype = Object.create(Vfs$Proxy.prototype);
  VfsFile$redirected$ObjectLiteral.prototype.constructor = VfsFile$redirected$ObjectLiteral;
  VfsFile.prototype = Object.create(VfsNamed.prototype);
  VfsFile.prototype.constructor = VfsFile;
  IsoVfs_1.prototype = Object.create(VfsV2.prototype);
  IsoVfs_1.prototype.constructor = IsoVfs_1;
  JailVfs$ObjectLiteral.prototype = Object.create(Vfs$Proxy.prototype);
  JailVfs$ObjectLiteral.prototype.constructor = JailVfs$ObjectLiteral;
  LocalVfs.prototype = Object.create(Vfs.prototype);
  LocalVfs.prototype.constructor = LocalVfs;
  LocalVfsV2.prototype = Object.create(LocalVfs.prototype);
  LocalVfsV2.prototype.constructor = LocalVfsV2;
  LogVfs$open$ObjectLiteral.prototype = Object.create(AsyncStreamBase.prototype);
  LogVfs$open$ObjectLiteral.prototype.constructor = LogVfs$open$ObjectLiteral;
  LogVfs.prototype = Object.create(Vfs$Proxy.prototype);
  LogVfs.prototype.constructor = LogVfs;
  MapLikeStorageVfs$open$ObjectLiteral.prototype = Object.create(AsyncStreamBase.prototype);
  MapLikeStorageVfs$open$ObjectLiteral.prototype.constructor = MapLikeStorageVfs$open$ObjectLiteral;
  MapLikeStorageVfs.prototype = Object.create(VfsV2.prototype);
  MapLikeStorageVfs.prototype.constructor = MapLikeStorageVfs;
  MergedVfs.prototype = Object.create(Vfs$Proxy.prototype);
  MergedVfs.prototype.constructor = MergedVfs;
  MountableVfs$ObjectLiteral.prototype = Object.create(Vfs$Proxy.prototype);
  MountableVfs$ObjectLiteral.prototype.constructor = MountableVfs$ObjectLiteral;
  NodeVfs$createStream$ObjectLiteral.prototype = Object.create(AsyncStreamBase.prototype);
  NodeVfs$createStream$ObjectLiteral.prototype.constructor = NodeVfs$createStream$ObjectLiteral;
  NodeVfs.prototype = Object.create(VfsV2.prototype);
  NodeVfs.prototype.constructor = NodeVfs;
  UrlVfs$open$ObjectLiteral.prototype = Object.create(AsyncStreamBase.prototype);
  UrlVfs$open$ObjectLiteral.prototype.constructor = UrlVfs$open$ObjectLiteral;
  UrlVfs_1.prototype = Object.create(Vfs.prototype);
  UrlVfs_1.prototype.constructor = UrlVfs_1;
  ZipVfs$Impl.prototype = Object.create(VfsV2.prototype);
  ZipVfs$Impl.prototype.constructor = ZipVfs$Impl;
  UTC8CharsetBase.prototype = Object.create(Charset.prototype);
  UTC8CharsetBase.prototype.constructor = UTC8CharsetBase;
  SingleByteCharset.prototype = Object.create(Charset.prototype);
  SingleByteCharset.prototype.constructor = SingleByteCharset;
  ISO_8859_1.prototype = Object.create(SingleByteCharset.prototype);
  ISO_8859_1.prototype.constructor = ISO_8859_1;
  UTF16Charset.prototype = Object.create(Charset.prototype);
  UTF16Charset.prototype.constructor = UTF16Charset;
  ASCII.prototype = Object.create(Charset.prototype);
  ASCII.prototype.constructor = ASCII;
  FileAlreadyExistsException.prototype = Object.create(IOException.prototype);
  FileAlreadyExistsException.prototype.constructor = FileAlreadyExistsException;
  InvalidOperationException.prototype = Object.create(Exception.prototype);
  InvalidOperationException.prototype.constructor = InvalidOperationException;
  OutOfBoundsException.prototype = Object.create(Exception.prototype);
  OutOfBoundsException.prototype.constructor = OutOfBoundsException;
  KeyNotFoundException.prototype = Object.create(Exception.prototype);
  KeyNotFoundException.prototype.constructor = KeyNotFoundException;
  NotImplementedException.prototype = Object.create(Exception.prototype);
  NotImplementedException.prototype.constructor = NotImplementedException;
  InvalidArgumentException.prototype = Object.create(Exception.prototype);
  InvalidArgumentException.prototype.constructor = InvalidArgumentException;
  MustValidateCodeException.prototype = Object.create(Exception.prototype);
  MustValidateCodeException.prototype.constructor = MustValidateCodeException;
  MustOverrideException.prototype = Object.create(Exception.prototype);
  MustOverrideException.prototype.constructor = MustOverrideException;
  DeprecatedException.prototype = Object.create(Exception.prototype);
  DeprecatedException.prototype.constructor = DeprecatedException;
  UnexpectedException.prototype = Object.create(Exception.prototype);
  UnexpectedException.prototype.constructor = UnexpectedException;
  CancelException.prototype = Object.create(Exception.prototype);
  CancelException.prototype.constructor = CancelException;
  threadLocal$local$ObjectLiteral.prototype = Object.create(NativeThreadLocal.prototype);
  threadLocal$local$ObjectLiteral.prototype.constructor = threadLocal$local$ObjectLiteral;
  Http$Methods.prototype = Object.create(Enum.prototype);
  Http$Methods.prototype.constructor = Http$Methods;
  Http$HttpException.prototype = Object.create(IOException.prototype);
  Http$HttpException.prototype.constructor = Http$HttpException;
  Http$RedirectException.prototype = Object.create(Http$HttpException.prototype);
  Http$RedirectException.prototype.constructor = Http$RedirectException;
  DelayedHttpClient.prototype = Object.create(HttpClient.prototype);
  DelayedHttpClient.prototype.constructor = DelayedHttpClient;
  FakeHttpClient.prototype = Object.create(HttpClient.prototype);
  FakeHttpClient.prototype.constructor = FakeHttpClient;
  HttpPortable$createClient$ObjectLiteral.prototype = Object.create(HttpClient.prototype);
  HttpPortable$createClient$ObjectLiteral.prototype.constructor = HttpPortable$createClient$ObjectLiteral;
  HttpServer$Request.prototype = Object.create(HttpServer$BaseRequest.prototype);
  HttpServer$Request.prototype.constructor = HttpServer$Request;
  HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda$ObjectLiteral.prototype = Object.create(HttpServer$Request.prototype);
  HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda$ObjectLiteral.prototype.constructor = HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda$ObjectLiteral;
  HttpPortable$createServer$ObjectLiteral.prototype = Object.create(HttpServer.prototype);
  HttpPortable$createServer$ObjectLiteral.prototype.constructor = HttpPortable$createServer$ObjectLiteral;
  HttpServer$WsRequest.prototype = Object.create(HttpServer$BaseRequest.prototype);
  HttpServer$WsRequest.prototype.constructor = HttpServer$WsRequest;
  FakeRequest.prototype = Object.create(HttpServer$Request.prototype);
  FakeRequest.prototype.constructor = FakeRequest;
  RawSocketWebSocketClient_0.prototype = Object.create(WebSocketClient.prototype);
  RawSocketWebSocketClient_0.prototype.constructor = RawSocketWebSocketClient_0;
  WebSocketException.prototype = Object.create(IOException.prototype);
  WebSocketException.prototype.constructor = WebSocketException;
  Xml$Type.prototype = Object.create(Enum.prototype);
  Xml$Type.prototype.constructor = Xml$Type;
  Xml$Stream$Element$ProcessingInstructionTag.prototype = Object.create(Xml$Stream$Element.prototype);
  Xml$Stream$Element$ProcessingInstructionTag.prototype.constructor = Xml$Stream$Element$ProcessingInstructionTag;
  Xml$Stream$Element$OpenCloseTag.prototype = Object.create(Xml$Stream$Element.prototype);
  Xml$Stream$Element$OpenCloseTag.prototype.constructor = Xml$Stream$Element$OpenCloseTag;
  Xml$Stream$Element$OpenTag.prototype = Object.create(Xml$Stream$Element.prototype);
  Xml$Stream$Element$OpenTag.prototype.constructor = Xml$Stream$Element$OpenTag;
  Xml$Stream$Element$CommentTag.prototype = Object.create(Xml$Stream$Element.prototype);
  Xml$Stream$Element$CommentTag.prototype.constructor = Xml$Stream$Element$CommentTag;
  Xml$Stream$Element$CloseTag.prototype = Object.create(Xml$Stream$Element.prototype);
  Xml$Stream$Element$CloseTag.prototype.constructor = Xml$Stream$Element$CloseTag;
  Xml$Stream$Element$Text.prototype = Object.create(Xml$Stream$Element.prototype);
  Xml$Stream$Element$Text.prototype.constructor = Xml$Stream$Element$Text;
  toAsyncStream$ObjectLiteral.prototype = Object.create(AsyncStreamBase.prototype);
  toAsyncStream$ObjectLiteral.prototype.constructor = toAsyncStream$ObjectLiteral;
  SliceAsyncStreamBase.prototype = Object.create(AsyncStreamBase.prototype);
  SliceAsyncStreamBase.prototype.constructor = SliceAsyncStreamBase;
  BufferedStreamBase.prototype = Object.create(AsyncStreamBase.prototype);
  BufferedStreamBase.prototype.constructor = BufferedStreamBase;
  SyncAsyncStreamBase.prototype = Object.create(AsyncStreamBase.prototype);
  SyncAsyncStreamBase.prototype.constructor = SyncAsyncStreamBase;
  SyncAsyncStreamBaseInWorker.prototype = Object.create(AsyncStreamBase.prototype);
  SyncAsyncStreamBaseInWorker.prototype.constructor = SyncAsyncStreamBaseInWorker;
  MemoryAsyncStreamBase.prototype = Object.create(AsyncStreamBase.prototype);
  MemoryAsyncStreamBase.prototype.constructor = MemoryAsyncStreamBase;
  SliceSyncStreamBase.prototype = Object.create(SyncStreamBase.prototype);
  SliceSyncStreamBase.prototype.constructor = SliceSyncStreamBase;
  FillSyncStreamBase.prototype = Object.create(SyncStreamBase.prototype);
  FillSyncStreamBase.prototype.constructor = FillSyncStreamBase;
  MemorySyncStreamBase.prototype = Object.create(SyncStreamBase.prototype);
  MemorySyncStreamBase.prototype.constructor = MemorySyncStreamBase;
  ExpectedException.prototype = Object.create(Exception.prototype);
  ExpectedException.prototype.constructor = ExpectedException;
  Language.prototype = Object.create(Enum.prototype);
  Language.prototype.constructor = Language;
  HttpClientNodeJs.prototype = Object.create(HttpClient.prototype);
  HttpClientNodeJs.prototype.constructor = HttpClientNodeJs;
  HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral.prototype = Object.create(HttpServer$Request.prototype);
  HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral.prototype.constructor = HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral;
  HttpSeverNodeJs.prototype = Object.create(HttpServer.prototype);
  HttpSeverNodeJs.prototype.constructor = HttpSeverNodeJs;
  NodeJsLocalVfs.prototype = Object.create(LocalVfs.prototype);
  NodeJsLocalVfs.prototype.constructor = NodeJsLocalVfs;
  NodeFDStream.prototype = Object.create(AsyncStreamBase.prototype);
  NodeFDStream.prototype.constructor = NodeFDStream;
  EOFException.prototype = Object.create(IOException.prototype);
  EOFException.prototype.constructor = EOFException;
  FileNotFoundException.prototype = Object.create(IOException.prototype);
  FileNotFoundException.prototype.constructor = FileNotFoundException;
  UTF8$ObjectLiteral.prototype = Object.create(UTC8CharsetBase.prototype);
  UTF8$ObjectLiteral.prototype.constructor = UTF8$ObjectLiteral;
  asyncSocketFactory$lambda$ObjectLiteral.prototype = Object.create(AsyncSocketFactory.prototype);
  asyncSocketFactory$lambda$ObjectLiteral.prototype.constructor = asyncSocketFactory$lambda$ObjectLiteral;
  HttpClientBrowserJs.prototype = Object.create(HttpClient.prototype);
  HttpClientBrowserJs.prototype.constructor = HttpClientBrowserJs;
  JsWebSocketClient.prototype = Object.create(WebSocketClient.prototype);
  JsWebSocketClient.prototype.constructor = JsWebSocketClient;
  function Coroutine$Korio$lambda(closure$entry_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$entry = closure$entry_0;
  }
  Coroutine$Korio$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Korio$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Korio$lambda.prototype.constructor = Coroutine$Korio$lambda;
  Coroutine$Korio$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$entry(CoroutineScope(this.context), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Korio$lambda(closure$entry_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$Korio$lambda(closure$entry_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Korio(entry) {
    return asyncEntryPoint(Korio$lambda(entry));
  }
  function Korio_0() {
    Korio_instance = this;
    this.VERSION = KORIO_VERSION;
  }
  Korio_0.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Korio',
    interfaces: []
  };
  var Korio_instance = null;
  function Korio_getInstance() {
    if (Korio_instance === null) {
      new Korio_0();
    }return Korio_instance;
  }
  function Keep() {
  }
  Keep.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Keep',
    interfaces: [Annotation]
  };
  function AsyncByteArrayDeque(bufferSize) {
    if (bufferSize === void 0)
      bufferSize = 1024;
    this.bufferSize_0 = bufferSize;
    this.notifyRead_0 = Channel(-1);
    this.notifyWrite_0 = Channel(-1);
    this.temp_0 = new ByteArrayDeque(ilog2(this.bufferSize_0) + 1 | 0);
    this.completed_0 = false;
  }
  function Coroutine$write_mj6st8$$default($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_mj6st8$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_mj6st8$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_mj6st8$$default.prototype.constructor = Coroutine$write_mj6st8$$default;
  Coroutine$write_mj6st8$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$len <= 0) {
              return;
            } else {
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            if (this.$this.temp_0.availableRead <= this.$this.bufferSize_0) {
              this.state_0 = 5;
              continue;
            }
            this.state_0 = 4;
            this.result_0 = this.$this.notifyRead_0.receive(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.state_0 = 3;
            continue;
          case 5:
            this.$this.temp_0.write_mj6st8$(this.local$buffer, this.local$offset, this.local$len);
            this.state_0 = 6;
            this.result_0 = this.$this.notifyWrite_0.send_11rb$(Unit, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncByteArrayDeque.prototype.write_mj6st8$$default = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_mj6st8$$default(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_mj6st8$($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$.prototype.constructor = Coroutine$read_mj6st8$;
  Coroutine$read_mj6st8$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$len <= 0) {
              return this.local$len;
            } else {
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.notifyRead_0.send_11rb$(Unit, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            if (this.$this.completed_0 || this.$this.temp_0.availableRead !== 0) {
              this.state_0 = 6;
              continue;
            }
            this.state_0 = 5;
            this.result_0 = this.$this.notifyWrite_0.receive(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.state_0 = 4;
            continue;
          case 6:
            if (this.$this.completed_0 && this.$this.temp_0.availableRead === 0) {
              return -1;
            } else {
              this.state_0 = 7;
              continue;
            }

          case 7:
            return this.$this.temp_0.read_mj6st8$(this.local$buffer, this.local$offset, this.local$len);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncByteArrayDeque.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$close($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close.prototype.constructor = Coroutine$close;
  Coroutine$close.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.$this.completed_0 = true;
            this.state_0 = 2;
            this.result_0 = this.$this.notifyWrite_0.send_11rb$(Unit, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncByteArrayDeque.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AsyncByteArrayDeque.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncByteArrayDeque',
    interfaces: [AsyncInputStream, AsyncOutputStream]
  };
  function AsyncCache() {
    this.promises = LinkedHashMap_init();
  }
  function Coroutine$AsyncCache$invoke$lambda$lambda(closure$gen_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$gen = closure$gen_0;
  }
  Coroutine$AsyncCache$invoke$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncCache$invoke$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncCache$invoke$lambda$lambda.prototype.constructor = Coroutine$AsyncCache$invoke$lambda$lambda;
  Coroutine$AsyncCache$invoke$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$gen(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncCache$invoke$lambda$lambda(closure$gen_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncCache$invoke$lambda$lambda(closure$gen_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AsyncCache.prototype.invoke_vvrf4k$ = function (key, gen, continuation) {
    var tmp$;
    var $receiver = this.promises;
    var tmp$_0;
    var value = $receiver.get_11rb$(key);
    if (value == null) {
      var answer = asyncImmediately_0(continuation.context, AsyncCache$invoke$lambda$lambda(gen));
      $receiver.put_xwzc9p$(key, answer);
      tmp$_0 = answer;
    } else {
      tmp$_0 = value;
    }
    return (Kotlin.isType(tmp$ = tmp$_0, Deferred) ? tmp$ : throwCCE()).await(continuation);
  };
  AsyncCache.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncCache',
    interfaces: []
  };
  function AsyncCacheGen(gen) {
    this.gen_0 = gen;
    this.promises = LinkedHashMap_init();
  }
  function Coroutine$AsyncCacheGen$invoke$lambda$lambda(this$AsyncCacheGen_0, closure$key_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$AsyncCacheGen = this$AsyncCacheGen_0;
    this.local$closure$key = closure$key_0;
  }
  Coroutine$AsyncCacheGen$invoke$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncCacheGen$invoke$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncCacheGen$invoke$lambda$lambda.prototype.constructor = Coroutine$AsyncCacheGen$invoke$lambda$lambda;
  Coroutine$AsyncCacheGen$invoke$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$AsyncCacheGen.gen_0(this.local$closure$key, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncCacheGen$invoke$lambda$lambda(this$AsyncCacheGen_0, closure$key_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncCacheGen$invoke$lambda$lambda(this$AsyncCacheGen_0, closure$key_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AsyncCacheGen.prototype.invoke_61zpoe$ = function (key, continuation) {
    var tmp$;
    var $receiver = this.promises;
    var tmp$_0;
    var value = $receiver.get_11rb$(key);
    if (value == null) {
      var answer = asyncImmediately_0(continuation.context, AsyncCacheGen$invoke$lambda$lambda(this, key));
      $receiver.put_xwzc9p$(key, answer);
      tmp$_0 = answer;
    } else {
      tmp$_0 = value;
    }
    return (Kotlin.isType(tmp$ = tmp$_0, Deferred) ? tmp$ : throwCCE()).await(continuation);
  };
  AsyncCacheGen.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncCacheGen',
    interfaces: []
  };
  function AsyncCloseable() {
    AsyncCloseable$Companion_getInstance();
  }
  function AsyncCloseable$Companion() {
    AsyncCloseable$Companion_instance = this;
    this.DUMMY = new AsyncCloseable$Companion$DUMMY$ObjectLiteral();
  }
  function AsyncCloseable$Companion$DUMMY$ObjectLiteral() {
  }
  AsyncCloseable$Companion$DUMMY$ObjectLiteral.prototype.close = function (continuation) {
    return Unit;
  };
  AsyncCloseable$Companion$DUMMY$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncCloseable]
  };
  AsyncCloseable$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AsyncCloseable$Companion_instance = null;
  function AsyncCloseable$Companion_getInstance() {
    if (AsyncCloseable$Companion_instance === null) {
      new AsyncCloseable$Companion();
    }return AsyncCloseable$Companion_instance;
  }
  AsyncCloseable.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncCloseable',
    interfaces: []
  };
  function Coroutine$use($receiver_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$error = void 0;
    this.local$result = void 0;
    this.local$$receiver = $receiver_0;
    this.local$callback = callback_0;
  }
  Coroutine$use.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$use.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$use.prototype.constructor = Coroutine$use;
  Coroutine$use.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$_1, tmp$_2;
            this.local$error = null;
            try {
              tmp$_1 = this.local$callback(this.local$$receiver);
            } catch (e) {
              if (Kotlin.isType(e, Throwable)) {
                this.local$error = e;
                tmp$_1 = null;
              } else
                throw e;
            }

            this.local$result = tmp$_1;
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$error != null)
              throw this.local$error;
            return (tmp$_2 = this.local$result) == null || Kotlin.isType(tmp$_2, Any) ? tmp$_2 : throwCCE();
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function use($receiver_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$use($receiver_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  defineInlineFunction('korio-root-korio.com.soywiz.korio.async.use_28kxh1$', wrapFunction(function () {
    var Throwable = Error;
    var Any = Object;
    var throwCCE = Kotlin.throwCCE;
    return function ($receiver, callback, continuation) {
      var tmp$_1, tmp$_2;
      var error = null;
      try {
        tmp$_1 = callback($receiver);
      } catch (e) {
        if (Kotlin.isType(e, Throwable)) {
          error = e;
          tmp$_1 = null;
        } else
          throw e;
      }
      var result = tmp$_1;
      Kotlin.suspendCall($receiver.close(Kotlin.coroutineReceiver()));
      if (error != null)
        throw error;
      return (tmp$_2 = result) == null || Kotlin.isType(tmp$_2, Any) ? tmp$_2 : throwCCE();
    };
  }));
  function Coroutine$useIt($receiver_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$error = void 0;
    this.local$result = void 0;
    this.local$$receiver = $receiver_0;
    this.local$callback = callback_0;
  }
  Coroutine$useIt.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$useIt.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$useIt.prototype.constructor = Coroutine$useIt;
  Coroutine$useIt.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$_1, tmp$_2;
            this.local$error = null;
            try {
              tmp$_1 = this.local$callback(this.local$$receiver);
            } catch (e) {
              if (Kotlin.isType(e, Throwable)) {
                this.local$error = e;
                tmp$_1 = null;
              } else
                throw e;
            }

            this.local$result = tmp$_1;
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$error != null)
              throw this.local$error;
            return (tmp$_2 = this.local$result) == null || Kotlin.isType(tmp$_2, Any) ? tmp$_2 : throwCCE();
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function useIt($receiver_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$useIt($receiver_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  defineInlineFunction('korio-root-korio.com.soywiz.korio.async.useIt_28kxh1$', wrapFunction(function () {
    var Throwable = Error;
    var Any = Object;
    var throwCCE = Kotlin.throwCCE;
    return function ($receiver, callback, continuation) {
      var tmp$_1, tmp$_2;
      var error = null;
      try {
        tmp$_1 = callback($receiver);
      } catch (e) {
        if (Kotlin.isType(e, Throwable)) {
          error = e;
          tmp$_1 = null;
        } else
          throw e;
      }
      var result = tmp$_1;
      Kotlin.suspendCall($receiver.close(Kotlin.coroutineReceiver()));
      if (error != null)
        throw error;
      return (tmp$_2 = result) == null || Kotlin.isType(tmp$_2, Any) ? tmp$_2 : throwCCE();
    };
  }));
  function launch_0($receiver, callback) {
    return _launch($receiver, CoroutineStart.UNDISPATCHED, callback);
  }
  function launchImmediately($receiver, callback) {
    return _launch($receiver, CoroutineStart.UNDISPATCHED, callback);
  }
  function launchAsap($receiver, callback) {
    return _launch($receiver, CoroutineStart.DEFAULT, callback);
  }
  function async_0($receiver, callback) {
    return _async($receiver, CoroutineStart.UNDISPATCHED, callback);
  }
  function asyncImmediately($receiver, callback) {
    return _async($receiver, CoroutineStart.UNDISPATCHED, callback);
  }
  function asyncAsap($receiver, callback) {
    return _async($receiver, CoroutineStart.DEFAULT, callback);
  }
  function launch_1(context, callback) {
    return launchImmediately(CoroutineScope(context), callback);
  }
  function launchImmediately_0(context, callback) {
    return launchImmediately(CoroutineScope(context), callback);
  }
  function launchAsap_0(context, callback) {
    return launchAsap(CoroutineScope(context), callback);
  }
  function async_1(context, callback) {
    return asyncImmediately(CoroutineScope(context), callback);
  }
  function asyncImmediately_0(context, callback) {
    return asyncImmediately(CoroutineScope(context), callback);
  }
  function asyncAsap_0(context, callback) {
    return asyncAsap(CoroutineScope(context), callback);
  }
  var DEFAULT_SUSPEND_TEST_TIMEOUT;
  function Coroutine$suspendTest$lambda$lambda(closure$callback_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$callback = closure$callback_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$suspendTest$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$suspendTest$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$suspendTest$lambda$lambda.prototype.constructor = Coroutine$suspendTest$lambda$lambda;
  Coroutine$suspendTest$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$callback(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function suspendTest$lambda$lambda(closure$callback_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$suspendTest$lambda$lambda(closure$callback_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$suspendTest$lambda$lambda_0(closure$callback_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$callback = closure$callback_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$suspendTest$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$suspendTest$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$suspendTest$lambda$lambda_0.prototype.constructor = Coroutine$suspendTest$lambda$lambda_0;
  Coroutine$suspendTest$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$callback(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function suspendTest$lambda$lambda_0(closure$callback_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$suspendTest$lambda$lambda_0(closure$callback_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$suspendTest$lambda(closure$timeout_0, closure$callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$timeout = closure$timeout_0;
    this.local$closure$callback = closure$callback_0;
  }
  Coroutine$suspendTest$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$suspendTest$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$suspendTest$lambda.prototype.constructor = Coroutine$suspendTest$lambda;
  Coroutine$suspendTest$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$closure$timeout != null) {
              this.state_0 = 3;
              this.result_0 = withTimeout_0(this.local$closure$timeout, suspendTest$lambda$lambda(this.local$closure$callback), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 2;
              this.result_0 = coroutineScope(suspendTest$lambda$lambda_0(this.local$closure$callback), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            return Unit;
          case 3:
            return Unit;
          case 4:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function suspendTest$lambda(closure$timeout_0, closure$callback_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$suspendTest$lambda(closure$timeout_0, closure$callback_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function suspendTest(timeout, callback) {
    return asyncEntryPoint(suspendTest$lambda(timeout, callback));
  }
  function suspendTest_0(callback) {
    return suspendTest(DEFAULT_SUSPEND_TEST_TIMEOUT, callback);
  }
  function Coroutine$suspendTest$lambda_0(closure$cond_0, closure$callback_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$cond = closure$cond_0;
    this.local$closure$callback = closure$callback_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$suspendTest$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$suspendTest$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$suspendTest$lambda_0.prototype.constructor = Coroutine$suspendTest$lambda_0;
  Coroutine$suspendTest$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$closure$cond()) {
              this.state_0 = 2;
              this.result_0 = this.local$closure$callback(this.local$$receiver, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            return Unit;
          case 3:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function suspendTest$lambda_0(closure$cond_0, closure$callback_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$suspendTest$lambda_0(closure$cond_0, closure$callback_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function suspendTest_1(cond, timeout, callback) {
    if (timeout === void 0)
      timeout = DEFAULT_SUSPEND_TEST_TIMEOUT;
    return suspendTest(timeout, suspendTest$lambda_0(cond, callback));
  }
  function suspendTestNoBrowser$lambda() {
    return !OS_getInstance().isJsBrowser;
  }
  function suspendTestNoBrowser(callback) {
    return suspendTest_1(suspendTestNoBrowser$lambda, void 0, callback);
  }
  function suspendTestNoJs$lambda() {
    return !OS_getInstance().isJs;
  }
  function suspendTestNoJs(callback) {
    return suspendTest_1(suspendTestNoJs$lambda, void 0, callback);
  }
  function Coroutine$_launch$lambda(closure$callback_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 4;
    this.local$closure$callback = closure$callback_0;
  }
  Coroutine$_launch$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$_launch$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$_launch$lambda.prototype.constructor = Coroutine$_launch$lambda;
  Coroutine$_launch$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 2;
            this.state_0 = 1;
            this.result_0 = this.local$closure$callback(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            return this.result_0;
          case 2:
            this.exceptionState_0 = 4;
            var e = this.exception_0;
            if (Kotlin.isType(e, CancellationException)) {
              throw e;
            } else if (Kotlin.isType(e, Throwable)) {
              printStackTrace_0(e);
              throw e;
            } else
              throw e;
          case 3:
            return;
          case 4:
            throw this.exception_0;
          default:this.state_0 = 4;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 4) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function _launch$lambda(closure$callback_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$_launch$lambda(closure$callback_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function _launch($receiver, start, callback) {
    return launch($receiver, $receiver.coroutineContext, start, _launch$lambda(callback));
  }
  function Coroutine$_async$lambda(closure$callback_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 4;
    this.local$closure$callback = closure$callback_0;
  }
  Coroutine$_async$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$_async$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$_async$lambda.prototype.constructor = Coroutine$_async$lambda;
  Coroutine$_async$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 2;
            this.state_0 = 1;
            this.result_0 = this.local$closure$callback(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            return this.result_0;
          case 2:
            this.exceptionState_0 = 4;
            var e = this.exception_0;
            if (Kotlin.isType(e, CancellationException)) {
              throw e;
            } else if (Kotlin.isType(e, Throwable)) {
              printStackTrace_0(e);
              throw e;
            } else
              throw e;
          case 3:
            return;
          case 4:
            throw this.exception_0;
          default:this.state_0 = 4;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 4) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function _async$lambda(closure$callback_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$_async$lambda(closure$callback_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function _async($receiver, start, callback) {
    return async($receiver, $receiver.coroutineContext, start, _async$lambda(callback));
  }
  function AsyncInmemoryCache(timeProvider) {
    if (timeProvider === void 0)
      timeProvider = TimeProvider.Companion;
    this.timeProvider = timeProvider;
    this.cache = LinkedHashMap_init();
  }
  function AsyncInmemoryCache$Entry(timestamp, data) {
    this.timestamp = timestamp;
    this.data = data;
  }
  AsyncInmemoryCache$Entry.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Entry',
    interfaces: []
  };
  AsyncInmemoryCache$Entry.prototype.component1 = function () {
    return this.timestamp;
  };
  AsyncInmemoryCache$Entry.prototype.component2 = function () {
    return this.data;
  };
  AsyncInmemoryCache$Entry.prototype.copy_yshlsr$ = function (timestamp, data) {
    return new AsyncInmemoryCache$Entry(timestamp === void 0 ? this.timestamp : timestamp, data === void 0 ? this.data : data);
  };
  AsyncInmemoryCache$Entry.prototype.toString = function () {
    return 'Entry(timestamp=' + Kotlin.toString(this.timestamp) + (', data=' + Kotlin.toString(this.data)) + ')';
  };
  AsyncInmemoryCache$Entry.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.timestamp) | 0;
    result = result * 31 + Kotlin.hashCode(this.data) | 0;
    return result;
  };
  AsyncInmemoryCache$Entry.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.timestamp, other.timestamp) && Kotlin.equals(this.data, other.data)))));
  };
  AsyncInmemoryCache.prototype.get_g6cmdh$ = function (clazz, key, ttl) {
    return new AsyncInmemoryEntry(clazz, this, key, ttl);
  };
  function Coroutine$AsyncInmemoryCache$get$lambda(closure$gen_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$gen = closure$gen_0;
  }
  Coroutine$AsyncInmemoryCache$get$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncInmemoryCache$get$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncInmemoryCache$get$lambda.prototype.constructor = Coroutine$AsyncInmemoryCache$get$lambda;
  Coroutine$AsyncInmemoryCache$get$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$gen(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncInmemoryCache$get$lambda(closure$gen_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncInmemoryCache$get$lambda(closure$gen_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AsyncInmemoryCache.prototype.get_73xahx$ = function (key, ttl, gen, continuation) {
    var tmp$;
    var entry = this.cache.get_11rb$(key);
    if (entry == null || this.timeProvider.now().minus_mw5vjr$(entry.timestamp).compareTo_11rb$(ttl) >= 0) {
      var $receiver = this.cache;
      var value = new AsyncInmemoryCache$Entry(this.timeProvider.now(), asyncImmediately_0(continuation.context, AsyncInmemoryCache$get$lambda(gen)));
      $receiver.put_xwzc9p$(key, value);
    }return (Kotlin.isType(tmp$ = ensureNotNull(this.cache.get_11rb$(key)).data, Deferred) ? tmp$ : throwCCE()).await(continuation);
  };
  AsyncInmemoryCache.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncInmemoryCache',
    interfaces: []
  };
  function AsyncInmemoryEntry(clazz, cache, key, ttl) {
    this.clazz = clazz;
    this.cache = cache;
    this.key = key;
    this.ttl = ttl;
  }
  AsyncInmemoryEntry.prototype.get_1xgmjb$ = function (routine, continuation) {
    return this.cache.get_73xahx$(this.key, this.ttl, routine, continuation);
  };
  AsyncInmemoryEntry.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncInmemoryEntry',
    interfaces: []
  };
  function AsyncInvokable() {
  }
  AsyncInvokable.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncInvokable',
    interfaces: []
  };
  function AsyncQueue() {
    this.thread = new AsyncThread();
  }
  AsyncQueue.prototype.invoke_g2bo5h$ = function (func, continuation) {
    return this.invoke_ykkwzu$(continuation.context, func);
  };
  function Coroutine$AsyncQueue$invoke$lambda(closure$func_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$func = closure$func_0;
  }
  Coroutine$AsyncQueue$invoke$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncQueue$invoke$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncQueue$invoke$lambda.prototype.constructor = Coroutine$AsyncQueue$invoke$lambda;
  Coroutine$AsyncQueue$invoke$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$func(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncQueue$invoke$lambda(closure$func_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncQueue$invoke$lambda(closure$func_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AsyncQueue.prototype.invoke_ykkwzu$ = function (context, func) {
    this.thread.sync_nt96rv$(context, AsyncQueue$invoke$lambda(func));
    return this;
  };
  function Coroutine$await_g2bo5h$($this, func_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$func = func_0;
  }
  Coroutine$await_g2bo5h$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$await_g2bo5h$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$await_g2bo5h$.prototype.constructor = Coroutine$await_g2bo5h$;
  Coroutine$await_g2bo5h$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.invoke_g2bo5h$(this.local$func, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncQueue.prototype.await_g2bo5h$ = function (func_0, continuation_0, suspended) {
    var instance = new Coroutine$await_g2bo5h$(this, func_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$await($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$await.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$await.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$await.prototype.constructor = Coroutine$await;
  Coroutine$await.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.thread.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncQueue.prototype.await = function (continuation_0, suspended) {
    var instance = new Coroutine$await(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AsyncQueue.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncQueue',
    interfaces: []
  };
  function withContext($receiver, ctx) {
    return new AsyncQueueWithContext($receiver, ctx);
  }
  function withContext_0($receiver, continuation) {
    return new AsyncQueueWithContext($receiver, continuation.context);
  }
  function AsyncQueueWithContext(queue, context) {
    this.queue = queue;
    this.context = context;
  }
  AsyncQueueWithContext.prototype.invoke_g2bo5h$ = function (func) {
    return this.queue.invoke_ykkwzu$(this.context, func);
  };
  AsyncQueueWithContext.prototype.await_g2bo5h$ = function (func, continuation) {
    return this.queue.await_g2bo5h$(func, continuation);
  };
  AsyncQueueWithContext.prototype.await = function (continuation) {
    return this.queue.await(continuation);
  };
  AsyncQueueWithContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncQueueWithContext',
    interfaces: []
  };
  function AsyncThread() {
    var $receiver = CompletableDeferred(Unit);
    $receiver.complete_11rb$(Unit);
    this.lastPromise_0 = $receiver;
  }
  function Coroutine$await_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$cpromise = void 0;
  }
  Coroutine$await_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$await_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$await_0.prototype.constructor = Coroutine$await_0;
  Coroutine$await_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$cpromise = this.$this.lastPromise_0;
            this.state_0 = 3;
            this.result_0 = this.$this.lastPromise_0.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            if (equals(this.local$cpromise, this.$this.lastPromise_0)) {
              this.state_0 = 5;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 2;
            continue;
          case 5:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncThread.prototype.await = function (continuation_0, suspended) {
    var instance = new Coroutine$await_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AsyncThread.prototype.cancel = function () {
    this.lastPromise_0.cancel_m4sck1$();
    this.lastPromise_0 = CompletableDeferred(Unit);
    return this;
  };
  AsyncThread.prototype.cancelAndQueue_lnyleu$ = function (func, continuation) {
    this.cancel();
    return this.queue_lnyleu$(func, continuation);
  };
  AsyncThread.prototype.queue_lnyleu$ = function (func, continuation) {
    return this.invoke_lnyleu$(func, continuation);
  };
  function Coroutine$invoke_lnyleu$($this, func_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 4;
    this.$this = $this;
    this.local$func = func_0;
  }
  Coroutine$invoke_lnyleu$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$invoke_lnyleu$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$invoke_lnyleu$.prototype.constructor = Coroutine$invoke_lnyleu$;
  Coroutine$invoke_lnyleu$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var task = this.$this.sync_nt96rv$(this.context, this.local$func);
            this.exceptionState_0 = 2;
            this.state_0 = 1;
            this.result_0 = task.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var res = this.result_0;
            return res;
          case 2:
            this.exceptionState_0 = 4;
            var e = this.exception_0;
            if (Kotlin.isType(e, Throwable)) {
              throw e;
            } else
              throw e;
          case 3:
            return;
          case 4:
            throw this.exception_0;
          default:this.state_0 = 4;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 4) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncThread.prototype.invoke_lnyleu$ = function (func_0, continuation_0, suspended) {
    var instance = new Coroutine$invoke_lnyleu$(this, func_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AsyncThread.prototype.sync_lnyleu$ = function (func, continuation) {
    return this.sync_nt96rv$(continuation.context, func);
  };
  function Coroutine$AsyncThread$sync$lambda(closure$oldPromise_0, closure$func_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$oldPromise = closure$oldPromise_0;
    this.local$closure$func = closure$func_0;
  }
  Coroutine$AsyncThread$sync$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncThread$sync$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncThread$sync$lambda.prototype.constructor = Coroutine$AsyncThread$sync$lambda;
  Coroutine$AsyncThread$sync$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$oldPromise.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$closure$func(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncThread$sync$lambda(closure$oldPromise_0, closure$func_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncThread$sync$lambda(closure$oldPromise_0, closure$func_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AsyncThread.prototype.sync_nt96rv$ = function (context, func) {
    var oldPromise = this.lastPromise_0;
    var promise = asyncImmediately_0(context, AsyncThread$sync$lambda(oldPromise, func));
    this.lastPromise_0 = promise;
    return promise;
  };
  AsyncThread.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncThread',
    interfaces: [AsyncInvokable]
  };
  function AsyncThread2() {
    this.lock_0 = new Lock();
    this.lastPromise_0 = CompletableDeferred(Unit);
  }
  function Coroutine$await_1($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$cpromise = void 0;
  }
  Coroutine$await_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$await_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$await_1.prototype.constructor = Coroutine$await_1;
  Coroutine$await_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$cpromise = this.$this.lastPromise_0;
            this.state_0 = 3;
            this.result_0 = this.local$cpromise.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            if (equals(this.local$cpromise, this.$this.lastPromise_0)) {
              this.state_0 = 5;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 2;
            continue;
          case 5:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncThread2.prototype.await = function (continuation_0, suspended) {
    var instance = new Coroutine$await_1(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AsyncThread2.prototype.cancel = function () {
    this.lastPromise_0.cancel_m4sck1$();
    this.lastPromise_0 = CompletableDeferred(Unit);
    return this;
  };
  function Coroutine$invoke_lnyleu$_0($this, func_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 4;
    this.$this = $this;
    this.local$func = func_0;
  }
  Coroutine$invoke_lnyleu$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$invoke_lnyleu$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$invoke_lnyleu$_0.prototype.constructor = Coroutine$invoke_lnyleu$_0;
  Coroutine$invoke_lnyleu$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var task = this.$this.invoke_0(this.context, this.local$func);
            this.exceptionState_0 = 2;
            this.state_0 = 1;
            this.result_0 = task.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var res = this.result_0;
            return res;
          case 2:
            this.exceptionState_0 = 4;
            var e = this.exception_0;
            if (Kotlin.isType(e, Throwable)) {
              throw e;
            } else
              throw e;
          case 3:
            return;
          case 4:
            throw this.exception_0;
          default:this.state_0 = 4;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 4) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncThread2.prototype.invoke_lnyleu$ = function (func_0, continuation_0, suspended) {
    var instance = new Coroutine$invoke_lnyleu$_0(this, func_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$AsyncThread2$invoke$lambda$lambda(closure$oldPromise_0, closure$func_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$oldPromise = closure$oldPromise_0;
    this.local$closure$func = closure$func_0;
  }
  Coroutine$AsyncThread2$invoke$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncThread2$invoke$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncThread2$invoke$lambda$lambda.prototype.constructor = Coroutine$AsyncThread2$invoke$lambda$lambda;
  Coroutine$AsyncThread2$invoke$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$oldPromise.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$closure$func(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncThread2$invoke$lambda$lambda(closure$oldPromise_0, closure$func_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncThread2$invoke$lambda$lambda(closure$oldPromise_0, closure$func_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AsyncThread2.prototype.invoke_0 = function (context, func) {
    var oldPromise = this.lastPromise_0;
    var $receiver = async_0(CoroutineScope(context), AsyncThread2$invoke$lambda$lambda(oldPromise, func));
    this.lastPromise_0 = $receiver;
    return $receiver;
  };
  AsyncThread2.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncThread2',
    interfaces: [AsyncInvokable]
  };
  function NamedAsyncThreads(threadFactory) {
    if (threadFactory === void 0)
      threadFactory = NamedAsyncThreads_init$lambda;
    this.threadFactory = threadFactory;
    this.lock_0 = new Lock();
    this.jobs_0 = LinkedHashMap_init();
  }
  function NamedAsyncThreads$AsyncJob(thread) {
    this.thread = thread;
    this.count = 0;
  }
  NamedAsyncThreads$AsyncJob.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncJob',
    interfaces: []
  };
  NamedAsyncThreads.prototype.threadsCount_8be2vx$ = function () {
    return this.jobs_0.size;
  };
  function Coroutine$invoke_vvrf4k$($this, name_0, func_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.$this = $this;
    this.local$job = void 0;
    this.local$name = name_0;
    this.local$func = func_0;
  }
  Coroutine$invoke_vvrf4k$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$invoke_vvrf4k$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$invoke_vvrf4k$.prototype.constructor = Coroutine$invoke_vvrf4k$;
  Coroutine$invoke_vvrf4k$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var $receiver = this.$this.jobs_0;
            var tmp$;
            var value = $receiver.get_11rb$(this.local$name);
            if (value == null) {
              var answer = new NamedAsyncThreads$AsyncJob(this.$this.threadFactory());
              $receiver.put_xwzc9p$(this.local$name, answer);
              tmp$ = answer;
            } else {
              tmp$ = value;
            }

            var $receiver_0 = tmp$;
            $receiver_0.count = $receiver_0.count + 1 | 0;
            this.local$job = $receiver_0;
            this.exceptionState_0 = 4;
            this.state_0 = 1;
            this.result_0 = this.local$job.thread.invoke_lnyleu$(this.local$func, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 6;
            this.finallyPath_0 = [2];
            this.state_0 = 5;
            this.$returnValue = this.result_0;
            continue;
          case 2:
            return this.$returnValue;
          case 3:
            return;
          case 4:
            this.finallyPath_0 = [6];
            this.state_0 = 5;
            continue;
          case 5:
            this.exceptionState_0 = 6;
            this.local$job.count = this.local$job.count - 1 | 0;
            if (this.local$job.count === 0) {
              this.$this.jobs_0.remove_11rb$(this.local$name);
            }
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NamedAsyncThreads.prototype.invoke_vvrf4k$ = function (name_0, func_0, continuation_0, suspended) {
    var instance = new Coroutine$invoke_vvrf4k$(this, name_0, func_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function NamedAsyncThreads_init$lambda() {
    return new AsyncThread2();
  }
  NamedAsyncThreads.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NamedAsyncThreads',
    interfaces: []
  };
  function collect$ObjectLiteral(closure$action) {
    this.closure$action = closure$action;
  }
  collect$ObjectLiteral.prototype.emit_11rb$ = function (value, continuation) {
    return this.closure$action(value, continuation);
  };
  collect$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [FlowCollector]};
  var arraycopy$lambda = wrapFunction(function () {
    var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
    return function (closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$size) {
      return function () {
        arrayCopy(closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$srcPos + closure$size | 0);
        return Unit;
      };
    };
  });
  function Coroutine$chunks$lambda(this$chunks_0, closure$count_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$chunks = this$chunks_0;
    this.local$closure$count = closure$count_0;
    this.local$tmp$ = void 0;
    this.local$chunk = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$chunks$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$chunks$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$chunks$lambda.prototype.constructor = Coroutine$chunks$lambda;
  Coroutine$chunks$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$chunk = ArrayList_init();
            this.local$tmp$ = this.local$this$chunks.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            if (!this.result_0) {
              this.state_0 = 7;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            var e_0 = this.local$tmp$.next();
            this.local$chunk.add_11rb$(e_0);
            if (this.local$chunk.size >= this.local$closure$count) {
              this.state_0 = 5;
              this.result_0 = this.local$$receiver.send_11rb$(toList(this.local$chunk), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 6;
              continue;
            }

          case 5:
            this.local$chunk.clear();
            this.state_0 = 6;
            continue;
          case 6:
            this.state_0 = 2;
            continue;
          case 7:
            if (this.local$chunk.size > 0) {
              this.state_0 = 8;
              this.result_0 = this.local$$receiver.send_11rb$(toList(this.local$chunk), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 9;
              continue;
            }

          case 8:
            return Unit;
          case 9:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function chunks$lambda(this$chunks_0, closure$count_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$chunks$lambda(this$chunks_0, closure$count_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function chunks($receiver, count, continuation) {
    return produce_0(void 0, chunks$lambda($receiver, count), continuation);
  }
  function Coroutine$toChannel$lambda(this$toChannel_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$toChannel = this$toChannel_0;
    this.local$tmp$ = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$toChannel$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$toChannel$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$toChannel$lambda.prototype.constructor = Coroutine$toChannel$lambda;
  Coroutine$toChannel$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$tmp$ = this.local$this$toChannel.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 4;
              continue;
            }
            var v = this.local$tmp$.next();
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.send_11rb$(v, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 2;
            continue;
          case 4:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function toChannel$lambda(this$toChannel_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$toChannel$lambda(this$toChannel_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function toChannel($receiver, continuation) {
    return produce_0(void 0, toChannel$lambda($receiver), continuation);
  }
  function Coroutine$toChannel$lambda$lambda(this$_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$it = it_0;
  }
  Coroutine$toChannel$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$toChannel$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$toChannel$lambda$lambda.prototype.constructor = Coroutine$toChannel$lambda$lambda;
  Coroutine$toChannel$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$.send_11rb$(this.local$it, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function toChannel$lambda$lambda(this$_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$toChannel$lambda$lambda(this$_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$toChannel$lambda_0(this$toChannel_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$toChannel = this$toChannel_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$toChannel$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$toChannel$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$toChannel$lambda_0.prototype.constructor = Coroutine$toChannel$lambda_0;
  Coroutine$toChannel$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$toChannel.collect_42ocv1$(new collect$ObjectLiteral(toChannel$lambda$lambda(this.local$$receiver)), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function toChannel$lambda_0(this$toChannel_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$toChannel$lambda_0(this$toChannel_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function toChannel_0($receiver, continuation) {
    return produce_0(void 0, toChannel$lambda_0($receiver), continuation);
  }
  function produce_0(capacity, block, continuation) {
    if (capacity === void 0)
      capacity = 0;
    return produce(CoroutineScope(continuation.context), continuation.context, capacity, block);
  }
  function toAsyncInputStream$ObjectLiteral(closure$channel) {
    this.closure$channel = closure$channel;
    this.currentData = new Int8Array([]);
    this.currentPos = 0;
  }
  Object.defineProperty(toAsyncInputStream$ObjectLiteral.prototype, 'currentAvailable', {
    get: function () {
      return this.currentData.length - this.currentPos | 0;
    }
  });
  function Coroutine$read_mj6st8$_0($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$_0.prototype.constructor = Coroutine$read_mj6st8$_0;
  Coroutine$read_mj6st8$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$len <= 0) {
              return 0;
            } else {
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            if (this.$this.currentAvailable > 0) {
              this.state_0 = 5;
              continue;
            }
            this.state_0 = 4;
            this.result_0 = this.$this.closure$channel.receive(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.$this.currentData = this.result_0;
            this.$this.currentPos = 0;
            this.state_0 = 3;
            continue;
          case 5:
            var a = this.$this.currentAvailable;
            var toRead = Math_0.min(a, this.local$len);
            var srcPos = this.$this.currentPos;
            arrayCopy(this.$this.currentData, this.local$buffer, this.local$offset, srcPos, srcPos + toRead | 0);
            this.$this.currentPos = this.$this.currentPos + toRead | 0;
            return toRead;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  toAsyncInputStream$ObjectLiteral.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$_0(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  toAsyncInputStream$ObjectLiteral.prototype.close = function (continuation) {
    this.closure$channel.cancel_m4sck1$();
  };
  toAsyncInputStream$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncInputStream]
  };
  function toAsyncInputStream($receiver) {
    var channel = $receiver;
    return new toAsyncInputStream$ObjectLiteral(channel);
  }
  function EmptyContinuation(context) {
    EmptyContinuation$Companion_getInstance();
    this.context_t0vs1j$_0 = context;
  }
  Object.defineProperty(EmptyContinuation.prototype, 'context', {
    get: function () {
      return this.context_t0vs1j$_0;
    }
  });
  EmptyContinuation.prototype.resumeWith_tl1gpc$ = function (result) {
    var exception = result.exceptionOrNull();
    exception != null ? (printStackTrace_0(exception), Unit) : null;
  };
  function EmptyContinuation$Companion() {
    EmptyContinuation$Companion_instance = this;
    EmptyContinuation.call(this, coroutines.EmptyCoroutineContext);
  }
  EmptyContinuation$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: [EmptyContinuation]
  };
  var EmptyContinuation$Companion_instance = null;
  function EmptyContinuation$Companion_getInstance() {
    if (EmptyContinuation$Companion_instance === null) {
      new EmptyContinuation$Companion();
    }return EmptyContinuation$Companion_instance;
  }
  EmptyContinuation.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EmptyContinuation',
    interfaces: [Continuation]
  };
  function delay_0(time, continuation) {
    return delay(time.millisecondsLong, continuation);
  }
  function delay_1($receiver, time, continuation) {
    return delay(time.millisecondsLong, continuation);
  }
  function Coroutine$withTimeout(time_0, block_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$time = time_0;
    this.local$block = block_0;
  }
  Coroutine$withTimeout.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$withTimeout.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$withTimeout.prototype.constructor = Coroutine$withTimeout;
  Coroutine$withTimeout.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$time != null ? this.local$time.equals(TimeSpan.Companion.NULL) : null) {
              this.state_0 = 3;
              this.result_0 = this.local$block(CoroutineScope(this.context), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 2;
              this.result_0 = withTimeout(this.local$time.millisecondsLong, this.local$block, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            this.state_0 = 4;
            continue;
          case 3:
            this.local$tmp$ = this.result_0;
            this.state_0 = 4;
            continue;
          case 4:
            return this.local$tmp$;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function withTimeout_0(time_0, block_0, continuation_0, suspended) {
    var instance = new Coroutine$withTimeout(time_0, block_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function ObservableProperty(initial) {
    this.observers_0 = ArrayList_init();
    this.value_3vtig3$_0 = initial;
  }
  Object.defineProperty(ObservableProperty.prototype, 'value', {
    get: function () {
      return this.value_3vtig3$_0;
    },
    set: function (value) {
      this.value_3vtig3$_0 = value;
    }
  });
  Object.defineProperty(ObservableProperty.prototype, 'observerCount', {
    get: function () {
      return this.observers_0.size;
    }
  });
  ObservableProperty.prototype.clear = function () {
    this.observers_0.clear();
  };
  ObservableProperty.prototype.observe_qlkmfe$ = function (handler) {
    this.observers_0.add_11rb$(handler);
  };
  ObservableProperty.prototype.invoke_qlkmfe$ = function (handler) {
    this.observe_qlkmfe$(handler);
  };
  ObservableProperty.prototype.update_11rb$ = function (value) {
    this.value = value;
    var $receiver = this.observers_0;
    var tmp$;
    var n = 0;
    while (n < $receiver.size) {
      $receiver.get_za3lpa$((tmp$ = n, n = tmp$ + 1 | 0, tmp$))(value);
    }
  };
  ObservableProperty.prototype.invoke_11rb$ = function (value) {
    this.update_11rb$(value);
  };
  ObservableProperty.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ObservableProperty',
    interfaces: []
  };
  function suspendCoroutine$lambda(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(intercepted(c));
      closure$block(safe);
      return safe.getOrThrow();
    };
  }
  function Promise_0() {
  }
  Promise_0.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Promise',
    interfaces: []
  };
  function SPromise(executor, continuation) {
    return Promise_1(continuation.context, executor);
  }
  function DeferredPromise(deferred, coroutineContext) {
    this.deferred = deferred;
    this.coroutineContext = coroutineContext;
  }
  function Coroutine$DeferredPromise$then$lambda(closure$onFulfilled_0, this$DeferredPromise_0, closure$onRejected_0, closure$chainedPromise_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$closure$onFulfilled = closure$onFulfilled_0;
    this.local$this$DeferredPromise = this$DeferredPromise_0;
    this.local$closure$onRejected = closure$onRejected_0;
    this.local$closure$chainedPromise = closure$chainedPromise_0;
    this.local$result = void 0;
  }
  Coroutine$DeferredPromise$then$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$DeferredPromise$then$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$DeferredPromise$then$lambda.prototype.constructor = Coroutine$DeferredPromise$then$lambda;
  Coroutine$DeferredPromise$then$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            this.local$result = null;
            this.exceptionState_0 = 2;
            this.state_0 = 1;
            this.result_0 = this.local$this$DeferredPromise.deferred.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            tmp$ = this.result_0;
            this.local$result = this.local$closure$onFulfilled != null ? this.local$closure$onFulfilled(tmp$) : null;
            this.exceptionState_0 = 5;
            this.state_0 = 3;
            continue;
          case 2:
            this.exceptionState_0 = 5;
            var e = this.exception_0;
            if (Kotlin.isType(e, Throwable)) {
              this.local$result = this.local$closure$onRejected != null ? this.local$closure$onRejected(e) : null;
            } else
              throw e;
            this.state_0 = 3;
            continue;
          case 3:
            if (this.local$result != null) {
              return (Kotlin.isType(tmp$_0 = this.local$closure$chainedPromise.deferred, CompletableDeferred_1) ? tmp$_0 : throwCCE()).complete_11rb$(this.local$result), Unit;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            return Unit;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function DeferredPromise$then$lambda(closure$onFulfilled_0, this$DeferredPromise_0, closure$onRejected_0, closure$chainedPromise_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$DeferredPromise$then$lambda(closure$onFulfilled_0, this$DeferredPromise_0, closure$onRejected_0, closure$chainedPromise_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  DeferredPromise.prototype.then = function (onFulfilled, onRejected) {
    var chainedPromise = new DeferredPromise(CompletableDeferred_0(), this.coroutineContext);
    launchImmediately_0(this.coroutineContext, DeferredPromise$then$lambda(onFulfilled, this, onRejected, chainedPromise));
    return chainedPromise;
  };
  DeferredPromise.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeferredPromise',
    interfaces: [Promise_0]
  };
  function toPromise($receiver, coroutineContext) {
    return new DeferredPromise($receiver, coroutineContext);
  }
  function toPromise_0($receiver, continuation) {
    return toPromise($receiver, continuation.context);
  }
  function toPromise$lambda(closure$deferred) {
    return function (it) {
      if (it != null) {
        closure$deferred.completeExceptionally_tcv7n7$(it);
      } else {
        closure$deferred.complete_11rb$(Unit);
      }
      return Unit;
    };
  }
  function toPromise_1($receiver, coroutineContext) {
    var deferred = CompletableDeferred_0();
    $receiver.invokeOnCompletion_f05bi3$(toPromise$lambda(deferred));
    return toPromise(deferred, coroutineContext);
  }
  function toPromise_2($receiver, continuation) {
    return toPromise_1($receiver, continuation.context);
  }
  function toDeferred$lambda(closure$out) {
    return function (it) {
      return closure$out.complete_11rb$(it);
    };
  }
  function toDeferred$lambda_0(closure$out) {
    return function (it) {
      return closure$out.completeExceptionally_tcv7n7$(it);
    };
  }
  function toDeferred($receiver) {
    var out = CompletableDeferred_0();
    $receiver.then(toDeferred$lambda(out), toDeferred$lambda_0(out));
    return out;
  }
  function await$lambda$lambda(closure$c) {
    return function (it) {
      closure$c.resumeWith_tl1gpc$(new Result(it));
      return Unit;
    };
  }
  function await$lambda$lambda_0(closure$c) {
    return function (it) {
      closure$c.resumeWith_tl1gpc$(new Result(createFailure(it)));
      return Unit;
    };
  }
  function await$lambda(this$await) {
    return function (c) {
      this$await.then(await$lambda$lambda(c), await$lambda$lambda_0(c));
      return Unit;
    };
  }
  function Coroutine$await_2($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$await_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$await_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$await_2.prototype.constructor = Coroutine$await_2;
  Coroutine$await_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda(await$lambda(this.local$$receiver))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function await_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$await_2($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function suspendCancellableCoroutine$lambda(closure$block) {
    return function (uCont) {
      var cancellable = new CancellableContinuationImpl_init(intercepted(uCont), 1);
      cancellable.initCancellability();
      closure$block(cancellable);
      return cancellable.getResult();
    };
  }
  function executeAndWaitAnySignal$lambda$lambda(closure$deferred, closure$pair) {
    return function (it) {
      closure$deferred.complete_11rb$(closure$pair.value);
      return Unit;
    };
  }
  function executeAndWaitAnySignal$lambda$lambda_0(closure$deferred, closure$signal) {
    return function (it) {
      closure$deferred.complete_11rb$(to(closure$signal, it));
      return Unit;
    };
  }
  function executeAndWaitSignal$lambda(closure$deferred) {
    return function (it) {
      closure$deferred.complete_11rb$(it);
      return Unit;
    };
  }
  function BaseSignal(onRegister) {
    if (onRegister === void 0)
      onRegister = BaseSignal_init$lambda;
    this.onRegister = onRegister;
    this.handlers = ArrayList_init();
    this.handlersToRemove = ArrayList_init();
    this.iterating = 0;
  }
  function BaseSignal$Node($outer, once, item) {
    this.$outer = $outer;
    this.once = once;
    this.item = item;
  }
  BaseSignal$Node.prototype.close = function () {
    if (this.$outer.iterating > 0) {
      this.$outer.handlersToRemove.add_11rb$(this);
    } else {
      this.$outer.handlers.remove_11rb$(this);
    }
  };
  BaseSignal$Node.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Node',
    interfaces: [Closeable]
  };
  Object.defineProperty(BaseSignal.prototype, 'listenerCount', {
    get: function () {
      return this.handlers.size;
    }
  });
  BaseSignal.prototype.clear = function () {
    this.handlers.clear();
  };
  BaseSignal.prototype._add_jkr9pl$ = function (once, handler) {
    this.onRegister();
    var node = new BaseSignal$Node(this, once, handler);
    this.handlers.add_11rb$(node);
    return node;
  };
  BaseSignal.prototype.iterateCallbacks_1o0k09$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.async.BaseSignal.iterateCallbacks_1o0k09$', function (callback) {
    try {
      this.iterating = this.iterating + 1 | 0;
      var $receiver = this.handlers;
      var n = 0;
      var m = 0;
      while (n < $receiver.size) {
        if (m >= 0 && m !== n)
          $receiver.set_wxm5ur$(m, $receiver.get_za3lpa$(n));
        var node = $receiver.get_za3lpa$(n);
        var remove = node.once;
        callback(node.item);
        if (remove) {
          m = m - 1 | 0;
        }n = n + 1 | 0;
        m = m + 1 | 0;
      }
      while ($receiver.size > m)
        $receiver.removeAt_za3lpa$($receiver.size - 1 | 0);
    }finally {
      this.iterating = this.iterating - 1 | 0;
      if (!this.handlersToRemove.isEmpty()) {
        var $receiver_0 = this.handlersToRemove;
        var n_0 = 0;
        var m_0 = 0;
        while (n_0 < $receiver_0.size) {
          if (m_0 >= 0 && m_0 !== n_0)
            $receiver_0.set_wxm5ur$(m_0, $receiver_0.get_za3lpa$(n_0));
          this.handlers.remove_11rb$($receiver_0.get_za3lpa$(n_0));
          if (true) {
            m_0 = m_0 - 1 | 0;
          }n_0 = n_0 + 1 | 0;
          m_0 = m_0 + 1 | 0;
        }
        while ($receiver_0.size > m_0)
          $receiver_0.removeAt_za3lpa$($receiver_0.size - 1 | 0);
      }}
  });
  function Coroutine$BaseSignal$listen$lambda(this$BaseSignal_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$BaseSignal = this$BaseSignal_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$BaseSignal$listen$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$BaseSignal$listen$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$BaseSignal$listen$lambda.prototype.constructor = Coroutine$BaseSignal$listen$lambda;
  Coroutine$BaseSignal$listen$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$this$BaseSignal.waitOneBase(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$$receiver.send_11rb$(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.state_0 = 2;
            continue;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function BaseSignal$listen$lambda(this$BaseSignal_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$BaseSignal$listen$lambda(this$BaseSignal_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  BaseSignal.prototype.listen = function (continuation) {
    return produce_0(void 0, BaseSignal$listen$lambda(this), continuation);
  };
  function BaseSignal_init$lambda() {
    return Unit;
  }
  BaseSignal.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BaseSignal',
    interfaces: []
  };
  function AsyncSignal(onRegister) {
    if (onRegister === void 0)
      onRegister = AsyncSignal_init$lambda;
    BaseSignal.call(this, onRegister);
  }
  AsyncSignal.prototype.once_25kf2w$ = function (handler) {
    return this._add_jkr9pl$(true, handler);
  };
  AsyncSignal.prototype.add_25kf2w$ = function (handler) {
    return this._add_jkr9pl$(false, handler);
  };
  AsyncSignal.prototype.invoke_25kf2w$ = function (handler) {
    return this.add_25kf2w$(handler);
  };
  function Coroutine$invoke_11rb$($this, value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.$this = $this;
    this.local$iterateCallbacks_1o0k09$result = void 0;
    this.local$$receiver = void 0;
    this.local$n = void 0;
    this.local$m = void 0;
    this.local$remove = void 0;
    this.local$value = value_0;
  }
  Coroutine$invoke_11rb$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$invoke_11rb$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$invoke_11rb$.prototype.constructor = Coroutine$invoke_11rb$;
  Coroutine$invoke_11rb$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 5;
            this.$this.iterating = this.$this.iterating + 1 | 0;
            this.local$$receiver = this.$this.handlers;
            this.local$n = 0;
            this.local$m = 0;
            this.state_0 = 1;
            continue;
          case 1:
            if (this.local$n >= this.local$$receiver.size) {
              this.state_0 = 3;
              continue;
            }
            if (this.local$m >= 0 && this.local$m !== this.local$n)
              this.local$$receiver.set_wxm5ur$(this.local$m, this.local$$receiver.get_za3lpa$(this.local$n));
            var node = this.local$$receiver.get_za3lpa$(this.local$n);
            this.local$remove = node.once;
            this.state_0 = 2;
            this.result_0 = node.item(this.local$value, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            if (this.local$remove) {
              this.local$m = this.local$m - 1 | 0;
            }
            this.local$n = this.local$n + 1 | 0;
            this.local$m = this.local$m + 1 | 0;
            this.state_0 = 1;
            continue;
          case 3:
            while (this.local$$receiver.size > this.local$m)
              this.local$$receiver.removeAt_za3lpa$(this.local$$receiver.size - 1 | 0);
            this.exceptionState_0 = 7;
            this.finallyPath_0 = [4];
            this.state_0 = 6;
            continue;
          case 4:
            return this.local$iterateCallbacks_1o0k09$result;
          case 5:
            this.finallyPath_0 = [7];
            this.state_0 = 6;
            continue;
          case 6:
            this.exceptionState_0 = 7;
            this.$this.iterating = this.$this.iterating - 1 | 0;
            if (!this.$this.handlersToRemove.isEmpty()) {
              var $receiver = this.$this.handlersToRemove;
              var n = 0;
              var m = 0;
              while (n < $receiver.size) {
                if (m >= 0 && m !== n)
                  $receiver.set_wxm5ur$(m, $receiver.get_za3lpa$(n));
                this.$this.handlers.remove_11rb$($receiver.get_za3lpa$(n));
                if (true) {
                  m = m - 1 | 0;
                }n = n + 1 | 0;
                m = m + 1 | 0;
              }
              while ($receiver.size > m)
                $receiver.removeAt_za3lpa$($receiver.size - 1 | 0);
            }
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 7:
            throw this.exception_0;
          default:this.state_0 = 7;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 7) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncSignal.prototype.invoke_11rb$ = function (value_0, continuation_0, suspended) {
    var instance = new Coroutine$invoke_11rb$(this, value_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$AsyncSignal$waitOneBase$lambda$lambda(closure$close_0, closure$c_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$close = closure$close_0;
    this.local$closure$c = closure$c_0;
    this.local$it = it_0;
  }
  Coroutine$AsyncSignal$waitOneBase$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncSignal$waitOneBase$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncSignal$waitOneBase$lambda$lambda.prototype.constructor = Coroutine$AsyncSignal$waitOneBase$lambda$lambda;
  Coroutine$AsyncSignal$waitOneBase$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            (tmp$ = this.local$closure$close.v) != null ? (tmp$.close(), Unit) : null;
            this.local$closure$c.resumeWith_tl1gpc$(new Result(this.local$it));
            return Unit;
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncSignal$waitOneBase$lambda$lambda(closure$close_0, closure$c_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$AsyncSignal$waitOneBase$lambda$lambda(closure$close_0, closure$c_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function AsyncSignal$waitOneBase$lambda$lambda_0(closure$close) {
    return function (it) {
      closure$close.v.close();
      return Unit;
    };
  }
  function AsyncSignal$waitOneBase$lambda(this$AsyncSignal) {
    return function (c) {
      var close = {v: null};
      close.v = this$AsyncSignal.once_25kf2w$(AsyncSignal$waitOneBase$lambda$lambda(close, c));
      c.invokeOnCancellation_f05bi3$(AsyncSignal$waitOneBase$lambda$lambda_0(close));
      return Unit;
    };
  }
  function Coroutine$waitOneBase($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$waitOneBase.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$waitOneBase.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$waitOneBase.prototype.constructor = Coroutine$waitOneBase;
  Coroutine$waitOneBase.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCancellableCoroutine$lambda(AsyncSignal$waitOneBase$lambda(this.$this))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncSignal.prototype.waitOneBase = function (continuation_0, suspended) {
    var instance = new Coroutine$waitOneBase(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function AsyncSignal_init$lambda() {
    return Unit;
  }
  AsyncSignal.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncSignal',
    interfaces: [BaseSignal]
  };
  function Signal(onRegister) {
    if (onRegister === void 0)
      onRegister = Signal_init$lambda;
    BaseSignal.call(this, onRegister);
  }
  Signal.prototype.once_qlkmfe$ = function (handler) {
    return this._add_jkr9pl$(true, handler);
  };
  Signal.prototype.add_qlkmfe$ = function (handler) {
    return this._add_jkr9pl$(false, handler);
  };
  Signal.prototype.invoke_qlkmfe$ = function (handler) {
    return this.add_qlkmfe$(handler);
  };
  Signal.prototype.invoke_11rb$ = function (value) {
    try {
      this.iterating = this.iterating + 1 | 0;
      var $receiver = this.handlers;
      var n = 0;
      var m = 0;
      while (n < $receiver.size) {
        if (m >= 0 && m !== n)
          $receiver.set_wxm5ur$(m, $receiver.get_za3lpa$(n));
        var node = $receiver.get_za3lpa$(n);
        var remove = node.once;
        node.item(value);
        if (remove) {
          m = m - 1 | 0;
        }n = n + 1 | 0;
        m = m + 1 | 0;
      }
      while ($receiver.size > m)
        $receiver.removeAt_za3lpa$($receiver.size - 1 | 0);
    }finally {
      this.iterating = this.iterating - 1 | 0;
      if (!this.handlersToRemove.isEmpty()) {
        var $receiver_0 = this.handlersToRemove;
        var n_0 = 0;
        var m_0 = 0;
        while (n_0 < $receiver_0.size) {
          if (m_0 >= 0 && m_0 !== n_0)
            $receiver_0.set_wxm5ur$(m_0, $receiver_0.get_za3lpa$(n_0));
          this.handlers.remove_11rb$($receiver_0.get_za3lpa$(n_0));
          if (true) {
            m_0 = m_0 - 1 | 0;
          }n_0 = n_0 + 1 | 0;
          m_0 = m_0 + 1 | 0;
        }
        while ($receiver_0.size > m_0)
          $receiver_0.removeAt_za3lpa$($receiver_0.size - 1 | 0);
      }}
  };
  function Signal$waitOneBase$lambda$lambda(closure$close, closure$c) {
    return function (it) {
      var tmp$;
      (tmp$ = closure$close.v) != null ? (tmp$.close(), Unit) : null;
      closure$c.resumeWith_tl1gpc$(new Result(it));
      return Unit;
    };
  }
  function Signal$waitOneBase$lambda$lambda_0(closure$close) {
    return function (it) {
      var tmp$;
      (tmp$ = closure$close.v) != null ? (tmp$.close(), Unit) : null;
      return Unit;
    };
  }
  function Signal$waitOneBase$lambda(this$Signal) {
    return function (c) {
      var close = {v: null};
      close.v = this$Signal.once_qlkmfe$(Signal$waitOneBase$lambda$lambda(close, c));
      c.invokeOnCancellation_f05bi3$(Signal$waitOneBase$lambda$lambda_0(close));
      return Unit;
    };
  }
  function Coroutine$waitOneBase_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$waitOneBase_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$waitOneBase_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$waitOneBase_0.prototype.constructor = Coroutine$waitOneBase_0;
  Coroutine$waitOneBase_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCancellableCoroutine$lambda(Signal$waitOneBase$lambda(this.$this))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Signal.prototype.waitOneBase = function (continuation_0, suspended) {
    var instance = new Coroutine$waitOneBase_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Signal_init$lambda() {
    return Unit;
  }
  Signal.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Signal',
    interfaces: [BaseSignal]
  };
  function waitOne($receiver, continuation) {
    return $receiver.waitOneBase(continuation);
  }
  function waitOne_0($receiver, continuation) {
    return $receiver.waitOneBase(continuation);
  }
  function Coroutine$mapSignal$lambda(closure$out_0, closure$transform_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$out = closure$out_0;
    this.local$closure$transform = closure$transform_0;
    this.local$it = it_0;
  }
  Coroutine$mapSignal$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$mapSignal$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$mapSignal$lambda.prototype.constructor = Coroutine$mapSignal$lambda;
  Coroutine$mapSignal$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$out.invoke_11rb$(this.local$closure$transform(this.local$it), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function mapSignal$lambda(closure$out_0, closure$transform_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$mapSignal$lambda(closure$out_0, closure$transform_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function mapSignal($receiver, transform) {
    var out = new AsyncSignal();
    $receiver.add_25kf2w$(mapSignal$lambda(out, transform));
    return out;
  }
  function invoke($receiver, continuation) {
    return $receiver.invoke_11rb$(Unit, continuation);
  }
  function mapSignal$lambda_0(closure$out, closure$transform) {
    return function (it) {
      closure$out.invoke_11rb$(closure$transform(it));
      return Unit;
    };
  }
  function mapSignal_0($receiver, transform) {
    var out = new Signal();
    $receiver.add_qlkmfe$(mapSignal$lambda_0(out, transform));
    return out;
  }
  function invoke_0($receiver) {
    $receiver.invoke_11rb$(Unit);
  }
  function waitOne$lambda$lambda(closure$closes, closure$c) {
    return function (it) {
      close(closure$closes);
      closure$c.resumeWith_tl1gpc$(new Result(it));
      return Unit;
    };
  }
  function waitOne$lambda$lambda_0(closure$closes) {
    return function (it) {
      close(closure$closes);
      return Unit;
    };
  }
  function waitOne$lambda(this$waitOne) {
    return function (c) {
      var tmp$;
      var closes = ArrayList_init();
      tmp$ = this$waitOne.iterator();
      while (tmp$.hasNext()) {
        var signal = tmp$.next();
        var element = signal.once_qlkmfe$(waitOne$lambda$lambda(closes, c));
        closes.add_11rb$(element);
      }
      c.invokeOnCancellation_f05bi3$(waitOne$lambda$lambda_0(closes));
      return Unit;
    };
  }
  function Coroutine$waitOne($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$waitOne.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$waitOne.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$waitOne.prototype.constructor = Coroutine$waitOne;
  Coroutine$waitOne.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCancellableCoroutine$lambda(waitOne$lambda(this.local$$receiver))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function waitOne_1($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$waitOne($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function waitOneAsync$lambda(closure$close, closure$deferred) {
    return function (it) {
      var tmp$;
      (tmp$ = closure$close.v) != null ? (tmp$.close(), Unit) : null;
      closure$deferred.complete_11rb$(it);
      return Unit;
    };
  }
  function waitOneAsync$lambda_0(closure$close) {
    return function (it) {
      closure$close.v.close();
      return Unit;
    };
  }
  function waitOneAsync($receiver) {
    var deferred = CompletableDeferred_0(Job());
    var close = {v: null};
    close.v = $receiver.once_qlkmfe$(waitOneAsync$lambda(close, deferred));
    deferred.invokeOnCompletion_f05bi3$(waitOneAsync$lambda_0(close));
    return deferred;
  }
  function waitOnePromise($receiver) {
    return waitOneAsync($receiver);
  }
  function Coroutine$addSuspend$lambda$lambda(closure$handler_0, closure$value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$closure$value = closure$value_0;
  }
  Coroutine$addSuspend$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$addSuspend$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$addSuspend$lambda$lambda.prototype.constructor = Coroutine$addSuspend$lambda$lambda;
  Coroutine$addSuspend$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler(this.local$closure$value, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function addSuspend$lambda$lambda(closure$handler_0, closure$value_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$addSuspend$lambda$lambda(closure$handler_0, closure$value_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function addSuspend$lambda(closure$cc, closure$handler) {
    return function (value) {
      launchImmediately_0(closure$cc, addSuspend$lambda$lambda(closure$handler, value));
      return Unit;
    };
  }
  function addSuspend($receiver, handler, continuation) {
    var cc = continuation.context;
    return $receiver.invoke_qlkmfe$(addSuspend$lambda(cc, handler));
  }
  function Coroutine$addSuspend$lambda$lambda_0(closure$handler_0, closure$value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$closure$value = closure$value_0;
  }
  Coroutine$addSuspend$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$addSuspend$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$addSuspend$lambda$lambda_0.prototype.constructor = Coroutine$addSuspend$lambda$lambda_0;
  Coroutine$addSuspend$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler(this.local$closure$value, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function addSuspend$lambda$lambda_0(closure$handler_0, closure$value_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$addSuspend$lambda$lambda_0(closure$handler_0, closure$value_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function addSuspend$lambda_0(closure$context, closure$handler) {
    return function (value) {
      launchImmediately_0(closure$context, addSuspend$lambda$lambda_0(closure$handler, value));
      return Unit;
    };
  }
  function addSuspend_0($receiver, context, handler) {
    return $receiver.invoke_qlkmfe$(addSuspend$lambda_0(context, handler));
  }
  function waitOne$lambda$closeAll(closure$running, closure$close) {
    return function () {
      var tmp$;
      closure$running.v = false;
      (tmp$ = closure$close.v) != null ? (tmp$.close(), Unit) : null;
    };
  }
  function Coroutine$waitOne$lambda$lambda(closure$timeout_0, closure$running_0, closure$closeAll_0, closure$c_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$timeout = closure$timeout_0;
    this.local$closure$running = closure$running_0;
    this.local$closure$closeAll = closure$closeAll_0;
    this.local$closure$c = closure$c_0;
  }
  Coroutine$waitOne$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$waitOne$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$waitOne$lambda$lambda.prototype.constructor = Coroutine$waitOne$lambda$lambda;
  Coroutine$waitOne$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = delay_0(this.local$closure$timeout, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$closure$running.v) {
              this.local$closure$closeAll();
              this.local$closure$c.resumeWith_tl1gpc$(new Result(null));
              return Unit;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function waitOne$lambda$lambda_1(closure$timeout_0, closure$running_0, closure$closeAll_0, closure$c_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$waitOne$lambda$lambda(closure$timeout_0, closure$running_0, closure$closeAll_0, closure$c_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function waitOne$lambda$lambda_2(closure$closeAll, closure$c) {
    return function (it) {
      closure$closeAll();
      closure$c.resumeWith_tl1gpc$(new Result(it));
      return Unit;
    };
  }
  function waitOne$lambda$lambda_3(closure$closeAll) {
    return function (it) {
      closure$closeAll();
      return Unit;
    };
  }
  function waitOne$lambda_0(closure$timeout, this$waitOne) {
    return function (c) {
      var close = {v: null};
      var running = {v: true};
      var closeAll = waitOne$lambda$closeAll(running, close);
      launchImmediately_0(c.context, waitOne$lambda$lambda_1(closure$timeout, running, closeAll, c));
      close.v = this$waitOne.once_qlkmfe$(waitOne$lambda$lambda_2(closeAll, c));
      c.invokeOnCancellation_f05bi3$(waitOne$lambda$lambda_3(closeAll));
      return Unit;
    };
  }
  function Coroutine$waitOne_0($receiver_0, timeout_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$timeout = timeout_0;
  }
  Coroutine$waitOne_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$waitOne_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$waitOne_0.prototype.constructor = Coroutine$waitOne_0;
  Coroutine$waitOne_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCancellableCoroutine$lambda(waitOne$lambda_0(this.local$timeout, this.local$$receiver))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function waitOne_2($receiver_0, timeout_0, continuation_0, suspended) {
    var instance = new Coroutine$waitOne_0($receiver_0, timeout_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$waitOneOpt($receiver_0, timeout_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$timeout = timeout_0;
  }
  Coroutine$waitOneOpt.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$waitOneOpt.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$waitOneOpt.prototype.constructor = Coroutine$waitOneOpt;
  Coroutine$waitOneOpt.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$timeout != null) {
              this.state_0 = 3;
              this.result_0 = waitOne_2(this.local$$receiver, this.local$timeout, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 2;
              this.result_0 = this.local$$receiver.waitOneBase(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          case 3:
            return this.result_0;
          case 4:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function waitOneOpt($receiver_0, timeout_0, continuation_0, suspended) {
    var instance = new Coroutine$waitOneOpt($receiver_0, timeout_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$executeAndWaitAnySignal($receiver_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.local$closeables = void 0;
    this.local$$receiver = $receiver_0;
    this.local$callback = callback_0;
  }
  Coroutine$executeAndWaitAnySignal.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$executeAndWaitAnySignal.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$executeAndWaitAnySignal.prototype.constructor = Coroutine$executeAndWaitAnySignal;
  Coroutine$executeAndWaitAnySignal.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var deferred_0 = CompletableDeferred_0();
            var destination_0 = ArrayList_init_0(this.local$$receiver.size);
            var tmp$_0;
            tmp$_0 = this.local$$receiver.entries.iterator();
            while (tmp$_0.hasNext()) {
              var item_0 = tmp$_0.next();
              destination_0.add_11rb$(item_0.key.once_qlkmfe$(executeAndWaitAnySignal$lambda$lambda(deferred_0, item_0)));
            }

            this.local$closeables = destination_0;
            this.exceptionState_0 = 4;
            this.local$callback();
            this.state_0 = 1;
            this.result_0 = deferred_0.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 6;
            this.finallyPath_0 = [2];
            this.state_0 = 5;
            this.$returnValue = this.result_0;
            continue;
          case 2:
            return this.$returnValue;
          case 3:
            return;
          case 4:
            this.finallyPath_0 = [6];
            this.state_0 = 5;
            continue;
          case 5:
            this.exceptionState_0 = 6;
            close(this.local$closeables);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function executeAndWaitAnySignal($receiver_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$executeAndWaitAnySignal($receiver_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  defineInlineFunction('korio-root-korio.com.soywiz.korio.async.executeAndWaitAnySignal_ratmn0$', wrapFunction(function () {
    var CompletableDeferred = _.$$importsForInline$$['kotlinx-coroutines-core'].kotlinx.coroutines.CompletableDeferred_xptg6w$;
    var Unit = Kotlin.kotlin.Unit;
    var close = _.com.soywiz.korio.lang.close_n2ytw$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    function executeAndWaitAnySignal$lambda$lambda(closure$deferred, closure$pair) {
      return function (it) {
        closure$deferred.complete_11rb$(closure$pair.value);
        return Unit;
      };
    }
    return function ($receiver, callback, continuation) {
      var deferred_0 = CompletableDeferred();
      var destination_0 = ArrayList_init($receiver.size);
      var tmp$_0;
      tmp$_0 = $receiver.entries.iterator();
      while (tmp$_0.hasNext()) {
        var item_0 = tmp$_0.next();
        destination_0.add_11rb$(item_0.key.once_qlkmfe$(executeAndWaitAnySignal$lambda$lambda(deferred_0, item_0)));
      }
      var closeables = destination_0;
      try {
        callback();
        Kotlin.suspendCall(deferred_0.await(Kotlin.coroutineReceiver()));
        return Kotlin.coroutineResult(Kotlin.coroutineReceiver());
      }finally {
        close(closeables);
      }
    };
  }));
  function Coroutine$executeAndWaitAnySignal_0($receiver_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.local$closeables = void 0;
    this.local$$receiver = $receiver_0;
    this.local$callback = callback_0;
  }
  Coroutine$executeAndWaitAnySignal_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$executeAndWaitAnySignal_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$executeAndWaitAnySignal_0.prototype.constructor = Coroutine$executeAndWaitAnySignal_0;
  Coroutine$executeAndWaitAnySignal_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var deferred_0 = CompletableDeferred_0();
            var destination_0 = ArrayList_init_0(collectionSizeOrDefault(this.local$$receiver, 10));
            var tmp$_0;
            tmp$_0 = this.local$$receiver.iterator();
            while (tmp$_0.hasNext()) {
              var item_0 = tmp$_0.next();
              destination_0.add_11rb$(item_0.once_qlkmfe$(executeAndWaitAnySignal$lambda$lambda_0(deferred_0, item_0)));
            }

            this.local$closeables = destination_0;
            this.exceptionState_0 = 4;
            this.local$callback();
            this.state_0 = 1;
            this.result_0 = deferred_0.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 6;
            this.finallyPath_0 = [2];
            this.state_0 = 5;
            this.$returnValue = this.result_0;
            continue;
          case 2:
            return this.$returnValue;
          case 3:
            return;
          case 4:
            this.finallyPath_0 = [6];
            this.state_0 = 5;
            continue;
          case 5:
            this.exceptionState_0 = 6;
            close(this.local$closeables);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function executeAndWaitAnySignal_0($receiver_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$executeAndWaitAnySignal_0($receiver_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  defineInlineFunction('korio-root-korio.com.soywiz.korio.async.executeAndWaitAnySignal_ebemsz$', wrapFunction(function () {
    var CompletableDeferred = _.$$importsForInline$$['kotlinx-coroutines-core'].kotlinx.coroutines.CompletableDeferred_xptg6w$;
    var to = Kotlin.kotlin.to_ujzrz7$;
    var Unit = Kotlin.kotlin.Unit;
    var close = _.com.soywiz.korio.lang.close_n2ytw$;
    var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    function executeAndWaitAnySignal$lambda$lambda(closure$deferred, closure$signal) {
      return function (it) {
        closure$deferred.complete_11rb$(to(closure$signal, it));
        return Unit;
      };
    }
    return function ($receiver, callback, continuation) {
      var deferred_0 = CompletableDeferred();
      var destination_0 = ArrayList_init(collectionSizeOrDefault($receiver, 10));
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var item_0 = tmp$_0.next();
        destination_0.add_11rb$(item_0.once_qlkmfe$(executeAndWaitAnySignal$lambda$lambda(deferred_0, item_0)));
      }
      var closeables = destination_0;
      try {
        callback();
        Kotlin.suspendCall(deferred_0.await(Kotlin.coroutineReceiver()));
        return Kotlin.coroutineResult(Kotlin.coroutineReceiver());
      }finally {
        close(closeables);
      }
    };
  }));
  function Coroutine$executeAndWaitSignal($receiver_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.local$closeable = void 0;
    this.local$$receiver = $receiver_0;
    this.local$callback = callback_0;
  }
  Coroutine$executeAndWaitSignal.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$executeAndWaitSignal.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$executeAndWaitSignal.prototype.constructor = Coroutine$executeAndWaitSignal;
  Coroutine$executeAndWaitSignal.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var deferred_0 = CompletableDeferred_0();
            this.local$closeable = this.local$$receiver.once_qlkmfe$(executeAndWaitSignal$lambda(deferred_0));
            this.exceptionState_0 = 4;
            this.local$callback();
            this.state_0 = 1;
            this.result_0 = deferred_0.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 6;
            this.finallyPath_0 = [2];
            this.state_0 = 5;
            this.$returnValue = this.result_0;
            continue;
          case 2:
            return this.$returnValue;
          case 3:
            return;
          case 4:
            this.finallyPath_0 = [6];
            this.state_0 = 5;
            continue;
          case 5:
            this.exceptionState_0 = 6;
            this.local$closeable.close();
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function executeAndWaitSignal($receiver_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$executeAndWaitSignal($receiver_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  defineInlineFunction('korio-root-korio.com.soywiz.korio.async.executeAndWaitSignal_hfwxhy$', wrapFunction(function () {
    var CompletableDeferred = _.$$importsForInline$$['kotlinx-coroutines-core'].kotlinx.coroutines.CompletableDeferred_xptg6w$;
    var Unit = Kotlin.kotlin.Unit;
    function executeAndWaitSignal$lambda(closure$deferred) {
      return function (it) {
        closure$deferred.complete_11rb$(it);
        return Unit;
      };
    }
    return function ($receiver, callback, continuation) {
      var deferred_0 = CompletableDeferred();
      var closeable = $receiver.once_qlkmfe$(executeAndWaitSignal$lambda(deferred_0));
      try {
        callback();
        Kotlin.suspendCall(deferred_0.await(Kotlin.coroutineReceiver()));
        return Kotlin.coroutineResult(Kotlin.coroutineReceiver());
      }finally {
        closeable.close();
      }
    };
  }));
  function runBlockingNoSuspensions$ObjectLiteral(closure$resultEx, closure$completed, closure$rresult, closure$suspendCount) {
    this.closure$resultEx = closure$resultEx;
    this.closure$completed = closure$completed;
    this.closure$rresult = closure$rresult;
    this.context_5wsim1$_0 = new runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral(closure$suspendCount, ContinuationInterceptor.Key);
  }
  Object.defineProperty(runBlockingNoSuspensions$ObjectLiteral.prototype, 'context', {
    get: function () {
      return this.context_5wsim1$_0;
    }
  });
  runBlockingNoSuspensions$ObjectLiteral.prototype.resumeWith_tl1gpc$ = function (result) {
    var tmp$;
    var exception = result.exceptionOrNull();
    if (exception != null) {
      this.closure$resultEx.v = exception;
      this.closure$completed.v = true;
      printStackTrace_0(exception);
    } else {
      var tmp$_0;
      throwOnFailure(result);
      var value = (tmp$_0 = result.value) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE();
      var rvalue = value != null ? value : Kotlin.isType(tmp$ = Unit, Any) ? tmp$ : throwCCE();
      this.closure$rresult.v = rvalue;
      this.closure$completed.v = true;
    }
  };
  function runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral(closure$suspendCount, key) {
    this.closure$suspendCount = closure$suspendCount;
    AbstractCoroutineContextElement.call(this, key);
    this.key_hb9ir1$_0 = ContinuationInterceptor.Key;
  }
  Object.defineProperty(runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral.prototype, 'key', {
    get: function () {
      return this.key_hb9ir1$_0;
    }
  });
  runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral.prototype.interceptContinuation_wj8d80$ = function (continuation) {
    this.closure$suspendCount;
    var closure$suspendCount = this.closure$suspendCount;
    closure$suspendCount.v = closure$suspendCount.v + 1 | 0;
    return continuation;
  };
  runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral.prototype.scheduleResumeAfterDelay_egqmvs$ = function (timeMillis, continuation) {
    continuation.resumeWith_tl1gpc$(new Result(Unit));
  };
  runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [Delay, ContinuationInterceptor, AbstractCoroutineContextElement]
  };
  runBlockingNoSuspensions$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [Continuation]
  };
  function runBlockingNoSuspensions(callback) {
    var completed = {v: false};
    var rresult = {v: null};
    var resultEx = {v: null};
    var suspendCount = {v: 0};
    startCoroutineUndispatched(callback, new runBlockingNoSuspensions$ObjectLiteral(resultEx, completed, rresult, suspendCount));
    if (!completed.v)
      invalidOp('runBlockingNoSuspensions was not completed synchronously! suspendCount=' + suspendCount.v);
    if (resultEx.v != null)
      throw ensureNotNull(resultEx.v);
    return rresult.v == null ? throwUPAE('rresult') : rresult.v;
  }
  function startCoroutineUndispatched($receiver, completion) {
    startDirect$break: do {
      var tmp$, tmp$_0;
      try {
        completion.context;
        tmp$ = $receiver(completion, false);
      } catch (e) {
        if (Kotlin.isType(e, Throwable)) {
          var exception = e;
          completion.resumeWith_tl1gpc$(new Result(createFailure(exception)));
          break startDirect$break;
        } else
          throw e;
      }
      var value = tmp$;
      if (value !== COROUTINE_SUSPENDED) {
        var value_0 = (tmp$_0 = value) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE();
        completion.resumeWith_tl1gpc$(new Result(value_0));
      }}
     while (false);
  }
  var startDirect = wrapFunction(function () {
    var Result = Kotlin.kotlin.Result;
    var createFailure = Kotlin.kotlin.createFailure_tcv7n7$;
    return function (completion, block) {
      var tmp$, tmp$_0;
      try {
        tmp$ = block();
      } catch (e) {
        if (Kotlin.isType(e, Throwable)) {
          var exception = e;
          completion.resumeWith_tl1gpc$(new Result(createFailure(exception)));
          return;
        } else
          throw e;
      }
      var value = tmp$;
      if (value !== COROUTINE_SUSPENDED) {
        var value_0 = (tmp$_0 = value) == null || Kotlin.isType(tmp$_0, Any) ? tmp$_0 : throwCCE();
        completion.resumeWith_tl1gpc$(new Result(value_0));
      }};
  });
  function withCoroutineContext(context, countOrElement, block) {
    return block();
  }
  function CompressionContext(level) {
    if (level === void 0)
      level = 6;
    this.level = level;
    this.name = null;
    this.custom = null;
  }
  CompressionContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CompressionContext',
    interfaces: []
  };
  function CompressionMethod() {
  }
  CompressionMethod.prototype.uncompress_lvg59t$ = function (reader, out, continuation) {
    return unsupported_0();
  };
  CompressionMethod.prototype.compress_4p3hd0$$default = function (i, o, context, continuation) {
    return unsupported_0();
  };
  CompressionMethod.prototype.compress_4p3hd0$ = function (i, o, context, continuation, callback$default) {
    if (context === void 0)
      context = new CompressionContext();
    return callback$default ? callback$default(i, o, context, continuation) : this.compress_4p3hd0$$default(i, o, context, continuation);
  };
  function CompressionMethod$Uncompressed() {
    CompressionMethod$Uncompressed_instance = this;
  }
  function Coroutine$uncompress_lvg59t$($this, reader_0, out_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$reader = reader_0;
    this.local$out = out_0;
  }
  Coroutine$uncompress_lvg59t$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$uncompress_lvg59t$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$uncompress_lvg59t$.prototype.constructor = Coroutine$uncompress_lvg59t$;
  Coroutine$uncompress_lvg59t$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$reader.copyTo_dm3lun$(this.local$out, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  CompressionMethod$Uncompressed.prototype.uncompress_lvg59t$ = function (reader_0, out_0, continuation_0, suspended) {
    var instance = new Coroutine$uncompress_lvg59t$(this, reader_0, out_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$compress_4p3hd0$$default($this, i_0, o_0, context_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$i = i_0;
    this.local$o = o_0;
  }
  Coroutine$compress_4p3hd0$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$compress_4p3hd0$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$compress_4p3hd0$$default.prototype.constructor = Coroutine$compress_4p3hd0$$default;
  Coroutine$compress_4p3hd0$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$i.copyTo_dm3lun$(this.local$o, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  CompressionMethod$Uncompressed.prototype.compress_4p3hd0$$default = function (i_0, o_0, context_0, continuation_0, suspended) {
    var instance = new Coroutine$compress_4p3hd0$$default(this, i_0, o_0, context_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  CompressionMethod$Uncompressed.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Uncompressed',
    interfaces: [CompressionMethod]
  };
  var CompressionMethod$Uncompressed_instance = null;
  function CompressionMethod$Uncompressed_getInstance() {
    if (CompressionMethod$Uncompressed_instance === null) {
      new CompressionMethod$Uncompressed();
    }return CompressionMethod$Uncompressed_instance;
  }
  CompressionMethod.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'CompressionMethod',
    interfaces: []
  };
  function uncompress($receiver, i, o, continuation) {
    return $receiver.uncompress_lvg59t$(new BitReader(i), o, continuation);
  }
  function compress($receiver, i, o, context, continuation) {
    if (context === void 0)
      context = new CompressionContext();
    return $receiver.compress_4p3hd0$(new BitReader(i), o, context, continuation);
  }
  function Coroutine$uncompressStream$lambda(closure$input_0, this$uncompressStream_0, output_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$input = closure$input_0;
    this.local$this$uncompressStream = this$uncompressStream_0;
    this.local$output = output_0;
  }
  Coroutine$uncompressStream$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$uncompressStream$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$uncompressStream$lambda.prototype.constructor = Coroutine$uncompressStream$lambda;
  Coroutine$uncompressStream$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = uncompress(this.local$this$uncompressStream, this.local$closure$input, this.local$output, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function uncompressStream$lambda(closure$input_0, this$uncompressStream_0) {
    return function (output_0, continuation_0, suspended) {
      var instance = new Coroutine$uncompressStream$lambda(closure$input_0, this$uncompressStream_0, output_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function uncompressStream($receiver, input, continuation) {
    return asyncStreamWriter(void 0, uncompressStream$lambda(input, $receiver), continuation);
  }
  function Coroutine$compressStream$lambda(closure$input_0, closure$context_0, this$compressStream_0, output_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$input = closure$input_0;
    this.local$closure$context = closure$context_0;
    this.local$this$compressStream = this$compressStream_0;
    this.local$output = output_0;
  }
  Coroutine$compressStream$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$compressStream$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$compressStream$lambda.prototype.constructor = Coroutine$compressStream$lambda;
  Coroutine$compressStream$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = compress(this.local$this$compressStream, this.local$closure$input, this.local$output, this.local$closure$context, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function compressStream$lambda(closure$input_0, closure$context_0, this$compressStream_0) {
    return function (output_0, continuation_0, suspended) {
      var instance = new Coroutine$compressStream$lambda(closure$input_0, closure$context_0, this$compressStream_0, output_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function compressStream($receiver, input, context, continuation) {
    if (context === void 0)
      context = new CompressionContext();
    return asyncStreamWriter(void 0, compressStream$lambda(input, context, $receiver), continuation);
  }
  function Coroutine$uncompress$lambda(closure$i_0, closure$o_0, this$uncompress_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$i = closure$i_0;
    this.local$closure$o = closure$o_0;
    this.local$this$uncompress = this$uncompress_0;
  }
  Coroutine$uncompress$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$uncompress$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$uncompress$lambda.prototype.constructor = Coroutine$uncompress$lambda;
  Coroutine$uncompress$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = uncompress(this.local$this$uncompress, toAsyncInputStream_0(this.local$closure$i), toAsyncOutputStream(this.local$closure$o), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function uncompress$lambda(closure$i_0, closure$o_0, this$uncompress_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$uncompress$lambda(closure$i_0, closure$o_0, this$uncompress_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function uncompress_0($receiver, i, o) {
    runBlockingNoSuspensions(uncompress$lambda(i, o, $receiver));
  }
  function Coroutine$compress$lambda(closure$i_0, closure$o_0, closure$context_0, this$compress_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$i = closure$i_0;
    this.local$closure$o = closure$o_0;
    this.local$closure$context = closure$context_0;
    this.local$this$compress = this$compress_0;
  }
  Coroutine$compress$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$compress$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$compress$lambda.prototype.constructor = Coroutine$compress$lambda;
  Coroutine$compress$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = compress(this.local$this$compress, toAsyncInputStream_0(this.local$closure$i), toAsyncOutputStream(this.local$closure$o), this.local$closure$context, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function compress$lambda(closure$i_0, closure$o_0, closure$context_0, this$compress_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$compress$lambda(closure$i_0, closure$o_0, closure$context_0, this$compress_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function compress_0($receiver, i, o, context) {
    if (context === void 0)
      context = new CompressionContext();
    runBlockingNoSuspensions(compress$lambda(i, o, context, $receiver));
  }
  function uncompress_1($receiver, method, outputSizeHint) {
    if (outputSizeHint === void 0)
      outputSizeHint = $receiver.length * 2 | 0;
    var buffer = ByteArrayBuilder_init(outputSizeHint);
    var s = MemorySyncStream_0(buffer);
    uncompress_0(method, openSync($receiver), s);
    return buffer.toByteArray();
  }
  function compress_1($receiver, method, context, outputSizeHint) {
    if (context === void 0)
      context = new CompressionContext();
    if (outputSizeHint === void 0)
      outputSizeHint = numberToInt($receiver.length * 1.1);
    var buffer = ByteArrayBuilder_init(outputSizeHint);
    var s = MemorySyncStream_0(buffer);
    compress_0(method, openSync($receiver), s, context);
    return buffer.toByteArray();
  }
  function uncompressed($receiver, method, continuation) {
    return uncompressStream(method, $receiver, continuation);
  }
  function compressed($receiver, method, context, continuation) {
    if (context === void 0)
      context = new CompressionContext();
    return compressStream(method, $receiver, context, continuation);
  }
  function Deflate$lambda() {
    return Deflate_0(15);
  }
  var Deflate;
  function get_Deflate() {
    return Deflate.value;
  }
  function DeflatePortable(windowBits) {
    DeflatePortable$Companion_getInstance();
    this.windowBits = windowBits;
  }
  function Coroutine$compress_4p3hd0$$default_0($this, i_0, o_0, context_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$chunkSize = void 0;
    this.local$i = i_0;
    this.local$o = o_0;
  }
  Coroutine$compress_4p3hd0$$default_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$compress_4p3hd0$$default_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$compress_4p3hd0$$default_0.prototype.constructor = Coroutine$compress_4p3hd0$$default_0;
  Coroutine$compress_4p3hd0$$default_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = hasAvailable(this.local$i, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            if (!this.result_0) {
              this.state_0 = 11;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 5;
            this.result_0 = getAvailable(this.local$i, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            var available = this.result_0;
            var b = L65535;
            this.local$chunkSize = (available.compareTo_11rb$(b) <= 0 ? available : b).toInt();
            this.state_0 = 6;
            this.result_0 = write8(this.local$o, this.local$chunkSize >= available.toNumber() ? 1 : 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            this.state_0 = 7;
            this.result_0 = write16LE_0(this.local$o, this.local$chunkSize, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 7:
            this.state_0 = 8;
            this.result_0 = write16LE_0(this.local$o, ~this.local$chunkSize, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 8:
            this.state_0 = 9;
            this.result_0 = readBytesExact(this.local$i, this.local$chunkSize, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 9:
            this.state_0 = 10;
            this.result_0 = writeBytes(this.local$o, this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 10:
            this.state_0 = 2;
            continue;
          case 11:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  DeflatePortable.prototype.compress_4p3hd0$$default = function (i_0, o_0, context_0, continuation_0, suspended) {
    var instance = new Coroutine$compress_4p3hd0$$default_0(this, i_0, o_0, context_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$uncompress_lvg59t$_0($this, reader_0, out_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$sout = void 0;
    this.local$lastBlock = void 0;
    this.local$tempTree = void 0;
    this.local$tempDist = void 0;
    this.local$codeLenCodeLen = void 0;
    this.local$lengths = void 0;
    this.local$len = void 0;
    this.local$tree = void 0;
    this.local$dist = void 0;
    this.local$value = void 0;
    this.local$reader = reader_0;
    this.local$out = out_0;
  }
  Coroutine$uncompress_lvg59t$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$uncompress_lvg59t$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$uncompress_lvg59t$_0.prototype.constructor = Coroutine$uncompress_lvg59t$_0;
  Coroutine$uncompress_lvg59t$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            this.local$sout = new DeflatePortable$SlidingWindowWithOutput(new SlidingWindow(this.$this.windowBits), this.local$out);
            this.local$lastBlock = false;
            this.local$tempTree = new HuffmanTree();
            this.local$tempDist = new HuffmanTree();
            this.local$codeLenCodeLen = new Int32Array(32);
            this.local$lengths = new Int32Array(512);
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$lastBlock) {
              this.state_0 = 17;
              continue;
            }
            if (this.local$reader.requirePrepare) {
              this.state_0 = 3;
              this.result_0 = this.local$reader.prepareBigChunk(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            this.local$lastBlock = this.local$reader.sreadBit();
            var blockType = this.local$reader.readBits_za3lpa$(2);
            if (!(0 <= blockType && blockType <= 2)) {
              throw IllegalStateException_init('invalid bit'.toString());
            }
            if (blockType === 0) {
              this.local$reader.bitdata = 0;
              this.local$reader.bitsavailable = 0;
              this.local$len = this.local$reader.su16LE();
              var nlen = this.local$reader.su16LE();
              var nnlen = ~nlen & 65535;
              if (this.local$len !== nnlen) {
                throw IllegalStateException_init(('Invalid deflate stream: len(' + this.local$len + ') != ~nlen(' + nnlen + ') :: nlen=' + nlen).toString());
              }this.state_0 = 15;
              this.result_0 = this.local$reader.abytes_3fbn1q$(this.local$len, void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              if (blockType === 1) {
                this.local$tree = DeflatePortable$Companion_getInstance().FIXED_TREE_0;
                this.local$dist = DeflatePortable$Companion_getInstance().FIXED_DIST_0;
              } else {
                var hlit = this.local$reader.readBits_za3lpa$(5) + 257 | 0;
                var hdist = this.local$reader.readBits_za3lpa$(5) + 1 | 0;
                var hclen = this.local$reader.readBits_za3lpa$(4) + 4 | 0;
                arrayfill(this.local$codeLenCodeLen, 0, 0, this.local$codeLenCodeLen.length);
                for (var i = 0; i < hclen; i++)
                  this.local$codeLenCodeLen[DeflatePortable$Companion_getInstance().HCLENPOS_0[i]] = this.local$reader.readBits_za3lpa$(3);
                var codeLen = this.local$tempTree.fromLengths_nd5v6f$(this.local$codeLenCodeLen);
                var hlithdist = hlit + hdist | 0;
                var n = 0;
                arrayfill(this.local$lengths, 0, 0, this.local$lengths.length);
                while (n < hlithdist) {
                  var value = this.$this.read_cn98ar$_0(this.local$reader, codeLen);
                  if (!(0 <= value && value <= 18)) {
                    throw IllegalStateException_init('Invalid'.toString());
                  }switch (value) {
                    case 16:
                      tmp$ = this.local$reader.readBits_za3lpa$(2) + 3 | 0;
                      break;
                    case 17:
                      tmp$ = this.local$reader.readBits_za3lpa$(3) + 3 | 0;
                      break;
                    case 18:
                      tmp$ = this.local$reader.readBits_za3lpa$(7) + 11 | 0;
                      break;
                    default:tmp$ = 1;
                      break;
                  }
                  var len = tmp$;
                  switch (value) {
                    case 16:
                      tmp$_0 = this.local$lengths[n - 1 | 0];
                      break;
                    case 17:
                      tmp$_0 = 0;
                      break;
                    case 18:
                      tmp$_0 = 0;
                      break;
                    default:tmp$_0 = value;
                      break;
                  }
                  var vv = tmp$_0;
                  arrayfill(this.local$lengths, vv, n, n + len | 0);
                  n = n + len | 0;
                }
                this.local$tree = this.local$tempTree.fromLengths_nd5v6f$(this.local$lengths, 0, hlit);
                this.local$dist = this.local$tempDist.fromLengths_nd5v6f$(this.local$lengths, hlit, hlithdist);
              }
              this.state_0 = 5;
              continue;
            }

          case 5:
            if (this.local$reader.requirePrepare) {
              this.state_0 = 6;
              this.result_0 = this.local$reader.prepareBigChunk(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 7;
              continue;
            }

          case 6:
            this.state_0 = 7;
            continue;
          case 7:
            this.local$value = this.local$tree.read_st72cc$(this.local$reader);
            if (this.local$value === 256) {
              this.state_0 = 14;
              continue;
            } else {
              this.state_0 = 8;
              continue;
            }

          case 8:
            if (this.local$value < 256) {
              this.local$sout.putOut_s8j3t7$(toByte(this.local$value));
              this.state_0 = 11;
              continue;
            } else {
              if (this.local$reader.requirePrepare) {
                this.state_0 = 9;
                this.result_0 = this.local$reader.prepareBigChunk(this);
                if (this.result_0 === COROUTINE_SUSPENDED)
                  return COROUTINE_SUSPENDED;
                continue;
              } else {
                this.state_0 = 10;
                continue;
              }
            }

          case 9:
            this.state_0 = 10;
            continue;
          case 10:
            var zlenof = this.local$value - 257 | 0;
            var lengthExtra = this.local$reader.readBits_za3lpa$(DeflatePortable$Companion_getInstance().LEN_EXTRA_0[zlenof]);
            var distanceData = this.$this.read_cn98ar$_0(this.local$reader, this.local$dist);
            var distanceExtra = this.local$reader.readBits_za3lpa$(DeflatePortable$Companion_getInstance().DIST_EXTRA_0[distanceData]);
            var distance = DeflatePortable$Companion_getInstance().DIST_BASE_0[distanceData] + distanceExtra | 0;
            var length = DeflatePortable$Companion_getInstance().LEN_BASE_0[zlenof] + lengthExtra | 0;
            this.local$sout.getPutCopyOut_vux9f0$(distance, length);
            this.state_0 = 11;
            continue;
          case 11:
            if (false || this.local$sout.mustFlush) {
              this.state_0 = 12;
              this.result_0 = this.local$sout.flush_6taknv$(false, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 13;
              continue;
            }

          case 12:
            this.state_0 = 13;
            continue;
          case 13:
            this.state_0 = 5;
            continue;
          case 14:
            this.state_0 = 16;
            continue;
          case 15:
            var bytes = this.result_0;
            this.local$sout.putOut_mj6st8$(bytes, 0, this.local$len);
            this.state_0 = 16;
            continue;
          case 16:
            this.state_0 = 2;
            continue;
          case 17:
            if (true || this.local$sout.mustFlush) {
              this.state_0 = 18;
              this.result_0 = this.local$sout.flush_6taknv$(true, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 19;
              continue;
            }

          case 18:
            this.state_0 = 19;
            continue;
          case 19:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  DeflatePortable.prototype.uncompress_lvg59t$ = function (reader_0, out_0, continuation_0, suspended) {
    var instance = new Coroutine$uncompress_lvg59t$_0(this, reader_0, out_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  DeflatePortable.prototype.read_cn98ar$_0 = function ($receiver, tree) {
    return tree.read_st72cc$($receiver);
  };
  function DeflatePortable$SlidingWindowWithOutput(sliding, out) {
    this.sliding = sliding;
    this.out = out;
    this.bab = ByteArrayBuilder_init(8192);
  }
  Object.defineProperty(DeflatePortable$SlidingWindowWithOutput.prototype, 'output', {
    get: function () {
      return this.bab.size;
    }
  });
  Object.defineProperty(DeflatePortable$SlidingWindowWithOutput.prototype, 'mustFlush', {
    get: function () {
      return this.bab.size >= 4096;
    }
  });
  DeflatePortable$SlidingWindowWithOutput.prototype.getPutCopyOut_vux9f0$ = function (distance, length) {
    for (var n = 0; n < length; n++) {
      var v = this.sliding.getPut_za3lpa$(distance);
      this.bab.append_s8j3t7$(toByte(v));
    }
  };
  DeflatePortable$SlidingWindowWithOutput.prototype.putOut_mj6st8$ = function (bytes, offset, len) {
    this.bab.append_mj6st8$(bytes, offset, len);
    this.sliding.putBytes_mj6st8$(bytes, offset, len);
  };
  DeflatePortable$SlidingWindowWithOutput.prototype.putOut_s8j3t7$ = function (byte) {
    this.bab.append_s8j3t7$(byte);
    this.sliding.put_za3lpa$(byte & 255);
  };
  function Coroutine$flush_6taknv$($this, finish_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$finish = finish_0;
  }
  Coroutine$flush_6taknv$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$flush_6taknv$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$flush_6taknv$.prototype.constructor = Coroutine$flush_6taknv$;
  Coroutine$flush_6taknv$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$finish === void 0)
              this.local$finish = false;
            if (this.local$finish || this.$this.mustFlush) {
              this.state_0 = 2;
              this.result_0 = this.$this.out.write_mj6st8$(this.$this.bab.data, 0, this.$this.bab.size, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.$this.bab.clear();
            this.state_0 = 3;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  DeflatePortable$SlidingWindowWithOutput.prototype.flush_6taknv$ = function (finish_0, continuation_0, suspended) {
    var instance = new Coroutine$flush_6taknv$(this, finish_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$flushIfRequired_6taknv$($this, finish_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$finish = finish_0;
  }
  Coroutine$flushIfRequired_6taknv$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$flushIfRequired_6taknv$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$flushIfRequired_6taknv$.prototype.constructor = Coroutine$flushIfRequired_6taknv$;
  Coroutine$flushIfRequired_6taknv$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$finish === void 0)
              this.local$finish = false;
            if (this.local$finish || this.$this.mustFlush) {
              this.state_0 = 2;
              this.result_0 = this.$this.flush_6taknv$(this.local$finish, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  DeflatePortable$SlidingWindowWithOutput.prototype.flushIfRequired_6taknv$ = function (finish_0, continuation_0, suspended) {
    var instance = new Coroutine$flushIfRequired_6taknv$(this, finish_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  defineInlineFunction('korio-root-korio.com.soywiz.korio.compression.deflate.DeflatePortable.SlidingWindowWithOutput.flushIfRequired_6taknv$', function (finish, continuation) {
    if (finish === void 0)
      finish = false;
    if (finish || this.mustFlush) {
      Kotlin.suspendCall(this.flush_6taknv$(finish, Kotlin.coroutineReceiver()));
    }});
  DeflatePortable$SlidingWindowWithOutput.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SlidingWindowWithOutput',
    interfaces: []
  };
  function DeflatePortable$Companion() {
    DeflatePortable$Companion_instance = this;
    DeflatePortable.call(this, 15);
    var tmp$ = new HuffmanTree();
    var $receiver = new Int32Array(288);
    for (var n = 0; n <= 143; n++)
      $receiver[n] = 8;
    for (var n_0 = 144; n_0 <= 255; n_0++)
      $receiver[n_0] = 9;
    for (var n_1 = 256; n_1 <= 279; n_1++)
      $receiver[n_1] = 7;
    for (var n_2 = 280; n_2 <= 287; n_2++)
      $receiver[n_2] = 8;
    this.FIXED_TREE_0 = tmp$.fromLengths_nd5v6f$($receiver);
    var tmp$_0 = new HuffmanTree();
    var array = new Int32Array(32);
    var tmp$_1;
    tmp$_1 = array.length - 1 | 0;
    for (var i = 0; i <= tmp$_1; i++) {
      array[i] = 5;
    }
    this.FIXED_DIST_0 = tmp$_0.fromLengths_nd5v6f$(array);
    this.LEN_EXTRA_0 = new Int32Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);
    this.LEN_BASE_0 = new Int32Array([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]);
    this.DIST_EXTRA_0 = new Int32Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
    this.DIST_BASE_0 = new Int32Array([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0]);
    this.HCLENPOS_0 = new Int32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  }
  DeflatePortable$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: [DeflatePortable]
  };
  var DeflatePortable$Companion_instance = null;
  function DeflatePortable$Companion_getInstance() {
    if (DeflatePortable$Companion_instance === null) {
      new DeflatePortable$Companion();
    }return DeflatePortable$Companion_instance;
  }
  DeflatePortable.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeflatePortable',
    interfaces: [CompressionMethod]
  };
  function GZIP(deflater) {
    GZIP$Companion_getInstance();
    GZIPBase.call(this, true, deflater);
  }
  function GZIP$Companion() {
    GZIP$Companion_instance = this;
    GZIP.call(this, GZIP$GZIP$Companion_init$lambda);
  }
  function GZIP$GZIP$Companion_init$lambda() {
    return get_Deflate();
  }
  GZIP$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: [GZIP]
  };
  var GZIP$Companion_instance = null;
  function GZIP$Companion_getInstance() {
    if (GZIP$Companion_instance === null) {
      new GZIP$Companion();
    }return GZIP$Companion_instance;
  }
  GZIP.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GZIP',
    interfaces: [GZIPBase]
  };
  function GZIPNoCrc(deflater) {
    GZIPNoCrc$Companion_getInstance();
    GZIPBase.call(this, false, deflater);
  }
  function GZIPNoCrc$Companion() {
    GZIPNoCrc$Companion_instance = this;
    GZIPNoCrc.call(this, GZIPNoCrc$GZIPNoCrc$Companion_init$lambda);
  }
  function GZIPNoCrc$GZIPNoCrc$Companion_init$lambda() {
    return get_Deflate();
  }
  GZIPNoCrc$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: [GZIPNoCrc]
  };
  var GZIPNoCrc$Companion_instance = null;
  function GZIPNoCrc$Companion_getInstance() {
    if (GZIPNoCrc$Companion_instance === null) {
      new GZIPNoCrc$Companion();
    }return GZIPNoCrc$Companion_instance;
  }
  GZIPNoCrc.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GZIPNoCrc',
    interfaces: [GZIPBase]
  };
  function GZIPBase(checkCrc, deflater) {
    this.checkCrc = checkCrc;
    this.deflater = deflater;
  }
  function GZIPBase$uncompress$ObjectLiteral(closure$ccrc32, closure$csize, closure$out) {
    this.closure$ccrc32 = closure$ccrc32;
    this.closure$csize = closure$csize;
    this.closure$out = closure$out;
    this.$delegate_bj6lmc$_0 = closure$out;
  }
  function Coroutine$write_mj6st8$$default_0($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_mj6st8$$default_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_mj6st8$$default_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_mj6st8$$default_0.prototype.constructor = Coroutine$write_mj6st8$$default_0;
  Coroutine$write_mj6st8$$default_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$len > 0) {
              this.$this.closure$ccrc32.v = CRC32_getInstance().update_3fge6q$(this.$this.closure$ccrc32.v, this.local$buffer, this.local$offset, this.local$len);
              this.$this.closure$csize.v = this.$this.closure$csize.v + this.local$len | 0;
              this.state_0 = 2;
              this.result_0 = this.$this.closure$out.write_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  GZIPBase$uncompress$ObjectLiteral.prototype.write_mj6st8$$default = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_mj6st8$$default_0(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  GZIPBase$uncompress$ObjectLiteral.prototype.close = function (continuation) {
    return this.$delegate_bj6lmc$_0.close(continuation);
  };
  GZIPBase$uncompress$ObjectLiteral.prototype.write_za3lpa$ = function (byte, continuation) {
    return this.$delegate_bj6lmc$_0.write_za3lpa$(byte, continuation);
  };
  GZIPBase$uncompress$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncOutputStream]
  };
  function Coroutine$uncompress_lvg59t$_1($this, reader_0, out_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$r = void 0;
    this.local$fhcrc = void 0;
    this.local$fname = void 0;
    this.local$fcomment = void 0;
    this.local$ccrc32 = void 0;
    this.local$csize = void 0;
    this.local$reader = reader_0;
    this.local$out = out_0;
  }
  Coroutine$uncompress_lvg59t$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$uncompress_lvg59t$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$uncompress_lvg59t$_1.prototype.constructor = Coroutine$uncompress_lvg59t$_1;
  Coroutine$uncompress_lvg59t$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$r = this.local$reader;
            if (this.local$r.requirePrepare) {
              this.state_0 = 2;
              this.result_0 = this.local$r.prepareBigChunk(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            if (this.local$r.su8() !== 31 || this.local$r.su8() !== 139) {
              throw IllegalStateException_init('Not a GZIP file'.toString());
            }
            var method = this.local$r.su8();
            if (method !== 8) {
              throw IllegalStateException_init('Just supported deflate in GZIP'.toString());
            }
            var ftext = this.local$r.sreadBit();
            this.local$fhcrc = this.local$r.sreadBit();
            var fextra = this.local$r.sreadBit();
            this.local$fname = this.local$r.sreadBit();
            this.local$fcomment = this.local$r.sreadBit();
            var reserved = this.local$r.readBits_za3lpa$(3);
            var mtime = this.local$r.su32LE();
            var xfl = this.local$r.su8();
            var os = this.local$r.su8();
            if (fextra) {
              this.state_0 = 4;
              this.result_0 = this.local$r.abytes_3fbn1q$(this.local$r.su16LE(), void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.local$tmp$ = new Int8Array([]);
              this.state_0 = 5;
              continue;
            }

          case 4:
            this.local$tmp$ = this.result_0;
            this.state_0 = 5;
            continue;
          case 5:
            var extra = this.local$tmp$;
            if (this.local$fname) {
              this.state_0 = 6;
              this.result_0 = this.local$r.strz(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.local$tmp$_0 = null;
              this.state_0 = 7;
              continue;
            }

          case 6:
            this.local$tmp$_0 = this.result_0;
            this.state_0 = 7;
            continue;
          case 7:
            var name = this.local$tmp$_0;
            if (this.local$fcomment) {
              this.state_0 = 8;
              this.result_0 = this.local$r.strz(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.local$tmp$_1 = null;
              this.state_0 = 9;
              continue;
            }

          case 8:
            this.local$tmp$_1 = this.result_0;
            this.state_0 = 9;
            continue;
          case 9:
            var comment = this.local$tmp$_1;
            var crc16 = this.local$fhcrc ? this.local$r.su16LE() : 0;
            this.local$ccrc32 = {v: CRC32_getInstance().initialValue};
            this.local$csize = {v: 0};
            this.state_0 = 10;
            this.result_0 = this.$this.deflater().uncompress_lvg59t$(this.local$r, new GZIPBase$uncompress$ObjectLiteral(this.local$ccrc32, this.local$csize, this.local$out), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 10:
            if (this.local$r.requirePrepare) {
              this.state_0 = 11;
              this.result_0 = this.local$r.prepareBigChunk(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 12;
              continue;
            }

          case 11:
            this.state_0 = 12;
            continue;
          case 12:
            var crc32 = this.local$r.su32LE();
            var size = this.local$r.su32LE();
            if (this.$this.checkCrc && (this.local$csize.v !== size || this.local$ccrc32.v !== crc32)) {
              invalidOp("Size doesn't match SIZE(" + get_hex_0(this.local$csize.v) + ' != ' + get_hex_0(size) + ') || CRC32(' + get_hex_0(this.local$ccrc32.v) + ' != ' + get_hex_0(crc32) + ')');
            }
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  GZIPBase.prototype.uncompress_lvg59t$ = function (reader_0, out_0, continuation_0, suspended) {
    var instance = new Coroutine$uncompress_lvg59t$_1(this, reader_0, out_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function GZIPBase$compress$ObjectLiteral(closure$i, closure$crc32, closure$size) {
    this.closure$i = closure$i;
    this.closure$crc32 = closure$crc32;
    this.closure$size = closure$size;
    this.$delegate_qfbs2b$_0 = closure$i;
  }
  function Coroutine$read_mj6st8$_1($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$_1.prototype.constructor = Coroutine$read_mj6st8$_1;
  Coroutine$read_mj6st8$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.closure$i.read_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var read = this.result_0;
            if (read > 0) {
              this.$this.closure$crc32.v = CRC32_getInstance().update_3fge6q$(this.$this.closure$crc32.v, this.local$buffer, this.local$offset, read);
              this.$this.closure$size.v = this.$this.closure$size.v + read | 0;
            }
            return read;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  GZIPBase$compress$ObjectLiteral.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$_1(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  GZIPBase$compress$ObjectLiteral.prototype.close = function (continuation) {
    return this.$delegate_qfbs2b$_0.close(continuation);
  };
  GZIPBase$compress$ObjectLiteral.prototype.getLength = function (continuation) {
    return this.$delegate_qfbs2b$_0.getLength(continuation);
  };
  GZIPBase$compress$ObjectLiteral.prototype.getPosition = function (continuation) {
    return this.$delegate_qfbs2b$_0.getPosition(continuation);
  };
  GZIPBase$compress$ObjectLiteral.prototype.read = function (continuation) {
    return this.$delegate_qfbs2b$_0.read(continuation);
  };
  GZIPBase$compress$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncInputStreamWithLength]
  };
  function Coroutine$compress_4p3hd0$$default_1($this, i_0, o_0, context_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$size = void 0;
    this.local$crc32 = void 0;
    this.local$i = i_0;
    this.local$o = o_0;
    this.local$context = context_0;
  }
  Coroutine$compress_4p3hd0$$default_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$compress_4p3hd0$$default_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$compress_4p3hd0$$default_1.prototype.constructor = Coroutine$compress_4p3hd0$$default_1;
  Coroutine$compress_4p3hd0$$default_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = write8(this.local$o, 31, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = write8(this.local$o, 139, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = write8(this.local$o, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.state_0 = 5;
            this.result_0 = write8(this.local$o, 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = write32LE_1(this.local$o, 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            this.state_0 = 7;
            this.result_0 = write8(this.local$o, 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 7:
            this.state_0 = 8;
            this.result_0 = write8(this.local$o, 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 8:
            this.local$size = {v: 0};
            this.local$crc32 = {v: CRC32_getInstance().initialValue};
            this.state_0 = 9;
            this.result_0 = this.$this.deflater().compress_4p3hd0$(new BitReader(new GZIPBase$compress$ObjectLiteral(this.local$i, this.local$crc32, this.local$size)), this.local$o, this.local$context, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 9:
            this.state_0 = 10;
            this.result_0 = write32LE_1(this.local$o, this.local$crc32.v, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 10:
            this.state_0 = 11;
            this.result_0 = write32LE_1(this.local$o, this.local$size.v, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 11:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  GZIPBase.prototype.compress_4p3hd0$$default = function (i_0, o_0, context_0, continuation_0, suspended) {
    var instance = new Coroutine$compress_4p3hd0$$default_1(this, i_0, o_0, context_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  GZIPBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'GZIPBase',
    interfaces: [CompressionMethod]
  };
  function ZLib(deflater) {
    ZLib$Companion_getInstance();
    this.deflater = deflater;
  }
  function ZLib$Companion() {
    ZLib$Companion_instance = this;
    ZLib.call(this, ZLib$ZLib$Companion_init$lambda);
  }
  function ZLib$ZLib$Companion_init$lambda(it) {
    return Deflate_0(it);
  }
  ZLib$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: [ZLib]
  };
  var ZLib$Companion_instance = null;
  function ZLib$Companion_getInstance() {
    if (ZLib$Companion_instance === null) {
      new ZLib$Companion();
    }return ZLib$Companion_instance;
  }
  function ZLib$uncompress$ObjectLiteral(closure$o, closure$chash) {
    this.closure$o = closure$o;
    this.closure$chash = closure$chash;
  }
  ZLib$uncompress$ObjectLiteral.prototype.close = function (continuation) {
    return this.closure$o.close(continuation);
  };
  function Coroutine$write_mj6st8$$default_1($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_mj6st8$$default_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_mj6st8$$default_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_mj6st8$$default_1.prototype.constructor = Coroutine$write_mj6st8$$default_1;
  Coroutine$write_mj6st8$$default_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.closure$o.write_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.$this.closure$chash.v = Adler32_getInstance().update_3fge6q$(this.$this.closure$chash.v, this.local$buffer, this.local$offset, this.local$len);
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZLib$uncompress$ObjectLiteral.prototype.write_mj6st8$$default = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_mj6st8$$default_1(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  ZLib$uncompress$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncOutputStream]
  };
  function Coroutine$uncompress_lvg59t$_2($this, reader_0, out_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$r = void 0;
    this.local$o = void 0;
    this.local$chash = void 0;
    this.local$reader = reader_0;
    this.local$out = out_0;
  }
  Coroutine$uncompress_lvg59t$_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$uncompress_lvg59t$_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$uncompress_lvg59t$_2.prototype.constructor = Coroutine$uncompress_lvg59t$_2;
  Coroutine$uncompress_lvg59t$_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$r = this.local$reader;
            this.local$o = this.local$out;
            if (this.local$r.requirePrepare) {
              this.state_0 = 2;
              this.result_0 = this.local$r.prepareBigChunk(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            var cmf = this.local$r.su8();
            var flg = this.local$r.su8();
            if (((cmf * 256 | 0) + flg | 0) % 31 !== 0) {
              throw IllegalStateException_init('bad zlib header'.toString());
            }
            var compressionMethod = extract(cmf, 0, 4);
            if (compressionMethod !== 8) {
              throw IllegalStateException_init(('Invalid zlib stream compressionMethod=' + compressionMethod).toString());
            }
            var windowBits = extract(cmf, 4, 4) + 8 | 0;
            var fcheck = extract(flg, 0, 5);
            var hasDict = extract_0(flg, 5);
            var flevel = extract(flg, 6, 2);
            var dictid = 0;
            if (hasDict) {
              dictid = this.local$r.su32LE();
              throw new NotImplementedError_init('An operation is not implemented: ' + ('Unsupported custom dictionaries (Provided DICTID=' + dictid + ')'));
            }
            this.local$chash = {v: Adler32_getInstance().initialValue};
            this.state_0 = 4;
            this.result_0 = this.$this.deflater(windowBits).uncompress_lvg59t$(this.local$r, new ZLib$uncompress$ObjectLiteral(this.local$o, this.local$chash), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            if (this.local$r.requirePrepare) {
              this.state_0 = 5;
              this.result_0 = this.local$r.prepareBigChunk(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 6;
              continue;
            }

          case 5:
            this.state_0 = 6;
            continue;
          case 6:
            var adler32 = this.local$r.su32BE();
            if (this.local$chash.v !== adler32)
              invalidOp("Adler32 doesn't match " + get_hex_0(this.local$chash.v) + ' != ' + get_hex_0(adler32));
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZLib.prototype.uncompress_lvg59t$ = function (reader_0, out_0, continuation_0, suspended) {
    var instance = new Coroutine$uncompress_lvg59t$_2(this, reader_0, out_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function ZLib$compress$ObjectLiteral(closure$i, closure$adler) {
    this.closure$i = closure$i;
    this.closure$adler = closure$adler;
    this.$delegate_f96thv$_0 = closure$i;
  }
  function Coroutine$read_mj6st8$_2($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$_2.prototype.constructor = Coroutine$read_mj6st8$_2;
  Coroutine$read_mj6st8$_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.closure$i.read_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var read = this.result_0;
            if (read > 0) {
              this.$this.closure$adler.v = Adler32_getInstance().update_3fge6q$(this.$this.closure$adler.v, this.local$buffer, this.local$offset, read);
            }
            return read;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZLib$compress$ObjectLiteral.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$_2(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  ZLib$compress$ObjectLiteral.prototype.close = function (continuation) {
    return this.$delegate_f96thv$_0.close(continuation);
  };
  ZLib$compress$ObjectLiteral.prototype.getLength = function (continuation) {
    return this.$delegate_f96thv$_0.getLength(continuation);
  };
  ZLib$compress$ObjectLiteral.prototype.getPosition = function (continuation) {
    return this.$delegate_f96thv$_0.getPosition(continuation);
  };
  ZLib$compress$ObjectLiteral.prototype.read = function (continuation) {
    return this.$delegate_f96thv$_0.read(continuation);
  };
  ZLib$compress$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncInputStreamWithLength]
  };
  function Coroutine$compress_4p3hd0$$default_2($this, i_0, o_0, context_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$slidingBits = void 0;
    this.local$flg = void 0;
    this.local$fcheck = void 0;
    this.local$adler = void 0;
    this.local$i = i_0;
    this.local$o = o_0;
    this.local$context = context_0;
  }
  Coroutine$compress_4p3hd0$$default_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$compress_4p3hd0$$default_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$compress_4p3hd0$$default_2.prototype.constructor = Coroutine$compress_4p3hd0$$default_2;
  Coroutine$compress_4p3hd0$$default_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.local$slidingBits = 15;
            if (this.local$context.level <= 0)
              tmp$ = 0;
            else if (this.local$context.level < 6)
              tmp$ = 1;
            else if (this.local$context.level < 9)
              tmp$ = 2;
            else
              tmp$ = 3;
            var clevel = tmp$;
            var cmf = 8 | this.local$slidingBits - 8 << 4;
            this.local$flg = 0 | clevel << 6;
            this.local$fcheck = 0;
            for (var n = 0; n < 32; n++) {
              if (((cmf * 256 | 0) + (this.local$flg | n) | 0) % 31 === 0) {
                this.local$fcheck = n;
                break;
              }}

            this.state_0 = 2;
            this.result_0 = write8(this.local$o, cmf, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = write8(this.local$o, this.local$flg | this.local$fcheck, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$adler = {v: Adler32_getInstance().initialValue};
            this.state_0 = 4;
            this.result_0 = compress(this.$this.deflater(this.local$slidingBits), new ZLib$compress$ObjectLiteral(this.local$i, this.local$adler), this.local$o, this.local$context, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.state_0 = 5;
            this.result_0 = write32BE_1(this.local$o, this.local$adler.v, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZLib.prototype.compress_4p3hd0$$default = function (i_0, o_0, context_0, continuation_0, suspended) {
    var instance = new Coroutine$compress_4p3hd0$$default_2(this, i_0, o_0, context_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  ZLib.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ZLib',
    interfaces: [CompressionMethod]
  };
  function Lzma() {
    Lzma_instance = this;
  }
  function Coroutine$uncompress_lvg59t$_3($this, reader_0, out_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$reader = reader_0;
    this.local$out = out_0;
  }
  Coroutine$uncompress_lvg59t$_3.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$uncompress_lvg59t$_3.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$uncompress_lvg59t$_3.prototype.constructor = Coroutine$uncompress_lvg59t$_3;
  Coroutine$uncompress_lvg59t$_3.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readAll(this.local$reader, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var input = openSync(this.result_0);
            var properties = readBytesExact_0(input, 5);
            var decoder = new SevenZip$LzmaDecoder();
            if (!decoder.setDecoderProperties_fqrh44$(properties))
              throw Exception_init('Incorrect stream properties');
            var outSize = readS64LE_1(input);
            var buffer = ByteArrayBuilder_init(4096);
            var s = MemorySyncStream_0(buffer);
            if (!decoder.code_ybf00i$(input, s, outSize))
              throw Exception_init('Error in data stream');
            this.state_0 = 3;
            this.result_0 = writeBytes(this.local$out, buffer.toByteArray(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Lzma.prototype.uncompress_lvg59t$ = function (reader_0, out_0, continuation_0, suspended) {
    var instance = new Coroutine$uncompress_lvg59t$_3(this, reader_0, out_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$compress_4p3hd0$$default_3($this, i_0, o_0, context_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$algorithm = void 0;
    this.local$matchFinder = void 0;
    this.local$dictionarySize = void 0;
    this.local$lc = void 0;
    this.local$lp = void 0;
    this.local$pb = void 0;
    this.local$fb = void 0;
    this.local$eos = void 0;
    this.local$i = i_0;
    this.local$o = o_0;
  }
  Coroutine$compress_4p3hd0$$default_3.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$compress_4p3hd0$$default_3.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$compress_4p3hd0$$default_3.prototype.constructor = Coroutine$compress_4p3hd0$$default_3;
  Coroutine$compress_4p3hd0$$default_3.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$algorithm = 2;
            this.local$matchFinder = 1;
            this.local$dictionarySize = 8388608;
            this.local$lc = 3;
            this.local$lp = 0;
            this.local$pb = 2;
            this.local$fb = 128;
            this.local$eos = false;
            this.state_0 = 2;
            this.result_0 = readAll(this.local$i, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var input = this.result_0;
            var buffer = ByteArrayBuilder_init(4096);
            var s = MemorySyncStream_0(buffer);
            var output = s;
            var encoder = new SevenZip$LzmaEncoder();
            if (!encoder.setAlgorithm_za3lpa$(this.local$algorithm))
              throw Exception_init('Incorrect compression mode');
            if (!encoder.setDictionarySize_za3lpa$(this.local$dictionarySize))
              throw Exception_init('Incorrect dictionary size');
            if (!encoder.setNumFastBytes_za3lpa$(this.local$fb))
              throw Exception_init('Incorrect -fb value');
            if (!encoder.setMatchFinder_za3lpa$(this.local$matchFinder))
              throw Exception_init('Incorrect -mf value');
            if (!encoder.setLcLpPb_qt1dr2$(this.local$lc, this.local$lp, this.local$pb))
              throw Exception_init('Incorrect -lc or -lp or -pb value');
            encoder.setEndMarkerMode_6taknv$(this.local$eos);
            encoder.writeCoderProperties_ceqwhy$(s);
            var fileSize = this.local$eos ? L_1 : Kotlin.Long.fromInt(input.length);
            write64LE_1(s, fileSize);
            encoder.code_bvprln$(openSync(input), output, L_1, L_1, null);
            var out = buffer.toByteArray();
            this.state_0 = 3;
            this.result_0 = writeBytes(this.local$o, out, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Lzma.prototype.compress_4p3hd0$$default = function (i_0, o_0, context_0, continuation_0, suspended) {
    var instance = new Coroutine$compress_4p3hd0$$default_3(this, i_0, o_0, context_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  Lzma.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Lzma',
    interfaces: [CompressionMethod]
  };
  var Lzma_instance = null;
  function Lzma_getInstance() {
    if (Lzma_instance === null) {
      new Lzma();
    }return Lzma_instance;
  }
  function SevenZip() {
    SevenZip_instance = this;
  }
  function SevenZip$ICodeProgress() {
  }
  SevenZip$ICodeProgress.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'ICodeProgress',
    interfaces: []
  };
  function SevenZip$BitTreeEncoder(numBitLevels) {
    SevenZip$BitTreeEncoder$Companion_getInstance();
    this.numBitLevels_0 = numBitLevels;
    this.models_0 = new Int16Array(1 << this.numBitLevels_0);
  }
  SevenZip$BitTreeEncoder.prototype.init = function () {
    SevenZip$RangeDecoder$Companion_getInstance().initBitModels_gmedm2$(this.models_0);
  };
  SevenZip$BitTreeEncoder.prototype.encode_m7qcon$ = function (rangeEncoder, symbol) {
    var m = 1;
    var bitIndex = this.numBitLevels_0;
    while (bitIndex !== 0) {
      bitIndex = bitIndex - 1 | 0;
      var bit = symbol >>> bitIndex & 1;
      rangeEncoder.encode_359eei$(this.models_0, m, bit);
      m = m << 1 | bit;
    }
  };
  SevenZip$BitTreeEncoder.prototype.reverseEncode_m7qcon$ = function (rangeEncoder, symbol) {
    var tmp$;
    var symbol_0 = symbol;
    var m = 1;
    tmp$ = this.numBitLevels_0;
    for (var i = 0; i < tmp$; i++) {
      var bit = symbol_0 & 1;
      rangeEncoder.encode_359eei$(this.models_0, m, bit);
      m = m << 1 | bit;
      symbol_0 = symbol_0 >> 1;
    }
  };
  SevenZip$BitTreeEncoder.prototype.getPrice_za3lpa$ = function (symbol) {
    var price = 0;
    var m = 1;
    var bitIndex = this.numBitLevels_0;
    while (bitIndex !== 0) {
      bitIndex = bitIndex - 1 | 0;
      var bit = symbol >>> bitIndex & 1;
      price = price + SevenZip$RangeEncoder$Companion_getInstance().getPrice_vux9f0$(this.models_0[m], bit) | 0;
      m = (m << 1) + bit | 0;
    }
    return price;
  };
  SevenZip$BitTreeEncoder.prototype.reverseGetPrice_za3lpa$ = function (symbol) {
    var symbol_0 = symbol;
    var price = 0;
    var m = 1;
    for (var i = this.numBitLevels_0; i >= 1; i--) {
      var bit = symbol_0 & 1;
      symbol_0 = symbol_0 >>> 1;
      price = price + SevenZip$RangeEncoder$Companion_getInstance().getPrice_vux9f0$(this.models_0[m], bit) | 0;
      m = m << 1 | bit;
    }
    return price;
  };
  function SevenZip$BitTreeEncoder$Companion() {
    SevenZip$BitTreeEncoder$Companion_instance = this;
  }
  SevenZip$BitTreeEncoder$Companion.prototype.reverseGetPrice_rbjysc$ = function (Models, startIndex, NumBitLevels, symbol) {
    var symbol_0 = symbol;
    var price = 0;
    var m = 1;
    for (var i = NumBitLevels; i >= 1; i--) {
      var bit = symbol_0 & 1;
      symbol_0 = symbol_0 >>> 1;
      price = price + SevenZip$RangeEncoder$Companion_getInstance().getPrice_vux9f0$(Models[startIndex + m | 0], bit) | 0;
      m = m << 1 | bit;
    }
    return price;
  };
  SevenZip$BitTreeEncoder$Companion.prototype.reverseEncode_wskkkj$ = function (Models, startIndex, rangeEncoder, NumBitLevels, symbol) {
    var symbol_0 = symbol;
    var m = 1;
    for (var i = 0; i < NumBitLevels; i++) {
      var bit = symbol_0 & 1;
      rangeEncoder.encode_359eei$(Models, startIndex + m | 0, bit);
      m = m << 1 | bit;
      symbol_0 = symbol_0 >> 1;
    }
  };
  SevenZip$BitTreeEncoder$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SevenZip$BitTreeEncoder$Companion_instance = null;
  function SevenZip$BitTreeEncoder$Companion_getInstance() {
    if (SevenZip$BitTreeEncoder$Companion_instance === null) {
      new SevenZip$BitTreeEncoder$Companion();
    }return SevenZip$BitTreeEncoder$Companion_instance;
  }
  SevenZip$BitTreeEncoder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BitTreeEncoder',
    interfaces: []
  };
  function SevenZip$BitTreeDecoder(numBitLevels) {
    SevenZip$BitTreeDecoder$Companion_getInstance();
    this.numBitLevels_0 = numBitLevels;
    this.models_0 = new Int16Array(1 << this.numBitLevels_0);
  }
  SevenZip$BitTreeDecoder.prototype.init = function () {
    SevenZip$RangeDecoder$Companion_getInstance().initBitModels_gmedm2$(this.models_0);
  };
  SevenZip$BitTreeDecoder.prototype.decode_zgofv1$ = function (rangeDecoder) {
    var m = 1;
    for (var bitIndex = this.numBitLevels_0; bitIndex >= 1; bitIndex--)
      m = (m << 1) + rangeDecoder.decodeBit_3y3ajg$(this.models_0, m) | 0;
    return m - (1 << this.numBitLevels_0) | 0;
  };
  SevenZip$BitTreeDecoder.prototype.reverseDecode_zgofv1$ = function (rangeDecoder) {
    var tmp$;
    var m = 1;
    var symbol = 0;
    tmp$ = this.numBitLevels_0;
    for (var bitIndex = 0; bitIndex < tmp$; bitIndex++) {
      var bit = rangeDecoder.decodeBit_3y3ajg$(this.models_0, m);
      m = m << 1;
      m = m + bit | 0;
      symbol = symbol | bit << bitIndex;
    }
    return symbol;
  };
  function SevenZip$BitTreeDecoder$Companion() {
    SevenZip$BitTreeDecoder$Companion_instance = this;
  }
  SevenZip$BitTreeDecoder$Companion.prototype.reverseDecode_2q3ht5$ = function (Models, startIndex, rangeDecoder, NumBitLevels) {
    var m = 1;
    var symbol = 0;
    for (var bitIndex = 0; bitIndex < NumBitLevels; bitIndex++) {
      var bit = rangeDecoder.decodeBit_3y3ajg$(Models, startIndex + m | 0);
      m = m << 1;
      m = m + bit | 0;
      symbol = symbol | bit << bitIndex;
    }
    return symbol;
  };
  SevenZip$BitTreeDecoder$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SevenZip$BitTreeDecoder$Companion_instance = null;
  function SevenZip$BitTreeDecoder$Companion_getInstance() {
    if (SevenZip$BitTreeDecoder$Companion_instance === null) {
      new SevenZip$BitTreeDecoder$Companion();
    }return SevenZip$BitTreeDecoder$Companion_instance;
  }
  SevenZip$BitTreeDecoder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BitTreeDecoder',
    interfaces: []
  };
  function SevenZip$RangeDecoder() {
    SevenZip$RangeDecoder$Companion_getInstance();
    this.range_8be2vx$ = 0;
    this.code_8be2vx$ = 0;
    this.stream_8be2vx$ = null;
  }
  SevenZip$RangeDecoder.prototype.setStream_sayfrj$ = function (stream) {
    this.stream_8be2vx$ = stream;
  };
  SevenZip$RangeDecoder.prototype.releaseStream = function () {
    this.stream_8be2vx$ = null;
  };
  SevenZip$RangeDecoder.prototype.init = function () {
    this.code_8be2vx$ = 0;
    this.range_8be2vx$ = -1;
    for (var i = 0; i <= 4; i++)
      this.code_8be2vx$ = this.code_8be2vx$ << 8 | ensureNotNull(this.stream_8be2vx$).read();
  };
  SevenZip$RangeDecoder.prototype.decodeDirectBits_za3lpa$ = function (numTotalBits) {
    var result = 0;
    for (var i = numTotalBits; i >= 1; i--) {
      this.range_8be2vx$ = this.range_8be2vx$ >>> 1;
      var t = this.code_8be2vx$ - this.range_8be2vx$ >>> 31;
      this.code_8be2vx$ = this.code_8be2vx$ - (this.range_8be2vx$ & t - 1) | 0;
      result = result << 1 | 1 - t;
      if ((this.range_8be2vx$ & -16777216) === 0) {
        this.code_8be2vx$ = this.code_8be2vx$ << 8 | ensureNotNull(this.stream_8be2vx$).read();
        this.range_8be2vx$ = this.range_8be2vx$ << 8;
      }}
    return result;
  };
  SevenZip$RangeDecoder.prototype.decodeBit_3y3ajg$ = function (probs, index) {
    var prob = probs[index];
    var newBound = Kotlin.imul(this.range_8be2vx$ >>> 11, prob);
    if ((this.code_8be2vx$ ^ -2147483648) < (newBound ^ -2147483648)) {
      this.range_8be2vx$ = newBound;
      probs[index] = toShort(prob + (2048 - prob >>> 5) | 0);
      if ((this.range_8be2vx$ & -16777216) === 0) {
        this.code_8be2vx$ = this.code_8be2vx$ << 8 | ensureNotNull(this.stream_8be2vx$).read();
        this.range_8be2vx$ = this.range_8be2vx$ << 8;
      }return 0;
    } else {
      this.range_8be2vx$ = this.range_8be2vx$ - newBound | 0;
      this.code_8be2vx$ = this.code_8be2vx$ - newBound | 0;
      probs[index] = toShort(prob - (prob >>> 5) | 0);
      if ((this.range_8be2vx$ & -16777216) === 0) {
        this.code_8be2vx$ = this.code_8be2vx$ << 8 | ensureNotNull(this.stream_8be2vx$).read();
        this.range_8be2vx$ = this.range_8be2vx$ << 8;
      }return 1;
    }
  };
  function SevenZip$RangeDecoder$Companion() {
    SevenZip$RangeDecoder$Companion_instance = this;
    this.kTopMask_8be2vx$ = -16777216;
    this.kNumBitModelTotalBits_8be2vx$ = 11;
    this.kBitModelTotal_8be2vx$ = 2048;
    this.kNumMoveBits_8be2vx$ = 5;
  }
  SevenZip$RangeDecoder$Companion.prototype.initBitModels_gmedm2$ = function (probs) {
    for (var i = 0; i !== probs.length; ++i) {
      probs[i] = toShort(1024);
    }
  };
  SevenZip$RangeDecoder$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SevenZip$RangeDecoder$Companion_instance = null;
  function SevenZip$RangeDecoder$Companion_getInstance() {
    if (SevenZip$RangeDecoder$Companion_instance === null) {
      new SevenZip$RangeDecoder$Companion();
    }return SevenZip$RangeDecoder$Companion_instance;
  }
  SevenZip$RangeDecoder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RangeDecoder',
    interfaces: []
  };
  function SevenZip$RangeEncoder() {
    SevenZip$RangeEncoder$Companion_getInstance();
    this.stream_8be2vx$ = null;
    this.low_0 = L0;
    this.range_8be2vx$ = 0;
    this._cacheSize_0 = 0;
    this._cache_0 = 0;
    this._position_0 = L0;
  }
  SevenZip$RangeEncoder.prototype.setStream_ceqwhy$ = function (stream) {
    this.stream_8be2vx$ = stream;
  };
  SevenZip$RangeEncoder.prototype.releaseStream = function () {
    this.stream_8be2vx$ = null;
  };
  SevenZip$RangeEncoder.prototype.init = function () {
    this._position_0 = L0;
    this.low_0 = L0;
    this.range_8be2vx$ = -1;
    this._cacheSize_0 = 1;
    this._cache_0 = 0;
  };
  SevenZip$RangeEncoder.prototype.flushData = function () {
    for (var i = 0; i <= 4; i++)
      this.shiftLow_0();
  };
  SevenZip$RangeEncoder.prototype.flushStream = function () {
    ensureNotNull(this.stream_8be2vx$).flush();
  };
  SevenZip$RangeEncoder.prototype.shiftLow_0 = function () {
    var lowHi = this.low_0.shiftRightUnsigned(32).toInt();
    if (lowHi !== 0 || this.low_0.compareTo_11rb$(L4278190080) < 0) {
      this._position_0 = this._position_0.add(Kotlin.Long.fromInt(this._cacheSize_0));
      var temp = this._cache_0;
      do {
        write8_0(ensureNotNull(this.stream_8be2vx$), temp + lowHi | 0);
        temp = 255;
      }
       while ((this._cacheSize_0 = this._cacheSize_0 - 1 | 0, this._cacheSize_0) !== 0);
      this._cache_0 = this.low_0.toInt() >>> 24;
    }this._cacheSize_0 = this._cacheSize_0 + 1 | 0;
    this.low_0 = this.low_0.and(L16777215).shiftLeft(8);
  };
  SevenZip$RangeEncoder.prototype.encodeDirectBits_vux9f0$ = function (v, numTotalBits) {
    for (var i = numTotalBits - 1 | 0; i >= 0; i--) {
      this.range_8be2vx$ = this.range_8be2vx$ >>> 1;
      if ((v >>> i & 1) === 1)
        this.low_0 = this.low_0.add(Kotlin.Long.fromInt(this.range_8be2vx$));
      if ((this.range_8be2vx$ & -16777216) === 0) {
        this.range_8be2vx$ = this.range_8be2vx$ << 8;
        this.shiftLow_0();
      }}
  };
  SevenZip$RangeEncoder.prototype.getProcessedSizeAdd = function () {
    return Kotlin.Long.fromInt(this._cacheSize_0).add(this._position_0).add(Kotlin.Long.fromInt(4));
  };
  SevenZip$RangeEncoder.prototype.encode_359eei$ = function (probs, index, symbol) {
    var prob = probs[index];
    var newBound = Kotlin.imul(this.range_8be2vx$ >>> 11, prob);
    if (symbol === 0) {
      this.range_8be2vx$ = newBound;
      probs[index] = toShort(prob + (2048 - prob >>> 5) | 0);
    } else {
      this.low_0 = this.low_0.add(Kotlin.Long.fromInt(newBound & -1));
      this.range_8be2vx$ = this.range_8be2vx$ - newBound | 0;
      probs[index] = toShort(prob - (prob >>> 5) | 0);
    }
    if ((this.range_8be2vx$ & -16777216) === 0) {
      this.range_8be2vx$ = this.range_8be2vx$ << 8;
      this.shiftLow_0();
    }};
  function SevenZip$RangeEncoder$Companion() {
    SevenZip$RangeEncoder$Companion_instance = this;
    this.kTopMask_8be2vx$ = -16777216;
    this.kNumBitModelTotalBits_8be2vx$ = 11;
    this.kBitModelTotal_8be2vx$ = 2048;
    this.kNumMoveBits_8be2vx$ = 5;
    this.kNumMoveReducingBits_0 = 2;
    this.kNumBitPriceShiftBits = 6;
    this.probPrices_0 = new Int32Array(512);
    var kNumBits = 9;
    for (var i = kNumBits - 1 | 0; i >= 0; i--) {
      var start = 1 << kNumBits - i - 1;
      var end = 1 << kNumBits - i;
      for (var j = start; j < end; j++)
        this.probPrices_0[j] = (i << 6) + (end - j << 6 >>> kNumBits - i - 1) | 0;
    }
  }
  SevenZip$RangeEncoder$Companion.prototype.initBitModels_gmedm2$ = function (probs) {
    for (var i = 0; i !== probs.length; ++i) {
      probs[i] = toShort(1024);
    }
  };
  SevenZip$RangeEncoder$Companion.prototype.getPrice_vux9f0$ = function (Prob, symbol) {
    return this.probPrices_0[((Prob - symbol ^ (-symbol | 0)) & 2047) >>> 2];
  };
  SevenZip$RangeEncoder$Companion.prototype.getPrice0_za3lpa$ = function (Prob) {
    return this.probPrices_0[Prob >>> 2];
  };
  SevenZip$RangeEncoder$Companion.prototype.getPrice1_za3lpa$ = function (Prob) {
    return this.probPrices_0[2048 - Prob >>> 2];
  };
  SevenZip$RangeEncoder$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SevenZip$RangeEncoder$Companion_instance = null;
  function SevenZip$RangeEncoder$Companion_getInstance() {
    if (SevenZip$RangeEncoder$Companion_instance === null) {
      new SevenZip$RangeEncoder$Companion();
    }return SevenZip$RangeEncoder$Companion_instance;
  }
  SevenZip$RangeEncoder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RangeEncoder',
    interfaces: []
  };
  function SevenZip$LzmaBase() {
    SevenZip$LzmaBase_instance = this;
    this.kNumRepDistances = 4;
    this.kNumStates = 12;
    this.kNumPosSlotBits = 6;
    this.kDicLogSizeMin = 0;
    this.kNumLenToPosStatesBits = 2;
    this.kNumLenToPosStates = 4;
    this.kMatchMinLen = 2;
    this.kNumAlignBits = 4;
    this.kAlignTableSize = 16;
    this.kAlignMask = 15;
    this.kStartPosModelIndex = 4;
    this.kEndPosModelIndex = 14;
    this.kNumFullDistances = 128;
    this.kNumLitPosStatesBitsEncodingMax = 4;
    this.kNumLitContextBitsMax = 8;
    this.kNumPosStatesBitsMax = 4;
    this.kNumPosStatesMax = 16;
    this.kNumPosStatesBitsEncodingMax = 4;
    this.kNumPosStatesEncodingMax = 16;
    this.kNumLowLenBits = 3;
    this.kNumMidLenBits = 3;
    this.kNumHighLenBits = 8;
    this.kNumLowLenSymbols = 8;
    this.kNumMidLenSymbols = 8;
    this.kNumLenSymbols = 272;
    this.kMatchMaxLen = 273;
  }
  SevenZip$LzmaBase.prototype.stateInit = function () {
    return 0;
  };
  SevenZip$LzmaBase.prototype.stateUpdateChar_za3lpa$ = function (index) {
    if (index < 4)
      return 0;
    else if (index < 10)
      return index - 3 | 0;
    else
      return index - 6 | 0;
  };
  SevenZip$LzmaBase.prototype.stateUpdateMatch_za3lpa$ = function (index) {
    return index < 7 ? 7 : 10;
  };
  SevenZip$LzmaBase.prototype.stateUpdateRep_za3lpa$ = function (index) {
    return index < 7 ? 8 : 11;
  };
  SevenZip$LzmaBase.prototype.stateUpdateShortRep_za3lpa$ = function (index) {
    return index < 7 ? 9 : 11;
  };
  SevenZip$LzmaBase.prototype.stateIsCharState_za3lpa$ = function (index) {
    return index < 7;
  };
  SevenZip$LzmaBase.prototype.getLenToPosState_za3lpa$ = function (len) {
    var len_0 = len;
    len_0 = len_0 - 2 | 0;
    return len_0 < 4 ? len_0 : 3;
  };
  SevenZip$LzmaBase.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'LzmaBase',
    interfaces: []
  };
  var SevenZip$LzmaBase_instance = null;
  function SevenZip$LzmaBase_getInstance() {
    if (SevenZip$LzmaBase_instance === null) {
      new SevenZip$LzmaBase();
    }return SevenZip$LzmaBase_instance;
  }
  function SevenZip$LzmaDecoder() {
    this.m_OutWindow_0 = new SevenZip$LzOutWindow();
    this.m_RangeDecoder_0 = new SevenZip$RangeDecoder();
    this.m_IsMatchDecoders_0 = new Int16Array(192);
    this.m_IsRepDecoders_0 = new Int16Array(12);
    this.m_IsRepG0Decoders_0 = new Int16Array(12);
    this.m_IsRepG1Decoders_0 = new Int16Array(12);
    this.m_IsRepG2Decoders_0 = new Int16Array(12);
    this.m_IsRep0LongDecoders_0 = new Int16Array(192);
    this.m_PosSlotDecoder_0 = Kotlin.newArray(4, null);
    this.m_PosDecoders_0 = new Int16Array(114);
    this.m_PosAlignDecoder_0 = new SevenZip$BitTreeDecoder(4);
    this.m_LenDecoder_0 = new SevenZip$LzmaDecoder$LenDecoder(this);
    this.m_RepLenDecoder_0 = new SevenZip$LzmaDecoder$LenDecoder(this);
    this.m_LiteralDecoder_0 = new SevenZip$LzmaDecoder$LiteralDecoder(this);
    this.m_DictionarySize_0 = -1;
    this.m_DictionarySizeCheck_0 = -1;
    this.m_PosStateMask_0 = 0;
    for (var i = 0; i < 4; i++)
      this.m_PosSlotDecoder_0[i] = new SevenZip$BitTreeDecoder(6);
  }
  function SevenZip$LzmaDecoder$LenDecoder($outer) {
    this.$outer = $outer;
    this.m_Choice_0 = new Int16Array(2);
    this.m_LowCoder_0 = Kotlin.newArray(16, null);
    this.m_MidCoder_0 = Kotlin.newArray(16, null);
    this.m_HighCoder_0 = new SevenZip$BitTreeDecoder(8);
    this.m_NumPosStates_0 = 0;
  }
  SevenZip$LzmaDecoder$LenDecoder.prototype.create_za3lpa$ = function (numPosStates) {
    while (this.m_NumPosStates_0 < numPosStates) {
      this.m_LowCoder_0[this.m_NumPosStates_0] = new SevenZip$BitTreeDecoder(3);
      this.m_MidCoder_0[this.m_NumPosStates_0] = new SevenZip$BitTreeDecoder(3);
      this.m_NumPosStates_0 = this.m_NumPosStates_0 + 1 | 0;
    }
  };
  SevenZip$LzmaDecoder$LenDecoder.prototype.init = function () {
    var tmp$;
    SevenZip$RangeDecoder$Companion_getInstance().initBitModels_gmedm2$(this.m_Choice_0);
    tmp$ = this.m_NumPosStates_0;
    for (var posState = 0; posState < tmp$; posState++) {
      ensureNotNull(this.m_LowCoder_0[posState]).init();
      ensureNotNull(this.m_MidCoder_0[posState]).init();
    }
    this.m_HighCoder_0.init();
  };
  SevenZip$LzmaDecoder$LenDecoder.prototype.decode_5xpf6p$ = function (rangeDecoder, posState) {
    if (rangeDecoder.decodeBit_3y3ajg$(this.m_Choice_0, 0) === 0)
      return ensureNotNull(this.m_LowCoder_0[posState]).decode_zgofv1$(rangeDecoder);
    var symbol = 8;
    symbol = symbol + (rangeDecoder.decodeBit_3y3ajg$(this.m_Choice_0, 1) === 0 ? ensureNotNull(this.m_MidCoder_0[posState]).decode_zgofv1$(rangeDecoder) : 8 + this.m_HighCoder_0.decode_zgofv1$(rangeDecoder) | 0) | 0;
    return symbol;
  };
  SevenZip$LzmaDecoder$LenDecoder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LenDecoder',
    interfaces: []
  };
  function SevenZip$LzmaDecoder$LiteralDecoder($outer) {
    this.$outer = $outer;
    this.m_Coders_0 = null;
    this.m_NumPrevBits_0 = 0;
    this.m_NumPosBits_0 = 0;
    this.m_PosMask_0 = 0;
  }
  function SevenZip$LzmaDecoder$LiteralDecoder$Decoder2($outer) {
    this.$outer = $outer;
    this.m_Decoders_0 = new Int16Array(768);
  }
  SevenZip$LzmaDecoder$LiteralDecoder$Decoder2.prototype.init = function () {
    SevenZip$RangeDecoder$Companion_getInstance().initBitModels_gmedm2$(this.m_Decoders_0);
  };
  SevenZip$LzmaDecoder$LiteralDecoder$Decoder2.prototype.decodeNormal_zgofv1$ = function (rangeDecoder) {
    var symbol = 1;
    do {
      symbol = symbol << 1 | rangeDecoder.decodeBit_3y3ajg$(this.m_Decoders_0, symbol);
    }
     while (symbol < 256);
    return toByte(symbol);
  };
  SevenZip$LzmaDecoder$LiteralDecoder$Decoder2.prototype.decodeWithMatchByte_t2kbu2$ = function (rangeDecoder, matchByte) {
    var matchByte_0 = matchByte;
    var symbol = 1;
    do {
      var matchBit = shr(matchByte_0, 7) & 1;
      matchByte_0 = toByte(shl(matchByte_0, 1));
      var bit = rangeDecoder.decodeBit_3y3ajg$(this.m_Decoders_0, (1 + matchBit << 8) + symbol | 0);
      symbol = symbol << 1 | bit;
      if (matchBit !== bit) {
        while (symbol < 256)
          symbol = symbol << 1 | rangeDecoder.decodeBit_3y3ajg$(this.m_Decoders_0, symbol);
        break;
      }}
     while (symbol < 256);
    return toByte(symbol);
  };
  SevenZip$LzmaDecoder$LiteralDecoder$Decoder2.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Decoder2',
    interfaces: []
  };
  SevenZip$LzmaDecoder$LiteralDecoder.prototype.create_vux9f0$ = function (numPosBits, numPrevBits) {
    if (this.m_Coders_0 != null && this.m_NumPrevBits_0 === numPrevBits && this.m_NumPosBits_0 === numPosBits)
      return;
    this.m_NumPosBits_0 = numPosBits;
    this.m_PosMask_0 = (1 << numPosBits) - 1 | 0;
    this.m_NumPrevBits_0 = numPrevBits;
    var numStates = 1 << this.m_NumPrevBits_0 + this.m_NumPosBits_0;
    var array = Array_0(numStates);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new SevenZip$LzmaDecoder$LiteralDecoder$Decoder2(this);
    }
    this.m_Coders_0 = array;
  };
  SevenZip$LzmaDecoder$LiteralDecoder.prototype.init = function () {
    var numStates = 1 << this.m_NumPrevBits_0 + this.m_NumPosBits_0;
    for (var i = 0; i < numStates; i++)
      ensureNotNull(this.m_Coders_0)[i].init();
  };
  SevenZip$LzmaDecoder$LiteralDecoder.prototype.getDecoder_6t1wet$ = function (pos, prevByte) {
    return ensureNotNull(this.m_Coders_0)[((pos & this.m_PosMask_0) << this.m_NumPrevBits_0) + (and(prevByte, 255) >>> 8 - this.m_NumPrevBits_0) | 0];
  };
  SevenZip$LzmaDecoder$LiteralDecoder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LiteralDecoder',
    interfaces: []
  };
  SevenZip$LzmaDecoder.prototype.setDictionarySize_0 = function (dictionarySize) {
    if (dictionarySize < 0)
      return false;
    if (this.m_DictionarySize_0 !== dictionarySize) {
      this.m_DictionarySize_0 = dictionarySize;
      var a = this.m_DictionarySize_0;
      this.m_DictionarySizeCheck_0 = Math_0.max(a, 1);
      var tmp$ = this.m_OutWindow_0;
      var a_0 = this.m_DictionarySizeCheck_0;
      tmp$.create_za3lpa$(Math_0.max(a_0, 4096));
    }return true;
  };
  SevenZip$LzmaDecoder.prototype.setLcLpPb_0 = function (lc, lp, pb) {
    if (lc > 8 || lp > 4 || pb > 4)
      return false;
    this.m_LiteralDecoder_0.create_vux9f0$(lp, lc);
    var numPosStates = 1 << pb;
    this.m_LenDecoder_0.create_za3lpa$(numPosStates);
    this.m_RepLenDecoder_0.create_za3lpa$(numPosStates);
    this.m_PosStateMask_0 = numPosStates - 1 | 0;
    return true;
  };
  SevenZip$LzmaDecoder.prototype.init_8be2vx$ = function () {
    this.m_OutWindow_0.init_6taknv$(false);
    SevenZip$RangeDecoder$Companion_getInstance().initBitModels_gmedm2$(this.m_IsMatchDecoders_0);
    SevenZip$RangeDecoder$Companion_getInstance().initBitModels_gmedm2$(this.m_IsRep0LongDecoders_0);
    SevenZip$RangeDecoder$Companion_getInstance().initBitModels_gmedm2$(this.m_IsRepDecoders_0);
    SevenZip$RangeDecoder$Companion_getInstance().initBitModels_gmedm2$(this.m_IsRepG0Decoders_0);
    SevenZip$RangeDecoder$Companion_getInstance().initBitModels_gmedm2$(this.m_IsRepG1Decoders_0);
    SevenZip$RangeDecoder$Companion_getInstance().initBitModels_gmedm2$(this.m_IsRepG2Decoders_0);
    SevenZip$RangeDecoder$Companion_getInstance().initBitModels_gmedm2$(this.m_PosDecoders_0);
    this.m_LiteralDecoder_0.init();
    for (var i = 0; i < 4; i++)
      ensureNotNull(this.m_PosSlotDecoder_0[i]).init();
    this.m_LenDecoder_0.init();
    this.m_RepLenDecoder_0.init();
    this.m_PosAlignDecoder_0.init();
    this.m_RangeDecoder_0.init();
  };
  SevenZip$LzmaDecoder.prototype.code_ybf00i$ = function (inStream, outStream, outSize) {
    this.m_RangeDecoder_0.setStream_sayfrj$(inStream);
    this.m_OutWindow_0.setStream_ceqwhy$(outStream);
    this.init_8be2vx$();
    var state = SevenZip$LzmaBase_getInstance().stateInit();
    var rep0 = 0;
    var rep1 = 0;
    var rep2 = 0;
    var rep3 = 0;
    var nowPos64 = L0;
    var prevByte = 0;
    while (outSize.toNumber() < 0 || nowPos64.compareTo_11rb$(outSize) < 0) {
      var posState = nowPos64.toInt() & this.m_PosStateMask_0;
      if (this.m_RangeDecoder_0.decodeBit_3y3ajg$(this.m_IsMatchDecoders_0, (state << 4) + posState | 0) === 0) {
        var decoder2 = this.m_LiteralDecoder_0.getDecoder_6t1wet$(nowPos64.toInt(), prevByte);
        prevByte = !SevenZip$LzmaBase_getInstance().stateIsCharState_za3lpa$(state) ? decoder2.decodeWithMatchByte_t2kbu2$(this.m_RangeDecoder_0, this.m_OutWindow_0.getByte_za3lpa$(rep0)) : decoder2.decodeNormal_zgofv1$(this.m_RangeDecoder_0);
        this.m_OutWindow_0.putByte_s8j3t7$(prevByte);
        state = SevenZip$LzmaBase_getInstance().stateUpdateChar_za3lpa$(state);
        nowPos64 = nowPos64.inc();
      } else {
        var len;
        if (this.m_RangeDecoder_0.decodeBit_3y3ajg$(this.m_IsRepDecoders_0, state) === 1) {
          len = 0;
          if (this.m_RangeDecoder_0.decodeBit_3y3ajg$(this.m_IsRepG0Decoders_0, state) === 0) {
            if (this.m_RangeDecoder_0.decodeBit_3y3ajg$(this.m_IsRep0LongDecoders_0, (state << 4) + posState | 0) === 0) {
              state = SevenZip$LzmaBase_getInstance().stateUpdateShortRep_za3lpa$(state);
              len = 1;
            }} else {
            var distance;
            if (this.m_RangeDecoder_0.decodeBit_3y3ajg$(this.m_IsRepG1Decoders_0, state) === 0)
              distance = rep1;
            else {
              if (this.m_RangeDecoder_0.decodeBit_3y3ajg$(this.m_IsRepG2Decoders_0, state) === 0)
                distance = rep2;
              else {
                distance = rep3;
                rep3 = rep2;
              }
              rep2 = rep1;
            }
            rep1 = rep0;
            rep0 = distance;
          }
          if (len === 0) {
            len = this.m_RepLenDecoder_0.decode_5xpf6p$(this.m_RangeDecoder_0, posState) + 2 | 0;
            state = SevenZip$LzmaBase_getInstance().stateUpdateRep_za3lpa$(state);
          }} else {
          rep3 = rep2;
          rep2 = rep1;
          rep1 = rep0;
          len = 2 + this.m_LenDecoder_0.decode_5xpf6p$(this.m_RangeDecoder_0, posState) | 0;
          state = SevenZip$LzmaBase_getInstance().stateUpdateMatch_za3lpa$(state);
          var posSlot = ensureNotNull(this.m_PosSlotDecoder_0[SevenZip$LzmaBase_getInstance().getLenToPosState_za3lpa$(len)]).decode_zgofv1$(this.m_RangeDecoder_0);
          if (posSlot >= 4) {
            var numDirectBits = (posSlot >> 1) - 1 | 0;
            rep0 = (2 | posSlot & 1) << numDirectBits;
            if (posSlot < 14)
              rep0 = rep0 + SevenZip$BitTreeDecoder$Companion_getInstance().reverseDecode_2q3ht5$(this.m_PosDecoders_0, rep0 - posSlot - 1 | 0, this.m_RangeDecoder_0, numDirectBits) | 0;
            else {
              rep0 = rep0 + (this.m_RangeDecoder_0.decodeDirectBits_za3lpa$(numDirectBits - 4 | 0) << 4) | 0;
              rep0 = rep0 + this.m_PosAlignDecoder_0.reverseDecode_zgofv1$(this.m_RangeDecoder_0) | 0;
              if (rep0 < 0) {
                if (rep0 === -1)
                  break;
                return false;
              }}
          } else
            rep0 = posSlot;
        }
        if (rep0 >= nowPos64.toNumber() || rep0 >= this.m_DictionarySizeCheck_0) {
          return false;
        }this.m_OutWindow_0.copyBlock_vux9f0$(rep0, len);
        nowPos64 = nowPos64.add(Kotlin.Long.fromInt(len));
        prevByte = this.m_OutWindow_0.getByte_za3lpa$(0);
      }
    }
    this.m_OutWindow_0.flush();
    this.m_OutWindow_0.releaseStream();
    this.m_RangeDecoder_0.releaseStream();
    return true;
  };
  SevenZip$LzmaDecoder.prototype.setDecoderProperties_fqrh44$ = function (properties) {
    if (properties.length < 5)
      return false;
    var val = and(properties[0], 255);
    var lc = val % 9;
    var remainder = val / 9 | 0;
    var lp = remainder % 5;
    var pb = remainder / 5 | 0;
    var dictionarySize = 0;
    for (var i = 0; i <= 3; i++)
      dictionarySize = dictionarySize + ((properties[1 + i | 0] & 255) << (i * 8 | 0)) | 0;
    return !this.setLcLpPb_0(lc, lp, pb) ? false : this.setDictionarySize_0(dictionarySize);
  };
  SevenZip$LzmaDecoder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LzmaDecoder',
    interfaces: []
  };
  function SevenZip$LzmaEncoder() {
    SevenZip$LzmaEncoder$Companion_getInstance();
    this._state_0 = SevenZip$LzmaBase_getInstance().stateInit();
    this._previousByte_0 = 0;
    this._repDistances_0 = new Int32Array(4);
    var array = Array_0(4096);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new SevenZip$LzmaEncoder$Optimal(this);
    }
    this._optimum_0 = array;
    this._matchFinder_0 = null;
    this._rangeEncoder_0 = new SevenZip$RangeEncoder();
    this._isMatch_0 = new Int16Array(192);
    this._isRep_0 = new Int16Array(12);
    this._isRepG0_0 = new Int16Array(12);
    this._isRepG1_0 = new Int16Array(12);
    this._isRepG2_0 = new Int16Array(12);
    this._isRep0Long_0 = new Int16Array(192);
    var array_0 = Array_0(4);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = new SevenZip$BitTreeEncoder(6);
    }
    this._posSlotEncoder_0 = array_0;
    this._posEncoders_0 = new Int16Array(114);
    this._posAlignEncoder_0 = new SevenZip$BitTreeEncoder(4);
    this._lenEncoder_0 = new SevenZip$LzmaEncoder$LenPriceTableEncoder(this);
    this._repMatchLenEncoder_0 = new SevenZip$LzmaEncoder$LenPriceTableEncoder(this);
    this._literalEncoder_0 = new SevenZip$LzmaEncoder$LiteralEncoder(this);
    this._matchDistances_0 = new Int32Array(548);
    this._numFastBytes_0 = 32;
    this._longestMatchLength_0 = 0;
    this._numDistancePairs_0 = 0;
    this._additionalOffset_0 = 0;
    this._optimumEndIndex_0 = 0;
    this._optimumCurrentIndex_0 = 0;
    this._longestMatchWasFound_0 = false;
    this._posSlotPrices_0 = new Int32Array(256);
    this._distancesPrices_0 = new Int32Array(512);
    this._alignPrices_0 = new Int32Array(16);
    this._alignPriceCount_0 = 0;
    this._distTableSize_0 = 44;
    this._posStateBits_0 = 2;
    this._posStateMask_0 = 3;
    this._numLiteralPosStateBits_0 = 0;
    this._numLiteralContextBits_0 = 3;
    this._dictionarySize_0 = 4194304;
    this._dictionarySizePrev_0 = -1;
    this._numFastBytesPrev_0 = -1;
    this.nowPos64_0 = L0;
    this._finished_0 = false;
    this._inStream_0 = null;
    this._matchFinderType_0 = 1;
    this._writeEndMark_0 = false;
    this._needReleaseMFStream_0 = false;
    this.reps_0 = new Int32Array(4);
    this.repLens_0 = new Int32Array(4);
    this.backRes_0 = 0;
    this.processedInSize_0 = Kotlin.longArray(1);
    this.processedOutSize_0 = Kotlin.longArray(1);
    this.finished_0 = Kotlin.booleanArray(1);
    this.properties_0 = new Int8Array(5);
    this.tempPrices_0 = new Int32Array(128);
    this._matchPriceCount_0 = 0;
  }
  SevenZip$LzmaEncoder.prototype.baseInit_0 = function () {
    this._state_0 = SevenZip$LzmaBase_getInstance().stateInit();
    this._previousByte_0 = 0;
    for (var i = 0; i < 4; i++)
      this._repDistances_0[i] = 0;
  };
  function SevenZip$LzmaEncoder$LiteralEncoder($outer) {
    this.$outer = $outer;
    this.m_Coders_0 = null;
    this.m_NumPrevBits_0 = 0;
    this.m_NumPosBits_0 = 0;
    this.m_PosMask_0 = 0;
  }
  function SevenZip$LzmaEncoder$LiteralEncoder$Encoder2($outer) {
    this.$outer = $outer;
    this.m_Encoders_0 = new Int16Array(768);
  }
  SevenZip$LzmaEncoder$LiteralEncoder$Encoder2.prototype.init = function () {
    SevenZip$RangeEncoder$Companion_getInstance().initBitModels_gmedm2$(this.m_Encoders_0);
  };
  SevenZip$LzmaEncoder$LiteralEncoder$Encoder2.prototype.encode_lnbdv2$ = function (rangeEncoder, symbol) {
    var context = 1;
    for (var i = 7; i >= 0; i--) {
      var bit = shr(symbol, i) & 1;
      rangeEncoder.encode_359eei$(this.m_Encoders_0, context, bit);
      context = context << 1 | bit;
    }
  };
  SevenZip$LzmaEncoder$LiteralEncoder$Encoder2.prototype.encodeMatched_ocrm4p$ = function (rangeEncoder, matchByte, symbol) {
    var context = 1;
    var same = true;
    for (var i = 7; i >= 0; i--) {
      var bit = shr(symbol, i) & 1;
      var state = context;
      if (same) {
        var matchBit = shr(matchByte, i) & 1;
        state = state + (1 + matchBit << 8) | 0;
        same = matchBit === bit;
      }rangeEncoder.encode_359eei$(this.m_Encoders_0, state, bit);
      context = context << 1 | bit;
    }
  };
  SevenZip$LzmaEncoder$LiteralEncoder$Encoder2.prototype.getPrice_udr4r7$ = function (matchMode, matchByte, symbol) {
    var price = 0;
    var context = 1;
    var i = 7;
    if (matchMode) {
      while (i >= 0) {
        var matchBit = shr(matchByte, i) & 1;
        var bit = shr(symbol, i) & 1;
        price = price + SevenZip$RangeEncoder$Companion_getInstance().getPrice_vux9f0$(this.m_Encoders_0[(1 + matchBit << 8) + context | 0], bit) | 0;
        context = context << 1 | bit;
        if (matchBit !== bit) {
          i = i - 1 | 0;
          break;
        }i = i - 1 | 0;
      }
    }while (i >= 0) {
      var bit_0 = shr(symbol, i) & 1;
      price = price + SevenZip$RangeEncoder$Companion_getInstance().getPrice_vux9f0$(this.m_Encoders_0[context], bit_0) | 0;
      context = context << 1 | bit_0;
      i = i - 1 | 0;
    }
    return price;
  };
  SevenZip$LzmaEncoder$LiteralEncoder$Encoder2.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Encoder2',
    interfaces: []
  };
  SevenZip$LzmaEncoder$LiteralEncoder.prototype.create_vux9f0$ = function (numPosBits, numPrevBits) {
    if (this.m_Coders_0 != null && this.m_NumPrevBits_0 === numPrevBits && this.m_NumPosBits_0 === numPosBits)
      return;
    this.m_NumPosBits_0 = numPosBits;
    this.m_PosMask_0 = (1 << numPosBits) - 1 | 0;
    this.m_NumPrevBits_0 = numPrevBits;
    var numStates = 1 << this.m_NumPrevBits_0 + this.m_NumPosBits_0;
    var array = Array_0(numStates);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new SevenZip$LzmaEncoder$LiteralEncoder$Encoder2(this);
    }
    this.m_Coders_0 = array;
  };
  SevenZip$LzmaEncoder$LiteralEncoder.prototype.init = function () {
    var numStates = 1 << this.m_NumPrevBits_0 + this.m_NumPosBits_0;
    for (var i = 0; i < numStates; i++)
      ensureNotNull(this.m_Coders_0)[i].init();
  };
  SevenZip$LzmaEncoder$LiteralEncoder.prototype.getSubCoder_6t1wet$ = function (pos, prevByte) {
    return ensureNotNull(this.m_Coders_0)[((pos & this.m_PosMask_0) << this.m_NumPrevBits_0) + (and(prevByte, 255) >>> 8 - this.m_NumPrevBits_0) | 0];
  };
  SevenZip$LzmaEncoder$LiteralEncoder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LiteralEncoder',
    interfaces: []
  };
  function SevenZip$LzmaEncoder$LenEncoder($outer) {
    this.$outer = $outer;
    this._choice_0 = new Int16Array(2);
    var array = Array_0(16);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = new SevenZip$BitTreeEncoder(3);
    }
    this._lowCoder_0 = array;
    var array_0 = Array_0(16);
    var tmp$_0;
    tmp$_0 = array_0.length - 1 | 0;
    for (var i_0 = 0; i_0 <= tmp$_0; i_0++) {
      array_0[i_0] = new SevenZip$BitTreeEncoder(3);
    }
    this._midCoder_0 = array_0;
    this._highCoder_0 = new SevenZip$BitTreeEncoder(8);
  }
  SevenZip$LzmaEncoder$LenEncoder.prototype.init_za3lpa$ = function (numPosStates) {
    SevenZip$RangeEncoder$Companion_getInstance().initBitModels_gmedm2$(this._choice_0);
    for (var posState = 0; posState < numPosStates; posState++) {
      this._lowCoder_0[posState].init();
      this._midCoder_0[posState].init();
    }
    this._highCoder_0.init();
  };
  SevenZip$LzmaEncoder$LenEncoder.prototype.encode_x31iud$ = function (rangeEncoder, symbol, posState) {
    var sym = symbol;
    if (sym < 8) {
      rangeEncoder.encode_359eei$(this._choice_0, 0, 0);
      this._lowCoder_0[posState].encode_m7qcon$(rangeEncoder, sym);
    } else {
      sym = sym - 8 | 0;
      rangeEncoder.encode_359eei$(this._choice_0, 0, 1);
      if (sym < 8) {
        rangeEncoder.encode_359eei$(this._choice_0, 1, 0);
        this._midCoder_0[posState].encode_m7qcon$(rangeEncoder, sym);
      } else {
        rangeEncoder.encode_359eei$(this._choice_0, 1, 1);
        this._highCoder_0.encode_m7qcon$(rangeEncoder, sym - 8 | 0);
      }
    }
  };
  SevenZip$LzmaEncoder$LenEncoder.prototype.setPrices_j45w6h$ = function (posState, numSymbols, prices, st) {
    var a0 = SevenZip$RangeEncoder$Companion_getInstance().getPrice0_za3lpa$(this._choice_0[0]);
    var a1 = SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._choice_0[0]);
    var b0 = a1 + SevenZip$RangeEncoder$Companion_getInstance().getPrice0_za3lpa$(this._choice_0[1]) | 0;
    var b1 = a1 + SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._choice_0[1]) | 0;
    var i = 0;
    while (i < 8) {
      if (i >= numSymbols)
        return;
      prices[st + i | 0] = a0 + this._lowCoder_0[posState].getPrice_za3lpa$(i) | 0;
      i = i + 1 | 0;
    }
    while (i < 16) {
      if (i >= numSymbols)
        return;
      prices[st + i | 0] = b0 + this._midCoder_0[posState].getPrice_za3lpa$(i - 8 | 0) | 0;
      i = i + 1 | 0;
    }
    while (i < numSymbols) {
      prices[st + i | 0] = b1 + this._highCoder_0.getPrice_za3lpa$(i - 8 - 8 | 0) | 0;
      i = i + 1 | 0;
    }
  };
  SevenZip$LzmaEncoder$LenEncoder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LenEncoder',
    interfaces: []
  };
  function SevenZip$LzmaEncoder$LenPriceTableEncoder($outer) {
    this.$outer = $outer;
    SevenZip$LzmaEncoder$LenEncoder.call(this, this.$outer);
    this._prices_0 = new Int32Array(4352);
    this._tableSize_0 = 0;
    this._counters_0 = new Int32Array(16);
  }
  SevenZip$LzmaEncoder$LenPriceTableEncoder.prototype.setTableSize_za3lpa$ = function (tableSize) {
    this._tableSize_0 = tableSize;
  };
  SevenZip$LzmaEncoder$LenPriceTableEncoder.prototype.getPrice_vux9f0$ = function (symbol, posState) {
    return this._prices_0[(posState * 272 | 0) + symbol | 0];
  };
  SevenZip$LzmaEncoder$LenPriceTableEncoder.prototype.updateTable_0 = function (posState) {
    this.setPrices_j45w6h$(posState, this._tableSize_0, this._prices_0, posState * 272 | 0);
    this._counters_0[posState] = this._tableSize_0;
  };
  SevenZip$LzmaEncoder$LenPriceTableEncoder.prototype.updateTables_za3lpa$ = function (numPosStates) {
    for (var posState = 0; posState < numPosStates; posState++)
      this.updateTable_0(posState);
  };
  SevenZip$LzmaEncoder$LenPriceTableEncoder.prototype.encode_x31iud$ = function (rangeEncoder, symbol, posState) {
    SevenZip$LzmaEncoder$LenEncoder.prototype.encode_x31iud$.call(this, rangeEncoder, symbol, posState);
    var tmp$;
    tmp$ = this._counters_0;
    tmp$[posState] = tmp$[posState] - 1 | 0;
    if (tmp$[posState] === 0)
      this.updateTable_0(posState);
  };
  SevenZip$LzmaEncoder$LenPriceTableEncoder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LenPriceTableEncoder',
    interfaces: [SevenZip$LzmaEncoder$LenEncoder]
  };
  function SevenZip$LzmaEncoder$Optimal($outer) {
    this.$outer = $outer;
    this.state = 0;
    this.prev1IsChar = false;
    this.prev2 = false;
    this.posPrev2 = 0;
    this.backPrev2 = 0;
    this.price = 0;
    this.posPrev = 0;
    this.backPrev = 0;
    this.backs0 = 0;
    this.backs1 = 0;
    this.backs2 = 0;
    this.backs3 = 0;
  }
  SevenZip$LzmaEncoder$Optimal.prototype.makeAsChar = function () {
    this.backPrev = -1;
    this.prev1IsChar = false;
  };
  SevenZip$LzmaEncoder$Optimal.prototype.makeAsShortRep = function () {
    this.backPrev = 0;
    this.prev1IsChar = false;
  };
  SevenZip$LzmaEncoder$Optimal.prototype.isShortRep = function () {
    return this.backPrev === 0;
  };
  SevenZip$LzmaEncoder$Optimal.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Optimal',
    interfaces: []
  };
  SevenZip$LzmaEncoder.prototype.create_8be2vx$ = function () {
    if (this._matchFinder_0 == null) {
      var bt = new SevenZip$LzBinTree();
      var numHashBytes = 4;
      if (this._matchFinderType_0 === 0)
        numHashBytes = 2;
      bt.setType_za3lpa$(numHashBytes);
      this._matchFinder_0 = bt;
    }this._literalEncoder_0.create_vux9f0$(this._numLiteralPosStateBits_0, this._numLiteralContextBits_0);
    if (this._dictionarySize_0 === this._dictionarySizePrev_0 && this._numFastBytesPrev_0 === this._numFastBytes_0)
      return;
    ensureNotNull(this._matchFinder_0).create_tjonv8$(this._dictionarySize_0, 4096, this._numFastBytes_0, 274);
    this._dictionarySizePrev_0 = this._dictionarySize_0;
    this._numFastBytesPrev_0 = this._numFastBytes_0;
  };
  SevenZip$LzmaEncoder.prototype.init_8be2vx$ = function () {
    this.baseInit_0();
    this._rangeEncoder_0.init();
    SevenZip$RangeEncoder$Companion_getInstance().initBitModels_gmedm2$(this._isMatch_0);
    SevenZip$RangeEncoder$Companion_getInstance().initBitModels_gmedm2$(this._isRep0Long_0);
    SevenZip$RangeEncoder$Companion_getInstance().initBitModels_gmedm2$(this._isRep_0);
    SevenZip$RangeEncoder$Companion_getInstance().initBitModels_gmedm2$(this._isRepG0_0);
    SevenZip$RangeEncoder$Companion_getInstance().initBitModels_gmedm2$(this._isRepG1_0);
    SevenZip$RangeEncoder$Companion_getInstance().initBitModels_gmedm2$(this._isRepG2_0);
    SevenZip$RangeEncoder$Companion_getInstance().initBitModels_gmedm2$(this._posEncoders_0);
    this._literalEncoder_0.init();
    for (var i = 0; i < 4; i++) {
      this._posSlotEncoder_0[i].init();
    }
    this._lenEncoder_0.init_za3lpa$(1 << this._posStateBits_0);
    this._repMatchLenEncoder_0.init_za3lpa$(1 << this._posStateBits_0);
    this._posAlignEncoder_0.init();
    this._longestMatchWasFound_0 = false;
    this._optimumEndIndex_0 = 0;
    this._optimumCurrentIndex_0 = 0;
    this._additionalOffset_0 = 0;
  };
  SevenZip$LzmaEncoder.prototype.readMatchDistances_0 = function () {
    var lenRes = 0;
    this._numDistancePairs_0 = ensureNotNull(this._matchFinder_0).getMatches_q5rwfd$(this._matchDistances_0);
    if (this._numDistancePairs_0 > 0) {
      lenRes = this._matchDistances_0[this._numDistancePairs_0 - 2 | 0];
      if (lenRes === this._numFastBytes_0)
        lenRes = lenRes + ensureNotNull(this._matchFinder_0).getMatchLen_qt1dr2$(lenRes - 1 | 0, this._matchDistances_0[this._numDistancePairs_0 - 1 | 0], 273 - lenRes | 0) | 0;
    }this._additionalOffset_0 = this._additionalOffset_0 + 1 | 0;
    return lenRes;
  };
  SevenZip$LzmaEncoder.prototype.movePos_0 = function (num) {
    if (num > 0) {
      ensureNotNull(this._matchFinder_0).skip_za3lpa$(num);
      this._additionalOffset_0 = this._additionalOffset_0 + num | 0;
    }};
  SevenZip$LzmaEncoder.prototype.getRepLen1Price_0 = function (state, posState) {
    return SevenZip$RangeEncoder$Companion_getInstance().getPrice0_za3lpa$(this._isRepG0_0[state]) + SevenZip$RangeEncoder$Companion_getInstance().getPrice0_za3lpa$(this._isRep0Long_0[(state << 4) + posState | 0]) | 0;
  };
  SevenZip$LzmaEncoder.prototype.getPureRepPrice_0 = function (repIndex, state, posState) {
    var price;
    if (repIndex === 0) {
      price = SevenZip$RangeEncoder$Companion_getInstance().getPrice0_za3lpa$(this._isRepG0_0[state]);
      price = price + SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isRep0Long_0[(state << 4) + posState | 0]) | 0;
    } else {
      price = SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isRepG0_0[state]);
      if (repIndex === 1) {
        price = price + SevenZip$RangeEncoder$Companion_getInstance().getPrice0_za3lpa$(this._isRepG1_0[state]) | 0;
      } else {
        price = price + SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isRepG1_0[state]) | 0;
        price = price + SevenZip$RangeEncoder$Companion_getInstance().getPrice_vux9f0$(this._isRepG2_0[state], repIndex - 2 | 0) | 0;
      }
    }
    return price;
  };
  SevenZip$LzmaEncoder.prototype.getRepPrice_0 = function (repIndex, len, state, posState) {
    var price = this._repMatchLenEncoder_0.getPrice_vux9f0$(len - 2 | 0, posState);
    return price + this.getPureRepPrice_0(repIndex, state, posState) | 0;
  };
  SevenZip$LzmaEncoder.prototype.getPosLenPrice_0 = function (pos, len, posState) {
    var price;
    var lenToPosState = SevenZip$LzmaBase_getInstance().getLenToPosState_za3lpa$(len);
    price = pos < 128 ? this._distancesPrices_0[(lenToPosState * 128 | 0) + pos | 0] : this._posSlotPrices_0[(lenToPosState << 6) + SevenZip$LzmaEncoder$Companion_getInstance().getPosSlot2_kcn2v3$(pos) | 0] + this._alignPrices_0[pos & 15] | 0;
    return price + this._lenEncoder_0.getPrice_vux9f0$(len - 2 | 0, posState) | 0;
  };
  SevenZip$LzmaEncoder.prototype.backward_0 = function (cur) {
    var cc = cur;
    this._optimumEndIndex_0 = cc;
    var posMem = this._optimum_0[cc].posPrev;
    var backMem = this._optimum_0[cc].backPrev;
    do {
      if (this._optimum_0[cc].prev1IsChar) {
        this._optimum_0[posMem].makeAsChar();
        this._optimum_0[posMem].posPrev = posMem - 1 | 0;
        if (this._optimum_0[cc].prev2) {
          this._optimum_0[posMem - 1 | 0].prev1IsChar = false;
          this._optimum_0[posMem - 1 | 0].posPrev = this._optimum_0[cc].posPrev2;
          this._optimum_0[posMem - 1 | 0].backPrev = this._optimum_0[cc].backPrev2;
        }}var posPrev = posMem;
      var backCur = backMem;
      backMem = this._optimum_0[posPrev].backPrev;
      posMem = this._optimum_0[posPrev].posPrev;
      this._optimum_0[posPrev].backPrev = backCur;
      this._optimum_0[posPrev].posPrev = cc;
      cc = posPrev;
    }
     while (cc > 0);
    this.backRes_0 = this._optimum_0[0].backPrev;
    this._optimumCurrentIndex_0 = this._optimum_0[0].posPrev;
    return this._optimumCurrentIndex_0;
  };
  SevenZip$LzmaEncoder.prototype.getOptimum_0 = function (position) {
    var tmp$;
    var ppos = position;
    if (this._optimumEndIndex_0 !== this._optimumCurrentIndex_0) {
      var lenRes = this._optimum_0[this._optimumCurrentIndex_0].posPrev - this._optimumCurrentIndex_0 | 0;
      this.backRes_0 = this._optimum_0[this._optimumCurrentIndex_0].backPrev;
      this._optimumCurrentIndex_0 = this._optimum_0[this._optimumCurrentIndex_0].posPrev;
      return lenRes;
    }this._optimumEndIndex_0 = 0;
    this._optimumCurrentIndex_0 = this._optimumEndIndex_0;
    var lenMain;
    var numDistancePairs;
    if (!this._longestMatchWasFound_0) {
      lenMain = this.readMatchDistances_0();
    } else {
      lenMain = this._longestMatchLength_0;
      this._longestMatchWasFound_0 = false;
    }
    numDistancePairs = this._numDistancePairs_0;
    var numAvailableBytes = ensureNotNull(this._matchFinder_0).getNumAvailableBytes() + 1 | 0;
    if (numAvailableBytes < 2) {
      this.backRes_0 = -1;
      return 1;
    }if (numAvailableBytes > 273) {
      numAvailableBytes = 273;
    }var repMaxIndex = 0;
    var i = 0;
    while (i < 4) {
      this.reps_0[i] = this._repDistances_0[i];
      this.repLens_0[i] = ensureNotNull(this._matchFinder_0).getMatchLen_qt1dr2$(-1, this.reps_0[i], 273);
      if (this.repLens_0[i] > this.repLens_0[repMaxIndex])
        repMaxIndex = i;
      i = i + 1 | 0;
    }
    if (this.repLens_0[repMaxIndex] >= this._numFastBytes_0) {
      this.backRes_0 = repMaxIndex;
      var lenRes_0 = this.repLens_0[repMaxIndex];
      this.movePos_0(lenRes_0 - 1 | 0);
      return lenRes_0;
    }if (lenMain >= this._numFastBytes_0) {
      this.backRes_0 = this._matchDistances_0[numDistancePairs - 1 | 0] + 4 | 0;
      this.movePos_0(lenMain - 1 | 0);
      return lenMain;
    }var currentByte = ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(-1);
    var matchByte = ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(0 - this._repDistances_0[0] - 1 - 1 | 0);
    if (lenMain < 2 && currentByte !== matchByte && this.repLens_0[repMaxIndex] < 2) {
      this.backRes_0 = -1;
      return 1;
    }this._optimum_0[0].state = this._state_0;
    var posState = ppos & this._posStateMask_0;
    this._optimum_0[1].price = SevenZip$RangeEncoder$Companion_getInstance().getPrice0_za3lpa$(this._isMatch_0[(this._state_0 << 4) + posState | 0]) + this._literalEncoder_0.getSubCoder_6t1wet$(ppos, this._previousByte_0).getPrice_udr4r7$(!SevenZip$LzmaBase_getInstance().stateIsCharState_za3lpa$(this._state_0), matchByte, currentByte) | 0;
    this._optimum_0[1].makeAsChar();
    var matchPrice = SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isMatch_0[(this._state_0 << 4) + posState | 0]);
    var repMatchPrice = matchPrice + SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isRep_0[this._state_0]) | 0;
    if (matchByte === currentByte) {
      var shortRepPrice = repMatchPrice + this.getRepLen1Price_0(this._state_0, posState) | 0;
      if (shortRepPrice < this._optimum_0[1].price) {
        this._optimum_0[1].price = shortRepPrice;
        this._optimum_0[1].makeAsShortRep();
      }}var lenEnd = {v: lenMain >= this.repLens_0[repMaxIndex] ? lenMain : this.repLens_0[repMaxIndex]};
    if (lenEnd.v < 2) {
      this.backRes_0 = this._optimum_0[1].backPrev;
      return 1;
    }this._optimum_0[1].posPrev = 0;
    this._optimum_0[0].backs0 = this.reps_0[0];
    this._optimum_0[0].backs1 = this.reps_0[1];
    this._optimum_0[0].backs2 = this.reps_0[2];
    this._optimum_0[0].backs3 = this.reps_0[3];
    var len = lenEnd.v;
    do {
      this._optimum_0[tmp$ = len, len = tmp$ - 1 | 0, tmp$].price = 268435455;
    }
     while (len >= 2);
    i = 0;
    while (i < 4) {
      var repLen = this.repLens_0[i];
      if (repLen < 2) {
        i = i + 1 | 0;
        continue;
      }var price = repMatchPrice + this.getPureRepPrice_0(i, this._state_0, posState) | 0;
      do {
        var curAndLenPrice = price + this._repMatchLenEncoder_0.getPrice_vux9f0$(repLen - 2 | 0, posState) | 0;
        var optimum = this._optimum_0[repLen];
        if (curAndLenPrice < optimum.price) {
          optimum.price = curAndLenPrice;
          optimum.posPrev = 0;
          optimum.backPrev = i;
          optimum.prev1IsChar = false;
        }}
       while ((repLen = repLen - 1 | 0, repLen) >= 2);
      i = i + 1 | 0;
    }
    var normalMatchPrice = matchPrice + SevenZip$RangeEncoder$Companion_getInstance().getPrice0_za3lpa$(this._isRep_0[this._state_0]) | 0;
    len = this.repLens_0[0] >= 2 ? this.repLens_0[0] + 1 | 0 : 2;
    if (len <= lenMain) {
      var offs = 0;
      while (len > this._matchDistances_0[offs])
        offs = offs + 2 | 0;
      while (true) {
        var distance = this._matchDistances_0[offs + 1 | 0];
        var curAndLenPrice_0 = normalMatchPrice + this.getPosLenPrice_0(distance, len, posState) | 0;
        var optimum_0 = this._optimum_0[len];
        if (curAndLenPrice_0 < optimum_0.price) {
          optimum_0.price = curAndLenPrice_0;
          optimum_0.posPrev = 0;
          optimum_0.backPrev = distance + 4 | 0;
          optimum_0.prev1IsChar = false;
        }if (len === this._matchDistances_0[offs]) {
          offs = offs + 2 | 0;
          if (offs === numDistancePairs)
            break;
        }len = len + 1 | 0;
      }
    }var cur = {v: 0};
    while (true) {
      cur.v = cur.v + 1 | 0;
      if (cur.v === lenEnd.v)
        return this.backward_0(cur.v);
      var newLen = this.readMatchDistances_0();
      numDistancePairs = this._numDistancePairs_0;
      if (newLen >= this._numFastBytes_0) {
        this._longestMatchLength_0 = newLen;
        this._longestMatchWasFound_0 = true;
        return this.backward_0(cur.v);
      }ppos = ppos + 1 | 0;
      var posPrev = this._optimum_0[cur.v].posPrev;
      var state;
      if (this._optimum_0[cur.v].prev1IsChar) {
        posPrev = posPrev - 1 | 0;
        if (this._optimum_0[cur.v].prev2) {
          state = this._optimum_0[this._optimum_0[cur.v].posPrev2].state;
          state = this._optimum_0[cur.v].backPrev2 < 4 ? SevenZip$LzmaBase_getInstance().stateUpdateRep_za3lpa$(state) : SevenZip$LzmaBase_getInstance().stateUpdateMatch_za3lpa$(state);
        } else
          state = this._optimum_0[posPrev].state;
        state = SevenZip$LzmaBase_getInstance().stateUpdateChar_za3lpa$(state);
      } else
        state = this._optimum_0[posPrev].state;
      if (posPrev === (cur.v - 1 | 0)) {
        state = this._optimum_0[cur.v].isShortRep() ? SevenZip$LzmaBase_getInstance().stateUpdateShortRep_za3lpa$(state) : SevenZip$LzmaBase_getInstance().stateUpdateChar_za3lpa$(state);
      } else {
        var pos;
        if (this._optimum_0[cur.v].prev1IsChar && this._optimum_0[cur.v].prev2) {
          posPrev = this._optimum_0[cur.v].posPrev2;
          pos = this._optimum_0[cur.v].backPrev2;
          state = SevenZip$LzmaBase_getInstance().stateUpdateRep_za3lpa$(state);
        } else {
          pos = this._optimum_0[cur.v].backPrev;
          state = pos < 4 ? SevenZip$LzmaBase_getInstance().stateUpdateRep_za3lpa$(state) : SevenZip$LzmaBase_getInstance().stateUpdateMatch_za3lpa$(state);
        }
        var opt = this._optimum_0[posPrev];
        if (pos < 4) {
          switch (pos) {
            case 0:
              this.reps_0[0] = opt.backs0;
              this.reps_0[1] = opt.backs1;
              this.reps_0[2] = opt.backs2;
              this.reps_0[3] = opt.backs3;
              break;
            case 1:
              this.reps_0[0] = opt.backs1;
              this.reps_0[1] = opt.backs0;
              this.reps_0[2] = opt.backs2;
              this.reps_0[3] = opt.backs3;
              break;
            case 2:
              this.reps_0[0] = opt.backs2;
              this.reps_0[1] = opt.backs0;
              this.reps_0[2] = opt.backs1;
              this.reps_0[3] = opt.backs3;
              break;
            default:this.reps_0[0] = opt.backs3;
              this.reps_0[1] = opt.backs0;
              this.reps_0[2] = opt.backs1;
              this.reps_0[3] = opt.backs2;
              break;
          }
        } else {
          this.reps_0[0] = pos - 4 | 0;
          this.reps_0[1] = opt.backs0;
          this.reps_0[2] = opt.backs1;
          this.reps_0[3] = opt.backs2;
        }
      }
      this._optimum_0[cur.v].state = state;
      this._optimum_0[cur.v].backs0 = this.reps_0[0];
      this._optimum_0[cur.v].backs1 = this.reps_0[1];
      this._optimum_0[cur.v].backs2 = this.reps_0[2];
      this._optimum_0[cur.v].backs3 = this.reps_0[3];
      var curPrice = this._optimum_0[cur.v].price;
      currentByte = ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(-1);
      matchByte = ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(0 - this.reps_0[0] - 1 - 1 | 0);
      posState = ppos & this._posStateMask_0;
      var curAnd1Price = curPrice + SevenZip$RangeEncoder$Companion_getInstance().getPrice0_za3lpa$(this._isMatch_0[(state << 4) + posState | 0]) + this._literalEncoder_0.getSubCoder_6t1wet$(ppos, ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(-2)).getPrice_udr4r7$(!SevenZip$LzmaBase_getInstance().stateIsCharState_za3lpa$(state), matchByte, currentByte) | 0;
      var nextOptimum = this._optimum_0[cur.v + 1 | 0];
      var nextIsChar = false;
      if (curAnd1Price < nextOptimum.price) {
        nextOptimum.price = curAnd1Price;
        nextOptimum.posPrev = cur.v;
        nextOptimum.makeAsChar();
        nextIsChar = true;
      }matchPrice = curPrice + SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isMatch_0[(state << 4) + posState | 0]) | 0;
      repMatchPrice = matchPrice + SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isRep_0[state]) | 0;
      if (matchByte === currentByte && !(nextOptimum.posPrev < cur.v && nextOptimum.backPrev === 0)) {
        var shortRepPrice_0 = repMatchPrice + this.getRepLen1Price_0(state, posState) | 0;
        if (shortRepPrice_0 <= nextOptimum.price) {
          nextOptimum.price = shortRepPrice_0;
          nextOptimum.posPrev = cur.v;
          nextOptimum.makeAsShortRep();
          nextIsChar = true;
        }}var numAvailableBytesFull = ensureNotNull(this._matchFinder_0).getNumAvailableBytes() + 1 | 0;
      var a = 4095 - cur.v | 0;
      var b = numAvailableBytesFull;
      numAvailableBytesFull = Math_0.min(a, b);
      numAvailableBytes = numAvailableBytesFull;
      if (numAvailableBytes < 2)
        continue;
      if (numAvailableBytes > this._numFastBytes_0)
        numAvailableBytes = this._numFastBytes_0;
      if (!nextIsChar && matchByte !== currentByte) {
        var a_0 = numAvailableBytesFull - 1 | 0;
        var b_0 = this._numFastBytes_0;
        var t = Math_0.min(a_0, b_0);
        var lenTest2 = ensureNotNull(this._matchFinder_0).getMatchLen_qt1dr2$(0, this.reps_0[0], t);
        if (lenTest2 >= 2) {
          var state2 = SevenZip$LzmaBase_getInstance().stateUpdateChar_za3lpa$(state);
          var posStateNext = ppos + 1 & this._posStateMask_0;
          var nextRepMatchPrice = curAnd1Price + SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isMatch_0[(state2 << 4) + posStateNext | 0]) + SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isRep_0[state2]) | 0;
          var offset = cur.v + 1 + lenTest2 | 0;
          while (lenEnd.v < offset)
            this._optimum_0[lenEnd.v = lenEnd.v + 1 | 0, lenEnd.v].price = 268435455;
          var curAndLenPrice_1 = nextRepMatchPrice + this.getRepPrice_0(0, lenTest2, state2, posStateNext) | 0;
          var optimum_1 = this._optimum_0[offset];
          if (curAndLenPrice_1 < optimum_1.price) {
            optimum_1.price = curAndLenPrice_1;
            optimum_1.posPrev = cur.v + 1 | 0;
            optimum_1.backPrev = 0;
            optimum_1.prev1IsChar = true;
            optimum_1.prev2 = false;
          }}}var startLen = 2;
      for (var repIndex = 0; repIndex < 4; repIndex++) {
        var lenTest = {v: ensureNotNull(this._matchFinder_0).getMatchLen_qt1dr2$(-1, this.reps_0[repIndex], numAvailableBytes)};
        if (lenTest.v < 2)
          continue;
        var lenTestTemp = lenTest.v;
        do {
          while (lenEnd.v < (cur.v + lenTest.v | 0))
            this._optimum_0[lenEnd.v = lenEnd.v + 1 | 0, lenEnd.v].price = 268435455;
          var curAndLenPrice_2 = repMatchPrice + this.getRepPrice_0(repIndex, lenTest.v, state, posState) | 0;
          var optimum_2 = this._optimum_0[cur.v + lenTest.v | 0];
          if (curAndLenPrice_2 < optimum_2.price) {
            optimum_2.price = curAndLenPrice_2;
            optimum_2.posPrev = cur.v;
            optimum_2.backPrev = repIndex;
            optimum_2.prev1IsChar = false;
          }}
         while ((lenTest.v = lenTest.v - 1 | 0, lenTest.v) >= 2);
        lenTest.v = lenTestTemp;
        if (repIndex === 0)
          startLen = lenTest.v + 1 | 0;
        if (lenTest.v < numAvailableBytesFull) {
          var a_1 = numAvailableBytesFull - 1 - lenTest.v | 0;
          var b_1 = this._numFastBytes_0;
          var t_0 = Math_0.min(a_1, b_1);
          var lenTest2_0 = ensureNotNull(this._matchFinder_0).getMatchLen_qt1dr2$(lenTest.v, this.reps_0[repIndex], t_0);
          if (lenTest2_0 >= 2) {
            var state2_0 = {v: SevenZip$LzmaBase_getInstance().stateUpdateRep_za3lpa$(state)};
            var posStateNext_0 = {v: ppos + lenTest.v & this._posStateMask_0};
            var curAndLenCharPrice = repMatchPrice + this.getRepPrice_0(repIndex, lenTest.v, state, posState) + SevenZip$RangeEncoder$Companion_getInstance().getPrice0_za3lpa$(this._isMatch_0[(state2_0.v << 4) + posStateNext_0.v | 0]) + this._literalEncoder_0.getSubCoder_6t1wet$(ppos + lenTest.v | 0, ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(lenTest.v - 1 - 1 | 0)).getPrice_udr4r7$(true, ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(lenTest.v - 1 - (this.reps_0[repIndex] + 1) | 0), ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(lenTest.v - 1 | 0)) | 0;
            state2_0.v = SevenZip$LzmaBase_getInstance().stateUpdateChar_za3lpa$(state2_0.v);
            posStateNext_0.v = ppos + lenTest.v + 1 & this._posStateMask_0;
            var nextMatchPrice = curAndLenCharPrice + SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isMatch_0[(state2_0.v << 4) + posStateNext_0.v | 0]) | 0;
            var nextRepMatchPrice_0 = nextMatchPrice + SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isRep_0[state2_0.v]) | 0;
            var offset_0 = lenTest.v + 1 + lenTest2_0 | 0;
            while (lenEnd.v < (cur.v + offset_0 | 0))
              this._optimum_0[lenEnd.v = lenEnd.v + 1 | 0, lenEnd.v].price = 268435455;
            var curAndLenPrice_3 = nextRepMatchPrice_0 + this.getRepPrice_0(0, lenTest2_0, state2_0.v, posStateNext_0.v) | 0;
            var optimum_3 = this._optimum_0[cur.v + offset_0 | 0];
            if (curAndLenPrice_3 < optimum_3.price) {
              optimum_3.price = curAndLenPrice_3;
              optimum_3.posPrev = cur.v + lenTest.v + 1 | 0;
              optimum_3.backPrev = 0;
              optimum_3.prev1IsChar = true;
              optimum_3.prev2 = true;
              optimum_3.posPrev2 = cur.v;
              optimum_3.backPrev2 = repIndex;
            }}}}
      if (newLen > numAvailableBytes) {
        newLen = numAvailableBytes;
        numDistancePairs = 0;
        while (newLen > this._matchDistances_0[numDistancePairs]) {
          numDistancePairs = numDistancePairs + 2 | 0;
        }
        this._matchDistances_0[numDistancePairs] = newLen;
        numDistancePairs = numDistancePairs + 2 | 0;
      }if (newLen >= startLen) {
        normalMatchPrice = matchPrice + SevenZip$RangeEncoder$Companion_getInstance().getPrice0_za3lpa$(this._isRep_0[state]) | 0;
        while (lenEnd.v < (cur.v + newLen | 0))
          this._optimum_0[lenEnd.v = lenEnd.v + 1 | 0, lenEnd.v].price = 268435455;
        var offs_0 = 0;
        while (startLen > this._matchDistances_0[offs_0])
          offs_0 = offs_0 + 2 | 0;
        var lenTest_0 = startLen;
        while (true) {
          var curBack = this._matchDistances_0[offs_0 + 1 | 0];
          var curAndLenPrice_4 = normalMatchPrice + this.getPosLenPrice_0(curBack, lenTest_0, posState) | 0;
          var optimum_4 = this._optimum_0[cur.v + lenTest_0 | 0];
          if (curAndLenPrice_4 < optimum_4.price) {
            optimum_4.price = curAndLenPrice_4;
            optimum_4.posPrev = cur.v;
            optimum_4.backPrev = curBack + 4 | 0;
            optimum_4.prev1IsChar = false;
          }if (lenTest_0 === this._matchDistances_0[offs_0]) {
            if (lenTest_0 < numAvailableBytesFull) {
              var a_2 = numAvailableBytesFull - 1 - lenTest_0 | 0;
              var b_2 = this._numFastBytes_0;
              var t_1 = Math_0.min(a_2, b_2);
              var lenTest2_1 = ensureNotNull(this._matchFinder_0).getMatchLen_qt1dr2$(lenTest_0, curBack, t_1);
              if (lenTest2_1 >= 2) {
                var state2_1 = SevenZip$LzmaBase_getInstance().stateUpdateMatch_za3lpa$(state);
                var posStateNext_1 = ppos + lenTest_0 & this._posStateMask_0;
                var curAndLenCharPrice_0 = curAndLenPrice_4 + SevenZip$RangeEncoder$Companion_getInstance().getPrice0_za3lpa$(this._isMatch_0[(state2_1 << 4) + posStateNext_1 | 0]) + this._literalEncoder_0.getSubCoder_6t1wet$(ppos + lenTest_0 | 0, ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(lenTest_0 - 1 - 1 | 0)).getPrice_udr4r7$(true, ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(lenTest_0 - (curBack + 1) - 1 | 0), ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(lenTest_0 - 1 | 0)) | 0;
                state2_1 = SevenZip$LzmaBase_getInstance().stateUpdateChar_za3lpa$(state2_1);
                posStateNext_1 = ppos + lenTest_0 + 1 & this._posStateMask_0;
                var nextMatchPrice_0 = curAndLenCharPrice_0 + SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isMatch_0[(state2_1 << 4) + posStateNext_1 | 0]) | 0;
                var nextRepMatchPrice_1 = nextMatchPrice_0 + SevenZip$RangeEncoder$Companion_getInstance().getPrice1_za3lpa$(this._isRep_0[state2_1]) | 0;
                var offset_1 = lenTest_0 + 1 + lenTest2_1 | 0;
                while (lenEnd.v < (cur.v + offset_1 | 0))
                  this._optimum_0[lenEnd.v = lenEnd.v + 1 | 0, lenEnd.v].price = 268435455;
                curAndLenPrice_4 = nextRepMatchPrice_1 + this.getRepPrice_0(0, lenTest2_1, state2_1, posStateNext_1) | 0;
                optimum_4 = this._optimum_0[cur.v + offset_1 | 0];
                if (curAndLenPrice_4 < optimum_4.price) {
                  optimum_4.price = curAndLenPrice_4;
                  optimum_4.posPrev = cur.v + lenTest_0 + 1 | 0;
                  optimum_4.backPrev = 0;
                  optimum_4.prev1IsChar = true;
                  optimum_4.prev2 = true;
                  optimum_4.posPrev2 = cur.v;
                  optimum_4.backPrev2 = curBack + 4 | 0;
                }}}offs_0 = offs_0 + 2 | 0;
            if (offs_0 === numDistancePairs)
              break;
          }lenTest_0 = lenTest_0 + 1 | 0;
        }
      }}
  };
  SevenZip$LzmaEncoder.prototype.writeEndMarker_0 = function (posState) {
    if (!this._writeEndMark_0)
      return;
    this._rangeEncoder_0.encode_359eei$(this._isMatch_0, (this._state_0 << 4) + posState | 0, 1);
    this._rangeEncoder_0.encode_359eei$(this._isRep_0, this._state_0, 0);
    this._state_0 = SevenZip$LzmaBase_getInstance().stateUpdateMatch_za3lpa$(this._state_0);
    var len = 2;
    this._lenEncoder_0.encode_x31iud$(this._rangeEncoder_0, len - 2 | 0, posState);
    var posSlot = 63;
    var lenToPosState = SevenZip$LzmaBase_getInstance().getLenToPosState_za3lpa$(len);
    this._posSlotEncoder_0[lenToPosState].encode_m7qcon$(this._rangeEncoder_0, posSlot);
    var footerBits = 30;
    var posReduced = (1 << footerBits) - 1 | 0;
    this._rangeEncoder_0.encodeDirectBits_vux9f0$(posReduced >> 4, footerBits - 4 | 0);
    this._posAlignEncoder_0.reverseEncode_m7qcon$(this._rangeEncoder_0, posReduced & 15);
  };
  SevenZip$LzmaEncoder.prototype.flush_0 = function (nowPos) {
    this.releaseMFStream_0();
    this.writeEndMarker_0(nowPos & this._posStateMask_0);
    this._rangeEncoder_0.flushData();
    this._rangeEncoder_0.flushStream();
  };
  SevenZip$LzmaEncoder.prototype.codeOneBlock_0 = function (inSize, outSize, finished) {
    var tmp$;
    inSize[0] = L0;
    outSize[0] = L0;
    finished[0] = true;
    if (this._inStream_0 != null) {
      ensureNotNull(this._matchFinder_0).setStream_sayfrj$(ensureNotNull(this._inStream_0));
      ensureNotNull(this._matchFinder_0).init();
      this._needReleaseMFStream_0 = true;
      this._inStream_0 = null;
    }if (this._finished_0)
      return;
    this._finished_0 = true;
    var progressPosValuePrev = this.nowPos64_0;
    if (equals(this.nowPos64_0, L0)) {
      if (ensureNotNull(this._matchFinder_0).getNumAvailableBytes() === 0) {
        this.flush_0(this.nowPos64_0.toInt());
        return;
      }this.readMatchDistances_0();
      var posState = this.nowPos64_0.toInt() & this._posStateMask_0;
      this._rangeEncoder_0.encode_359eei$(this._isMatch_0, (this._state_0 << 4) + posState | 0, 0);
      this._state_0 = SevenZip$LzmaBase_getInstance().stateUpdateChar_za3lpa$(this._state_0);
      var curByte = ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(0 - this._additionalOffset_0 | 0);
      this._literalEncoder_0.getSubCoder_6t1wet$(this.nowPos64_0.toInt(), this._previousByte_0).encode_lnbdv2$(this._rangeEncoder_0, curByte);
      this._previousByte_0 = curByte;
      this._additionalOffset_0 = this._additionalOffset_0 - 1 | 0;
      this.nowPos64_0 = this.nowPos64_0.inc();
    }if (ensureNotNull(this._matchFinder_0).getNumAvailableBytes() === 0) {
      this.flush_0(this.nowPos64_0.toInt());
      return;
    }while (true) {
      var len = this.getOptimum_0(this.nowPos64_0.toInt());
      var pos = this.backRes_0;
      var posState_0 = this.nowPos64_0.toInt() & this._posStateMask_0;
      var complexState = (this._state_0 << 4) + posState_0 | 0;
      if (len === 1 && pos === -1) {
        this._rangeEncoder_0.encode_359eei$(this._isMatch_0, complexState, 0);
        var curByte_0 = ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(0 - this._additionalOffset_0 | 0);
        var subCoder = this._literalEncoder_0.getSubCoder_6t1wet$(this.nowPos64_0.toInt(), this._previousByte_0);
        if (!SevenZip$LzmaBase_getInstance().stateIsCharState_za3lpa$(this._state_0)) {
          var matchByte = ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(0 - this._repDistances_0[0] - 1 - this._additionalOffset_0 | 0);
          subCoder.encodeMatched_ocrm4p$(this._rangeEncoder_0, matchByte, curByte_0);
        } else
          subCoder.encode_lnbdv2$(this._rangeEncoder_0, curByte_0);
        this._previousByte_0 = curByte_0;
        this._state_0 = SevenZip$LzmaBase_getInstance().stateUpdateChar_za3lpa$(this._state_0);
      } else {
        this._rangeEncoder_0.encode_359eei$(this._isMatch_0, complexState, 1);
        if (pos < 4) {
          this._rangeEncoder_0.encode_359eei$(this._isRep_0, this._state_0, 1);
          if (pos === 0) {
            this._rangeEncoder_0.encode_359eei$(this._isRepG0_0, this._state_0, 0);
            if (len === 1)
              this._rangeEncoder_0.encode_359eei$(this._isRep0Long_0, complexState, 0);
            else
              this._rangeEncoder_0.encode_359eei$(this._isRep0Long_0, complexState, 1);
          } else {
            this._rangeEncoder_0.encode_359eei$(this._isRepG0_0, this._state_0, 1);
            if (pos === 1)
              this._rangeEncoder_0.encode_359eei$(this._isRepG1_0, this._state_0, 0);
            else {
              this._rangeEncoder_0.encode_359eei$(this._isRepG1_0, this._state_0, 1);
              this._rangeEncoder_0.encode_359eei$(this._isRepG2_0, this._state_0, pos - 2 | 0);
            }
          }
          if (len === 1) {
            tmp$ = SevenZip$LzmaBase_getInstance().stateUpdateShortRep_za3lpa$(this._state_0);
          } else {
            this._repMatchLenEncoder_0.encode_x31iud$(this._rangeEncoder_0, len - 2 | 0, posState_0);
            tmp$ = SevenZip$LzmaBase_getInstance().stateUpdateRep_za3lpa$(this._state_0);
          }
          this._state_0 = tmp$;
          var distance = this._repDistances_0[pos];
          if (pos !== 0) {
            for (var i = pos; i >= 1; i--)
              this._repDistances_0[i] = this._repDistances_0[i - 1 | 0];
            this._repDistances_0[0] = distance;
          }} else {
          this._rangeEncoder_0.encode_359eei$(this._isRep_0, this._state_0, 0);
          this._state_0 = SevenZip$LzmaBase_getInstance().stateUpdateMatch_za3lpa$(this._state_0);
          this._lenEncoder_0.encode_x31iud$(this._rangeEncoder_0, len - 2 | 0, posState_0);
          pos = pos - 4 | 0;
          var posSlot = SevenZip$LzmaEncoder$Companion_getInstance().getPosSlot_kcn2v3$(pos);
          var lenToPosState = SevenZip$LzmaBase_getInstance().getLenToPosState_za3lpa$(len);
          this._posSlotEncoder_0[lenToPosState].encode_m7qcon$(this._rangeEncoder_0, posSlot);
          if (posSlot >= 4) {
            var footerBits = (posSlot >> 1) - 1 | 0;
            var baseVal = (2 | posSlot & 1) << footerBits;
            var posReduced = pos - baseVal | 0;
            if (posSlot < 14)
              SevenZip$BitTreeEncoder$Companion_getInstance().reverseEncode_wskkkj$(this._posEncoders_0, baseVal - posSlot - 1 | 0, this._rangeEncoder_0, footerBits, posReduced);
            else {
              this._rangeEncoder_0.encodeDirectBits_vux9f0$(posReduced >> 4, footerBits - 4 | 0);
              this._posAlignEncoder_0.reverseEncode_m7qcon$(this._rangeEncoder_0, posReduced & 15);
              this._alignPriceCount_0 = this._alignPriceCount_0 + 1 | 0;
            }
          }var distance_0 = pos;
          for (var i_0 = 3; i_0 >= 1; i_0--)
            this._repDistances_0[i_0] = this._repDistances_0[i_0 - 1 | 0];
          this._repDistances_0[0] = distance_0;
          this._matchPriceCount_0 = this._matchPriceCount_0 + 1 | 0;
        }
        this._previousByte_0 = ensureNotNull(this._matchFinder_0).getIndexByte_za3lpa$(len - 1 - this._additionalOffset_0 | 0);
      }
      this._additionalOffset_0 = this._additionalOffset_0 - len | 0;
      this.nowPos64_0 = this.nowPos64_0.add(Kotlin.Long.fromInt(len));
      if (this._additionalOffset_0 === 0) {
        if (this._matchPriceCount_0 >= 128)
          this.fillDistancesPrices_0();
        if (this._alignPriceCount_0 >= 16)
          this.fillAlignPrices_0();
        inSize[0] = this.nowPos64_0;
        outSize[0] = this._rangeEncoder_0.getProcessedSizeAdd();
        if (ensureNotNull(this._matchFinder_0).getNumAvailableBytes() === 0) {
          this.flush_0(this.nowPos64_0.toInt());
          return;
        }if (this.nowPos64_0.subtract(progressPosValuePrev).toNumber() >= 4096) {
          this._finished_0 = false;
          finished[0] = false;
          return;
        }}}
  };
  SevenZip$LzmaEncoder.prototype.releaseMFStream_0 = function () {
    if (this._matchFinder_0 != null && this._needReleaseMFStream_0) {
      ensureNotNull(this._matchFinder_0).releaseStream();
      this._needReleaseMFStream_0 = false;
    }};
  SevenZip$LzmaEncoder.prototype.setOutStream_0 = function (outStream) {
    this._rangeEncoder_0.setStream_ceqwhy$(outStream);
  };
  SevenZip$LzmaEncoder.prototype.releaseOutStream_0 = function () {
    this._rangeEncoder_0.releaseStream();
  };
  SevenZip$LzmaEncoder.prototype.releaseStreams_0 = function () {
    this.releaseMFStream_0();
    this.releaseOutStream_0();
  };
  SevenZip$LzmaEncoder.prototype.setStreams_0 = function (inStream, outStream, inSize, outSize) {
    this._inStream_0 = inStream;
    this._finished_0 = false;
    this.create_8be2vx$();
    this.setOutStream_0(outStream);
    this.init_8be2vx$();
    this.fillDistancesPrices_0();
    this.fillAlignPrices_0();
    this._lenEncoder_0.setTableSize_za3lpa$(this._numFastBytes_0 + 1 - 2 | 0);
    this._lenEncoder_0.updateTables_za3lpa$(1 << this._posStateBits_0);
    this._repMatchLenEncoder_0.setTableSize_za3lpa$(this._numFastBytes_0 + 1 - 2 | 0);
    this._repMatchLenEncoder_0.updateTables_za3lpa$(1 << this._posStateBits_0);
    this.nowPos64_0 = L0;
  };
  SevenZip$LzmaEncoder.prototype.code_bvprln$ = function (inStream, outStream, inSize, outSize, progress) {
    this._needReleaseMFStream_0 = false;
    try {
      this.setStreams_0(inStream, outStream, inSize, outSize);
      while (true) {
        this.codeOneBlock_0(this.processedInSize_0, this.processedOutSize_0, this.finished_0);
        if (this.finished_0[0])
          return;
        progress != null ? (progress.setProgress_3pjtqy$(this.processedInSize_0[0], this.processedOutSize_0[0]), Unit) : null;
      }
    }finally {
      this.releaseStreams_0();
    }
  };
  SevenZip$LzmaEncoder.prototype.writeCoderProperties_ceqwhy$ = function (outStream) {
    this.properties_0[0] = toByte((((this._posStateBits_0 * 5 | 0) + this._numLiteralPosStateBits_0 | 0) * 9 | 0) + this._numLiteralContextBits_0 | 0);
    for (var i = 0; i <= 3; i++)
      this.properties_0[1 + i | 0] = toByte(this._dictionarySize_0 >> (8 * i | 0));
    outStream.write_mj6st8$(this.properties_0, 0, 5);
  };
  SevenZip$LzmaEncoder.prototype.fillDistancesPrices_0 = function () {
    var tmp$;
    for (var i = 4; i < 128; i++) {
      var posSlot = SevenZip$LzmaEncoder$Companion_getInstance().getPosSlot_kcn2v3$(i);
      var footerBits = (posSlot >> 1) - 1 | 0;
      var baseVal = (2 | posSlot & 1) << footerBits;
      this.tempPrices_0[i] = SevenZip$BitTreeEncoder$Companion_getInstance().reverseGetPrice_rbjysc$(this._posEncoders_0, baseVal - posSlot - 1 | 0, footerBits, i - baseVal | 0);
    }
    for (var lenToPosState = 0; lenToPosState < 4; lenToPosState++) {
      var encoder = this._posSlotEncoder_0[lenToPosState];
      var st = lenToPosState << 6;
      var posSlot_0 = 0;
      while (posSlot_0 < this._distTableSize_0) {
        this._posSlotPrices_0[st + posSlot_0 | 0] = encoder.getPrice_za3lpa$(posSlot_0);
        posSlot_0 = posSlot_0 + 1 | 0;
      }
      posSlot_0 = 14;
      while (posSlot_0 < this._distTableSize_0) {
        tmp$ = this._posSlotPrices_0;
        tmp$[st + posSlot_0 | 0] = tmp$[st + posSlot_0 | 0] + ((posSlot_0 >> 1) - 1 - 4 << 6) | 0;
        posSlot_0 = posSlot_0 + 1 | 0;
      }
      var st2 = lenToPosState * 128 | 0;
      var i_0 = 0;
      while (i_0 < 4) {
        this._distancesPrices_0[st2 + i_0 | 0] = this._posSlotPrices_0[st + i_0 | 0];
        i_0 = i_0 + 1 | 0;
      }
      while (i_0 < 128) {
        this._distancesPrices_0[st2 + i_0 | 0] = this._posSlotPrices_0[st + SevenZip$LzmaEncoder$Companion_getInstance().getPosSlot_kcn2v3$(i_0) | 0] + this.tempPrices_0[i_0] | 0;
        i_0 = i_0 + 1 | 0;
      }
    }
    this._matchPriceCount_0 = 0;
  };
  SevenZip$LzmaEncoder.prototype.fillAlignPrices_0 = function () {
    for (var i = 0; i < 16; i++)
      this._alignPrices_0[i] = this._posAlignEncoder_0.reverseGetPrice_za3lpa$(i);
    this._alignPriceCount_0 = 0;
  };
  SevenZip$LzmaEncoder.prototype.setAlgorithm_za3lpa$ = function (algorithm) {
    return true;
  };
  SevenZip$LzmaEncoder.prototype.setDictionarySize_za3lpa$ = function (dictionarySize) {
    var kDicLogSizeMaxCompress = 29;
    var cond1 = dictionarySize < 1;
    var cond2 = dictionarySize > 1 << kDicLogSizeMaxCompress;
    if (cond1 || cond2)
      return false;
    this._dictionarySize_0 = dictionarySize;
    var dicLogSize = 0;
    while (dictionarySize > 1 << dicLogSize) {
      dicLogSize = dicLogSize + 1 | 0;
    }
    this._distTableSize_0 = dicLogSize * 2 | 0;
    return true;
  };
  SevenZip$LzmaEncoder.prototype.setNumFastBytes_za3lpa$ = function (numFastBytes) {
    if (numFastBytes < 5 || numFastBytes > 273)
      return false;
    this._numFastBytes_0 = numFastBytes;
    return true;
  };
  SevenZip$LzmaEncoder.prototype.setMatchFinder_za3lpa$ = function (matchFinderIndex) {
    if (matchFinderIndex < 0 || matchFinderIndex > 2)
      return false;
    var matchFinderIndexPrev = this._matchFinderType_0;
    this._matchFinderType_0 = matchFinderIndex;
    if (this._matchFinder_0 != null && matchFinderIndexPrev !== this._matchFinderType_0) {
      this._dictionarySizePrev_0 = -1;
      this._matchFinder_0 = null;
    }return true;
  };
  SevenZip$LzmaEncoder.prototype.setLcLpPb_qt1dr2$ = function (lc, lp, pb) {
    if (lp < 0 || lp > 4 || lc < 0 || lc > 8 || pb < 0 || pb > 4)
      return false;
    this._numLiteralPosStateBits_0 = lp;
    this._numLiteralContextBits_0 = lc;
    this._posStateBits_0 = pb;
    this._posStateMask_0 = (1 << this._posStateBits_0) - 1 | 0;
    return true;
  };
  SevenZip$LzmaEncoder.prototype.setEndMarkerMode_6taknv$ = function (endMarkerMode) {
    this._writeEndMark_0 = endMarkerMode;
  };
  function SevenZip$LzmaEncoder$Companion() {
    SevenZip$LzmaEncoder$Companion_instance = this;
    this.EMatchFinderTypeBT2 = 0;
    this.EMatchFinderTypeBT4 = 1;
    this.kIfinityPrice_8be2vx$ = 268435455;
    this.g_FastPos_0 = new Int8Array(2048);
    var kFastSlots = 22;
    var c = 2;
    this.g_FastPos_0[0] = 0;
    this.g_FastPos_0[1] = 1;
    for (var slotFast = 2; slotFast < kFastSlots; slotFast++) {
      var k = 1 << (slotFast >> 1) - 1;
      var j = 0;
      while (j < k) {
        this.g_FastPos_0[c] = toByte(slotFast);
        j = j + 1 | 0;
        c = c + 1 | 0;
      }
    }
    this.kDefaultDictionaryLogSize_8be2vx$ = 22;
    this.kNumFastBytesDefault_8be2vx$ = 32;
    this.kNumOpts_8be2vx$ = 4096;
    this.kPropSize = 5;
  }
  SevenZip$LzmaEncoder$Companion.prototype.getPosSlot_kcn2v3$ = function (pos) {
    if (pos < 2048)
      return this.g_FastPos_0[pos];
    return pos < 2097152 ? this.g_FastPos_0[pos >> 10] + 20 : this.g_FastPos_0[pos >> 20] + 40;
  };
  SevenZip$LzmaEncoder$Companion.prototype.getPosSlot2_kcn2v3$ = function (pos) {
    if (pos < 131072)
      return this.g_FastPos_0[pos >> 6] + 12;
    return pos < 134217728 ? this.g_FastPos_0[pos >> 16] + 32 : this.g_FastPos_0[pos >> 26] + 52;
  };
  SevenZip$LzmaEncoder$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SevenZip$LzmaEncoder$Companion_instance = null;
  function SevenZip$LzmaEncoder$Companion_getInstance() {
    if (SevenZip$LzmaEncoder$Companion_instance === null) {
      new SevenZip$LzmaEncoder$Companion();
    }return SevenZip$LzmaEncoder$Companion_instance;
  }
  SevenZip$LzmaEncoder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LzmaEncoder',
    interfaces: []
  };
  function SevenZip$LzBinTree() {
    SevenZip$LzBinTree$Companion_getInstance();
    SevenZip$LzInWindow.call(this);
    this._cyclicBufferPos_0 = 0;
    this._cyclicBufferSize_0 = 0;
    this._matchMaxLen_0 = 0;
    this._son_4ak3l6$_0 = this._son_4ak3l6$_0;
    this._hash_957k7q$_0 = this._hash_957k7q$_0;
    this._cutValue_0 = 255;
    this._hashMask_0 = 0;
    this._hashSizeSum_0 = 0;
    this.HASH_ARRAY_0 = true;
    this.kNumHashDirectBytes_0 = 0;
    this.kMinMatchCheck_0 = 4;
    this.kFixHashSize_0 = 66560;
  }
  Object.defineProperty(SevenZip$LzBinTree.prototype, '_son_0', {
    get: function () {
      if (this._son_4ak3l6$_0 == null)
        return throwUPAE('_son');
      return this._son_4ak3l6$_0;
    },
    set: function (_son) {
      this._son_4ak3l6$_0 = _son;
    }
  });
  Object.defineProperty(SevenZip$LzBinTree.prototype, '_hash_0', {
    get: function () {
      if (this._hash_957k7q$_0 == null)
        return throwUPAE('_hash');
      return this._hash_957k7q$_0;
    },
    set: function (_hash) {
      this._hash_957k7q$_0 = _hash;
    }
  });
  SevenZip$LzBinTree.prototype.setType_za3lpa$ = function (numHashBytes) {
    this.HASH_ARRAY_0 = numHashBytes > 2;
    if (this.HASH_ARRAY_0) {
      this.kNumHashDirectBytes_0 = 0;
      this.kMinMatchCheck_0 = 4;
      this.kFixHashSize_0 = 66560;
    } else {
      this.kNumHashDirectBytes_0 = 2;
      this.kMinMatchCheck_0 = 3;
      this.kFixHashSize_0 = 0;
    }
  };
  SevenZip$LzBinTree.prototype.init = function () {
    var tmp$;
    SevenZip$LzInWindow.prototype.init.call(this);
    tmp$ = this._hashSizeSum_0;
    for (var i = 0; i < tmp$; i++)
      this._hash_0[i] = 0;
    this._cyclicBufferPos_0 = 0;
    this.reduceOffsets_za3lpa$(-1);
  };
  SevenZip$LzBinTree.prototype.movePos = function () {
    if ((this._cyclicBufferPos_0 = this._cyclicBufferPos_0 + 1 | 0, this._cyclicBufferPos_0) >= this._cyclicBufferSize_0)
      this._cyclicBufferPos_0 = 0;
    SevenZip$LzInWindow.prototype.movePos.call(this);
    if (this._pos === 1073741823)
      this.normalize_0();
  };
  SevenZip$LzBinTree.prototype.create_tjonv8$ = function (historySize, keepAddBufferBefore, matchMaxLen, keepAddBufferAfter) {
    if (historySize > 1073741567)
      return false;
    this._cutValue_0 = 16 + (matchMaxLen >> 1) | 0;
    var windowReservSize = ((historySize + keepAddBufferBefore + matchMaxLen + keepAddBufferAfter | 0) / 2 | 0) + 256 | 0;
    SevenZip$LzInWindow.prototype.create_qt1dr2$.call(this, historySize + keepAddBufferBefore | 0, matchMaxLen + keepAddBufferAfter | 0, windowReservSize);
    this._matchMaxLen_0 = matchMaxLen;
    var cyclicBufferSize = historySize + 1 | 0;
    if (this._cyclicBufferSize_0 !== cyclicBufferSize)
      this._cyclicBufferSize_0 = cyclicBufferSize;
    this._son_0 = new Int32Array(this._cyclicBufferSize_0 * 2 | 0);
    var hs = 65536;
    if (this.HASH_ARRAY_0) {
      hs = historySize - 1 | 0;
      hs = hs | hs >> 1;
      hs = hs | hs >> 2;
      hs = hs | hs >> 4;
      hs = hs | hs >> 8;
      hs = hs >> 1;
      hs = hs | 65535;
      if (hs > 16777216)
        hs = hs >> 1;
      this._hashMask_0 = hs;
      hs = hs + 1 | 0;
      hs = hs + this.kFixHashSize_0 | 0;
    }if (hs !== this._hashSizeSum_0) {
      this._hashSizeSum_0 = hs;
      this._hash_0 = new Int32Array(this._hashSizeSum_0);
    }return true;
  };
  SevenZip$LzBinTree.prototype.getMatches_q5rwfd$ = function (distances) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5, tmp$_6, tmp$_7;
    var lenLimit;
    if ((this._pos + this._matchMaxLen_0 | 0) <= this._streamPos) {
      lenLimit = this._matchMaxLen_0;
    } else {
      lenLimit = this._streamPos - this._pos | 0;
      if (lenLimit < this.kMinMatchCheck_0) {
        this.movePos();
        return 0;
      }}
    var offset = 0;
    var matchMinPos = this._pos > this._cyclicBufferSize_0 ? this._pos - this._cyclicBufferSize_0 | 0 : 0;
    var cur = this._bufferOffset + this._pos | 0;
    var maxLen = 1;
    var hashValue;
    var hash2Value = 0;
    var hash3Value = 0;
    if (this.HASH_ARRAY_0) {
      var temp = SevenZip$LzBinTree$Companion_getInstance().CrcTable_0[and(ensureNotNull(this._bufferBase)[cur], 255)] ^ and(ensureNotNull(this._bufferBase)[cur + 1 | 0], 255);
      hash2Value = temp & 1023;
      temp = temp ^ and(ensureNotNull(this._bufferBase)[cur + 2 | 0], 255) << 8;
      hash3Value = temp & 65535;
      hashValue = (temp ^ SevenZip$LzBinTree$Companion_getInstance().CrcTable_0[and(ensureNotNull(this._bufferBase)[cur + 3 | 0], 255)] << 5) & this._hashMask_0;
    } else
      hashValue = and(ensureNotNull(this._bufferBase)[cur], 255) ^ and(ensureNotNull(this._bufferBase)[cur + 1 | 0], 255) << 8;
    var curMatch = this._hash_0[this.kFixHashSize_0 + hashValue | 0];
    if (this.HASH_ARRAY_0) {
      var curMatch2 = this._hash_0[hash2Value];
      var curMatch3 = this._hash_0[1024 + hash3Value | 0];
      this._hash_0[hash2Value] = this._pos;
      this._hash_0[1024 + hash3Value | 0] = this._pos;
      if (curMatch2 > matchMinPos)
        if (ensureNotNull(this._bufferBase)[this._bufferOffset + curMatch2 | 0] === ensureNotNull(this._bufferBase)[cur]) {
          maxLen = 2;
          distances[tmp$ = offset, offset = tmp$ + 1 | 0, tmp$] = maxLen;
          distances[tmp$_0 = offset, offset = tmp$_0 + 1 | 0, tmp$_0] = this._pos - curMatch2 - 1 | 0;
        }if (curMatch3 > matchMinPos)
        if (ensureNotNull(this._bufferBase)[this._bufferOffset + curMatch3 | 0] === ensureNotNull(this._bufferBase)[cur]) {
          if (curMatch3 === curMatch2)
            offset = offset - 2 | 0;
          maxLen = 3;
          distances[tmp$_1 = offset, offset = tmp$_1 + 1 | 0, tmp$_1] = maxLen;
          distances[tmp$_2 = offset, offset = tmp$_2 + 1 | 0, tmp$_2] = this._pos - curMatch3 - 1 | 0;
          curMatch2 = curMatch3;
        }if (offset !== 0 && curMatch2 === curMatch) {
        offset = offset - 2 | 0;
        maxLen = 1;
      }}this._hash_0[this.kFixHashSize_0 + hashValue | 0] = this._pos;
    var ptr0 = (this._cyclicBufferPos_0 << 1) + 1 | 0;
    var ptr1 = this._cyclicBufferPos_0 << 1;
    var len0;
    var len1;
    len1 = this.kNumHashDirectBytes_0;
    len0 = len1;
    if (this.kNumHashDirectBytes_0 !== 0) {
      if (curMatch > matchMinPos) {
        if (ensureNotNull(this._bufferBase)[this._bufferOffset + curMatch + this.kNumHashDirectBytes_0 | 0] !== ensureNotNull(this._bufferBase)[cur + this.kNumHashDirectBytes_0 | 0]) {
          maxLen = this.kNumHashDirectBytes_0;
          distances[tmp$_3 = offset, offset = tmp$_3 + 1 | 0, tmp$_3] = maxLen;
          distances[tmp$_4 = offset, offset = tmp$_4 + 1 | 0, tmp$_4] = this._pos - curMatch - 1 | 0;
        }}}var count = this._cutValue_0;
    while (true) {
      if (curMatch <= matchMinPos || (tmp$_5 = count, count = tmp$_5 - 1 | 0, tmp$_5) === 0) {
        this._son_0[ptr1] = 0;
        this._son_0[ptr0] = this._son_0[ptr1];
        break;
      }var delta = this._pos - curMatch | 0;
      var cyclicPos = (delta <= this._cyclicBufferPos_0 ? this._cyclicBufferPos_0 - delta | 0 : this._cyclicBufferPos_0 - delta + this._cyclicBufferSize_0 | 0) << 1;
      var pby1 = this._bufferOffset + curMatch | 0;
      var a = len0;
      var b = len1;
      var len = Math_0.min(a, b);
      if (ensureNotNull(this._bufferBase)[pby1 + len | 0] === ensureNotNull(this._bufferBase)[cur + len | 0]) {
        while ((len = len + 1 | 0, len) !== lenLimit && ensureNotNull(this._bufferBase)[pby1 + len | 0] === ensureNotNull(this._bufferBase)[cur + len | 0]) {
        }
        if (maxLen < len) {
          maxLen = len;
          distances[tmp$_6 = offset, offset = tmp$_6 + 1 | 0, tmp$_6] = maxLen;
          distances[tmp$_7 = offset, offset = tmp$_7 + 1 | 0, tmp$_7] = delta - 1 | 0;
          if (len === lenLimit) {
            this._son_0[ptr1] = this._son_0[cyclicPos];
            this._son_0[ptr0] = this._son_0[cyclicPos + 1 | 0];
            break;
          }}}if (and(ensureNotNull(this._bufferBase)[pby1 + len | 0], 255) < and(ensureNotNull(this._bufferBase)[cur + len | 0], 255)) {
        this._son_0[ptr1] = curMatch;
        ptr1 = cyclicPos + 1 | 0;
        curMatch = this._son_0[ptr1];
        len1 = len;
      } else {
        this._son_0[ptr0] = curMatch;
        ptr0 = cyclicPos;
        curMatch = this._son_0[ptr0];
        len0 = len;
      }
    }
    this.movePos();
    return offset;
  };
  SevenZip$LzBinTree.prototype.skip_za3lpa$ = function (num) {
    var tmp$;
    var nnum = num;
    do {
      var lenLimit;
      if ((this._pos + this._matchMaxLen_0 | 0) <= this._streamPos)
        lenLimit = this._matchMaxLen_0;
      else {
        lenLimit = this._streamPos - this._pos | 0;
        if (lenLimit < this.kMinMatchCheck_0) {
          this.movePos();
          continue;
        }}
      var matchMinPos = this._pos > this._cyclicBufferSize_0 ? this._pos - this._cyclicBufferSize_0 | 0 : 0;
      var cur = this._bufferOffset + this._pos | 0;
      var hashValue;
      if (this.HASH_ARRAY_0) {
        var temp = SevenZip$LzBinTree$Companion_getInstance().CrcTable_0[and(ensureNotNull(this._bufferBase)[cur], 255)] ^ and(ensureNotNull(this._bufferBase)[cur + 1 | 0], 255);
        var hash2Value = temp & 1023;
        this._hash_0[hash2Value] = this._pos;
        temp = temp ^ and(ensureNotNull(this._bufferBase)[cur + 2 | 0], 255) << 8;
        var hash3Value = temp & 65535;
        this._hash_0[1024 + hash3Value | 0] = this._pos;
        hashValue = (temp ^ SevenZip$LzBinTree$Companion_getInstance().CrcTable_0[and(ensureNotNull(this._bufferBase)[cur + 3 | 0], 255)] << 5) & this._hashMask_0;
      } else
        hashValue = and(ensureNotNull(this._bufferBase)[cur], 255) ^ and(ensureNotNull(this._bufferBase)[cur + 1 | 0], 255) << 8;
      var curMatch = this._hash_0[this.kFixHashSize_0 + hashValue | 0];
      this._hash_0[this.kFixHashSize_0 + hashValue | 0] = this._pos;
      var ptr0 = (this._cyclicBufferPos_0 << 1) + 1 | 0;
      var ptr1 = this._cyclicBufferPos_0 << 1;
      var len0;
      var len1;
      len1 = this.kNumHashDirectBytes_0;
      len0 = len1;
      var count = this._cutValue_0;
      while (true) {
        if (curMatch <= matchMinPos || (tmp$ = count, count = tmp$ - 1 | 0, tmp$) === 0) {
          this._son_0[ptr1] = 0;
          this._son_0[ptr0] = this._son_0[ptr1];
          break;
        }var delta = this._pos - curMatch | 0;
        var cyclicPos = (delta <= this._cyclicBufferPos_0 ? this._cyclicBufferPos_0 - delta | 0 : this._cyclicBufferPos_0 - delta + this._cyclicBufferSize_0 | 0) << 1;
        var pby1 = this._bufferOffset + curMatch | 0;
        var a = len0;
        var b = len1;
        var len = Math_0.min(a, b);
        if (ensureNotNull(this._bufferBase)[pby1 + len | 0] === ensureNotNull(this._bufferBase)[cur + len | 0]) {
          while ((len = len + 1 | 0, len) !== lenLimit)
            if (ensureNotNull(this._bufferBase)[pby1 + len | 0] !== ensureNotNull(this._bufferBase)[cur + len | 0])
              break;
          if (len === lenLimit) {
            this._son_0[ptr1] = this._son_0[cyclicPos];
            this._son_0[ptr0] = this._son_0[cyclicPos + 1 | 0];
            break;
          }}if (and(ensureNotNull(this._bufferBase)[pby1 + len | 0], 255) < and(ensureNotNull(this._bufferBase)[cur + len | 0], 255)) {
          this._son_0[ptr1] = curMatch;
          ptr1 = cyclicPos + 1 | 0;
          curMatch = this._son_0[ptr1];
          len1 = len;
        } else {
          this._son_0[ptr0] = curMatch;
          ptr0 = cyclicPos;
          curMatch = this._son_0[ptr0];
          len0 = len;
        }
      }
      this.movePos();
    }
     while ((nnum = nnum - 1 | 0, nnum) !== 0);
  };
  SevenZip$LzBinTree.prototype.normalizeLinks_0 = function (items, numItems, subValue) {
    for (var i = 0; i < numItems; i++) {
      var value = items[i];
      if (value <= subValue)
        value = 0;
      else
        value = value - subValue | 0;
      items[i] = value;
    }
  };
  SevenZip$LzBinTree.prototype.normalize_0 = function () {
    var subValue = this._pos - this._cyclicBufferSize_0 | 0;
    this.normalizeLinks_0(this._son_0, this._cyclicBufferSize_0 * 2 | 0, subValue);
    this.normalizeLinks_0(this._hash_0, this._hashSizeSum_0, subValue);
    this.reduceOffsets_za3lpa$(subValue);
  };
  function SevenZip$LzBinTree$Companion() {
    SevenZip$LzBinTree$Companion_instance = this;
    this.kHash2Size_8be2vx$ = 1024;
    this.kHash3Size_8be2vx$ = 65536;
    this.kBT2HashSize_8be2vx$ = 65536;
    this.kStartMaxLen_8be2vx$ = 1;
    this.kHash3Offset_8be2vx$ = 1024;
    this.kEmptyHashValue_8be2vx$ = 0;
    this.kMaxValForNormalize_8be2vx$ = 1073741823;
    this.CrcTable_0 = CRC32_getInstance().TABLE_8be2vx$;
  }
  SevenZip$LzBinTree$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var SevenZip$LzBinTree$Companion_instance = null;
  function SevenZip$LzBinTree$Companion_getInstance() {
    if (SevenZip$LzBinTree$Companion_instance === null) {
      new SevenZip$LzBinTree$Companion();
    }return SevenZip$LzBinTree$Companion_instance;
  }
  SevenZip$LzBinTree.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LzBinTree',
    interfaces: [SevenZip$LzInWindow]
  };
  function SevenZip$LzInWindow() {
    this._bufferBase = null;
    this._stream_7des68$_0 = null;
    this._posLimit_1gdge1$_0 = 0;
    this._streamEndWasReached_9p17lc$_0 = false;
    this._pointerToLastSafePosition_pxq27k$_0 = 0;
    this._bufferOffset = 0;
    this._blockSize_n2c8ka$_0 = 0;
    this._pos = 0;
    this._keepSizeBefore_7m6faz$_0 = 0;
    this._keepSizeAfter_b9120u$_0 = 0;
    this._streamPos = 0;
  }
  SevenZip$LzInWindow.prototype.moveBlock_mkgefx$_0 = function () {
    var offset = this._bufferOffset + this._pos - this._keepSizeBefore_7m6faz$_0 | 0;
    if (offset > 0) {
      offset = offset - 1 | 0;
    }var numBytes = this._bufferOffset + this._streamPos - offset | 0;
    for (var i = 0; i < numBytes; i++)
      ensureNotNull(this._bufferBase)[i] = ensureNotNull(this._bufferBase)[offset + i | 0];
    this._bufferOffset = this._bufferOffset - offset | 0;
  };
  SevenZip$LzInWindow.prototype.readBlock_4p9z4o$_0 = function () {
    if (this._streamEndWasReached_9p17lc$_0)
      return;
    while (true) {
      var size = 0 - this._bufferOffset + this._blockSize_n2c8ka$_0 - this._streamPos | 0;
      if (size === 0)
        return;
      var numReadBytes = ensureNotNull(this._stream_7des68$_0).read_mj6st8$(ensureNotNull(this._bufferBase), this._bufferOffset + this._streamPos | 0, size);
      if (numReadBytes <= 0) {
        this._posLimit_1gdge1$_0 = this._streamPos;
        var pointerToPostion = this._bufferOffset + this._posLimit_1gdge1$_0 | 0;
        if (pointerToPostion > this._pointerToLastSafePosition_pxq27k$_0)
          this._posLimit_1gdge1$_0 = this._pointerToLastSafePosition_pxq27k$_0 - this._bufferOffset | 0;
        this._streamEndWasReached_9p17lc$_0 = true;
        return;
      }this._streamPos = this._streamPos + numReadBytes | 0;
      if (this._streamPos >= (this._pos + this._keepSizeAfter_b9120u$_0 | 0))
        this._posLimit_1gdge1$_0 = this._streamPos - this._keepSizeAfter_b9120u$_0 | 0;
    }
  };
  SevenZip$LzInWindow.prototype.free_p0yfcn$_0 = function () {
    this._bufferBase = null;
  };
  SevenZip$LzInWindow.prototype.create_qt1dr2$ = function (keepSizeBefore, keepSizeAfter, keepSizeReserv) {
    this._keepSizeBefore_7m6faz$_0 = keepSizeBefore;
    this._keepSizeAfter_b9120u$_0 = keepSizeAfter;
    var blockSize = keepSizeBefore + keepSizeAfter + keepSizeReserv | 0;
    if (this._bufferBase == null || this._blockSize_n2c8ka$_0 !== blockSize) {
      this.free_p0yfcn$_0();
      this._blockSize_n2c8ka$_0 = blockSize;
      this._bufferBase = new Int8Array(this._blockSize_n2c8ka$_0);
    }this._pointerToLastSafePosition_pxq27k$_0 = this._blockSize_n2c8ka$_0 - keepSizeAfter | 0;
  };
  SevenZip$LzInWindow.prototype.setStream_sayfrj$ = function (stream) {
    this._stream_7des68$_0 = stream;
  };
  SevenZip$LzInWindow.prototype.releaseStream = function () {
    this._stream_7des68$_0 = null;
  };
  SevenZip$LzInWindow.prototype.init = function () {
    this._bufferOffset = 0;
    this._pos = 0;
    this._streamPos = 0;
    this._streamEndWasReached_9p17lc$_0 = false;
    this.readBlock_4p9z4o$_0();
  };
  SevenZip$LzInWindow.prototype.movePos = function () {
    this._pos = this._pos + 1 | 0;
    if (this._pos > this._posLimit_1gdge1$_0) {
      var pointerToPostion = this._bufferOffset + this._pos | 0;
      if (pointerToPostion > this._pointerToLastSafePosition_pxq27k$_0)
        this.moveBlock_mkgefx$_0();
      this.readBlock_4p9z4o$_0();
    }};
  SevenZip$LzInWindow.prototype.getIndexByte_za3lpa$ = function (index) {
    return ensureNotNull(this._bufferBase)[this._bufferOffset + this._pos + index | 0];
  };
  SevenZip$LzInWindow.prototype.getMatchLen_qt1dr2$ = function (index, distance, limit) {
    var ddis = distance;
    var dlim = limit;
    if (this._streamEndWasReached_9p17lc$_0 && (this._pos + index + dlim | 0) > this._streamPos)
      dlim = this._streamPos - (this._pos + index) | 0;
    ddis = ddis + 1 | 0;
    var pby = this._bufferOffset + this._pos + index | 0;
    var i = 0;
    while (i < dlim && ensureNotNull(this._bufferBase)[pby + i | 0] === ensureNotNull(this._bufferBase)[pby + i - ddis | 0]) {
      i = i + 1 | 0;
    }
    return i;
  };
  SevenZip$LzInWindow.prototype.getNumAvailableBytes = function () {
    return this._streamPos - this._pos | 0;
  };
  SevenZip$LzInWindow.prototype.reduceOffsets_za3lpa$ = function (subValue) {
    this._bufferOffset = this._bufferOffset + subValue | 0;
    this._posLimit_1gdge1$_0 = this._posLimit_1gdge1$_0 - subValue | 0;
    this._pos = this._pos - subValue | 0;
    this._streamPos = this._streamPos - subValue | 0;
  };
  SevenZip$LzInWindow.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LzInWindow',
    interfaces: []
  };
  function SevenZip$LzOutWindow() {
    this._buffer_0 = null;
    this._pos_0 = 0;
    this._windowSize_0 = 0;
    this._streamPos_0 = 0;
    this._stream_0 = null;
  }
  SevenZip$LzOutWindow.prototype.create_za3lpa$ = function (windowSize) {
    if (this._buffer_0 == null || this._windowSize_0 !== windowSize)
      this._buffer_0 = new Int8Array(windowSize);
    this._windowSize_0 = windowSize;
    this._pos_0 = 0;
    this._streamPos_0 = 0;
  };
  SevenZip$LzOutWindow.prototype.setStream_ceqwhy$ = function (stream) {
    this.releaseStream();
    this._stream_0 = stream;
  };
  SevenZip$LzOutWindow.prototype.releaseStream = function () {
    this.flush();
    this._stream_0 = null;
  };
  SevenZip$LzOutWindow.prototype.init_6taknv$ = function (solid) {
    if (!solid) {
      this._streamPos_0 = 0;
      this._pos_0 = 0;
    }};
  SevenZip$LzOutWindow.prototype.flush = function () {
    var size = this._pos_0 - this._streamPos_0 | 0;
    if (size === 0)
      return;
    ensureNotNull(this._stream_0).write_mj6st8$(ensureNotNull(this._buffer_0), this._streamPos_0, size);
    if (this._pos_0 >= this._windowSize_0)
      this._pos_0 = 0;
    this._streamPos_0 = this._pos_0;
  };
  SevenZip$LzOutWindow.prototype.copyBlock_vux9f0$ = function (distance, len) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var llen = len;
    var pos = this._pos_0 - distance - 1 | 0;
    if (pos < 0)
      pos = pos + this._windowSize_0 | 0;
    while (llen !== 0) {
      if (pos >= this._windowSize_0)
        pos = 0;
      tmp$_3 = (tmp$_2 = this._pos_0, this._pos_0 = tmp$_2 + 1 | 0, tmp$_2);
      tmp$_1 = ensureNotNull(this._buffer_0);
      tmp$_0 = (tmp$ = pos, pos = tmp$ + 1 | 0, tmp$);
      ensureNotNull(this._buffer_0)[tmp$_3] = tmp$_1[tmp$_0];
      if (this._pos_0 >= this._windowSize_0)
        this.flush();
      llen = llen - 1 | 0;
    }
  };
  SevenZip$LzOutWindow.prototype.putByte_s8j3t7$ = function (b) {
    var tmp$;
    ensureNotNull(this._buffer_0)[tmp$ = this._pos_0, this._pos_0 = tmp$ + 1 | 0, tmp$] = b;
    if (this._pos_0 >= this._windowSize_0)
      this.flush();
  };
  SevenZip$LzOutWindow.prototype.getByte_za3lpa$ = function (distance) {
    var pos = this._pos_0 - distance - 1 | 0;
    if (pos < 0)
      pos = pos + this._windowSize_0 | 0;
    return ensureNotNull(this._buffer_0)[pos];
  };
  SevenZip$LzOutWindow.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LzOutWindow',
    interfaces: []
  };
  SevenZip.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'SevenZip',
    interfaces: []
  };
  var SevenZip_instance = null;
  function SevenZip_getInstance() {
    if (SevenZip_instance === null) {
      new SevenZip();
    }return SevenZip_instance;
  }
  function and($receiver, mask) {
    return $receiver & mask;
  }
  function shl($receiver, that) {
    return $receiver << that;
  }
  function shr($receiver, that) {
    return $receiver >> that;
  }
  function BitReader(s) {
    this.s = s;
    this.bitdata = 0;
    this.bitsavailable = 0;
    this.sbuffers_t72oso$_0 = new ByteArrayDeque();
    this.BIG_CHUNK_SIZE = 8192;
    this.tempBA_fp4ybv$_0 = new Int8Array(this.BIG_CHUNK_SIZE);
    this.temp_1bb310$_0 = new Int8Array(4);
  }
  BitReader.prototype.discardBits = defineInlineFunction('korio-root-korio.com.soywiz.korio.compression.util.BitReader.discardBits', function () {
    this.bitdata = 0;
    this.bitsavailable = 0;
    return this;
  });
  Object.defineProperty(BitReader.prototype, 'requirePrepare', {
    get: function () {
      return this.sbuffers_t72oso$_0.availableRead < this.BIG_CHUNK_SIZE;
    }
  });
  BitReader.prototype.prepareBigChunk = function (continuation) {
    return this.prepareBytesUpTo_za3lpa$(this.BIG_CHUNK_SIZE, continuation);
  };
  function Coroutine$prepareBigChunkIfRequired($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$prepareBigChunkIfRequired.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$prepareBigChunkIfRequired.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$prepareBigChunkIfRequired.prototype.constructor = Coroutine$prepareBigChunkIfRequired;
  Coroutine$prepareBigChunkIfRequired.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.requirePrepare) {
              this.state_0 = 2;
              this.result_0 = this.$this.prepareBigChunk(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BitReader.prototype.prepareBigChunkIfRequired = function (continuation_0, suspended) {
    var instance = new Coroutine$prepareBigChunkIfRequired(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  defineInlineFunction('korio-root-korio.com.soywiz.korio.compression.util.BitReader.prepareBigChunkIfRequired', function (continuation) {
    if (this.requirePrepare) {
      Kotlin.suspendCall(this.prepareBigChunk(Kotlin.coroutineReceiver()));
    }});
  BitReader.prototype.returnToBuffer_mj6st8$ = function (data, offset, size) {
    this.sbuffers_t72oso$_0.write_mj6st8$(data, offset, size);
  };
  function Coroutine$prepareBytesUpTo_za3lpa$($this, expectedBytes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$read = void 0;
    this.local$expectedBytes = expectedBytes_0;
  }
  Coroutine$prepareBytesUpTo_za3lpa$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$prepareBytesUpTo_za3lpa$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$prepareBytesUpTo_za3lpa$.prototype.constructor = Coroutine$prepareBytesUpTo_za3lpa$;
  Coroutine$prepareBytesUpTo_za3lpa$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.$this.sbuffers_t72oso$_0.availableRead >= this.local$expectedBytes) {
              this.state_0 = 5;
              continue;
            }
            var tmp$ = this.$this.s;
            var tmp$_0 = this.$this.tempBA_fp4ybv$_0;
            var a = this.$this.tempBA_fp4ybv$_0.length;
            this.state_0 = 3;
            this.result_0 = tmp$.read_mj6st8$(tmp$_0, 0, Math_0.min(a, this.local$expectedBytes), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$read = this.result_0;
            if (this.local$read <= 0) {
              this.state_0 = 5;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.$this.sbuffers_t72oso$_0.write_mj6st8$(this.$this.tempBA_fp4ybv$_0, 0, this.local$read);
            this.state_0 = 2;
            continue;
          case 5:
            return this.$this;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BitReader.prototype.prepareBytesUpTo_za3lpa$ = function (expectedBytes_0, continuation_0, suspended) {
    var instance = new Coroutine$prepareBytesUpTo_za3lpa$(this, expectedBytes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  BitReader.prototype.readBits_za3lpa$ = function (bitcount) {
    while (this.bitsavailable < bitcount) {
      this.bitdata = this.bitdata | this._su8_100gz5$_0() << this.bitsavailable;
      this.bitsavailable = this.bitsavailable + 8 | 0;
    }
    var readed = this.bitdata & (1 << bitcount) - 1;
    this.bitdata = this.bitdata >>> bitcount;
    this.bitsavailable = this.bitsavailable - bitcount | 0;
    return readed;
  };
  BitReader.prototype.sreadBit = function () {
    return this.readBits_za3lpa$(1) !== 0;
  };
  BitReader.prototype._su8_100gz5$_0 = function () {
    return this.sbuffers_t72oso$_0.readByte();
  };
  BitReader.prototype.sbytes_noalign_3fbn1q$ = function (count, out) {
    for (var n = 0; n < count; n++)
      out[n] = toByte(this._su8_100gz5$_0());
    return out;
  };
  BitReader.prototype.sbytes_za3lpa$ = function (count) {
    return this.sbytes_3fbn1q$(count, new Int8Array(count));
  };
  BitReader.prototype.sbytes_3fbn1q$ = function (count, out) {
    this.bitdata = 0;
    this.bitsavailable = 0;
    return this.sbytes_noalign_3fbn1q$(count, out);
  };
  BitReader.prototype.su8 = function () {
    this.bitdata = 0;
    this.bitsavailable = 0;
    return this._su8_100gz5$_0();
  };
  BitReader.prototype.su16LE = function () {
    return readU16LE(this.sbytes_3fbn1q$(2, this.temp_1bb310$_0), 0);
  };
  BitReader.prototype.su32LE = function () {
    return readS32LE(this.sbytes_3fbn1q$(4, this.temp_1bb310$_0), 0);
  };
  BitReader.prototype.su32BE = function () {
    return readS32BE(this.sbytes_3fbn1q$(4, this.temp_1bb310$_0), 0);
  };
  function Coroutine$abytes_3fbn1q$($this, count_0, out_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$count = count_0;
    this.local$out = out_0;
  }
  Coroutine$abytes_3fbn1q$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$abytes_3fbn1q$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$abytes_3fbn1q$.prototype.constructor = Coroutine$abytes_3fbn1q$;
  Coroutine$abytes_3fbn1q$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$out === void 0)
              this.local$out = new Int8Array(this.local$count);
            this.state_0 = 2;
            this.result_0 = this.$this.prepareBytesUpTo_za3lpa$(this.local$count, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.sbytes_3fbn1q$(this.local$count, this.local$out);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BitReader.prototype.abytes_3fbn1q$ = function (count_0, out_0, continuation_0, suspended) {
    var instance = new Coroutine$abytes_3fbn1q$(this, count_0, out_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_mj6st8$_3($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$_3.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$_3.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$_3.prototype.constructor = Coroutine$read_mj6st8$_3;
  Coroutine$read_mj6st8$_3.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.prepareBytesUpTo_za3lpa$(this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.sbuffers_t72oso$_0.read_mj6st8$(this.local$buffer, this.local$offset, this.local$len);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BitReader.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$_3(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$close_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_0.prototype.constructor = Coroutine$close_0;
  Coroutine$close_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.s.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BitReader.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$strz($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = void 0;
    this.local$s = void 0;
    this.local$c = void 0;
  }
  Coroutine$strz.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$strz.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$strz.prototype.constructor = Coroutine$strz;
  Coroutine$strz.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$buffer = ByteArrayBuilder_init(4096);
            this.local$s = MemorySyncStream_0(this.local$buffer);
            this.$this.bitdata = 0;
            this.$this.bitsavailable = 0;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.$this.requirePrepare) {
              this.state_0 = 3;
              this.result_0 = this.$this.prepareBigChunk(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            this.local$c = this.$this._su8_100gz5$_0();
            if (this.local$c === 0) {
              this.state_0 = 6;
              continue;
            } else {
              this.state_0 = 5;
              continue;
            }

          case 5:
            write8_0(this.local$s, this.local$c);
            this.state_0 = 2;
            continue;
          case 6:
            return toString_2(this.local$buffer.toByteArray(), ASCII_getInstance());
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BitReader.prototype.strz = function (continuation_0, suspended) {
    var instance = new Coroutine$strz(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$copyTo_dm3lun$($this, o_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$read = void 0;
    this.local$o = o_0;
  }
  Coroutine$copyTo_dm3lun$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$copyTo_dm3lun$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$copyTo_dm3lun$.prototype.constructor = Coroutine$copyTo_dm3lun$;
  Coroutine$copyTo_dm3lun$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.$this.requirePrepare) {
              this.state_0 = 3;
              this.result_0 = this.$this.prepareBigChunk(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            this.local$read = this.$this.sbuffers_t72oso$_0.read_mj6st8$(this.$this.tempBA_fp4ybv$_0, 0, this.$this.tempBA_fp4ybv$_0.length);
            if (this.local$read <= 0) {
              this.state_0 = 7;
              continue;
            } else {
              this.state_0 = 5;
              continue;
            }

          case 5:
            this.state_0 = 6;
            this.result_0 = writeBytes_0(this.local$o, this.$this.tempBA_fp4ybv$_0, 0, this.local$read, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            this.state_0 = 2;
            continue;
          case 7:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BitReader.prototype.copyTo_dm3lun$ = function (o_0, continuation_0, suspended) {
    var instance = new Coroutine$copyTo_dm3lun$(this, o_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  BitReader.prototype.getPosition = function (continuation) {
    return this.sbuffers_t72oso$_0.read;
  };
  BitReader.prototype.getLength = function (continuation) {
    return this.s.getLength(continuation);
  };
  BitReader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BitReader',
    interfaces: [AsyncInputStreamWithLength]
  };
  function HuffmanTree() {
    HuffmanTree$Companion_getInstance();
    this.value_0 = new Int32Array(1024);
    this.left_0 = new Int32Array(1024);
    this.right_0 = new Int32Array(1024);
    this.nodeOffset_0 = 0;
    this.root_0 = 1023;
    this.ncodes_0 = 0;
    this.COUNTS_0 = new Int32Array(17);
    this.OFFSETS_0 = new Int32Array(17);
    this.COFFSET_0 = new Int32Array(17);
    this.CODES_0 = new Int32Array(288);
    this.ENCODED_VAL_0 = new Int32Array(288);
    this.ENCODED_LEN_0 = new Int8Array(288);
  }
  function HuffmanTree$Companion() {
    HuffmanTree$Companion_instance = this;
    this.INVALID_VALUE_0 = -1;
    this.NIL_0 = 1023;
    this.FAST_BITS_0 = 9;
    this.MAX_LEN_0 = 16;
    this.MAX_CODES_0 = 288;
  }
  HuffmanTree$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var HuffmanTree$Companion_instance = null;
  function HuffmanTree$Companion_getInstance() {
    if (HuffmanTree$Companion_instance === null) {
      new HuffmanTree$Companion();
    }return HuffmanTree$Companion_instance;
  }
  HuffmanTree.prototype.read_st72cc$ = function (reader) {
    var node = this.root_0;
    do {
      node = reader.sreadBit() ? this.right_0[node] : this.left_0[node];
      var tmp$ = node !== 1023;
      if (tmp$) {
        tmp$ = this.value_0[node] === -1;
      }}
     while (tmp$);
    return this.value_0[node];
  };
  HuffmanTree.prototype.resetAlloc_0 = function () {
    this.nodeOffset_0 = 0;
  };
  HuffmanTree.prototype.alloc_0 = function (value, left, right) {
    var tmp$;
    var $receiver = (tmp$ = this.nodeOffset_0, this.nodeOffset_0 = tmp$ + 1 | 0, tmp$);
    this.value_0[$receiver] = value;
    this.left_0[$receiver] = left;
    this.right_0[$receiver] = right;
    return $receiver;
  };
  HuffmanTree.prototype.allocLeaf_0 = function (value) {
    return this.alloc_0(value, 1023, 1023);
  };
  HuffmanTree.prototype.allocNode_0 = function (left, right) {
    return this.alloc_0(-1, left, right);
  };
  HuffmanTree.prototype.get_value_0 = function ($receiver) {
    return this.value_0[$receiver];
  };
  HuffmanTree.prototype.get_left_0 = function ($receiver) {
    return this.left_0[$receiver];
  };
  HuffmanTree.prototype.get_right_0 = function ($receiver) {
    return this.right_0[$receiver];
  };
  HuffmanTree.prototype.fromLengths_nd5v6f$ = function (codeLengths, start, end) {
    if (start === void 0)
      start = 0;
    if (end === void 0)
      end = codeLengths.length;
    var tmp$, tmp$_0, tmp$_1;
    var oldOffset = 0;
    var oldCount = 0;
    var ncodes = end - start | 0;
    this.resetAlloc_0();
    var $receiver = this.COUNTS_0;
    arrayfill($receiver, 0, 0, $receiver.length);
    for (var n = start; n < end; n++) {
      var codeLen = codeLengths[n];
      if (!(0 <= codeLen && codeLen <= 16)) {
        throw IllegalStateException_init(('Invalid HuffmanTree.codeLengths ' + codeLen).toString());
      }var tmp$_2;
      tmp$_2 = this.COUNTS_0;
      tmp$_2[codeLen] = tmp$_2[codeLen] + 1 | 0;
    }
    var currentOffset = 0;
    for (var n_0 = 0; n_0 < 16; n_0++) {
      var count = this.COUNTS_0[n_0];
      this.OFFSETS_0[n_0] = currentOffset;
      this.COFFSET_0[n_0] = currentOffset;
      currentOffset = currentOffset + count | 0;
    }
    for (var n_1 = start; n_1 < end; n_1++) {
      var codeLen_0 = codeLengths[n_1];
      tmp$_0 = this.CODES_0;
      var tmp$_3;
      tmp$_3 = this.COFFSET_0;
      tmp$ = tmp$_3[codeLen_0];
      tmp$_3[codeLen_0] = tmp$ + 1 | 0;
      tmp$_0[tmp$] = n_1 - start | 0;
    }
    for (var i = 16; i >= 1; i--) {
      var newOffset = this.nodeOffset_0;
      var OFFSET = this.OFFSETS_0[i];
      var SIZE = this.COUNTS_0[i];
      for (var j = 0; j < SIZE; j++)
        this.allocLeaf_0(this.CODES_0[OFFSET + j | 0]);
      tmp$_1 = oldCount;
      for (var j_0 = 0; j_0 < tmp$_1; j_0 += 2)
        this.allocNode_0(oldOffset + j_0 | 0, oldOffset + j_0 + 1 | 0);
      oldOffset = newOffset;
      oldCount = SIZE + (oldCount / 2 | 0) | 0;
      if (oldCount >= 2 && oldCount % 2 !== 0) {
        throw IllegalStateException_init(('This canonical code does not represent a Huffman code tree: ' + oldCount).toString());
      }}
    if (oldCount !== 2) {
      throw IllegalStateException_init('This canonical code does not represent a Huffman code tree'.toString());
    }this.root_0 = this.allocNode_0(this.nodeOffset_0 - 2 | 0, this.nodeOffset_0 - 1 | 0);
    this.ncodes_0 = ncodes;
    return this;
  };
  HuffmanTree.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HuffmanTree',
    interfaces: []
  };
  function SlidingWindow(nbits) {
    this.nbits = nbits;
    this.data = new Int8Array(1 << this.nbits);
    this.mask = this.data.length - 1 | 0;
    this.pos = 0;
  }
  SlidingWindow.prototype.get_za3lpa$ = function (offset) {
    return this.data[this.pos - offset & this.mask] & 255;
  };
  SlidingWindow.prototype.getPut_za3lpa$ = function (offset) {
    return this.put_za3lpa$(this.get_za3lpa$(offset));
  };
  SlidingWindow.prototype.put_za3lpa$ = function (value) {
    this.data[this.pos] = toByte(value);
    this.pos = this.pos + 1 & this.mask;
    return value;
  };
  SlidingWindow.prototype.putBytes_mj6st8$ = function (bytes, offset, len) {
    for (var n = 0; n < len; n++) {
      this.put_za3lpa$(bytes[offset + n | 0] & 255);
    }
  };
  SlidingWindow.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SlidingWindow',
    interfaces: []
  };
  function ZipFile(dummy, s, caseSensitive) {
    ZipFile$Companion_getInstance();
    if (caseSensitive === void 0)
      caseSensitive = true;
    this.dummy = dummy;
    this.s = s;
    this.caseSensitive = caseSensitive;
    this.files = LinkedHashMap_init();
    this.filesPerFolder = LinkedHashMap_init();
  }
  function ZipFile$Companion() {
    ZipFile$Companion_instance = this;
    this.PK_END_8be2vx$ = new Int8Array([80, 75, 5, 6]);
  }
  function Coroutine$invoke_wgmqyx$($this, s_0, caseSensitive_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$s = s_0;
    this.local$caseSensitive = caseSensitive_0;
  }
  Coroutine$invoke_wgmqyx$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$invoke_wgmqyx$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$invoke_wgmqyx$.prototype.constructor = Coroutine$invoke_wgmqyx$;
  Coroutine$invoke_wgmqyx$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$caseSensitive === void 0)
              this.local$caseSensitive = true;
            this.local$$receiver = new ZipFile(false, this.local$s, this.local$caseSensitive);
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.read_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$$receiver;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZipFile$Companion.prototype.invoke_wgmqyx$ = function (s_0, caseSensitive_0, continuation_0, suspended) {
    var instance = new Coroutine$invoke_wgmqyx$(this, s_0, caseSensitive_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  ZipFile$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ZipFile$Companion_instance = null;
  function ZipFile$Companion_getInstance() {
    if (ZipFile$Companion_instance === null) {
      new ZipFile$Companion();
    }return ZipFile$Companion_instance;
  }
  ZipFile.prototype.normalizeName_61zpoe$ = function (name) {
    return this.caseSensitive ? trim(name, Kotlin.charArrayOf(47)) : trim(name, Kotlin.charArrayOf(47)).toLowerCase();
  };
  function Coroutine$read_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$endBytes = void 0;
    this.local$pk_endIndex = void 0;
    this.local$fileLength = void 0;
    this.local$chunkSize = void 0;
    this.local$entriesInDirectory = void 0;
    this.local$ds = void 0;
    this.local$n = void 0;
    this.local$compressionMethod = void 0;
    this.local$fileTime = void 0;
    this.local$fileDate = void 0;
    this.local$compressedSize = void 0;
    this.local$uncompressedSize = void 0;
    this.local$headerOffset = void 0;
    this.local$name = void 0;
    this.local$isDirectory = void 0;
    this.local$normalizedName = void 0;
    this.local$baseName = void 0;
    this.local$folder = void 0;
  }
  Coroutine$read_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_0.prototype.constructor = Coroutine$read_0;
  Coroutine$read_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$endBytes = EMPTY_BYTE_ARRAY;
            this.state_0 = 2;
            this.result_0 = this.$this.s.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.result_0.compareTo_11rb$(L8) <= 0) {
              this.state_0 = 3;
              this.result_0 = this.$this.s.getLength(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 3:
            throw IllegalArgumentException_init('Zip file is too small length=' + this.result_0.toString());
          case 4:
            this.local$pk_endIndex = -1;
            this.state_0 = 5;
            this.result_0 = this.$this.s.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.local$fileLength = this.result_0;
            this.local$tmp$ = listOf([22, 256, 4096, 65536]).iterator();
            this.state_0 = 6;
            continue;
          case 6:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 11;
              continue;
            }
            this.local$chunkSize = this.local$tmp$.next();
            var a = L0;
            var b = this.local$fileLength.subtract(Kotlin.Long.fromInt(this.local$chunkSize));
            var pos = a.compareTo_11rb$(b) >= 0 ? a : b;
            this.state_0 = 7;
            this.result_0 = this.$this.s.setPosition_s8cxhz$(pos, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 7:
            this.state_0 = 8;
            this.result_0 = this.$this.s.getAvailable(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 8:
            var b_0 = toIntClamp(this.result_0);
            var bytesLen = Math_0.max(this.local$chunkSize, b_0);
            this.state_0 = 9;
            this.result_0 = readBytesExact(this.$this.s, bytesLen, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 9:
            var ebytes = this.result_0;
            this.local$endBytes = ebytes;
            this.local$pk_endIndex = indexOf_2(this.local$endBytes, ZipFile$Companion_getInstance().PK_END_8be2vx$);
            if (this.local$pk_endIndex >= 0) {
              this.state_0 = 11;
              continue;
            } else {
              this.state_0 = 10;
              continue;
            }

          case 10:
            this.state_0 = 6;
            continue;
          case 11:
            if (this.local$pk_endIndex < 0) {
              this.state_0 = 12;
              this.result_0 = this.$this.s.getLength(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 13;
              continue;
            }

          case 12:
            throw IllegalArgumentException_init('Not a zip file (pk_endIndex < 0) : pk_endIndex=' + this.local$pk_endIndex + ' : ' + get_hex(sliceArray(this.local$endBytes, until(this.local$endBytes.length - 32 | 0, this.local$endBytes.length))) + ' : ' + this.result_0.toString());
          case 13:
            var data = openSync(copyOfRange(this.local$endBytes, this.local$pk_endIndex, this.local$endBytes.length));
            var tmp$, tmp$_0;
            var magic = readS32BE_1(data);
            if (magic !== 1347093766)
              throw IllegalStateException_init('Not a zip file ' + get_hex_0(magic) + ' instead of ' + get_hex_0(1347092738));
            var diskNumber = readU16LE_1(data);
            var startDiskNumber = readU16LE_1(data);
            var entriesOnDisk = readU16LE_1(data);
            this.local$entriesInDirectory = readU16LE_1(data);
            var directorySize = readS32LE_1(data);
            var directoryOffset = readS32LE_1(data);
            var commentLength = readU16LE_1(data);
            this.state_0 = 14;
            this.result_0 = sliceWithSize(this.$this.s, Kotlin.Long.fromInt(directoryOffset), Kotlin.Long.fromInt(directorySize), void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 14:
            this.state_0 = 15;
            this.result_0 = readAvailable(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 15:
            this.local$ds = openSync(this.result_0);
            this.local$n = 0;
            this.state_0 = 16;
            continue;
          case 16:
            if (this.local$n >= this.local$entriesInDirectory) {
              this.state_0 = 19;
              continue;
            }
            var tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
            var magic_0 = readS32BE_1(this.local$ds);
            if (magic_0 !== 1347092738)
              throw IllegalStateException_init('Not a zip file record ' + get_hex_0(magic_0) + ' instead of ' + get_hex_0(1347092738));
            var versionMade = readU16LE_1(this.local$ds);
            var versionExtract = readU16LE_1(this.local$ds);
            var flags = readU16LE_1(this.local$ds);
            this.local$compressionMethod = readU16LE_1(this.local$ds);
            this.local$fileTime = readU16LE_1(this.local$ds);
            this.local$fileDate = readU16LE_1(this.local$ds);
            var crc = readS32LE_1(this.local$ds);
            this.local$compressedSize = readS32LE_1(this.local$ds);
            this.local$uncompressedSize = readS32LE_1(this.local$ds);
            var fileNameLength = readU16LE_1(this.local$ds);
            var extraLength = readU16LE_1(this.local$ds);
            var fileCommentLength = readU16LE_1(this.local$ds);
            var diskNumberStart = readU16LE_1(this.local$ds);
            var internalAttributes = readU16LE_1(this.local$ds);
            var externalAttributes = readS32LE_1(this.local$ds);
            this.local$headerOffset = readU32LE_1(this.local$ds);
            this.local$name = readString_2(this.local$ds, fileNameLength);
            var extra = readBytes_0(this.local$ds, extraLength);
            this.local$isDirectory = endsWith(this.local$name, '/');
            this.local$normalizedName = this.$this.normalizeName_61zpoe$(this.local$name);
            var baseFolder = substringBeforeLast(this.local$normalizedName, 47, '');
            this.local$baseName = substringAfterLast(this.local$normalizedName, 47);
            var $receiver = this.$this.filesPerFolder;
            var tmp$_6;
            var value = $receiver.get_11rb$(baseFolder);
            if (value == null) {
              var answer = LinkedHashMap_init();
              $receiver.put_xwzc9p$(baseFolder, answer);
              tmp$_6 = answer;
            } else {
              tmp$_6 = value;
            }

            this.local$folder = tmp$_6;
            this.state_0 = 17;
            this.result_0 = sliceStart(this.$this.s, this.local$headerOffset, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 17:
            var headerEntry = this.result_0;
            tmp$_1 = new DosFileDateTime(this.local$fileTime, this.local$fileDate);
            tmp$_2 = Kotlin.Long.fromInt(this.local$n);
            var entry = new ZipEntry2(this.local$name, this.local$compressionMethod, this.local$isDirectory, tmp$_1, this.local$headerOffset.toInt(), tmp$_2, headerEntry, Kotlin.Long.fromInt(this.local$compressedSize).and(L4294967295), Kotlin.Long.fromInt(this.local$uncompressedSize).and(L4294967295));
            var components = plus(listOf_0(''), getPathFullComponents(new PathInfo(this.local$normalizedName)));
            tmp$_3 = components.size;
            for (var m = 1; m < tmp$_3; m++) {
              var f = components.get_za3lpa$(m - 1 | 0);
              var c = components.get_za3lpa$(m);
              var $receiver_0 = this.$this.files;
              var tmp$_7;
              if (!(Kotlin.isType(tmp$_7 = $receiver_0, Map) ? tmp$_7 : throwCCE()).containsKey_11rb$(c)) {
                var $receiver_1 = this.$this.filesPerFolder;
                var tmp$_8;
                var value_0 = $receiver_1.get_11rb$(f);
                if (value_0 == null) {
                  var answer_0 = LinkedHashMap_init();
                  $receiver_1.put_xwzc9p$(f, answer_0);
                  tmp$_8 = answer_0;
                } else {
                  tmp$_8 = value_0;
                }
                var folder2 = tmp$_8;
                tmp$_4 = new DosFileDateTime(0, 0);
                tmp$_5 = openAsync(new Int8Array([]));
                var entry2 = new ZipEntry2(c, 0, true, tmp$_4, 0, L0, tmp$_5, L0, L0);
                var key = get_baseName(new PathInfo(c));
                folder2.put_xwzc9p$(key, entry2);
                this.$this.files.put_xwzc9p$(c, entry2);
              }}

            this.local$folder.put_xwzc9p$(this.local$baseName, entry);
            this.$this.files.put_xwzc9p$(this.local$normalizedName, entry);
            this.state_0 = 18;
            continue;
          case 18:
            this.local$n++;
            this.state_0 = 16;
            continue;
          case 19:
            tmp$ = new DosFileDateTime(0, 0);
            tmp$_0 = openAsync(new Int8Array([]));
            var $receiver_2 = this.$this.files;
            var value_1 = new ZipEntry2('', 0, true, tmp$, 0, L0, tmp$_0, L0, L0);
            $receiver_2.put_xwzc9p$('', value_1);
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZipFile.prototype.read_0 = function (continuation_0, suspended) {
    var instance = new Coroutine$read_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  ZipFile.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ZipFile',
    interfaces: []
  };
  function DosFileDateTime(dosTime, dosDate) {
    this.dosTime = dosTime;
    this.dosDate = dosDate;
    this.utc = DateTime.Companion.createAdjusted_ui44o2$(this.fullYear, this.month1, this.day, this.hours, this.minutes, this.seconds);
  }
  Object.defineProperty(DosFileDateTime.prototype, 'seconds', {
    get: function () {
      return 2 * extract(this.dosTime, 0, 5) | 0;
    }
  });
  Object.defineProperty(DosFileDateTime.prototype, 'minutes', {
    get: function () {
      return extract(this.dosTime, 5, 6);
    }
  });
  Object.defineProperty(DosFileDateTime.prototype, 'hours', {
    get: function () {
      return extract(this.dosTime, 11, 5);
    }
  });
  Object.defineProperty(DosFileDateTime.prototype, 'day', {
    get: function () {
      return extract(this.dosDate, 0, 5);
    }
  });
  Object.defineProperty(DosFileDateTime.prototype, 'month1', {
    get: function () {
      return extract(this.dosDate, 5, 4);
    }
  });
  Object.defineProperty(DosFileDateTime.prototype, 'fullYear', {
    get: function () {
      return 1980 + extract(this.dosDate, 9, 7) | 0;
    }
  });
  DosFileDateTime.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DosFileDateTime',
    interfaces: []
  };
  DosFileDateTime.prototype.component1 = function () {
    return this.dosTime;
  };
  DosFileDateTime.prototype.component2 = function () {
    return this.dosDate;
  };
  DosFileDateTime.prototype.copy_vux9f0$ = function (dosTime, dosDate) {
    return new DosFileDateTime(dosTime === void 0 ? this.dosTime : dosTime, dosDate === void 0 ? this.dosDate : dosDate);
  };
  DosFileDateTime.prototype.toString = function () {
    return 'DosFileDateTime(dosTime=' + Kotlin.toString(this.dosTime) + (', dosDate=' + Kotlin.toString(this.dosDate)) + ')';
  };
  DosFileDateTime.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.dosTime) | 0;
    result = result * 31 + Kotlin.hashCode(this.dosDate) | 0;
    return result;
  };
  DosFileDateTime.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.dosTime, other.dosTime) && Kotlin.equals(this.dosDate, other.dosDate)))));
  };
  function ZipEntry(versionMadeBy, extractVersion, headerOffset, compressionMethod, flags, date, time, crc32, compressedSize, uncompressedSize, nameBytes, extraBytes, diskNumberStart, internalAttributes, externalAttributes, commentBytes) {
    this.versionMadeBy = versionMadeBy;
    this.extractVersion = extractVersion;
    this.headerOffset = headerOffset;
    this.compressionMethod = compressionMethod;
    this.flags = flags;
    this.date = date;
    this.time = time;
    this.crc32 = crc32;
    this.compressedSize = compressedSize;
    this.uncompressedSize = uncompressedSize;
    this.nameBytes = nameBytes;
    this.extraBytes = extraBytes;
    this.diskNumberStart = diskNumberStart;
    this.internalAttributes = internalAttributes;
    this.externalAttributes = externalAttributes;
    this.commentBytes = commentBytes;
  }
  ZipEntry.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ZipEntry',
    interfaces: []
  };
  ZipEntry.prototype.component1 = function () {
    return this.versionMadeBy;
  };
  ZipEntry.prototype.component2 = function () {
    return this.extractVersion;
  };
  ZipEntry.prototype.component3 = function () {
    return this.headerOffset;
  };
  ZipEntry.prototype.component4 = function () {
    return this.compressionMethod;
  };
  ZipEntry.prototype.component5 = function () {
    return this.flags;
  };
  ZipEntry.prototype.component6 = function () {
    return this.date;
  };
  ZipEntry.prototype.component7 = function () {
    return this.time;
  };
  ZipEntry.prototype.component8 = function () {
    return this.crc32;
  };
  ZipEntry.prototype.component9 = function () {
    return this.compressedSize;
  };
  ZipEntry.prototype.component10 = function () {
    return this.uncompressedSize;
  };
  ZipEntry.prototype.component11 = function () {
    return this.nameBytes;
  };
  ZipEntry.prototype.component12 = function () {
    return this.extraBytes;
  };
  ZipEntry.prototype.component13 = function () {
    return this.diskNumberStart;
  };
  ZipEntry.prototype.component14 = function () {
    return this.internalAttributes;
  };
  ZipEntry.prototype.component15 = function () {
    return this.externalAttributes;
  };
  ZipEntry.prototype.component16 = function () {
    return this.commentBytes;
  };
  ZipEntry.prototype.copy_8y61tl$ = function (versionMadeBy, extractVersion, headerOffset, compressionMethod, flags, date, time, crc32, compressedSize, uncompressedSize, nameBytes, extraBytes, diskNumberStart, internalAttributes, externalAttributes, commentBytes) {
    return new ZipEntry(versionMadeBy === void 0 ? this.versionMadeBy : versionMadeBy, extractVersion === void 0 ? this.extractVersion : extractVersion, headerOffset === void 0 ? this.headerOffset : headerOffset, compressionMethod === void 0 ? this.compressionMethod : compressionMethod, flags === void 0 ? this.flags : flags, date === void 0 ? this.date : date, time === void 0 ? this.time : time, crc32 === void 0 ? this.crc32 : crc32, compressedSize === void 0 ? this.compressedSize : compressedSize, uncompressedSize === void 0 ? this.uncompressedSize : uncompressedSize, nameBytes === void 0 ? this.nameBytes : nameBytes, extraBytes === void 0 ? this.extraBytes : extraBytes, diskNumberStart === void 0 ? this.diskNumberStart : diskNumberStart, internalAttributes === void 0 ? this.internalAttributes : internalAttributes, externalAttributes === void 0 ? this.externalAttributes : externalAttributes, commentBytes === void 0 ? this.commentBytes : commentBytes);
  };
  ZipEntry.prototype.toString = function () {
    return 'ZipEntry(versionMadeBy=' + Kotlin.toString(this.versionMadeBy) + (', extractVersion=' + Kotlin.toString(this.extractVersion)) + (', headerOffset=' + Kotlin.toString(this.headerOffset)) + (', compressionMethod=' + Kotlin.toString(this.compressionMethod)) + (', flags=' + Kotlin.toString(this.flags)) + (', date=' + Kotlin.toString(this.date)) + (', time=' + Kotlin.toString(this.time)) + (', crc32=' + Kotlin.toString(this.crc32)) + (', compressedSize=' + Kotlin.toString(this.compressedSize)) + (', uncompressedSize=' + Kotlin.toString(this.uncompressedSize)) + (', nameBytes=' + Kotlin.toString(this.nameBytes)) + (', extraBytes=' + Kotlin.toString(this.extraBytes)) + (', diskNumberStart=' + Kotlin.toString(this.diskNumberStart)) + (', internalAttributes=' + Kotlin.toString(this.internalAttributes)) + (', externalAttributes=' + Kotlin.toString(this.externalAttributes)) + (', commentBytes=' + Kotlin.toString(this.commentBytes)) + ')';
  };
  ZipEntry.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.versionMadeBy) | 0;
    result = result * 31 + Kotlin.hashCode(this.extractVersion) | 0;
    result = result * 31 + Kotlin.hashCode(this.headerOffset) | 0;
    result = result * 31 + Kotlin.hashCode(this.compressionMethod) | 0;
    result = result * 31 + Kotlin.hashCode(this.flags) | 0;
    result = result * 31 + Kotlin.hashCode(this.date) | 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    result = result * 31 + Kotlin.hashCode(this.crc32) | 0;
    result = result * 31 + Kotlin.hashCode(this.compressedSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.uncompressedSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.nameBytes) | 0;
    result = result * 31 + Kotlin.hashCode(this.extraBytes) | 0;
    result = result * 31 + Kotlin.hashCode(this.diskNumberStart) | 0;
    result = result * 31 + Kotlin.hashCode(this.internalAttributes) | 0;
    result = result * 31 + Kotlin.hashCode(this.externalAttributes) | 0;
    result = result * 31 + Kotlin.hashCode(this.commentBytes) | 0;
    return result;
  };
  ZipEntry.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.versionMadeBy, other.versionMadeBy) && Kotlin.equals(this.extractVersion, other.extractVersion) && Kotlin.equals(this.headerOffset, other.headerOffset) && Kotlin.equals(this.compressionMethod, other.compressionMethod) && Kotlin.equals(this.flags, other.flags) && Kotlin.equals(this.date, other.date) && Kotlin.equals(this.time, other.time) && Kotlin.equals(this.crc32, other.crc32) && Kotlin.equals(this.compressedSize, other.compressedSize) && Kotlin.equals(this.uncompressedSize, other.uncompressedSize) && Kotlin.equals(this.nameBytes, other.nameBytes) && Kotlin.equals(this.extraBytes, other.extraBytes) && Kotlin.equals(this.diskNumberStart, other.diskNumberStart) && Kotlin.equals(this.internalAttributes, other.internalAttributes) && Kotlin.equals(this.externalAttributes, other.externalAttributes) && Kotlin.equals(this.commentBytes, other.commentBytes)))));
  };
  function ZipEntry2(path, compressionMethod, isDirectory, time, offset, inode, headerEntry, compressedSize, uncompressedSize) {
    this.path = path;
    this.compressionMethod = compressionMethod;
    this.isDirectory = isDirectory;
    this.time = time;
    this.offset = offset;
    this.inode = inode;
    this.headerEntry = headerEntry;
    this.compressedSize = compressedSize;
    this.uncompressedSize = uncompressedSize;
  }
  ZipEntry2.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ZipEntry2',
    interfaces: []
  };
  ZipEntry2.prototype.component1 = function () {
    return this.path;
  };
  ZipEntry2.prototype.component2 = function () {
    return this.compressionMethod;
  };
  ZipEntry2.prototype.component3 = function () {
    return this.isDirectory;
  };
  ZipEntry2.prototype.component4 = function () {
    return this.time;
  };
  ZipEntry2.prototype.component5 = function () {
    return this.offset;
  };
  ZipEntry2.prototype.component6 = function () {
    return this.inode;
  };
  ZipEntry2.prototype.component7 = function () {
    return this.headerEntry;
  };
  ZipEntry2.prototype.component8 = function () {
    return this.compressedSize;
  };
  ZipEntry2.prototype.component9 = function () {
    return this.uncompressedSize;
  };
  ZipEntry2.prototype.copy_93xlpk$ = function (path, compressionMethod, isDirectory, time, offset, inode, headerEntry, compressedSize, uncompressedSize) {
    return new ZipEntry2(path === void 0 ? this.path : path, compressionMethod === void 0 ? this.compressionMethod : compressionMethod, isDirectory === void 0 ? this.isDirectory : isDirectory, time === void 0 ? this.time : time, offset === void 0 ? this.offset : offset, inode === void 0 ? this.inode : inode, headerEntry === void 0 ? this.headerEntry : headerEntry, compressedSize === void 0 ? this.compressedSize : compressedSize, uncompressedSize === void 0 ? this.uncompressedSize : uncompressedSize);
  };
  ZipEntry2.prototype.toString = function () {
    return 'ZipEntry2(path=' + Kotlin.toString(this.path) + (', compressionMethod=' + Kotlin.toString(this.compressionMethod)) + (', isDirectory=' + Kotlin.toString(this.isDirectory)) + (', time=' + Kotlin.toString(this.time)) + (', offset=' + Kotlin.toString(this.offset)) + (', inode=' + Kotlin.toString(this.inode)) + (', headerEntry=' + Kotlin.toString(this.headerEntry)) + (', compressedSize=' + Kotlin.toString(this.compressedSize)) + (', uncompressedSize=' + Kotlin.toString(this.uncompressedSize)) + ')';
  };
  ZipEntry2.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.path) | 0;
    result = result * 31 + Kotlin.hashCode(this.compressionMethod) | 0;
    result = result * 31 + Kotlin.hashCode(this.isDirectory) | 0;
    result = result * 31 + Kotlin.hashCode(this.time) | 0;
    result = result * 31 + Kotlin.hashCode(this.offset) | 0;
    result = result * 31 + Kotlin.hashCode(this.inode) | 0;
    result = result * 31 + Kotlin.hashCode(this.headerEntry) | 0;
    result = result * 31 + Kotlin.hashCode(this.compressedSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.uncompressedSize) | 0;
    return result;
  };
  ZipEntry2.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.path, other.path) && Kotlin.equals(this.compressionMethod, other.compressionMethod) && Kotlin.equals(this.isDirectory, other.isDirectory) && Kotlin.equals(this.time, other.time) && Kotlin.equals(this.offset, other.offset) && Kotlin.equals(this.inode, other.inode) && Kotlin.equals(this.headerEntry, other.headerEntry) && Kotlin.equals(this.compressedSize, other.compressedSize) && Kotlin.equals(this.uncompressedSize, other.uncompressedSize)))));
  };
  function ZipBuilder() {
    ZipBuilder$Companion_getInstance();
  }
  function ZipBuilder$Companion() {
    ZipBuilder$Companion_instance = this;
  }
  function Coroutine$createZipFromTree_3ekr7n$($this, file_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buf = void 0;
    this.local$file = file_0;
  }
  Coroutine$createZipFromTree_3ekr7n$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$createZipFromTree_3ekr7n$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$createZipFromTree_3ekr7n$.prototype.constructor = Coroutine$createZipFromTree_3ekr7n$;
  Coroutine$createZipFromTree_3ekr7n$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$buf = ByteArrayBuilder_init();
            var mem = MemorySyncStream_0(this.local$buf);
            this.state_0 = 2;
            this.result_0 = createZipFromTreeTo(this.local$file, toAsync(mem), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$buf.toByteArray();
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZipBuilder$Companion.prototype.createZipFromTree_3ekr7n$ = function (file_0, continuation_0, suspended) {
    var instance = new Coroutine$createZipFromTree_3ekr7n$(this, file_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$createZipFromTreeTo_duml5b$($this, file_0, s_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$entries = void 0;
    this.local$directoryStart = void 0;
    this.local$file = file_0;
    this.local$s = s_0;
  }
  Coroutine$createZipFromTreeTo_duml5b$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$createZipFromTreeTo_duml5b$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$createZipFromTreeTo_duml5b$.prototype.constructor = Coroutine$createZipFromTreeTo_duml5b$;
  Coroutine$createZipFromTreeTo_duml5b$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$entries = ArrayList_init();
            this.state_0 = 2;
            this.result_0 = ZipBuilder$Companion_getInstance().addZipFileEntryTree_ta0n$(this.local$s, this.local$file, this.local$entries, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$directoryStart = this.local$s.position;
            this.local$tmp$ = this.local$entries.iterator();
            this.state_0 = 3;
            continue;
          case 3:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 5;
              continue;
            }
            var entry = this.local$tmp$.next();
            this.state_0 = 4;
            this.result_0 = ZipBuilder$Companion_getInstance().addDirEntry_tok55k$(this.local$s, entry, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.state_0 = 3;
            continue;
          case 5:
            var directoryEnd = this.local$s.position;
            var comment = new Int8Array([]);
            var buffer = ByteArrayBuilder_init(4096);
            var s = MemorySyncStream_0(buffer);
            writeString_0(s, 'PK\x05\x06');
            write16LE_1(s, 0);
            write16LE_1(s, 0);
            write16LE_1(s, this.local$entries.size);
            write16LE_1(s, this.local$entries.size);
            write32LE_3(s, directoryEnd.subtract(this.local$directoryStart).toInt());
            write32LE_3(s, this.local$directoryStart.toInt());
            write16LE_1(s, comment.length);
            writeBytes_1(s, comment);
            this.state_0 = 6;
            this.result_0 = writeBytes(this.local$s, buffer.toByteArray(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZipBuilder$Companion.prototype.createZipFromTreeTo_duml5b$ = function (file_0, s_0, continuation_0, suspended) {
    var instance = new Coroutine$createZipFromTreeTo_duml5b$(this, file_0, s_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$addZipFileEntry_3c6d81$($this, s_0, entry_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$size = void 0;
    this.local$versionMadeBy = void 0;
    this.local$extractVersion = void 0;
    this.local$flags = void 0;
    this.local$compressionMethod = void 0;
    this.local$date = void 0;
    this.local$time = void 0;
    this.local$crc32 = void 0;
    this.local$nameBytes = void 0;
    this.local$extraBytes = void 0;
    this.local$compressedSize = void 0;
    this.local$uncompressedSize = void 0;
    this.local$headerOffset = void 0;
    this.local$s = s_0;
    this.local$entry = entry_0;
  }
  Coroutine$addZipFileEntry_3c6d81$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$addZipFileEntry_3c6d81$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$addZipFileEntry_3c6d81$.prototype.constructor = Coroutine$addZipFileEntry_3c6d81$;
  Coroutine$addZipFileEntry_3c6d81$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$entry.size(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$size = this.result_0.toInt();
            this.local$versionMadeBy = 788;
            this.local$extractVersion = 10;
            this.local$flags = 2048;
            this.local$compressionMethod = 0;
            this.local$date = 0;
            this.local$time = 0;
            this.state_0 = 3;
            this.result_0 = checksum_2(this.local$entry, CRC32_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$crc32 = this.result_0;
            var name = trim(get_fullName_0(this.local$entry), Kotlin.charArrayOf(47));
            this.local$nameBytes = toByteArray(name, UTF8);
            this.local$extraBytes = new Int8Array([]);
            this.local$compressedSize = this.local$size;
            this.local$uncompressedSize = this.local$size;
            this.local$headerOffset = this.local$s.position;
            var buffer = ByteArrayBuilder_init(4096);
            var s = MemorySyncStream_0(buffer);
            writeString_0(s, 'PK\x03\x04');
            write16LE_1(s, this.local$extractVersion);
            write16LE_1(s, this.local$flags);
            write16LE_1(s, this.local$compressionMethod);
            write16LE_1(s, this.local$date);
            write16LE_1(s, this.local$time);
            write32LE_3(s, this.local$crc32);
            write32LE_3(s, this.local$compressedSize);
            write32LE_3(s, this.local$uncompressedSize);
            write16LE_1(s, this.local$nameBytes.length);
            write16LE_1(s, this.local$extraBytes.length);
            writeBytes_1(s, this.local$nameBytes);
            writeBytes_1(s, this.local$extraBytes);
            this.state_0 = 4;
            this.result_0 = writeBytes(this.local$s, buffer.toByteArray(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.state_0 = 5;
            this.result_0 = writeFile(this.local$s, this.local$entry, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            return new ZipEntry(this.local$versionMadeBy, this.local$extractVersion, this.local$headerOffset, this.local$compressionMethod, this.local$flags, this.local$date, this.local$time, this.local$crc32, this.local$compressedSize, this.local$uncompressedSize, this.local$nameBytes, this.local$extraBytes, 0, 0, 0, new Int8Array([]));
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZipBuilder$Companion.prototype.addZipFileEntry_3c6d81$ = function (s_0, entry_0, continuation_0, suspended) {
    var instance = new Coroutine$addZipFileEntry_3c6d81$(this, s_0, entry_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$addZipFileEntryTree_ta0n$($this, s_0, entry_0, entries_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$s = s_0;
    this.local$entry = entry_0;
    this.local$entries = entries_0;
  }
  Coroutine$addZipFileEntryTree_ta0n$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$addZipFileEntryTree_ta0n$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$addZipFileEntryTree_ta0n$.prototype.constructor = Coroutine$addZipFileEntryTree_ta0n$;
  Coroutine$addZipFileEntryTree_ta0n$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$entry.isDirectory(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.result_0) {
              this.state_0 = 4;
              this.result_0 = this.local$entry.list(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              this.result_0 = this.$this.addZipFileEntry_3c6d81$(this.local$s, this.local$entry, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            }

          case 3:
            var element = this.result_0;
            this.local$entries.add_11rb$(element);
            this.state_0 = 10;
            continue;
          case 4:
            this.local$tmp$ = this.result_0.iterator();
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            if (!this.result_0) {
              this.state_0 = 9;
              continue;
            } else {
              this.state_0 = 7;
              continue;
            }

          case 7:
            var it = this.local$tmp$.next();
            this.state_0 = 8;
            this.result_0 = this.$this.addZipFileEntryTree_ta0n$(this.local$s, it, this.local$entries, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 8:
            this.state_0 = 5;
            continue;
          case 9:
            this.state_0 = 10;
            continue;
          case 10:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZipBuilder$Companion.prototype.addZipFileEntryTree_ta0n$ = function (s_0, entry_0, entries_0, continuation_0, suspended) {
    var instance = new Coroutine$addZipFileEntryTree_ta0n$(this, s_0, entry_0, entries_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$addDirEntry_tok55k$($this, s_0, e_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$s = s_0;
    this.local$e = e_0;
  }
  Coroutine$addDirEntry_tok55k$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$addDirEntry_tok55k$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$addDirEntry_tok55k$.prototype.constructor = Coroutine$addDirEntry_tok55k$;
  Coroutine$addDirEntry_tok55k$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var buffer = ByteArrayBuilder_init(4096);
            var s = MemorySyncStream_0(buffer);
            writeString_0(s, 'PK\x01\x02');
            write16LE_1(s, this.local$e.versionMadeBy);
            write16LE_1(s, this.local$e.extractVersion);
            write16LE_1(s, this.local$e.flags);
            write16LE_1(s, this.local$e.compressionMethod);
            write16LE_1(s, this.local$e.date);
            write16LE_1(s, this.local$e.time);
            write32LE_3(s, this.local$e.crc32);
            write32LE_3(s, this.local$e.compressedSize);
            write32LE_3(s, this.local$e.uncompressedSize);
            write16LE_1(s, this.local$e.nameBytes.length);
            write16LE_1(s, this.local$e.extraBytes.length);
            write16LE_1(s, this.local$e.commentBytes.length);
            write16LE_1(s, this.local$e.diskNumberStart);
            write16LE_1(s, this.local$e.internalAttributes);
            write32LE_3(s, this.local$e.externalAttributes);
            write32LE_3(s, this.local$e.headerOffset.toInt());
            writeBytes_1(s, this.local$e.nameBytes);
            writeBytes_1(s, this.local$e.extraBytes);
            writeBytes_1(s, this.local$e.commentBytes);
            this.state_0 = 2;
            this.result_0 = writeBytes(this.local$s, buffer.toByteArray(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZipBuilder$Companion.prototype.addDirEntry_tok55k$ = function (s_0, e_0, continuation_0, suspended) {
    var instance = new Coroutine$addDirEntry_tok55k$(this, s_0, e_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  ZipBuilder$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ZipBuilder$Companion_instance = null;
  function ZipBuilder$Companion_getInstance() {
    if (ZipBuilder$Companion_instance === null) {
      new ZipBuilder$Companion();
    }return ZipBuilder$Companion_instance;
  }
  ZipBuilder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ZipBuilder',
    interfaces: []
  };
  function AtomicLazyImpl(initializer) {
    this.initializer__0 = korAtomic(initializer);
    this.value__0 = korAtomic(AtomicLazyImpl$UNINITIALIZED_getInstance());
  }
  function AtomicLazyImpl$UNINITIALIZED() {
    AtomicLazyImpl$UNINITIALIZED_instance = this;
  }
  AtomicLazyImpl$UNINITIALIZED.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'UNINITIALIZED',
    interfaces: []
  };
  var AtomicLazyImpl$UNINITIALIZED_instance = null;
  function AtomicLazyImpl$UNINITIALIZED_getInstance() {
    if (AtomicLazyImpl$UNINITIALIZED_instance === null) {
      new AtomicLazyImpl$UNINITIALIZED();
    }return AtomicLazyImpl$UNINITIALIZED_instance;
  }
  function AtomicLazyImpl$INITIALIZING() {
    AtomicLazyImpl$INITIALIZING_instance = this;
  }
  AtomicLazyImpl$INITIALIZING.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'INITIALIZING',
    interfaces: []
  };
  var AtomicLazyImpl$INITIALIZING_instance = null;
  function AtomicLazyImpl$INITIALIZING_getInstance() {
    if (AtomicLazyImpl$INITIALIZING_instance === null) {
      new AtomicLazyImpl$INITIALIZING();
    }return AtomicLazyImpl$INITIALIZING_instance;
  }
  Object.defineProperty(AtomicLazyImpl.prototype, 'value', {
    get: function () {
      var tmp$;
      if (this.value__0.compareAndSet_xwzc9q$(AtomicLazyImpl$UNINITIALIZED_getInstance(), AtomicLazyImpl$INITIALIZING_getInstance())) {
        var ctor = this.initializer__0.value;
        if (ctor != null && this.initializer__0.compareAndSet_xwzc9q$(ctor, null)) {
          this.value__0.compareAndSet_xwzc9q$(AtomicLazyImpl$INITIALIZING_getInstance(), ctor());
        } else {
          if (!false) {
            var message = 'Check failed.';
            throw IllegalStateException_init(message.toString());
          }}
      }var result;
      do {
        result = this.value__0.value;
      }
       while (result === AtomicLazyImpl$INITIALIZING_getInstance());
      if (!(result !== AtomicLazyImpl$UNINITIALIZED_getInstance() && !equals(result, AtomicLazyImpl$INITIALIZING_getInstance()))) {
        var message_0 = 'Check failed.';
        throw IllegalStateException_init(message_0.toString());
      }return (tmp$ = result) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
    }
  });
  AtomicLazyImpl.prototype.isInitialized = function () {
    return this.value__0.value !== AtomicLazyImpl$UNINITIALIZED_getInstance();
  };
  AtomicLazyImpl.prototype.toString = function () {
    return this.isInitialized() ? toString(this.value__0.value) : 'Lazy value not initialized yet.';
  };
  AtomicLazyImpl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AtomicLazyImpl',
    interfaces: [Lazy]
  };
  function atomicLazy(initializer) {
    return new AtomicLazyImpl(initializer);
  }
  function KorAtomicBase() {
  }
  KorAtomicBase.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'KorAtomicBase',
    interfaces: []
  };
  function KorAtomicNumber() {
  }
  KorAtomicNumber.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'KorAtomicNumber',
    interfaces: [KorAtomicBase]
  };
  function KorAtomicRef(initial) {
    this.value_175vdt$_0 = initial;
  }
  Object.defineProperty(KorAtomicRef.prototype, 'value', {
    get: function () {
      return this.value_175vdt$_0;
    },
    set: function (value) {
      this.value_175vdt$_0 = value;
    }
  });
  KorAtomicRef.prototype.compareAndSet_xwzc9q$ = function (expect, update) {
    var tmp$;
    if (equals(this.value, expect)) {
      this.value = update;
      tmp$ = true;
    } else {
      tmp$ = false;
    }
    return tmp$;
  };
  KorAtomicRef.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KorAtomicRef',
    interfaces: [KorAtomicBase]
  };
  function KorAtomicBoolean(initial) {
    this.value_iholt8$_0 = initial;
  }
  Object.defineProperty(KorAtomicBoolean.prototype, 'value', {
    get: function () {
      return this.value_iholt8$_0;
    },
    set: function (value) {
      this.value_iholt8$_0 = value;
    }
  });
  KorAtomicBoolean.prototype.compareAndSet_xwzc9q$ = function (expect, update) {
    var tmp$;
    if (this.value === expect) {
      this.value = update;
      tmp$ = true;
    } else {
      tmp$ = false;
    }
    return tmp$;
  };
  KorAtomicBoolean.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KorAtomicBoolean',
    interfaces: [KorAtomicBase]
  };
  function KorAtomicInt(initial) {
    this.value_mvnwat$_0 = initial;
  }
  Object.defineProperty(KorAtomicInt.prototype, 'value', {
    get: function () {
      return this.value_mvnwat$_0;
    },
    set: function (value) {
      this.value_mvnwat$_0 = value;
    }
  });
  KorAtomicInt.prototype.compareAndSet_xwzc9q$ = function (expect, update) {
    var tmp$;
    if (this.value === expect) {
      this.value = update;
      tmp$ = true;
    } else {
      tmp$ = false;
    }
    return tmp$;
  };
  KorAtomicInt.prototype.addAndGet_9ekb3a$ = function (delta) {
    this.value = this.value + delta | 0;
    return this.value;
  };
  KorAtomicInt.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KorAtomicInt',
    interfaces: [KorAtomicNumber]
  };
  function KorAtomicLong(initial) {
    this.value_sitbnm$_0 = initial;
  }
  Object.defineProperty(KorAtomicLong.prototype, 'value', {
    get: function () {
      return this.value_sitbnm$_0;
    },
    set: function (value) {
      this.value_sitbnm$_0 = value;
    }
  });
  KorAtomicLong.prototype.compareAndSet_xwzc9q$ = function (expect, update) {
    var tmp$;
    if (equals(this.value, expect)) {
      this.value = update;
      tmp$ = true;
    } else {
      tmp$ = false;
    }
    return tmp$;
  };
  KorAtomicLong.prototype.addAndGet_9ekb3a$ = function (delta) {
    this.value = this.value.add(delta);
    return this.value;
  };
  KorAtomicLong.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KorAtomicLong',
    interfaces: [KorAtomicNumber]
  };
  function incrementAndGet($receiver) {
    return $receiver.addAndGet_9ekb3a$(1);
  }
  function incrementAndGet_0($receiver) {
    return $receiver.addAndGet_9ekb3a$(L1);
  }
  var getValue = defineInlineFunction('korio-root-korio.com.soywiz.korio.concurrent.atomic.getValue_t5nv5h$', function ($receiver, obj, prop) {
    return $receiver.value;
  });
  var setValue = defineInlineFunction('korio-root-korio.com.soywiz.korio.concurrent.atomic.setValue_tunzxr$', function ($receiver, obj, prop, v) {
    $receiver.value = v;
  });
  var getValue_0 = defineInlineFunction('korio-root-korio.com.soywiz.korio.concurrent.atomic.getValue_5jquo8$', function ($receiver, obj, prop) {
    return $receiver.value;
  });
  var setValue_0 = defineInlineFunction('korio-root-korio.com.soywiz.korio.concurrent.atomic.setValue_wfp5b$', function ($receiver, obj, prop, v) {
    $receiver.value = v;
  });
  var getValue_1 = defineInlineFunction('korio-root-korio.com.soywiz.korio.concurrent.atomic.getValue_z9yke7$', function ($receiver, obj, prop) {
    return $receiver.value;
  });
  var setValue_1 = defineInlineFunction('korio-root-korio.com.soywiz.korio.concurrent.atomic.setValue_kze3dd$', function ($receiver, obj, prop, v) {
    $receiver.value = v;
  });
  var getValue_2 = defineInlineFunction('korio-root-korio.com.soywiz.korio.concurrent.atomic.getValue_mhf90a$', function ($receiver, obj, prop) {
    return $receiver.value;
  });
  var setValue_2 = defineInlineFunction('korio-root-korio.com.soywiz.korio.concurrent.atomic.setValue_86vhwj$', function ($receiver, obj, prop, v) {
    $receiver.value = v;
  });
  function KDynamic() {
    KDynamic$Companion_getInstance();
  }
  function KDynamic$Companion() {
    KDynamic$Companion_instance = this;
    KDynamic.call(this);
  }
  KDynamic$Companion.prototype.invoke_hp0t9l$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.KDynamic.Companion.invoke_hp0t9l$', wrapFunction(function () {
    var KDynamic = _.com.soywiz.korio.dynamic.KDynamic;
    return function (callback) {
      return callback(KDynamic.Companion);
    };
  }));
  KDynamic$Companion.prototype.invoke_51zbbl$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.KDynamic.Companion.invoke_51zbbl$', wrapFunction(function () {
    var KDynamic = _.com.soywiz.korio.dynamic.KDynamic;
    return function (value, callback) {
      return callback(KDynamic.Companion, value);
    };
  }));
  KDynamic$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: [KDynamic]
  };
  var KDynamic$Companion_instance = null;
  function KDynamic$Companion_getInstance() {
    if (KDynamic$Companion_instance === null) {
      new KDynamic$Companion();
    }return KDynamic$Companion_instance;
  }
  Object.defineProperty(KDynamic.prototype, 'global', {
    get: function () {
      return DynamicInternal_getInstance().global;
    }
  });
  function KDynamic$Invokable() {
  }
  KDynamic$Invokable.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Invokable',
    interfaces: []
  };
  KDynamic.prototype.dynamicInvoke_m5qcm2$ = function ($receiver, name, args) {
    if ($receiver == null)
      return null;
    else if (Kotlin.isType($receiver, KDynamic$Invokable))
      return $receiver.invoke_ykr607$(name, args);
    else
      return DynamicInternal_getInstance().invoke_8e09lf$($receiver, name, args);
  };
  KDynamic.prototype.set_30cd51$ = function ($receiver, key, value) {
    var tmp$, tmp$_0;
    if (Kotlin.isType($receiver, MutableMap))
      this.set_30cd51$(Kotlin.isType(tmp$ = $receiver, MutableMap) ? tmp$ : throwCCE(), key, value);
    else if (Kotlin.isType($receiver, MutableList))
      (Kotlin.isType(tmp$_0 = $receiver, MutableList) ? tmp$_0 : throwCCE()).set_wxm5ur$(this.toInt_mzud1t$(key), value);
    else
      DynamicInternal_getInstance().set_9qz4km$($receiver, toString(key), value);
  };
  KDynamic.prototype.get_uozw8h$ = function ($receiver, key) {
    var tmp$;
    if ($receiver == null)
      return null;
    else if (Kotlin.isType($receiver, Map))
      return (Kotlin.isType(tmp$ = $receiver, Map) ? tmp$ : throwCCE()).get_11rb$(key);
    else if (Kotlin.isType($receiver, List))
      return $receiver.get_za3lpa$(this.toInt_mzud1t$(key));
    else
      return DynamicInternal_getInstance().get_hvn9da$($receiver, toString(key));
  };
  KDynamic.prototype.get_map_mzud1t$ = function ($receiver) {
    var tmp$;
    return Kotlin.isType($receiver, Map) ? Kotlin.isType(tmp$ = $receiver, Map) ? tmp$ : throwCCE() : LinkedHashMap_init();
  };
  KDynamic.prototype.get_list_mzud1t$ = function ($receiver) {
    return $receiver == null ? emptyList() : Kotlin.isType($receiver, List) ? $receiver : Kotlin.isType($receiver, Iterable) ? toList($receiver) : listOf_0($receiver);
  };
  KDynamic.prototype.get_keys_mzud1t$ = function ($receiver) {
    return Kotlin.isType($receiver, Map) ? toList($receiver.keys) : emptyList();
  };
  KDynamic.prototype.toNumber_mzud1t$ = function ($receiver) {
    var tmp$, tmp$_0, tmp$_1;
    if ($receiver == null)
      return 0;
    else if (typeof $receiver === 'boolean')
      return $receiver ? 1 : 0;
    else if (Kotlin.isNumber($receiver))
      return $receiver;
    else if (typeof $receiver === 'string')
      return Kotlin.isNumber(tmp$_1 = (tmp$_0 = (tmp$ = this.toIntOrNull_mzud1t$($receiver)) != null ? tmp$ : this.toDoubleOrNull_mzud1t$($receiver)) != null ? tmp$_0 : 0) ? tmp$_1 : throwCCE();
    else
      return 0;
  };
  KDynamic.prototype.toBool_mzud1t$ = function ($receiver) {
    if (typeof $receiver === 'boolean')
      return $receiver;
    else if (typeof $receiver === 'string') {
      switch ($receiver.toLowerCase()) {
        case '':
        case '0':
        case 'false':
        case 'NaN':
        case 'null':
        case 'undefined':
        case 'ko':
        case 'no':
          return false;
        default:return true;
      }
    } else
      return this.toInt_mzud1t$($receiver) !== 0;
  };
  KDynamic.prototype.toByte_mzud1t$ = function ($receiver) {
    return numberToByte(this.toNumber_mzud1t$($receiver));
  };
  KDynamic.prototype.toChar_mzud1t$ = function ($receiver) {
    if (Kotlin.isChar($receiver))
      return $receiver;
    else if (typeof $receiver === 'string' && $receiver.length === 1)
      return toBoxedChar(first($receiver));
    else
      return toBoxedChar(numberToChar(this.toNumber_mzud1t$($receiver)));
  };
  KDynamic.prototype.toShort_mzud1t$ = function ($receiver) {
    return numberToShort(this.toNumber_mzud1t$($receiver));
  };
  KDynamic.prototype.toInt_mzud1t$ = function ($receiver) {
    return numberToInt(this.toNumber_mzud1t$($receiver));
  };
  KDynamic.prototype.toLong_mzud1t$ = function ($receiver) {
    return numberToLong(this.toNumber_mzud1t$($receiver));
  };
  KDynamic.prototype.toFloat_mzud1t$ = function ($receiver) {
    return numberToDouble(this.toNumber_mzud1t$($receiver));
  };
  KDynamic.prototype.toDouble_mzud1t$ = function ($receiver) {
    return numberToDouble(this.toNumber_mzud1t$($receiver));
  };
  KDynamic.prototype.toBoolOrNull_mzud1t$ = function ($receiver) {
    if (typeof $receiver === 'string')
      return equals($receiver, '1') || equals($receiver, 'true') || equals($receiver, 'on');
    else if (Kotlin.isNumber($receiver))
      return numberToInt($receiver) !== 0;
    else
      return null;
  };
  KDynamic.prototype.toIntOrNull_mzud1t$ = function ($receiver) {
    if (Kotlin.isNumber($receiver))
      return numberToInt($receiver);
    else if (typeof $receiver === 'string')
      return toIntOrNull($receiver, 10);
    else
      return null;
  };
  KDynamic.prototype.toLongOrNull_mzud1t$ = function ($receiver) {
    if (Kotlin.isNumber($receiver))
      return numberToLong($receiver);
    else if (typeof $receiver === 'string')
      return toLongOrNull($receiver, 10);
    else
      return null;
  };
  KDynamic.prototype.toDoubleOrNull_mzud1t$ = function ($receiver) {
    if (Kotlin.isNumber($receiver))
      return numberToDouble($receiver);
    else if (typeof $receiver === 'string')
      return this.toDouble_mzud1t$($receiver);
    else
      return null;
  };
  KDynamic.prototype.toIntDefault_v36bcf$ = function ($receiver, default_0) {
    if (default_0 === void 0)
      default_0 = 0;
    var tmp$;
    if (Kotlin.isNumber($receiver))
      return numberToInt($receiver);
    else if (typeof $receiver === 'string')
      return (tmp$ = toIntOrNull($receiver, 10)) != null ? tmp$ : default_0;
    else
      return default_0;
  };
  KDynamic.prototype.toLongDefault_up6xlm$ = function ($receiver, default_0) {
    if (default_0 === void 0)
      default_0 = L0;
    var tmp$;
    if (Kotlin.isNumber($receiver))
      return numberToLong($receiver);
    else if (typeof $receiver === 'string')
      return (tmp$ = toLongOrNull($receiver, 10)) != null ? tmp$ : default_0;
    else
      return default_0;
  };
  KDynamic.prototype.toFloatDefault_s75k3i$ = function ($receiver, default_0) {
    if (default_0 === void 0)
      default_0 = 0.0;
    if (Kotlin.isNumber($receiver))
      return numberToDouble($receiver);
    else if (typeof $receiver === 'string')
      return this.toFloat_mzud1t$($receiver);
    else
      return default_0;
  };
  KDynamic.prototype.toDoubleDefault_kw3mun$ = function ($receiver, default_0) {
    if (default_0 === void 0)
      default_0 = 0.0;
    if (Kotlin.isNumber($receiver))
      return numberToDouble($receiver);
    else if (typeof $receiver === 'string')
      return this.toDouble_mzud1t$($receiver);
    else
      return default_0;
  };
  KDynamic.prototype.get_str_mzud1t$ = function ($receiver) {
    return toString($receiver);
  };
  KDynamic.prototype.get_int_mzud1t$ = function ($receiver) {
    return this.toIntDefault_v36bcf$($receiver);
  };
  KDynamic.prototype.get_bool_mzud1t$ = function ($receiver) {
    var tmp$;
    return (tmp$ = this.toBoolOrNull_mzud1t$($receiver)) != null ? tmp$ : false;
  };
  KDynamic.prototype.get_float_mzud1t$ = function ($receiver) {
    return this.toFloatDefault_s75k3i$($receiver);
  };
  KDynamic.prototype.get_double_mzud1t$ = function ($receiver) {
    return this.toDoubleDefault_kw3mun$($receiver);
  };
  KDynamic.prototype.get_long_mzud1t$ = function ($receiver) {
    return this.toLongDefault_up6xlm$($receiver);
  };
  KDynamic.prototype.get_intArray_mzud1t$ = function ($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var tmp$_4;
    if ((tmp$_3 = (tmp$_2 = Kotlin.isIntArray(tmp$ = $receiver) ? tmp$ : null) != null ? tmp$_2 : (tmp$_1 = Kotlin.isType(tmp$_0 = $receiver, IntArrayList) ? tmp$_0 : null) != null ? tmp$_1.toIntArray() : null) != null)
      tmp$_4 = tmp$_3;
    else {
      var $receiver_0 = this.get_list_mzud1t$($receiver);
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
      var tmp$_5;
      tmp$_5 = $receiver_0.iterator();
      while (tmp$_5.hasNext()) {
        var item = tmp$_5.next();
        destination.add_11rb$(this.get_int_mzud1t$(item));
      }
      tmp$_4 = toIntArray(destination);
    }
    return tmp$_4;
  };
  KDynamic.prototype.get_floatArray_mzud1t$ = function ($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var tmp$_4;
    if ((tmp$_3 = (tmp$_2 = Kotlin.isFloatArray(tmp$ = $receiver) ? tmp$ : null) != null ? tmp$_2 : (tmp$_1 = Kotlin.isType(tmp$_0 = $receiver, FloatArrayList) ? tmp$_0 : null) != null ? tmp$_1.toFloatArray() : null) != null)
      tmp$_4 = tmp$_3;
    else {
      var $receiver_0 = this.get_list_mzud1t$($receiver);
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
      var tmp$_5;
      tmp$_5 = $receiver_0.iterator();
      while (tmp$_5.hasNext()) {
        var item = tmp$_5.next();
        destination.add_11rb$(this.get_float_mzud1t$(item));
      }
      tmp$_4 = toFloatArray(destination);
    }
    return tmp$_4;
  };
  KDynamic.prototype.get_doubleArray_mzud1t$ = function ($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    var tmp$_4;
    if ((tmp$_3 = (tmp$_2 = Kotlin.isDoubleArray(tmp$ = $receiver) ? tmp$ : null) != null ? tmp$_2 : (tmp$_1 = Kotlin.isType(tmp$_0 = $receiver, DoubleArrayList) ? tmp$_0 : null) != null ? tmp$_1.toDoubleArray() : null) != null)
      tmp$_4 = tmp$_3;
    else {
      var $receiver_0 = this.get_list_mzud1t$($receiver);
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
      var tmp$_5;
      tmp$_5 = $receiver_0.iterator();
      while (tmp$_5.hasNext()) {
        var item = tmp$_5.next();
        destination.add_11rb$(this.get_double_mzud1t$(item));
      }
      tmp$_4 = toDoubleArray(destination);
    }
    return tmp$_4;
  };
  KDynamic.prototype.get_longArray_mzud1t$ = function ($receiver) {
    var tmp$, tmp$_0;
    var tmp$_1;
    if ((tmp$_0 = Kotlin.isLongArray(tmp$ = $receiver) ? tmp$ : null) != null)
      tmp$_1 = tmp$_0;
    else {
      var $receiver_0 = this.get_list_mzud1t$($receiver);
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
      var tmp$_2;
      tmp$_2 = $receiver_0.iterator();
      while (tmp$_2.hasNext()) {
        var item = tmp$_2.next();
        destination.add_11rb$(this.get_long_mzud1t$(item));
      }
      tmp$_1 = toLongArray(destination);
    }
    return tmp$_1;
  };
  KDynamic.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KDynamic',
    interfaces: []
  };
  function ObjectMapper() {
    this._typers = LinkedHashMap_init();
    this._untypers = LinkedHashMap_init();
    this.fallbackTyper = null;
    this.fallbackUntyper = null;
    this.typeCtx_0 = new ObjectMapper$TypeContext(this);
    this.untypeCtx_0 = new ObjectMapper$UntypeContext(this);
    this.registerType_ebqkwp$(PrimitiveClasses$booleanClass, ObjectMapper_init$lambda);
    this.registerType_ebqkwp$(PrimitiveClasses$byteClass, ObjectMapper_init$lambda_0);
    this.registerType_ebqkwp$(getKClass(Char), ObjectMapper_init$lambda_1);
    this.registerType_ebqkwp$(PrimitiveClasses$shortClass, ObjectMapper_init$lambda_2);
    this.registerType_ebqkwp$(PrimitiveClasses$intClass, ObjectMapper_init$lambda_3);
    this.registerType_ebqkwp$(getKClass(Long), ObjectMapper_init$lambda_4);
    this.registerType_ebqkwp$(PrimitiveClasses$floatClass, ObjectMapper_init$lambda_5);
    this.registerType_ebqkwp$(PrimitiveClasses$doubleClass, ObjectMapper_init$lambda_6);
    this.registerType_ebqkwp$(getKClass(Set), ObjectMapper_init$lambda_7);
    this.registerType_ebqkwp$(getKClass(List), ObjectMapper_init$lambda_8);
    this.registerType_ebqkwp$(getKClass(MutableList), ObjectMapper_init$lambda_9);
    this.registerType_ebqkwp$(PrimitiveClasses$stringClass, ObjectMapper_init$lambda_10);
  }
  function ObjectMapper$TypeContext(mapper) {
    KDynamic.call(this);
    this.mapper = mapper;
  }
  ObjectMapper$TypeContext.prototype.gen_lsumxt$ = function ($receiver, clazz) {
    return this.mapper.toTyped_bju3lo$(clazz, $receiver);
  };
  ObjectMapper$TypeContext.prototype.genList_lsumxt$ = function ($receiver, clazz) {
    var $receiver_0 = this.get_list_mzud1t$($receiver);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$;
    tmp$ = $receiver_0.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(this.gen_lsumxt$(item, clazz));
    }
    return ArrayList_init_1(toList(destination));
  };
  ObjectMapper$TypeContext.prototype.genSet_lsumxt$ = function ($receiver, clazz) {
    var $receiver_0 = this.get_list_mzud1t$($receiver);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$;
    tmp$ = $receiver_0.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(this.gen_lsumxt$(item, clazz));
    }
    return HashSet_init(toSet(destination));
  };
  ObjectMapper$TypeContext.prototype.genMap_fapzid$ = function ($receiver, kclazz, vclazz) {
    var $receiver_0 = this.get_map_mzud1t$($receiver);
    var destination = ArrayList_init_0($receiver_0.size);
    var tmp$;
    tmp$ = $receiver_0.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(to(this.gen_lsumxt$(item.key, kclazz), this.gen_lsumxt$(item.value, vclazz)));
    }
    return toLinkedMap(destination);
  };
  ObjectMapper$TypeContext.prototype.gen_m4kn9m$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.TypeContext.gen_m4kn9m$', wrapFunction(function () {
    var getKClass = Kotlin.getKClass;
    return function (T_0, isT, $receiver) {
      return this.mapper.toTyped_bju3lo$(getKClass(T_0), $receiver);
    };
  }));
  ObjectMapper$TypeContext.prototype.genList_m4kn9m$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.TypeContext.genList_m4kn9m$', wrapFunction(function () {
    var wrapFunction = Kotlin.wrapFunction;
    var toList = Kotlin.kotlin.collections.toList_7wnvza$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_mqih57$;
    var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
    var ArrayList_init_0 = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    var getKClass = Kotlin.getKClass;
    var ObjectMapper$TypeContext$genList$lambda = wrapFunction(function () {
      var getKClass = Kotlin.getKClass;
      return function (typeClosure$T, isT, this$TypeContext) {
        return function (it) {
          var $this = this$TypeContext;
          var T_0 = typeClosure$T;
          return $this.mapper.toTyped_bju3lo$(getKClass(T_0), it);
        };
      };
    });
    return function (T_0, isT, $receiver) {
      var $receiver_0 = this.get_list_mzud1t$($receiver);
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
      var tmp$;
      tmp$ = $receiver_0.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(this.mapper.toTyped_bju3lo$(getKClass(T_0), item));
      }
      return ArrayList_init(toList(destination));
    };
  }));
  ObjectMapper$TypeContext.prototype.genSet_m4kn9m$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.TypeContext.genSet_m4kn9m$', wrapFunction(function () {
    var wrapFunction = Kotlin.wrapFunction;
    var toSet = Kotlin.kotlin.collections.toSet_7wnvza$;
    var HashSet_init = Kotlin.kotlin.collections.HashSet_init_mqih57$;
    var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    var getKClass = Kotlin.getKClass;
    var ObjectMapper$TypeContext$genSet$lambda = wrapFunction(function () {
      var getKClass = Kotlin.getKClass;
      return function (typeClosure$T, isT, this$TypeContext) {
        return function (it) {
          var $this = this$TypeContext;
          var T_0 = typeClosure$T;
          return $this.mapper.toTyped_bju3lo$(getKClass(T_0), it);
        };
      };
    });
    return function (T_0, isT, $receiver) {
      var $receiver_0 = this.get_list_mzud1t$($receiver);
      var destination = ArrayList_init(collectionSizeOrDefault($receiver_0, 10));
      var tmp$;
      tmp$ = $receiver_0.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(this.mapper.toTyped_bju3lo$(getKClass(T_0), item));
      }
      return HashSet_init(toSet(destination));
    };
  }));
  ObjectMapper$TypeContext.prototype.genMap_9jq766$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.TypeContext.genMap_9jq766$', wrapFunction(function () {
    var to = Kotlin.kotlin.to_ujzrz7$;
    var wrapFunction = Kotlin.wrapFunction;
    var toLinkedMap = _.$$importsForInline$$['kds-root-kds'].com.soywiz.kds.toLinkedMap_6hr0sd$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    var getKClass = Kotlin.getKClass;
    var ObjectMapper$TypeContext$genMap$lambda = wrapFunction(function () {
      var getKClass = Kotlin.getKClass;
      return function (typeClosure$K, isK, this$TypeContext, typeClosure$V, isV) {
        return function (it) {
          var $this = this$TypeContext;
          var T_0 = typeClosure$K;
          var $receiver = it.key;
          var tmp$ = $this.mapper.toTyped_bju3lo$(getKClass(T_0), $receiver);
          var $this_0 = this$TypeContext;
          var T_0_0 = typeClosure$V;
          var $receiver_0 = it.value;
          return to(tmp$, $this_0.mapper.toTyped_bju3lo$(getKClass(T_0_0), $receiver_0));
        };
      };
    });
    return function (K_0, isK, V_0, isV, $receiver) {
      var $receiver_0 = this.get_map_mzud1t$($receiver);
      var destination = ArrayList_init($receiver_0.size);
      var tmp$;
      tmp$ = $receiver_0.entries.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        var tmp$_0 = destination.add_11rb$;
        var $receiver_1 = item.key;
        var tmp$_1 = this.mapper.toTyped_bju3lo$(getKClass(K_0), $receiver_1);
        var $receiver_2 = item.value;
        tmp$_0.call(destination, to(tmp$_1, this.mapper.toTyped_bju3lo$(getKClass(V_0), $receiver_2)));
      }
      return toLinkedMap(destination);
    };
  }));
  ObjectMapper$TypeContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TypeContext',
    interfaces: [KDynamic]
  };
  function ObjectMapper$UntypeContext(map) {
    this.map = map;
  }
  ObjectMapper$UntypeContext.prototype.gen_irb06o$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.UntypeContext.gen_irb06o$', wrapFunction(function () {
    var getKClass = Kotlin.getKClass;
    return function (T_0, isT, $receiver) {
      return this.map.toUntyped_b1ce0a$(getKClass(T_0), $receiver);
    };
  }));
  ObjectMapper$UntypeContext.prototype.gen_1v8dcc$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.UntypeContext.gen_1v8dcc$', function ($receiver) {
    return $receiver;
  });
  ObjectMapper$UntypeContext.prototype.gen_pdl1vz$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.UntypeContext.gen_pdl1vz$', function ($receiver) {
    return $receiver;
  });
  ObjectMapper$UntypeContext.prototype.gen_rcaex3$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.UntypeContext.gen_rcaex3$', function ($receiver) {
    return $receiver;
  });
  ObjectMapper$UntypeContext.prototype.gen_m3lr2h$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.UntypeContext.gen_m3lr2h$', wrapFunction(function () {
    var wrapFunction = Kotlin.wrapFunction;
    var collectionSizeOrDefault = Kotlin.kotlin.collections.collectionSizeOrDefault_ba2ldo$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    var getKClass = Kotlin.getKClass;
    var ObjectMapper$UntypeContext$gen$lambda = wrapFunction(function () {
      var getKClass = Kotlin.getKClass;
      return function (typeClosure$T, isT, this$UntypeContext) {
        return function (it) {
          var $this = this$UntypeContext;
          var T_0 = typeClosure$T;
          return $this.map.toUntyped_b1ce0a$(getKClass(T_0), it);
        };
      };
    });
    return function (T_0, isT, $receiver) {
      var destination = ArrayList_init(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(this.map.toUntyped_b1ce0a$(getKClass(T_0), item));
      }
      return destination;
    };
  }));
  ObjectMapper$UntypeContext.prototype.gen_cm4zns$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.UntypeContext.gen_cm4zns$', wrapFunction(function () {
    var to = Kotlin.kotlin.to_ujzrz7$;
    var wrapFunction = Kotlin.wrapFunction;
    var toMap = Kotlin.kotlin.collections.toMap_6hr0sd$;
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_ww73n8$;
    var getKClass = Kotlin.getKClass;
    var ObjectMapper$UntypeContext$gen$lambda = wrapFunction(function () {
      var getKClass = Kotlin.getKClass;
      return function (typeClosure$K, isK, this$UntypeContext, typeClosure$V, isV) {
        return function (it) {
          var $this = this$UntypeContext;
          var T_0 = typeClosure$K;
          var $receiver = it.key;
          var tmp$ = $this.map.toUntyped_b1ce0a$(getKClass(T_0), $receiver);
          var $this_0 = this$UntypeContext;
          var T_0_0 = typeClosure$V;
          var $receiver_0 = it.value;
          return to(tmp$, $this_0.map.toUntyped_b1ce0a$(getKClass(T_0_0), $receiver_0));
        };
      };
    });
    return function (K_0, isK, V_0, isV, $receiver) {
      var destination = ArrayList_init($receiver.size);
      var tmp$;
      tmp$ = $receiver.entries.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        var tmp$_0 = destination.add_11rb$;
        var $receiver_0 = item.key;
        var tmp$_1 = this.map.toUntyped_b1ce0a$(getKClass(K_0), $receiver_0);
        var $receiver_1 = item.value;
        tmp$_0.call(destination, to(tmp$_1, this.map.toUntyped_b1ce0a$(getKClass(V_0), $receiver_1)));
      }
      return toMap(destination);
    };
  }));
  ObjectMapper$UntypeContext.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UntypeContext',
    interfaces: []
  };
  ObjectMapper.prototype.registerType_ebqkwp$ = function (clazz, generate) {
    this._typers.put_xwzc9p$(clazz, generate);
    return this;
  };
  ObjectMapper.prototype.toTyped_bju3lo$ = function (clazz, obj) {
    var tmp$, tmp$_0, tmp$_1;
    var typer = this._typers.get_11rb$(clazz);
    if (typer != null)
      tmp$_1 = Kotlin.isType(tmp$ = typer(this.typeCtx_0, obj), Any) ? tmp$ : throwCCE();
    else if (this.fallbackTyper != null && obj != null)
      tmp$_1 = Kotlin.isType(tmp$_0 = ensureNotNull(this.fallbackTyper)(clazz, obj), Any) ? tmp$_0 : throwCCE();
    else
      tmp$_1 = invalidArg('Unregistered ' + clazz);
    return tmp$_1;
  };
  ObjectMapper.prototype.toUntyped_issdgt$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.toUntyped_issdgt$', wrapFunction(function () {
    var getKClass = Kotlin.getKClass;
    return function (T_0, isT, obj) {
      return this.toUntyped_b1ce0a$(getKClass(T_0), obj);
    };
  }));
  ObjectMapper.prototype.getKey_lz526c$ = function (clazz, obj, key) {
    var tmp$;
    return (Kotlin.isType(tmp$ = this.toUntyped_b1ce0a$(clazz, obj), Map) ? tmp$ : throwCCE()).get_11rb$(key);
  };
  ObjectMapper.prototype.toUntyped_b1ce0a$ = function (clazz, obj) {
    var tmp$, tmp$_0;
    if (obj == null)
      return obj;
    else if (typeof obj === 'boolean')
      return obj;
    else if (Kotlin.isNumber(obj))
      return obj;
    else if (typeof obj === 'string')
      return obj;
    else if (Kotlin.isType(obj, Iterable)) {
      var destination = ArrayList_init_0(collectionSizeOrDefault(obj, 10));
      var tmp$_1;
      tmp$_1 = obj.iterator();
      while (tmp$_1.hasNext()) {
        var item = tmp$_1.next();
        var tmp$_2 = destination.add_11rb$;
        var obj_0 = ensureNotNull(item);
        tmp$_2.call(destination, this.toUntyped_b1ce0a$(PrimitiveClasses$anyClass, obj_0));
      }
      return ArrayList_init_1(destination);
    } else if (Kotlin.isType(obj, Map)) {
      var destination_0 = ArrayList_init_0(obj.size);
      var tmp$_3;
      tmp$_3 = obj.entries.iterator();
      while (tmp$_3.hasNext()) {
        var item_0 = tmp$_3.next();
        var tmp$_4 = destination_0.add_11rb$;
        var obj_1 = ensureNotNull(item_0.key);
        var tmp$_5 = this.toUntyped_b1ce0a$(PrimitiveClasses$anyClass, obj_1);
        var obj_2 = item_0.value;
        tmp$_4.call(destination_0, to(tmp$_5, this.toUntyped_b1ce0a$(PrimitiveClasses$anyClass, obj_2)));
      }
      return toLinkedMap(destination_0);
    } else {
      var unt = this._untypers.get_11rb$(clazz);
      if (unt == null && this.fallbackUntyper != null) {
        return (tmp$ = this.fallbackUntyper) != null ? tmp$(obj) : null;
      } else if (unt == null) {
        println('Untypers: ' + toString(this._untypers.size));
        tmp$_0 = this._untypers.entries.iterator();
        while (tmp$_0.hasNext()) {
          var u = tmp$_0.next();
          println(' - ' + toString(u.key));
        }
        return invalidArg("Don't know how to untype " + clazz);
      } else {
        return unt(this.untypeCtx_0, obj);
      }
    }
  };
  function ObjectMapper$registerEnum$lambda(closure$nameToString) {
    return function ($receiver, it) {
      return ensureNotNull(closure$nameToString.get_11rb$(toString(it)));
    };
  }
  ObjectMapper.prototype.registerEnum_hytwtp$ = function (clazz, values) {
    var destination = ArrayList_init_0(values.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== values.length; ++tmp$) {
      var item = values[tmp$];
      destination.add_11rb$(to(item.name, item));
    }
    var nameToString = toMap(destination);
    this.registerType_ebqkwp$(clazz, ObjectMapper$registerEnum$lambda(nameToString));
  };
  ObjectMapper.prototype.registerType_5nolau$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.registerType_5nolau$', wrapFunction(function () {
    var getKClass = Kotlin.getKClass;
    return function (T_0, isT, generate) {
      return this.registerType_ebqkwp$(getKClass(T_0), generate);
    };
  }));
  ObjectMapper.prototype.registerEnum_zhhfti$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.registerEnum_zhhfti$', wrapFunction(function () {
    var getKClass = Kotlin.getKClass;
    return function (T_0, isT, values) {
      this.registerEnum_hytwtp$(getKClass(T_0), values);
    };
  }));
  ObjectMapper.prototype.registerUntype_ie81tg$ = function (clazz, untyper) {
    var tmp$;
    var $receiver = this._untypers;
    var value = typeof (tmp$ = untyper) === 'function' ? tmp$ : throwCCE();
    $receiver.put_xwzc9p$(clazz, value);
  };
  function ObjectMapper$registerUntypeEnum$lambda($receiver, it) {
    return it.name;
  }
  ObjectMapper.prototype.registerUntypeEnum_xvqrpl$ = function (clazz) {
    this.registerUntype_ie81tg$(clazz, ObjectMapper$registerUntypeEnum$lambda);
  };
  ObjectMapper.prototype.registerUntype_14p1n3$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.registerUntype_14p1n3$', wrapFunction(function () {
    var getKClass = Kotlin.getKClass;
    return function (T_0, isT, untyper) {
      this.registerUntype_ie81tg$(getKClass(T_0), untyper);
    };
  }));
  ObjectMapper.prototype.registerUntypeEnum_nxd2ia$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.registerUntypeEnum_nxd2ia$', wrapFunction(function () {
    var getKClass = Kotlin.getKClass;
    function ObjectMapper$registerUntypeEnum$lambda($receiver, it) {
      return it.name;
    }
    return function (T_0, isT) {
      this.registerUntype_ie81tg$(getKClass(T_0), ObjectMapper$registerUntypeEnum$lambda);
    };
  }));
  ObjectMapper.prototype.scoped_klfg04$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.mapper.ObjectMapper.scoped_klfg04$', wrapFunction(function () {
    var toMap = Kotlin.kotlin.collections.toMap_abgq59$;
    return function (callback) {
      var oldTypers = toMap(this._typers);
      var oldUntypers = toMap(this._untypers);
      try {
        return callback();
      }finally {
        this._typers.clear();
        this._typers.putAll_a2k3zr$(oldTypers);
        this._untypers.clear();
        this._untypers.putAll_a2k3zr$(oldUntypers);
      }
    };
  }));
  function ObjectMapper_init$lambda($receiver, it) {
    return $receiver.toBool_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_0($receiver, it) {
    return $receiver.toByte_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_1($receiver, it) {
    return $receiver.toChar_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_2($receiver, it) {
    return $receiver.toShort_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_3($receiver, it) {
    return $receiver.toInt_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_4($receiver, it) {
    return $receiver.toLong_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_5($receiver, it) {
    return $receiver.toFloat_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_6($receiver, it) {
    return $receiver.toDouble_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_7($receiver, it) {
    return toSet($receiver.get_list_mzud1t$(it));
  }
  function ObjectMapper_init$lambda_8($receiver, it) {
    return $receiver.get_list_mzud1t$(it);
  }
  function ObjectMapper_init$lambda_9($receiver, it) {
    return toMutableList($receiver.get_list_mzud1t$(it));
  }
  function ObjectMapper_init$lambda_10($receiver, it) {
    var tmp$;
    return (tmp$ = it != null ? it.toString() : null) != null ? tmp$ : 'null';
  }
  ObjectMapper.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ObjectMapper',
    interfaces: []
  };
  var Mapper;
  var stringifyTyped = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.serialization.stringifyTyped_khr4yz$', wrapFunction(function () {
    var getKClass = Kotlin.getKClass;
    return function (T_0, isT, $receiver, obj, mapper, pretty) {
      if (pretty === void 0)
        pretty = false;
      return $receiver.stringify_oud20p$(mapper.toUntyped_b1ce0a$(getKClass(T_0), obj), pretty);
    };
  }));
  var parseTyped = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.serialization.parseTyped_uxnda$', wrapFunction(function () {
    var getKClass = Kotlin.getKClass;
    var parseTyped = _.com.soywiz.korio.dynamic.serialization.parseTyped_avcktl$;
    return function (T_0, isT, $receiver, s, mapper) {
      return parseTyped($receiver, getKClass(T_0), s, mapper);
    };
  }));
  var fromJsonTyped = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.serialization.fromJsonTyped_tcinq2$', wrapFunction(function () {
    var json = _.com.soywiz.korio.serialization.json;
    var getKClass = Kotlin.getKClass;
    var parseTyped = _.com.soywiz.korio.dynamic.serialization.parseTyped_avcktl$;
    return function (T_0, isT, $receiver, mapper) {
      return parseTyped(json.Json, getKClass(T_0), $receiver, mapper);
    };
  }));
  function parseTyped_0($receiver, clazz, s, mapper) {
    return mapper.toTyped_bju3lo$(clazz, $receiver.parse_61zpoe$(s));
  }
  function toJsonTyped($receiver, mapper) {
    return Json_getInstance().stringify_oud20p$(mapper.toUntyped_b1ce0a$(getKClass(Map), $receiver), false);
  }
  var decodeToType = defineInlineFunction('korio-root-korio.com.soywiz.korio.dynamic.serialization.decodeToType_w00suq$', wrapFunction(function () {
    var getKClass = Kotlin.getKClass;
    var decodeToType = _.com.soywiz.korio.dynamic.serialization.decodeToType_u5picb$;
    return function (T_0, isT, $receiver, s, mapper) {
      return decodeToType($receiver, s, getKClass(T_0), mapper);
    };
  }));
  function decodeToType_0($receiver, s, clazz, mapper) {
    return mapper.toTyped_bju3lo$(clazz, $receiver.decode_61zpoe$(s));
  }
  function KorioExperimentalApi() {
  }
  KorioExperimentalApi.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KorioExperimentalApi',
    interfaces: [Annotation]
  };
  function PathInfo(fullPath) {
    this.fullPath = fullPath;
  }
  PathInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PathInfo',
    interfaces: []
  };
  PathInfo.prototype.unbox = function () {
    return this.fullPath;
  };
  PathInfo.prototype.toString = function () {
    return 'PathInfo(fullPath=' + Kotlin.toString(this.fullPath) + ')';
  };
  PathInfo.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.fullPath) | 0;
    return result;
  };
  PathInfo.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.fullPath, other.fullPath))));
  };
  function get_pathInfo($receiver) {
    return new PathInfo($receiver);
  }
  function get_fullPathNormalized($receiver) {
    return replace($receiver.fullPath, 92, 47);
  }
  function get_folder($receiver) {
    var tmp$, tmp$_0;
    tmp$_0 = $receiver.fullPath;
    var endIndex = (tmp$ = lastIndexOfOrNull(get_fullPathNormalized($receiver), 47)) != null ? tmp$ : 0;
    return tmp$_0.substring(0, endIndex);
  }
  function get_folderWithSlash($receiver) {
    var tmp$, tmp$_0, tmp$_1;
    tmp$_1 = $receiver.fullPath;
    var endIndex = (tmp$_0 = (tmp$ = lastIndexOfOrNull(get_fullPathNormalized($receiver), 47)) != null ? tmp$ + 1 | 0 : null) != null ? tmp$_0 : 0;
    return tmp$_1.substring(0, endIndex);
  }
  function get_baseName($receiver) {
    return substringAfterLast(get_fullPathNormalized($receiver), 47);
  }
  function get_fullPathWithoutExtension($receiver) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var startIndex = (tmp$_0 = (tmp$ = lastIndexOfOrNull(get_fullPathNormalized($receiver), 47)) != null ? tmp$ + 1 | 0 : null) != null ? tmp$_0 : 0;
    tmp$_2 = $receiver.fullPath;
    var endIndex = (tmp$_1 = indexOfOrNull(get_fullPathNormalized($receiver), 46, startIndex)) != null ? tmp$_1 : get_fullPathNormalized($receiver).length;
    return tmp$_2.substring(0, endIndex);
  }
  function fullPathWithExtension($receiver, ext) {
    return ext.length === 0 ? get_fullPathWithoutExtension($receiver) : get_fullPathWithoutExtension($receiver) + '.' + ext;
  }
  function get_baseNameWithoutExtension($receiver) {
    return substringBeforeLast(get_baseName($receiver), 46, get_baseName($receiver));
  }
  function get_baseNameWithoutCompoundExtension($receiver) {
    return substringBefore(get_baseName($receiver), 46, get_baseName($receiver));
  }
  function get_fullNameWithoutExtension($receiver) {
    return get_folderWithSlash($receiver) + get_baseNameWithoutExtension($receiver);
  }
  function get_fullNameWithoutCompoundExtension($receiver) {
    return get_folderWithSlash($receiver) + get_baseNameWithoutCompoundExtension($receiver);
  }
  function baseNameWithExtension($receiver, ext) {
    return ext.length === 0 ? get_baseNameWithoutExtension($receiver) : get_baseNameWithoutExtension($receiver) + '.' + ext;
  }
  function baseNameWithCompoundExtension($receiver, ext) {
    return ext.length === 0 ? get_baseNameWithoutCompoundExtension($receiver) : get_baseNameWithoutCompoundExtension($receiver) + '.' + ext;
  }
  function get_extension($receiver) {
    return substringAfterLast(get_baseName($receiver), 46, '');
  }
  function get_extensionLC($receiver) {
    return get_extension($receiver).toLowerCase();
  }
  function get_compoundExtension($receiver) {
    return substringAfter(get_baseName($receiver), 46, '');
  }
  function get_compoundExtensionLC($receiver) {
    return get_compoundExtension($receiver).toLowerCase();
  }
  function get_mimeTypeByExtension($receiver) {
    return MimeType$Companion_getInstance().getByExtension_nxhpy7$(get_extensionLC($receiver));
  }
  function getPathComponents($receiver) {
    return split(get_fullPathNormalized($receiver), Kotlin.charArrayOf(47));
  }
  function getPathFullComponents($receiver) {
    var tmp$;
    var out = ArrayList_init();
    tmp$ = get_fullPathNormalized($receiver).length;
    for (var n = 0; n < tmp$; n++) {
      switch (get_fullPathNormalized($receiver).charCodeAt(n)) {
        case 47:
        case 92:
          var element = get_fullPathNormalized($receiver).substring(0, n);
          out.add_11rb$(element);
          break;
      }
    }
    var element_0 = get_fullPathNormalized($receiver);
    out.add_11rb$(element_0);
    return out;
  }
  function get_fullName($receiver) {
    return $receiver.fullPath;
  }
  function Path() {
  }
  Path.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Path',
    interfaces: []
  };
  function get_fullPathNormalized_0($receiver) {
    return get_fullPathNormalized($receiver.pathInfo);
  }
  function get_folder_0($receiver) {
    return get_folder($receiver.pathInfo);
  }
  function get_folderWithSlash_0($receiver) {
    return get_folderWithSlash($receiver.pathInfo);
  }
  function get_baseName_0($receiver) {
    return get_baseName($receiver.pathInfo);
  }
  function get_fullPathWithoutExtension_0($receiver) {
    return get_fullPathWithoutExtension($receiver.pathInfo);
  }
  function fullPathWithExtension_0($receiver, ext) {
    return fullPathWithExtension($receiver.pathInfo, ext);
  }
  function get_fullNameWithoutExtension_0($receiver) {
    return get_fullNameWithoutExtension($receiver.pathInfo);
  }
  function get_baseNameWithoutExtension_0($receiver) {
    return get_baseNameWithoutExtension($receiver.pathInfo);
  }
  function get_fullNameWithoutCompoundExtension_0($receiver) {
    return get_fullNameWithoutCompoundExtension($receiver.pathInfo);
  }
  function get_baseNameWithoutCompoundExtension_0($receiver) {
    return get_baseNameWithoutCompoundExtension($receiver.pathInfo);
  }
  function baseNameWithExtension_0($receiver, ext) {
    return baseNameWithExtension($receiver.pathInfo, ext);
  }
  function baseNameWithCompoundExtension_0($receiver, ext) {
    return baseNameWithCompoundExtension($receiver.pathInfo, ext);
  }
  function get_extension_0($receiver) {
    return get_extension($receiver.pathInfo);
  }
  function get_extensionLC_0($receiver) {
    return get_extensionLC($receiver.pathInfo);
  }
  function get_compoundExtension_0($receiver) {
    return get_compoundExtension($receiver.pathInfo);
  }
  function get_compoundExtensionLC_0($receiver) {
    return get_compoundExtensionLC($receiver.pathInfo);
  }
  function get_mimeTypeByExtension_0($receiver) {
    return get_mimeTypeByExtension($receiver.pathInfo);
  }
  function getPathComponents_0($receiver) {
    return getPathComponents($receiver.pathInfo);
  }
  function getPathFullComponents_0($receiver) {
    return getPathFullComponents($receiver.pathInfo);
  }
  function get_fullName_0($receiver) {
    return $receiver.pathInfo.fullPath;
  }
  function VfsNamed(pathInfo) {
    this.pathInfo_4jgz3j$_0 = pathInfo;
  }
  Object.defineProperty(VfsNamed.prototype, 'pathInfo', {
    get: function () {
      return this.pathInfo_4jgz3j$_0;
    }
  });
  VfsNamed.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VfsNamed',
    interfaces: [Path]
  };
  function parts($receiver) {
    return split($receiver.fullPath, Kotlin.charArrayOf(47));
  }
  function normalize($receiver) {
    var tmp$;
    var path = $receiver.fullPath;
    var schemeIndex = indexOf(path, ':');
    if (schemeIndex >= 0) {
      var take = startsWith(path.substring(schemeIndex), '://') ? 3 : 1;
      var endIndex = schemeIndex + take | 0;
      var tmp$_0 = path.substring(0, endIndex);
      var startIndex = schemeIndex + take | 0;
      tmp$ = tmp$_0 + normalize(get_pathInfo(path.substring(startIndex)));
    } else {
      var path2 = replace(path, 92, 47);
      var out = ArrayList_init();
      var $receiver_0 = split_0(path2, ['/']);
      var tmp$_1;
      var n = 0;
      while (n < $receiver_0.size) {
        var part = $receiver_0.get_za3lpa$((tmp$_1 = n, n = tmp$_1 + 1 | 0, tmp$_1));
        switch (part) {
          case '':
          case '.':
            if (out.isEmpty()) {
              out.add_11rb$('');
            }
            break;
          case '..':
            if (!out.isEmpty())
              out.removeAt_za3lpa$(out.size - 1 | 0);
            break;
          default:out.add_11rb$(part);
            break;
        }
      }
      tmp$ = joinToString(out, '/');
    }
    return tmp$;
  }
  function combine($receiver, access) {
    var base = $receiver.fullPath;
    var access_0 = access.fullPath;
    return get_pathInfo(isAbsolute(get_pathInfo(access_0)) ? normalize(get_pathInfo(access_0)) : normalize(get_pathInfo(base + '/' + access_0)));
  }
  function lightCombine($receiver, access) {
    var base = $receiver.fullPath;
    var access_0 = access.fullPath;
    var res = base.length > 0 ? trimEnd(base, Kotlin.charArrayOf(47)) + '/' + trim(access_0, Kotlin.charArrayOf(47)) : access_0;
    return get_pathInfo(res);
  }
  function isAbsolute($receiver) {
    var base = $receiver.fullPath;
    if (base.length === 0)
      return false;
    var b = substringBefore(replace(base, 92, 47), 47);
    if (b.length === 0)
      return true;
    if (contains(b, 58))
      return true;
    return false;
  }
  function normalizeAbsolute($receiver) {
    var path = $receiver.fullPath;
    return new PathInfo(replace(path, 47, File_separatorChar));
  }
  function SimpleStorage() {
  }
  SimpleStorage.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'SimpleStorage',
    interfaces: []
  };
  function collect$ObjectLiteral_0(closure$action) {
    this.closure$action = closure$action;
  }
  collect$ObjectLiteral_0.prototype.emit_11rb$ = function (value, continuation) {
    return this.closure$action(value, continuation);
  };
  collect$ObjectLiteral_0.$metadata$ = {kind: Kind_CLASS, interfaces: [FlowCollector]};
  function Vfs() {
  }
  Object.defineProperty(Vfs.prototype, 'absolutePath', {
    get: function () {
      return '';
    }
  });
  Vfs.prototype.getAbsolutePath_61zpoe$ = function (path) {
    return lightCombine(get_pathInfo(this.absolutePath), get_pathInfo(path)).fullPath;
  };
  Object.defineProperty(Vfs.prototype, 'root', {
    get: function () {
      return new VfsFile(this, '');
    }
  });
  Object.defineProperty(Vfs.prototype, 'supportedAttributeTypes', {
    get: function () {
      return emptyList();
    }
  });
  Vfs.prototype.get_61zpoe$ = function (path) {
    return this.root.get_61zpoe$(path);
  };
  Vfs.prototype.file_61zpoe$ = function (path) {
    return this.root.get_61zpoe$(path);
  };
  Vfs.prototype.close = function (continuation) {
    return Unit;
  };
  Vfs.prototype.createExistsStat_14z8ds$ = function (path, isDirectory, size, device, inode, mode, owner, group, createTime, modifiedTime, lastAccessTime, extraInfo, id) {
    if (device === void 0)
      device = L_1;
    if (inode === void 0)
      inode = L_1;
    if (mode === void 0)
      mode = 511;
    if (owner === void 0)
      owner = 'nobody';
    if (group === void 0)
      group = 'nobody';
    if (createTime === void 0)
      createTime = DateTime.Companion.EPOCH;
    if (modifiedTime === void 0)
      modifiedTime = DateTime.Companion.EPOCH;
    if (lastAccessTime === void 0)
      lastAccessTime = modifiedTime;
    if (extraInfo === void 0)
      extraInfo = null;
    if (id === void 0)
      id = null;
    return new VfsStat(this.file_61zpoe$(path), true, isDirectory, size, device, inode, mode, owner, group, createTime, modifiedTime, lastAccessTime, extraInfo, id);
  };
  Vfs.prototype.createNonExistsStat_4w9ihe$ = function (path, extraInfo) {
    if (extraInfo === void 0)
      extraInfo = null;
    return new VfsStat(this.file_61zpoe$(path), false, false, L0, L_1, L_1, 511, 'nobody', 'nobody', DateTime.Companion.EPOCH, DateTime.Companion.EPOCH, DateTime.Companion.EPOCH, extraInfo);
  };
  Vfs.prototype.exec_19z763$ = function (path, cmdAndArgs, handler, continuation) {
    if (handler === void 0)
      handler = new VfsProcessHandler();
    return this.exec_z6qifm$(path, cmdAndArgs, Environment_getInstance().getAll(), handler, continuation);
  };
  Vfs.prototype.exec_z6qifm$$default = function (path, cmdAndArgs, env, handler, continuation) {
    return unsupported_0();
  };
  Vfs.prototype.exec_z6qifm$ = function (path, cmdAndArgs, env, handler, continuation, callback$default) {
    if (handler === void 0)
      handler = new VfsProcessHandler();
    return callback$default ? callback$default(path, cmdAndArgs, env, handler, continuation) : this.exec_z6qifm$$default(path, cmdAndArgs, env, handler, continuation);
  };
  Vfs.prototype.open_vb0dls$ = function (path, mode, continuation) {
    throw UnsupportedOperationException_init();
  };
  Vfs.prototype.openInputStream_61zpoe$ = function (path, continuation) {
    return this.open_vb0dls$(path, VfsOpenMode$READ_getInstance(), continuation);
  };
  function Coroutine$readRange_fmne7s$($this, path_0, range_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 8;
    this.$this = $this;
    this.local$s = void 0;
    this.local$path = path_0;
    this.local$range = range_0;
  }
  Coroutine$readRange_fmne7s$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readRange_fmne7s$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readRange_fmne7s$.prototype.constructor = Coroutine$readRange_fmne7s$;
  Coroutine$readRange_fmne7s$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.$this.open_vb0dls$(this.local$path, VfsOpenMode$READ_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.local$s = this.result_0;
            this.exceptionState_0 = 5;
            this.local$s.position = this.local$range.start;
            var a = L2147483646;
            var b = this.local$range.endInclusive.subtract(this.local$range.start);
            var readCount = (a.compareTo_11rb$(b) <= 0 ? a : b).toInt() + 1 | 0;
            this.state_0 = 2;
            this.result_0 = readBytesUpTo(this.local$s, readCount, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            this.exceptionState_0 = 8;
            this.finallyPath_0 = [3];
            this.state_0 = 6;
            this.$returnValue = this.result_0;
            continue;
          case 3:
            return this.$returnValue;
          case 4:
            return;
          case 5:
            this.finallyPath_0 = [8];
            this.state_0 = 6;
            continue;
          case 6:
            this.exceptionState_0 = 8;
            this.state_0 = 7;
            this.result_0 = this.local$s.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 7:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 8:
            throw this.exception_0;
          default:this.state_0 = 8;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 8) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.readRange_fmne7s$ = function (path_0, range_0, continuation_0, suspended) {
    var instance = new Coroutine$readRange_fmne7s$(this, path_0, range_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Vfs$Attribute() {
  }
  Vfs$Attribute.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Attribute',
    interfaces: []
  };
  Vfs.prototype.get_l19gil$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.file.Vfs.get_l19gil$', wrapFunction(function () {
    var throwCCE = Kotlin.throwCCE;
    return function (T_0, isT, $receiver) {
      var tmp$;
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$_0;
        tmp$_0 = $receiver.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (isT(element)) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return (tmp$ = firstOrNull$result) == null || isT(tmp$) ? tmp$ : throwCCE();
    };
  }));
  function Coroutine$put_18ksq8$$default($this, path_0, content_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$tmp$ = void 0;
    this.local$error = void 0;
    this.local$result = void 0;
    this.local$path = path_0;
    this.local$content = content_0;
  }
  Coroutine$put_18ksq8$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$put_18ksq8$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$put_18ksq8$$default.prototype.constructor = Coroutine$put_18ksq8$$default;
  Coroutine$put_18ksq8$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.$this.open_vb0dls$(this.local$path, VfsOpenMode$CREATE_OR_TRUNCATE_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.local$$receiver = this.result_0;
            var tmp$;
            this.local$error = null;
            this.exceptionState_0 = 3;
            this.state_0 = 2;
            this.result_0 = copyTo(this.local$content, this.local$$receiver, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            this.local$tmp$ = this.result_0;
            this.exceptionState_0 = 6;
            this.state_0 = 4;
            continue;
          case 3:
            this.exceptionState_0 = 6;
            var e_0 = this.exception_0;
            if (Kotlin.isType(e_0, Throwable)) {
              this.local$error = e_0;
              this.local$tmp$ = null;
            } else
              throw e_0;
            this.state_0 = 4;
            continue;
          case 4:
            this.local$result = this.local$tmp$;
            this.state_0 = 5;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            if (this.local$error != null)
              throw this.local$error;
            this.result_0 = (tmp$ = this.local$result) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
            return this.result_0;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.put_18ksq8$$default = function (path_0, content_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$put_18ksq8$$default(this, path_0, content_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  Vfs.prototype.put_18ksq8$ = function (path, content, attributes, continuation, callback$default) {
    if (attributes === void 0) {
      attributes = emptyList();
    }return callback$default ? callback$default(path, content, attributes, continuation) : this.put_18ksq8$$default(path, content, attributes, continuation);
  };
  Vfs.prototype.put_pd85a0$ = function (path, content, attributes, continuation) {
    if (attributes === void 0) {
      attributes = emptyList();
    }return this.put_18ksq8$(path, openAsync(content), attributes, continuation);
  };
  function Coroutine$readChunk_dckg8j$($this, path_0, offset_0, size_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$s = void 0;
    this.local$path = path_0;
    this.local$offset = offset_0;
    this.local$size = size_0;
  }
  Coroutine$readChunk_dckg8j$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readChunk_dckg8j$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readChunk_dckg8j$.prototype.constructor = Coroutine$readChunk_dckg8j$;
  Coroutine$readChunk_dckg8j$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.open_vb0dls$(this.local$path, VfsOpenMode$READ_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$s = this.result_0;
            if (!equals(this.local$offset, L0)) {
              this.state_0 = 3;
              this.result_0 = this.local$s.setPosition_s8cxhz$(this.local$offset, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            this.state_0 = 5;
            this.result_0 = readBytesUpTo(this.local$s, this.local$size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.readChunk_dckg8j$ = function (path_0, offset_0, size_0, continuation_0, suspended) {
    var instance = new Coroutine$readChunk_dckg8j$(this, path_0, offset_0, size_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$writeChunk_1ce9rc$($this, path_0, data_0, offset_0, resize_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$s = void 0;
    this.local$path = path_0;
    this.local$data = data_0;
    this.local$offset = offset_0;
    this.local$resize = resize_0;
  }
  Coroutine$writeChunk_1ce9rc$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeChunk_1ce9rc$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeChunk_1ce9rc$.prototype.constructor = Coroutine$writeChunk_1ce9rc$;
  Coroutine$writeChunk_1ce9rc$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.open_vb0dls$(this.local$path, this.local$resize ? VfsOpenMode$CREATE_OR_TRUNCATE_getInstance() : VfsOpenMode$CREATE_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$s = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$s.setPosition_s8cxhz$(this.local$offset, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = writeBytes(this.local$s, this.local$data, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.writeChunk_1ce9rc$ = function (path_0, data_0, offset_0, resize_0, continuation_0, suspended) {
    var instance = new Coroutine$writeChunk_1ce9rc$(this, path_0, data_0, offset_0, resize_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setSize_4wgjuj$($this, path_0, size_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$tmp$ = void 0;
    this.local$error = void 0;
    this.local$result = void 0;
    this.local$path = path_0;
    this.local$size = size_0;
  }
  Coroutine$setSize_4wgjuj$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setSize_4wgjuj$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setSize_4wgjuj$.prototype.constructor = Coroutine$setSize_4wgjuj$;
  Coroutine$setSize_4wgjuj$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.$this.open_vb0dls$(this.local$path, VfsOpenMode$WRITE_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.local$$receiver = this.result_0;
            var tmp$;
            this.local$error = null;
            this.exceptionState_0 = 3;
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.setLength_s8cxhz$(this.local$size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            this.local$tmp$ = Unit;
            this.exceptionState_0 = 6;
            this.state_0 = 4;
            continue;
          case 3:
            this.exceptionState_0 = 6;
            var e_0 = this.exception_0;
            if (Kotlin.isType(e_0, Throwable)) {
              this.local$error = e_0;
              this.local$tmp$ = null;
            } else
              throw e_0;
            this.state_0 = 4;
            continue;
          case 4:
            this.local$result = this.local$tmp$;
            this.state_0 = 5;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            if (this.local$error != null)
              throw this.local$error;
            this.result_0 = (tmp$ = this.local$result) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
            return;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.setSize_4wgjuj$ = function (path_0, size_0, continuation_0, suspended) {
    var instance = new Coroutine$setSize_4wgjuj$(this, path_0, size_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  Vfs.prototype.setAttributes_z6b3ik$ = function (path, attributes, continuation) {
    return Unit;
  };
  Vfs.prototype.stat_61zpoe$ = function (path, continuation) {
    return this.createNonExistsStat_4w9ihe$(path);
  };
  Vfs.prototype.list_61zpoe$ = function (path, continuation) {
    return toChannel(emptyList(), continuation);
  };
  function Coroutine$Vfs$listFlow$lambda(closure$path_0, this$Vfs_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$path = closure$path_0;
    this.local$this$Vfs = this$Vfs_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Vfs$listFlow$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$listFlow$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$listFlow$lambda.prototype.constructor = Coroutine$Vfs$listFlow$lambda;
  Coroutine$Vfs$listFlow$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$Vfs.list_61zpoe$(this.local$closure$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = emitAll(this.local$$receiver, this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$listFlow$lambda(closure$path_0, this$Vfs_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$Vfs$listFlow$lambda(closure$path_0, this$Vfs_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  Vfs.prototype.listFlow_61zpoe$ = function (path, continuation) {
    return flow(Vfs$listFlow$lambda(path, this));
  };
  Vfs.prototype.mkdir_z6b3ik$ = function (path, attributes, continuation) {
    return unsupported_0();
  };
  Vfs.prototype.rmdir_61zpoe$ = function (path, continuation) {
    return this.delete_61zpoe$(path, continuation);
  };
  Vfs.prototype.delete_61zpoe$ = function (path, continuation) {
    return unsupported_0();
  };
  function Coroutine$rename_puj7f4$($this, src_0, dst_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$src = src_0;
    this.local$dst = dst_0;
  }
  Coroutine$rename_puj7f4$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$rename_puj7f4$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$rename_puj7f4$.prototype.constructor = Coroutine$rename_puj7f4$;
  Coroutine$rename_puj7f4$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.file_61zpoe$(this.local$src).copyTo_71bpb9$(this.$this.file_61zpoe$(this.local$dst), [], this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.delete_61zpoe$(this.local$src, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return true;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs.prototype.rename_puj7f4$ = function (src_0, dst_0, continuation_0, suspended) {
    var instance = new Coroutine$rename_puj7f4$(this, src_0, dst_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  Vfs.prototype.watch_6lbnta$ = function (path, handler, continuation) {
    return DummyCloseable_getInstance();
  };
  Vfs.prototype.touch_wk1zco$ = function (path, time, atime, continuation) {
    return Unit;
  };
  Vfs.prototype.getUnderlyingUnscapedFile_61zpoe$ = function (path, continuation) {
    return FinalVfsFile_init(this, path);
  };
  function Vfs$Proxy() {
    Vfs.call(this);
    this.initialized = false;
  }
  Vfs$Proxy.prototype.transform_yirdke$ = function ($receiver, continuation) {
    return this.file_61zpoe$($receiver.path);
  };
  function Coroutine$getUnderlyingUnscapedFile_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$getUnderlyingUnscapedFile_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getUnderlyingUnscapedFile_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getUnderlyingUnscapedFile_61zpoe$.prototype.constructor = Coroutine$getUnderlyingUnscapedFile_61zpoe$;
  Coroutine$getUnderlyingUnscapedFile_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.getUnderlyingUnscapedFile(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.getUnderlyingUnscapedFile_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$getUnderlyingUnscapedFile_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  Vfs$Proxy.prototype.init = function (continuation) {
  };
  function Coroutine$initOnce_yrkero$_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$initOnce_yrkero$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$initOnce_yrkero$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$initOnce_yrkero$_0.prototype.constructor = Coroutine$initOnce_yrkero$_0;
  Coroutine$initOnce_yrkero$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (!this.$this.initialized) {
              this.$this.initialized = true;
              this.state_0 = 2;
              this.result_0 = this.$this.init(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            return this.$this;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.initOnce_yrkero$_0 = function (continuation_0, suspended) {
    var instance = new Coroutine$initOnce_yrkero$_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$exec_z6qifm$$default($this, path_0, cmdAndArgs_0, env_0, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$cmdAndArgs = cmdAndArgs_0;
    this.local$env = env_0;
    this.local$handler = handler_0;
  }
  Coroutine$exec_z6qifm$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$exec_z6qifm$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$exec_z6qifm$$default.prototype.constructor = Coroutine$exec_z6qifm$$default;
  Coroutine$exec_z6qifm$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.exec_aqpaf4$(this.local$cmdAndArgs, this.local$env, this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.exec_z6qifm$$default = function (path_0, cmdAndArgs_0, env_0, handler_0, continuation_0, suspended) {
    var instance = new Coroutine$exec_z6qifm$$default(this, path_0, cmdAndArgs_0, env_0, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$open_vb0dls$($this, path_0, mode_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$mode = mode_0;
  }
  Coroutine$open_vb0dls$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$open_vb0dls$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$open_vb0dls$.prototype.constructor = Coroutine$open_vb0dls$;
  Coroutine$open_vb0dls$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.open_tiaunm$(this.local$mode, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.open_vb0dls$ = function (path_0, mode_0, continuation_0, suspended) {
    var instance = new Coroutine$open_vb0dls$(this, path_0, mode_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readRange_fmne7s$_0($this, path_0, range_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$range = range_0;
  }
  Coroutine$readRange_fmne7s$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readRange_fmne7s$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readRange_fmne7s$_0.prototype.constructor = Coroutine$readRange_fmne7s$_0;
  Coroutine$readRange_fmne7s$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.readRangeBytes_6z6t3e$(this.local$range, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.readRange_fmne7s$ = function (path_0, range_0, continuation_0, suspended) {
    var instance = new Coroutine$readRange_fmne7s$_0(this, path_0, range_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$put_18ksq8$$default_0($this, path_0, content_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$content = content_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$put_18ksq8$$default_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$put_18ksq8$$default_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$put_18ksq8$$default_0.prototype.constructor = Coroutine$put_18ksq8$$default_0;
  Coroutine$put_18ksq8$$default_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.put_r6jc4s$(this.local$content, copyToArray(this.local$attributes).slice(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.put_18ksq8$$default = function (path_0, content_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$put_18ksq8$$default_0(this, path_0, content_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setSize_4wgjuj$_0($this, path_0, size_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$size = size_0;
  }
  Coroutine$setSize_4wgjuj$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setSize_4wgjuj$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setSize_4wgjuj$_0.prototype.constructor = Coroutine$setSize_4wgjuj$_0;
  Coroutine$setSize_4wgjuj$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.setSize_s8cxhz$(this.local$size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.setSize_4wgjuj$ = function (path_0, size_0, continuation_0, suspended) {
    var instance = new Coroutine$setSize_4wgjuj$_0(this, path_0, size_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$stat_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$stat_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$stat_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$stat_61zpoe$.prototype.constructor = Coroutine$stat_61zpoe$;
  Coroutine$stat_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.stat(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0.copy_glgbus$(this.$this.file_61zpoe$(this.local$path));
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.stat_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$stat_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$list_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$list_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$list_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$list_61zpoe$.prototype.constructor = Coroutine$list_61zpoe$;
  Coroutine$list_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.listFlow_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = toChannel_0(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.list_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$list_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$Vfs$Proxy$listFlow$lambda$lambda(this$Proxy_0, this$_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$Proxy = this$Proxy_0;
    this.local$this$ = this$_0;
    this.local$it = it_0;
  }
  Coroutine$Vfs$Proxy$listFlow$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$Proxy$listFlow$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$Proxy$listFlow$lambda$lambda.prototype.constructor = Coroutine$Vfs$Proxy$listFlow$lambda$lambda;
  Coroutine$Vfs$Proxy$listFlow$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.state_0 = 2;
            this.result_0 = this.local$this$Proxy.transform_yirdke$(this.local$it, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            tmp$ = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$this$.emit_11rb$(tmp$, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$Proxy$listFlow$lambda$lambda(this$Proxy_0, this$_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$Vfs$Proxy$listFlow$lambda$lambda(this$Proxy_0, this$_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$Vfs$Proxy$listFlow$lambda(this$Proxy_0, closure$path_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$Proxy = this$Proxy_0;
    this.local$closure$path = closure$path_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Vfs$Proxy$listFlow$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$Proxy$listFlow$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$Proxy$listFlow$lambda.prototype.constructor = Coroutine$Vfs$Proxy$listFlow$lambda;
  Coroutine$Vfs$Proxy$listFlow$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$Proxy.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$this$Proxy.access_61zpoe$(this.local$closure$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.listFlow(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            var $receiver = this.result_0;
            var action = Vfs$Proxy$listFlow$lambda$lambda(this.local$this$Proxy, this.local$$receiver);
            this.state_0 = 5;
            this.result_0 = $receiver.collect_42ocv1$(new collect$ObjectLiteral_0(action), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$Proxy$listFlow$lambda(this$Proxy_0, closure$path_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$Vfs$Proxy$listFlow$lambda(this$Proxy_0, closure$path_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  Vfs$Proxy.prototype.listFlow_61zpoe$ = function (path, continuation) {
    return flow(Vfs$Proxy$listFlow$lambda(this, path));
  };
  function Coroutine$delete_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$delete_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$delete_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$delete_61zpoe$.prototype.constructor = Coroutine$delete_61zpoe$;
  Coroutine$delete_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.delete(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.delete_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$delete_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setAttributes_z6b3ik$($this, path_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$setAttributes_z6b3ik$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setAttributes_z6b3ik$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setAttributes_z6b3ik$.prototype.constructor = Coroutine$setAttributes_z6b3ik$;
  Coroutine$setAttributes_z6b3ik$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.setAttributes_2biuok$(copyToArray(this.local$attributes).slice(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.setAttributes_z6b3ik$ = function (path_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$setAttributes_z6b3ik$(this, path_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$mkdir_z6b3ik$($this, path_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$mkdir_z6b3ik$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$mkdir_z6b3ik$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$mkdir_z6b3ik$.prototype.constructor = Coroutine$mkdir_z6b3ik$;
  Coroutine$mkdir_z6b3ik$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.mkdir_2biuok$(copyToArray(this.local$attributes).slice(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.mkdir_z6b3ik$ = function (path_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$mkdir_z6b3ik$(this, path_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$touch_wk1zco$($this, path_0, time_0, atime_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$time = time_0;
    this.local$atime = atime_0;
  }
  Coroutine$touch_wk1zco$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$touch_wk1zco$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$touch_wk1zco$.prototype.constructor = Coroutine$touch_wk1zco$;
  Coroutine$touch_wk1zco$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.result_0.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.touch_4p96hy$(this.local$time, this.local$atime, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.touch_wk1zco$ = function (path_0, time_0, atime_0, continuation_0, suspended) {
    var instance = new Coroutine$touch_wk1zco$(this, path_0, time_0, atime_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$rename_puj7f4$_0($this, src_0, dst_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$srcFile = void 0;
    this.local$src = src_0;
    this.local$dst = dst_0;
  }
  Coroutine$rename_puj7f4$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$rename_puj7f4$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$rename_puj7f4$_0.prototype.constructor = Coroutine$rename_puj7f4$_0;
  Coroutine$rename_puj7f4$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.access_61zpoe$(this.local$src, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$srcFile = this.result_0;
            this.state_0 = 4;
            this.result_0 = this.$this.access_61zpoe$(this.local$dst, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            var dstFile = this.result_0;
            if (!equals(this.local$srcFile.vfs, dstFile.vfs))
              throw IllegalArgumentException_init("Can't rename between filesystems. Use copyTo instead, and remove later.");
            this.state_0 = 5;
            this.result_0 = this.local$srcFile.renameTo_61zpoe$(dstFile.path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.rename_puj7f4$ = function (src_0, dst_0, continuation_0, suspended) {
    var instance = new Coroutine$rename_puj7f4$_0(this, src_0, dst_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$Vfs$Proxy$watch$lambda$lambda(closure$e_0, this$Proxy_0, closure$handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$e = closure$e_0;
    this.local$this$Proxy = this$Proxy_0;
    this.local$closure$handler = closure$handler_0;
    this.local$f1 = void 0;
  }
  Coroutine$Vfs$Proxy$watch$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$Proxy$watch$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$Proxy$watch$lambda$lambda.prototype.constructor = Coroutine$Vfs$Proxy$watch$lambda$lambda;
  Coroutine$Vfs$Proxy$watch$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.state_0 = 2;
            this.result_0 = this.local$this$Proxy.transform_yirdke$(this.local$closure$e.file, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$f1 = this.result_0;
            if ((tmp$ = this.local$closure$e.other) != null) {
              this.state_0 = 3;
              this.result_0 = this.local$this$Proxy.transform_yirdke$(tmp$, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.result_0 = null;
              this.state_0 = 4;
              continue;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            var f2 = this.result_0;
            return this.local$closure$handler(this.local$closure$e.copy_jkjwms$(void 0, this.local$f1, f2));
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$Proxy$watch$lambda$lambda(closure$e_0, this$Proxy_0, closure$handler_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$Vfs$Proxy$watch$lambda$lambda(closure$e_0, this$Proxy_0, closure$handler_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$Vfs$Proxy$watch$lambda(this$Proxy_0, closure$handler_0, e_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$Proxy = this$Proxy_0;
    this.local$closure$handler = closure$handler_0;
    this.local$e = e_0;
  }
  Coroutine$Vfs$Proxy$watch$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Vfs$Proxy$watch$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Vfs$Proxy$watch$lambda.prototype.constructor = Coroutine$Vfs$Proxy$watch$lambda;
  Coroutine$Vfs$Proxy$watch$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return launchImmediately_0(this.context, Vfs$Proxy$watch$lambda$lambda(this.local$e, this.local$this$Proxy, this.local$closure$handler));
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Vfs$Proxy$watch$lambda(this$Proxy_0, closure$handler_0) {
    return function (e_0, continuation_0, suspended) {
      var instance = new Coroutine$Vfs$Proxy$watch$lambda(this$Proxy_0, closure$handler_0, e_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$watch_6lbnta$($this, path_0, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$handler = handler_0;
  }
  Coroutine$watch_6lbnta$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$watch_6lbnta$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$watch_6lbnta$.prototype.constructor = Coroutine$watch_6lbnta$;
  Coroutine$watch_6lbnta$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_yrkero$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.access_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.result_0.watch_7c156q$(Vfs$Proxy$watch$lambda(this.$this, this.local$handler), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Vfs$Proxy.prototype.watch_6lbnta$ = function (path_0, handler_0, continuation_0, suspended) {
    var instance = new Coroutine$watch_6lbnta$(this, path_0, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  Vfs$Proxy.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Proxy',
    interfaces: [Vfs]
  };
  function Vfs$Decorator(parent) {
    Vfs$Proxy.call(this);
    this.parent = parent;
    this.parentVfs = this.parent.vfs;
  }
  Vfs$Decorator.prototype.access_61zpoe$ = function (path, continuation) {
    return this.parentVfs.get_61zpoe$(path);
  };
  Vfs$Decorator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Decorator',
    interfaces: [Vfs$Proxy]
  };
  function Vfs$FileEvent(kind, file, other) {
    if (other === void 0)
      other = null;
    this.kind = kind;
    this.file = file;
    this.other = other;
  }
  function Vfs$FileEvent$Kind(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Vfs$FileEvent$Kind_initFields() {
    Vfs$FileEvent$Kind_initFields = function () {
    };
    Vfs$FileEvent$Kind$DELETED_instance = new Vfs$FileEvent$Kind('DELETED', 0);
    Vfs$FileEvent$Kind$MODIFIED_instance = new Vfs$FileEvent$Kind('MODIFIED', 1);
    Vfs$FileEvent$Kind$CREATED_instance = new Vfs$FileEvent$Kind('CREATED', 2);
    Vfs$FileEvent$Kind$RENAMED_instance = new Vfs$FileEvent$Kind('RENAMED', 3);
  }
  var Vfs$FileEvent$Kind$DELETED_instance;
  function Vfs$FileEvent$Kind$DELETED_getInstance() {
    Vfs$FileEvent$Kind_initFields();
    return Vfs$FileEvent$Kind$DELETED_instance;
  }
  var Vfs$FileEvent$Kind$MODIFIED_instance;
  function Vfs$FileEvent$Kind$MODIFIED_getInstance() {
    Vfs$FileEvent$Kind_initFields();
    return Vfs$FileEvent$Kind$MODIFIED_instance;
  }
  var Vfs$FileEvent$Kind$CREATED_instance;
  function Vfs$FileEvent$Kind$CREATED_getInstance() {
    Vfs$FileEvent$Kind_initFields();
    return Vfs$FileEvent$Kind$CREATED_instance;
  }
  var Vfs$FileEvent$Kind$RENAMED_instance;
  function Vfs$FileEvent$Kind$RENAMED_getInstance() {
    Vfs$FileEvent$Kind_initFields();
    return Vfs$FileEvent$Kind$RENAMED_instance;
  }
  Vfs$FileEvent$Kind.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Kind',
    interfaces: [Enum]
  };
  function Vfs$FileEvent$Kind$values() {
    return [Vfs$FileEvent$Kind$DELETED_getInstance(), Vfs$FileEvent$Kind$MODIFIED_getInstance(), Vfs$FileEvent$Kind$CREATED_getInstance(), Vfs$FileEvent$Kind$RENAMED_getInstance()];
  }
  Vfs$FileEvent$Kind.values = Vfs$FileEvent$Kind$values;
  function Vfs$FileEvent$Kind$valueOf(name) {
    switch (name) {
      case 'DELETED':
        return Vfs$FileEvent$Kind$DELETED_getInstance();
      case 'MODIFIED':
        return Vfs$FileEvent$Kind$MODIFIED_getInstance();
      case 'CREATED':
        return Vfs$FileEvent$Kind$CREATED_getInstance();
      case 'RENAMED':
        return Vfs$FileEvent$Kind$RENAMED_getInstance();
      default:throwISE('No enum constant com.soywiz.korio.file.Vfs.FileEvent.Kind.' + name);
    }
  }
  Vfs$FileEvent$Kind.valueOf_61zpoe$ = Vfs$FileEvent$Kind$valueOf;
  Vfs$FileEvent.prototype.toString = function () {
    return this.other != null ? this.kind.toString() + '(' + this.file + ', ' + toString(this.other) + ')' : this.kind.toString() + '(' + this.file + ')';
  };
  Vfs$FileEvent.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FileEvent',
    interfaces: []
  };
  Vfs$FileEvent.prototype.component1 = function () {
    return this.kind;
  };
  Vfs$FileEvent.prototype.component2 = function () {
    return this.file;
  };
  Vfs$FileEvent.prototype.component3 = function () {
    return this.other;
  };
  Vfs$FileEvent.prototype.copy_jkjwms$ = function (kind, file, other) {
    return new Vfs$FileEvent(kind === void 0 ? this.kind : kind, file === void 0 ? this.file : file, other === void 0 ? this.other : other);
  };
  Vfs$FileEvent.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.kind) | 0;
    result = result * 31 + Kotlin.hashCode(this.file) | 0;
    result = result * 31 + Kotlin.hashCode(this.other) | 0;
    return result;
  };
  Vfs$FileEvent.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.kind, other.kind) && Kotlin.equals(this.file, other.file) && Kotlin.equals(this.other, other.other)))));
  };
  Vfs.prototype.toString = function () {
    return get_portableSimpleName(Kotlin.getKClassFromExpression(this));
  };
  Vfs.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Vfs',
    interfaces: [AsyncCloseable]
  };
  function VfsV2() {
    Vfs.call(this);
  }
  function Coroutine$list_61zpoe$_0($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$list_61zpoe$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$list_61zpoe$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$list_61zpoe$_0.prototype.constructor = Coroutine$list_61zpoe$_0;
  Coroutine$list_61zpoe$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.listFlow_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = toChannel_0(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsV2.prototype.list_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$list_61zpoe$_0(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  VfsV2.prototype.listFlow_61zpoe$ = function (path, continuation) {
    return emptyFlow();
  };
  VfsV2.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VfsV2',
    interfaces: [Vfs]
  };
  function VfsOpenMode(name, ordinal, cmode, write, createIfNotExists, truncate) {
    if (createIfNotExists === void 0)
      createIfNotExists = false;
    if (truncate === void 0)
      truncate = false;
    Enum.call(this);
    this.cmode = cmode;
    this.write = write;
    this.createIfNotExists = createIfNotExists;
    this.truncate = truncate;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function VfsOpenMode_initFields() {
    VfsOpenMode_initFields = function () {
    };
    VfsOpenMode$READ_instance = new VfsOpenMode('READ', 0, 'rb', false);
    VfsOpenMode$WRITE_instance = new VfsOpenMode('WRITE', 1, 'r+b', true, true);
    VfsOpenMode$APPEND_instance = new VfsOpenMode('APPEND', 2, 'a+b', true, true);
    VfsOpenMode$CREATE_OR_TRUNCATE_instance = new VfsOpenMode('CREATE_OR_TRUNCATE', 3, 'w+b', true, true, true);
    VfsOpenMode$CREATE_instance = new VfsOpenMode('CREATE', 4, 'w+b', true, true);
    VfsOpenMode$CREATE_NEW_instance = new VfsOpenMode('CREATE_NEW', 5, 'w+b', true);
  }
  var VfsOpenMode$READ_instance;
  function VfsOpenMode$READ_getInstance() {
    VfsOpenMode_initFields();
    return VfsOpenMode$READ_instance;
  }
  var VfsOpenMode$WRITE_instance;
  function VfsOpenMode$WRITE_getInstance() {
    VfsOpenMode_initFields();
    return VfsOpenMode$WRITE_instance;
  }
  var VfsOpenMode$APPEND_instance;
  function VfsOpenMode$APPEND_getInstance() {
    VfsOpenMode_initFields();
    return VfsOpenMode$APPEND_instance;
  }
  var VfsOpenMode$CREATE_OR_TRUNCATE_instance;
  function VfsOpenMode$CREATE_OR_TRUNCATE_getInstance() {
    VfsOpenMode_initFields();
    return VfsOpenMode$CREATE_OR_TRUNCATE_instance;
  }
  var VfsOpenMode$CREATE_instance;
  function VfsOpenMode$CREATE_getInstance() {
    VfsOpenMode_initFields();
    return VfsOpenMode$CREATE_instance;
  }
  var VfsOpenMode$CREATE_NEW_instance;
  function VfsOpenMode$CREATE_NEW_getInstance() {
    VfsOpenMode_initFields();
    return VfsOpenMode$CREATE_NEW_instance;
  }
  VfsOpenMode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VfsOpenMode',
    interfaces: [Enum]
  };
  function VfsOpenMode$values() {
    return [VfsOpenMode$READ_getInstance(), VfsOpenMode$WRITE_getInstance(), VfsOpenMode$APPEND_getInstance(), VfsOpenMode$CREATE_OR_TRUNCATE_getInstance(), VfsOpenMode$CREATE_getInstance(), VfsOpenMode$CREATE_NEW_getInstance()];
  }
  VfsOpenMode.values = VfsOpenMode$values;
  function VfsOpenMode$valueOf(name) {
    switch (name) {
      case 'READ':
        return VfsOpenMode$READ_getInstance();
      case 'WRITE':
        return VfsOpenMode$WRITE_getInstance();
      case 'APPEND':
        return VfsOpenMode$APPEND_getInstance();
      case 'CREATE_OR_TRUNCATE':
        return VfsOpenMode$CREATE_OR_TRUNCATE_getInstance();
      case 'CREATE':
        return VfsOpenMode$CREATE_getInstance();
      case 'CREATE_NEW':
        return VfsOpenMode$CREATE_NEW_getInstance();
      default:throwISE('No enum constant com.soywiz.korio.file.VfsOpenMode.' + name);
    }
  }
  VfsOpenMode.valueOf_61zpoe$ = VfsOpenMode$valueOf;
  function VfsProcessHandler() {
  }
  VfsProcessHandler.prototype.onOut_fqrh44$ = function (data, continuation) {
    return Unit;
  };
  VfsProcessHandler.prototype.onErr_fqrh44$ = function (data, continuation) {
    return Unit;
  };
  VfsProcessHandler.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VfsProcessHandler',
    interfaces: []
  };
  function VfsProcessException(message) {
    IOException.call(this, message);
    this.name = 'VfsProcessException';
  }
  VfsProcessException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VfsProcessException',
    interfaces: [IOException]
  };
  function VfsStat(file, exists, isDirectory, size, device, inode, mode, owner, group, createTime, modifiedTime, lastAccessTime, extraInfo, id) {
    if (device === void 0)
      device = L_1;
    if (inode === void 0)
      inode = L_1;
    if (mode === void 0)
      mode = 511;
    if (owner === void 0)
      owner = 'nobody';
    if (group === void 0)
      group = 'nobody';
    if (createTime === void 0)
      createTime = DateTime.Companion.EPOCH;
    if (modifiedTime === void 0)
      modifiedTime = createTime;
    if (lastAccessTime === void 0)
      lastAccessTime = modifiedTime;
    if (extraInfo === void 0)
      extraInfo = null;
    if (id === void 0)
      id = null;
    this.file = file;
    this.exists = exists;
    this.isDirectory = isDirectory;
    this.size = size;
    this.device = device;
    this.inode = inode;
    this.mode = mode;
    this.owner = owner;
    this.group = group;
    this.createTime = createTime;
    this.modifiedTime = modifiedTime;
    this.lastAccessTime = lastAccessTime;
    this.extraInfo = extraInfo;
    this.id = id;
  }
  VfsStat.prototype.toString_6taknv$ = function (showFile) {
    var $receiver = ArrayList_init_0(16);
    if (showFile)
      $receiver.add_11rb$('file=' + this.file);
    else
      $receiver.add_11rb$('file=' + this.file.absolutePath);
    $receiver.add_11rb$('exists=' + this.exists);
    $receiver.add_11rb$('isDirectory=' + this.isDirectory);
    $receiver.add_11rb$('size=' + this.size.toString());
    $receiver.add_11rb$('device=' + this.device.toString());
    $receiver.add_11rb$('inode=' + this.inode.toString());
    $receiver.add_11rb$('mode=' + this.mode);
    $receiver.add_11rb$('owner=' + this.owner);
    $receiver.add_11rb$('group=' + this.group);
    $receiver.add_11rb$('createTime=' + this.createTime);
    $receiver.add_11rb$('modifiedTime=' + this.modifiedTime);
    $receiver.add_11rb$('lastAccessTime=' + this.lastAccessTime);
    $receiver.add_11rb$('extraInfo=' + toString(this.extraInfo));
    $receiver.add_11rb$('id=' + toString(this.id));
    return 'VfsStat(' + joinToString($receiver, ', ') + ')';
  };
  VfsStat.prototype.toString = function () {
    return this.toString_6taknv$(true);
  };
  Object.defineProperty(VfsStat.prototype, 'pathInfo', {
    get: function () {
      return this.file.pathInfo;
    }
  });
  VfsStat.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VfsStat',
    interfaces: [Path]
  };
  VfsStat.prototype.component1 = function () {
    return this.file;
  };
  VfsStat.prototype.component2 = function () {
    return this.exists;
  };
  VfsStat.prototype.component3 = function () {
    return this.isDirectory;
  };
  VfsStat.prototype.component4 = function () {
    return this.size;
  };
  VfsStat.prototype.component5 = function () {
    return this.device;
  };
  VfsStat.prototype.component6 = function () {
    return this.inode;
  };
  VfsStat.prototype.component7 = function () {
    return this.mode;
  };
  VfsStat.prototype.component8 = function () {
    return this.owner;
  };
  VfsStat.prototype.component9 = function () {
    return this.group;
  };
  VfsStat.prototype.component10 = function () {
    return this.createTime;
  };
  VfsStat.prototype.component11 = function () {
    return this.modifiedTime;
  };
  VfsStat.prototype.component12 = function () {
    return this.lastAccessTime;
  };
  VfsStat.prototype.component13 = function () {
    return this.extraInfo;
  };
  VfsStat.prototype.component14 = function () {
    return this.id;
  };
  VfsStat.prototype.copy_glgbus$ = function (file, exists, isDirectory, size, device, inode, mode, owner, group, createTime, modifiedTime, lastAccessTime, extraInfo, id) {
    return new VfsStat(file === void 0 ? this.file : file, exists === void 0 ? this.exists : exists, isDirectory === void 0 ? this.isDirectory : isDirectory, size === void 0 ? this.size : size, device === void 0 ? this.device : device, inode === void 0 ? this.inode : inode, mode === void 0 ? this.mode : mode, owner === void 0 ? this.owner : owner, group === void 0 ? this.group : group, createTime === void 0 ? this.createTime : createTime, modifiedTime === void 0 ? this.modifiedTime : modifiedTime, lastAccessTime === void 0 ? this.lastAccessTime : lastAccessTime, extraInfo === void 0 ? this.extraInfo : extraInfo, id === void 0 ? this.id : id);
  };
  VfsStat.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.file) | 0;
    result = result * 31 + Kotlin.hashCode(this.exists) | 0;
    result = result * 31 + Kotlin.hashCode(this.isDirectory) | 0;
    result = result * 31 + Kotlin.hashCode(this.size) | 0;
    result = result * 31 + Kotlin.hashCode(this.device) | 0;
    result = result * 31 + Kotlin.hashCode(this.inode) | 0;
    result = result * 31 + Kotlin.hashCode(this.mode) | 0;
    result = result * 31 + Kotlin.hashCode(this.owner) | 0;
    result = result * 31 + Kotlin.hashCode(this.group) | 0;
    result = result * 31 + Kotlin.hashCode(this.createTime) | 0;
    result = result * 31 + Kotlin.hashCode(this.modifiedTime) | 0;
    result = result * 31 + Kotlin.hashCode(this.lastAccessTime) | 0;
    result = result * 31 + Kotlin.hashCode(this.extraInfo) | 0;
    result = result * 31 + Kotlin.hashCode(this.id) | 0;
    return result;
  };
  VfsStat.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.file, other.file) && Kotlin.equals(this.exists, other.exists) && Kotlin.equals(this.isDirectory, other.isDirectory) && Kotlin.equals(this.size, other.size) && Kotlin.equals(this.device, other.device) && Kotlin.equals(this.inode, other.inode) && Kotlin.equals(this.mode, other.mode) && Kotlin.equals(this.owner, other.owner) && Kotlin.equals(this.group, other.group) && Kotlin.equals(this.createTime, other.createTime) && Kotlin.equals(this.modifiedTime, other.modifiedTime) && Kotlin.equals(this.lastAccessTime, other.lastAccessTime) && Kotlin.equals(this.extraInfo, other.extraInfo) && Kotlin.equals(this.id, other.id)))));
  };
  function get_createDate($receiver) {
    return $receiver.createTime;
  }
  function get_modifiedDate($receiver) {
    return $receiver.modifiedTime;
  }
  function get_lastAccessDate($receiver) {
    return $receiver.lastAccessTime;
  }
  function writeToFile($receiver, path, continuation) {
    return localVfs(path).write_bdsgvo$($receiver, [], continuation);
  }
  function writeToFile_0($receiver, file, continuation) {
    return file.write_bdsgvo$($receiver, [], continuation);
  }
  function collect$ObjectLiteral_1(closure$action) {
    this.closure$action = closure$action;
  }
  collect$ObjectLiteral_1.prototype.emit_11rb$ = function (value, continuation) {
    return this.closure$action(value, continuation);
  };
  collect$ObjectLiteral_1.$metadata$ = {kind: Kind_CLASS, interfaces: [FlowCollector]};
  function VfsFile(vfs, path) {
    VfsNamed.call(this, get_pathInfo(path));
    this.vfs = vfs;
    this.path = path;
    this.$delegate_3ekr7n$_0 = new Extra$Mixin();
  }
  Object.defineProperty(VfsFile.prototype, 'parent', {
    get: function () {
      return new VfsFile(this.vfs, get_folder_0(this));
    }
  });
  Object.defineProperty(VfsFile.prototype, 'root', {
    get: function () {
      return this.vfs.root;
    }
  });
  Object.defineProperty(VfsFile.prototype, 'absolutePath', {
    get: function () {
      return this.vfs.getAbsolutePath_61zpoe$(this.path);
    }
  });
  VfsFile.prototype.get_61zpoe$ = function (path) {
    return new VfsFile(this.vfs, combine(get_pathInfo(this.path), get_pathInfo(path)).fullPath);
  };
  VfsFile.prototype.set_puj7f4$ = function (path, content, continuation) {
    return this.get_61zpoe$(path).put_nu7ace$(openAsync(toByteArray(content, UTF8)), void 0, continuation);
  };
  VfsFile.prototype.set_yzgtim$ = function (path, content, continuation) {
    return this.get_61zpoe$(path).put_nu7ace$(openAsync(content), void 0, continuation);
  };
  VfsFile.prototype.set_519pps$ = function (path, content, continuation) {
    return this.get_61zpoe$(path).writeStream_9jzz03$(content, [], void 0, continuation);
  };
  VfsFile.prototype.set_tv2dhr$ = function (path, content, continuation) {
    return this.get_61zpoe$(path).writeFile_71bpb9$(content, [], continuation);
  };
  VfsFile.prototype.put_nu7ace$ = function (content, attributes, continuation) {
    if (attributes === void 0) {
      attributes = emptyList();
    }return this.vfs.put_18ksq8$(this.path, content, attributes, continuation);
  };
  VfsFile.prototype.put_r6jc4s$ = function (content, attributes, continuation) {
    return this.vfs.put_18ksq8$(this.path, content, toList_0(attributes), continuation);
  };
  VfsFile.prototype.write_bdsgvo$ = function (data, attributes, continuation) {
    return this.vfs.put_pd85a0$(this.path, data, toList_0(attributes), continuation);
  };
  VfsFile.prototype.writeBytes_bdsgvo$ = function (data, attributes, continuation) {
    return this.vfs.put_pd85a0$(this.path, data, toList_0(attributes), continuation);
  };
  function Coroutine$writeStream_9jzz03$($this, src_0, attributes_0, autoClose_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 8;
    this.$this = $this;
    this.local$src = src_0;
    this.local$attributes = attributes_0;
    this.local$autoClose = autoClose_0;
  }
  Coroutine$writeStream_9jzz03$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeStream_9jzz03$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeStream_9jzz03$.prototype.constructor = Coroutine$writeStream_9jzz03$;
  Coroutine$writeStream_9jzz03$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$autoClose === void 0)
              this.local$autoClose = true;
            this.exceptionState_0 = 4;
            this.state_0 = 1;
            this.result_0 = this.$this.put_r6jc4s$(this.local$src, this.local$attributes.slice(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 8;
            this.finallyPath_0 = [2];
            this.state_0 = 5;
            this.$returnValue = this.result_0;
            continue;
          case 2:
            return this.$returnValue;
          case 3:
            return;
          case 4:
            this.finallyPath_0 = [8];
            this.state_0 = 5;
            continue;
          case 5:
            this.exceptionState_0 = 8;
            if (this.local$autoClose) {
              this.state_0 = 6;
              this.result_0 = this.local$src.close(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 7;
              continue;
            }

          case 6:
            this.state_0 = 7;
            continue;
          case 7:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 8:
            throw this.exception_0;
          default:this.state_0 = 8;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 8) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.writeStream_9jzz03$ = function (src_0, attributes_0, autoClose_0, continuation_0, suspended) {
    var instance = new Coroutine$writeStream_9jzz03$(this, src_0, attributes_0, autoClose_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  VfsFile.prototype.writeFile_71bpb9$ = function (file, attributes, continuation) {
    return file.copyTo_71bpb9$(this, attributes.slice(), continuation);
  };
  function Coroutine$listNames($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$listNames.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listNames.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listNames.prototype.constructor = Coroutine$listNames;
  Coroutine$listNames.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.list(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = toList_1(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var $receiver = this.result_0;
            var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
            var tmp$;
            tmp$ = $receiver.iterator();
            while (tmp$.hasNext()) {
              var item = tmp$.next();
              destination.add_11rb$(get_baseName_0(item));
            }

            return destination;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.listNames = function (continuation_0, suspended) {
    var instance = new Coroutine$listNames(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$copyTo_dm3lun$_0($this, target_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$tmp$ = void 0;
    this.local$error = void 0;
    this.local$result = void 0;
    this.local$target = target_0;
  }
  Coroutine$copyTo_dm3lun$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$copyTo_dm3lun$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$copyTo_dm3lun$_0.prototype.constructor = Coroutine$copyTo_dm3lun$_0;
  Coroutine$copyTo_dm3lun$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.$this.open_tiaunm$(VfsOpenMode.READ, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.local$$receiver = this.result_0;
            var tmp$;
            this.local$error = null;
            this.exceptionState_0 = 3;
            this.state_0 = 2;
            this.result_0 = copyTo(this.local$$receiver, this.local$target, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            this.local$tmp$ = this.result_0;
            this.exceptionState_0 = 6;
            this.state_0 = 4;
            continue;
          case 3:
            this.exceptionState_0 = 6;
            var e_0 = this.exception_0;
            if (Kotlin.isType(e_0, Throwable)) {
              this.local$error = e_0;
              this.local$tmp$ = null;
            } else
              throw e_0;
            this.state_0 = 4;
            continue;
          case 4:
            this.local$result = this.local$tmp$;
            this.state_0 = 5;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            if (this.local$error != null)
              throw this.local$error;
            this.result_0 = (tmp$ = this.local$result) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
            return this.result_0;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.copyTo_dm3lun$ = function (target_0, continuation_0, suspended) {
    var instance = new Coroutine$copyTo_dm3lun$_0(this, target_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$copyTo_71bpb9$($this, target_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$tmp$ = void 0;
    this.local$error = void 0;
    this.local$result = void 0;
    this.local$target = target_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$copyTo_71bpb9$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$copyTo_71bpb9$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$copyTo_71bpb9$.prototype.constructor = Coroutine$copyTo_71bpb9$;
  Coroutine$copyTo_71bpb9$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.$this.openInputStream(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.local$$receiver = this.result_0;
            var tmp$;
            this.local$error = null;
            this.exceptionState_0 = 3;
            this.state_0 = 2;
            this.result_0 = this.local$target.writeStream_9jzz03$(this.local$$receiver, this.local$attributes.slice(), void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            this.local$tmp$ = this.result_0;
            this.exceptionState_0 = 6;
            this.state_0 = 4;
            continue;
          case 3:
            this.exceptionState_0 = 6;
            var e_0 = this.exception_0;
            if (Kotlin.isType(e_0, Throwable)) {
              this.local$error = e_0;
              this.local$tmp$ = null;
            } else
              throw e_0;
            this.state_0 = 4;
            continue;
          case 4:
            this.local$result = this.local$tmp$;
            this.state_0 = 5;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            if (this.local$error != null)
              throw this.local$error;
            this.result_0 = (tmp$ = this.local$result) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
            return this.result_0;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.copyTo_71bpb9$ = function (target_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$copyTo_71bpb9$(this, target_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  VfsFile.prototype.withExtension_61zpoe$ = function (ext) {
    return new VfsFile(this.vfs, get_fullNameWithoutExtension_0(this) + (ext.length > 0 ? '.' + ext : ''));
  };
  VfsFile.prototype.withCompoundExtension_61zpoe$ = function (ext) {
    return new VfsFile(this.vfs, get_fullNameWithoutCompoundExtension_0(this) + (ext.length > 0 ? '.' + ext : ''));
  };
  VfsFile.prototype.appendExtension_61zpoe$ = function (ext) {
    return new VfsFile(this.vfs, get_fullName_0(this) + '.' + ext);
  };
  VfsFile.prototype.open_tiaunm$ = function (mode, continuation) {
    if (mode === void 0)
      mode = VfsOpenMode$READ_getInstance();
    return this.vfs.open_vb0dls$(this.path, mode, continuation);
  };
  VfsFile.prototype.openInputStream = function (continuation) {
    return this.vfs.openInputStream_61zpoe$(this.path, continuation);
  };
  VfsFile.prototype.openRead = function (continuation) {
    return this.open_tiaunm$(VfsOpenMode$READ_getInstance(), continuation);
  };
  function Coroutine$openUse_oq9k1o$($this, mode_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$error = void 0;
    this.local$result = void 0;
    this.local$mode = mode_0;
    this.local$callback = callback_0;
  }
  Coroutine$openUse_oq9k1o$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openUse_oq9k1o$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openUse_oq9k1o$.prototype.constructor = Coroutine$openUse_oq9k1o$;
  Coroutine$openUse_oq9k1o$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$mode === void 0)
              this.local$mode = VfsOpenMode.READ;
            this.state_0 = 2;
            this.result_0 = this.$this.open_tiaunm$(this.local$mode, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var $receiver_0 = this.result_0;
            var tmp$_1, tmp$_2;
            this.local$error = null;
            try {
              tmp$_1 = this.local$callback($receiver_0);
            } catch (e) {
              if (Kotlin.isType(e, Throwable)) {
                this.local$error = e;
                tmp$_1 = null;
              } else
                throw e;
            }

            this.local$result = tmp$_1;
            this.state_0 = 3;
            this.result_0 = $receiver_0.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            if (this.local$error != null)
              throw this.local$error;
            this.result_0 = (tmp$_2 = this.local$result) == null || Kotlin.isType(tmp$_2, Any) ? tmp$_2 : throwCCE();
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.openUse_oq9k1o$ = function (mode_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$openUse_oq9k1o$(this, mode_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  defineInlineFunction('korio-root-korio.com.soywiz.korio.file.VfsFile.openUse_oq9k1o$', wrapFunction(function () {
    var VfsOpenMode = _.com.soywiz.korio.file.VfsOpenMode;
    var Throwable = Error;
    var Any = Object;
    var throwCCE = Kotlin.throwCCE;
    return function (mode, callback, continuation) {
      if (mode === void 0)
        mode = VfsOpenMode.READ;
      Kotlin.suspendCall(this.open_tiaunm$(mode, Kotlin.coroutineReceiver()));
      var $receiver_0 = Kotlin.coroutineResult(Kotlin.coroutineReceiver());
      var tmp$_1, tmp$_2;
      var error = null;
      try {
        tmp$_1 = callback($receiver_0);
      } catch (e) {
        if (Kotlin.isType(e, Throwable)) {
          error = e;
          tmp$_1 = null;
        } else
          throw e;
      }
      var result = tmp$_1;
      Kotlin.suspendCall($receiver_0.close(Kotlin.coroutineReceiver()));
      if (error != null)
        throw error;
      Kotlin.setCoroutineResult((tmp$_2 = result) == null || Kotlin.isType(tmp$_2, Any) ? tmp$_2 : throwCCE(), Kotlin.coroutineReceiver());
      return Kotlin.coroutineResult(Kotlin.coroutineReceiver());
    };
  }));
  VfsFile.prototype.readRangeBytes_6z6t3e$ = function (range, continuation) {
    return this.vfs.readRange_fmne7s$(this.path, range, continuation);
  };
  VfsFile.prototype.readRangeBytes_n8acyv$ = function (range, continuation) {
    return this.vfs.readRange_fmne7s$(this.path, toLongRange(range), continuation);
  };
  VfsFile.prototype.readAll = function (continuation) {
    return this.vfs.readRange_fmne7s$(this.path, LONG_ZERO_TO_MAX_RANGE, continuation);
  };
  VfsFile.prototype.read = function (continuation) {
    return this.readAll(continuation);
  };
  VfsFile.prototype.readBytes = function (continuation) {
    return this.readAll(continuation);
  };
  function Coroutine$readLines_qa9gbo$($this, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$charset = charset_0;
  }
  Coroutine$readLines_qa9gbo$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readLines_qa9gbo$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readLines_qa9gbo$.prototype.constructor = Coroutine$readLines_qa9gbo$;
  Coroutine$readLines_qa9gbo$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            this.state_0 = 2;
            this.result_0 = this.$this.readString_qa9gbo$(this.local$charset, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return lines(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.readLines_qa9gbo$ = function (charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readLines_qa9gbo$(this, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  VfsFile.prototype.writeLines_5hmqn7$ = function (lines, charset, continuation) {
    if (charset === void 0)
      charset = UTF8;
    return this.writeString_lp1jh2$(joinToString(lines, '\n'), [], charset, continuation);
  };
  function Coroutine$readString_qa9gbo$($this, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$charset = charset_0;
  }
  Coroutine$readString_qa9gbo$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readString_qa9gbo$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readString_qa9gbo$.prototype.constructor = Coroutine$readString_qa9gbo$;
  Coroutine$readString_qa9gbo$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            this.state_0 = 2;
            this.result_0 = this.$this.read(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return toString_2(this.result_0, this.local$charset);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.readString_qa9gbo$ = function (charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readString_qa9gbo$(this, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$writeString_lp1jh2$($this, data_0, attributes_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$data = data_0;
    this.local$attributes = attributes_0;
    this.local$charset = charset_0;
  }
  Coroutine$writeString_lp1jh2$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeString_lp1jh2$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeString_lp1jh2$.prototype.constructor = Coroutine$writeString_lp1jh2$;
  Coroutine$writeString_lp1jh2$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            this.state_0 = 2;
            this.result_0 = this.$this.write_bdsgvo$(toByteArray(this.local$data, this.local$charset), this.local$attributes.slice(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.writeString_lp1jh2$ = function (data_0, attributes_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$writeString_lp1jh2$(this, data_0, attributes_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  VfsFile.prototype.readChunk_yhmem3$ = function (offset, size, continuation) {
    return this.vfs.readChunk_dckg8j$(this.path, offset, size, continuation);
  };
  VfsFile.prototype.writeChunk_fzdgxm$ = function (data, offset, resize, continuation) {
    if (resize === void 0)
      resize = false;
    return this.vfs.writeChunk_1ce9rc$(this.path, data, offset, resize, continuation);
  };
  function Coroutine$readAsSyncStream($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$readAsSyncStream.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readAsSyncStream.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readAsSyncStream.prototype.constructor = Coroutine$readAsSyncStream;
  Coroutine$readAsSyncStream.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.read(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return openSync(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.readAsSyncStream = function (continuation_0, suspended) {
    var instance = new Coroutine$readAsSyncStream(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  VfsFile.prototype.stat = function (continuation) {
    return this.vfs.stat_61zpoe$(this.path, continuation);
  };
  VfsFile.prototype.touch_4p96hy$ = function (time, atime, continuation) {
    if (atime === void 0)
      atime = time;
    return this.vfs.touch_wk1zco$(this.path, time, atime, continuation);
  };
  function Coroutine$size($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$size.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$size.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$size.prototype.constructor = Coroutine$size;
  Coroutine$size.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.vfs.stat_61zpoe$(this.$this.path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.size;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.size = function (continuation_0, suspended) {
    var instance = new Coroutine$size(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$exists($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.$this = $this;
    this.local$runIgnoringExceptions$result = void 0;
  }
  Coroutine$exists.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$exists.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$exists.prototype.constructor = Coroutine$exists;
  Coroutine$exists.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.state_0 = 1;
            continue;
          case 1:
            this.exceptionState_0 = 3;
            this.state_0 = 2;
            this.result_0 = this.$this.vfs.stat_61zpoe$(this.$this.path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            this.local$runIgnoringExceptions$result = this.result_0.exists;
            this.exceptionState_0 = 7;
            this.state_0 = 5;
            continue;
          case 3:
            this.exceptionState_0 = 7;
            var e_0 = this.exception_0;
            if (Kotlin.isType(e_0, Throwable)) {
              if (false)
                printStackTrace_0(e_0);
              this.local$runIgnoringExceptions$result = null;
              this.exceptionState_0 = 3;
              this.state_0 = 6;
              continue;
            } else {
              throw e_0;
            }

          case 4:
            this.state_0 = 5;
            continue;
          case 5:
            if (!false) {
              this.state_0 = 6;
              continue;
            }
            this.state_0 = 1;
            continue;
          case 6:
            return (tmp$ = this.local$runIgnoringExceptions$result) != null ? tmp$ : false;
          case 7:
            throw this.exception_0;
          default:this.state_0 = 7;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 7) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.exists = function (continuation_0, suspended) {
    var instance = new Coroutine$exists(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$isDirectory($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$isDirectory.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$isDirectory.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$isDirectory.prototype.constructor = Coroutine$isDirectory;
  Coroutine$isDirectory.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.stat(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.isDirectory;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.isDirectory = function (continuation_0, suspended) {
    var instance = new Coroutine$isDirectory(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$isFile($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$isFile.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$isFile.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$isFile.prototype.constructor = Coroutine$isFile;
  Coroutine$isFile.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.stat(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return !this.result_0.isDirectory;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.isFile = function (continuation_0, suspended) {
    var instance = new Coroutine$isFile(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  VfsFile.prototype.setSize_s8cxhz$ = function (size, continuation) {
    return this.vfs.setSize_4wgjuj$(this.path, size, continuation);
  };
  VfsFile.prototype.delete = function (continuation) {
    return this.vfs.delete_61zpoe$(this.path, continuation);
  };
  VfsFile.prototype.setAttributes_3zdbky$ = function (attributes, continuation) {
    return this.vfs.setAttributes_z6b3ik$(this.path, attributes, continuation);
  };
  VfsFile.prototype.setAttributes_2biuok$ = function (attributes, continuation) {
    return this.vfs.setAttributes_z6b3ik$(this.path, toList_0(attributes), continuation);
  };
  VfsFile.prototype.mkdir_3zdbky$ = function (attributes, continuation) {
    return this.vfs.mkdir_z6b3ik$(this.path, attributes, continuation);
  };
  VfsFile.prototype.mkdir_2biuok$ = function (attributes, continuation) {
    return this.mkdir_3zdbky$(toList_0(attributes), continuation);
  };
  function Coroutine$VfsFile$copyToTree$lambda(it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
  }
  Coroutine$VfsFile$copyToTree$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$copyToTree$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$copyToTree$lambda.prototype.constructor = Coroutine$VfsFile$copyToTree$lambda;
  Coroutine$VfsFile$copyToTree$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return Unit;
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function VfsFile$copyToTree$lambda(it_0, continuation_0, suspended) {
    var instance = new Coroutine$VfsFile$copyToTree$lambda(it_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$copyToTree_t1e86f$($this, target_0, attributes_0, notify_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$target = target_0;
    this.local$attributes = attributes_0;
    this.local$notify = notify_0;
  }
  Coroutine$copyToTree_t1e86f$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$copyToTree_t1e86f$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$copyToTree_t1e86f$.prototype.constructor = Coroutine$copyToTree_t1e86f$;
  Coroutine$copyToTree_t1e86f$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$notify === void 0)
              this.local$notify = VfsFile$copyToTree$lambda;
            this.state_0 = 2;
            this.result_0 = this.local$notify(to(this.$this, this.local$target), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.isDirectory(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            if (this.result_0) {
              this.state_0 = 5;
              this.result_0 = this.local$target.mkdir_2biuok$([], this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 4;
              this.result_0 = this.$this.copyTo_71bpb9$(this.local$target, this.local$attributes.slice(), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            }

          case 4:
            this.state_0 = 12;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.$this.list(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            this.local$tmp$ = this.result_0.iterator();
            this.state_0 = 7;
            continue;
          case 7:
            this.state_0 = 8;
            this.result_0 = this.local$tmp$.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 8:
            if (!this.result_0) {
              this.state_0 = 11;
              continue;
            } else {
              this.state_0 = 9;
              continue;
            }

          case 9:
            var file = this.local$tmp$.next();
            this.state_0 = 10;
            this.result_0 = file.copyToTree_t1e86f$(this.local$target.get_61zpoe$(get_baseName_0(file)), this.local$attributes.slice(), this.local$notify, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 10:
            this.state_0 = 7;
            continue;
          case 11:
            this.state_0 = 12;
            continue;
          case 12:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.copyToTree_t1e86f$ = function (target_0, attributes_0, notify_0, continuation_0, suspended) {
    var instance = new Coroutine$copyToTree_t1e86f$(this, target_0, attributes_0, notify_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$ensureParents($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$ensureParents.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ensureParents.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ensureParents.prototype.constructor = Coroutine$ensureParents;
  Coroutine$ensureParents.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.parent.mkdir_2biuok$([], this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.$this;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.ensureParents = function (continuation_0, suspended) {
    var instance = new Coroutine$ensureParents(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  VfsFile.prototype.renameTo_61zpoe$ = function (dstPath, continuation) {
    return this.vfs.rename_puj7f4$(this.path, dstPath, continuation);
  };
  function Coroutine$list($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$list.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$list.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$list.prototype.constructor = Coroutine$list;
  Coroutine$list.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.listFlow(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = toChannel_0(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.list = function (continuation_0, suspended) {
    var instance = new Coroutine$list(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  VfsFile.prototype.listFlow = function (continuation) {
    return this.vfs.listFlow_61zpoe$(this.path, continuation);
  };
  function VfsFile$listRecursive$lambda(it) {
    return true;
  }
  function Coroutine$listRecursive_s5lnwc$($this, filter_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$filter = filter_0;
  }
  Coroutine$listRecursive_s5lnwc$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listRecursive_s5lnwc$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listRecursive_s5lnwc$.prototype.constructor = Coroutine$listRecursive_s5lnwc$;
  Coroutine$listRecursive_s5lnwc$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$filter === void 0)
              this.local$filter = VfsFile$listRecursive$lambda;
            this.state_0 = 2;
            this.result_0 = this.$this.listRecursiveFlow_s5lnwc$(this.local$filter, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = toChannel_0(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.listRecursive_s5lnwc$ = function (filter_0, continuation_0, suspended) {
    var instance = new Coroutine$listRecursive_s5lnwc$(this, filter_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function VfsFile$listRecursiveFlow$lambda(it) {
    return true;
  }
  function Coroutine$VfsFile$listRecursiveFlow$lambda$lambda$lambda(this$_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$it = it_0;
  }
  Coroutine$VfsFile$listRecursiveFlow$lambda$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$listRecursiveFlow$lambda$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$listRecursiveFlow$lambda$lambda$lambda.prototype.constructor = Coroutine$VfsFile$listRecursiveFlow$lambda$lambda$lambda;
  Coroutine$VfsFile$listRecursiveFlow$lambda$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$.emit_11rb$(this.local$it, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function VfsFile$listRecursiveFlow$lambda$lambda$lambda(this$_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$VfsFile$listRecursiveFlow$lambda$lambda$lambda(this$_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$VfsFile$listRecursiveFlow$lambda$lambda(closure$filter_0, this$_0, file_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$filter = closure$filter_0;
    this.local$this$ = this$_0;
    this.local$file = file_0;
  }
  Coroutine$VfsFile$listRecursiveFlow$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$listRecursiveFlow$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$listRecursiveFlow$lambda$lambda.prototype.constructor = Coroutine$VfsFile$listRecursiveFlow$lambda$lambda;
  Coroutine$VfsFile$listRecursiveFlow$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$closure$filter(this.local$file)) {
              this.state_0 = 2;
              this.result_0 = this.local$this$.emit_11rb$(this.local$file, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 7;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$file.stat(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var stat = this.result_0;
            if (stat.isDirectory) {
              this.state_0 = 4;
              this.result_0 = this.local$file.listRecursiveFlow_s5lnwc$(void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 6;
              continue;
            }

          case 4:
            var $receiver = this.result_0;
            var action = VfsFile$listRecursiveFlow$lambda$lambda$lambda(this.local$this$);
            this.state_0 = 5;
            this.result_0 = $receiver.collect_42ocv1$(new collect$ObjectLiteral_1(action), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.result_0;
            return Unit;
          case 6:
            this.state_0 = 7;
            continue;
          case 7:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function VfsFile$listRecursiveFlow$lambda$lambda(closure$filter_0, this$_0) {
    return function (file_0, continuation_0, suspended) {
      var instance = new Coroutine$VfsFile$listRecursiveFlow$lambda$lambda(closure$filter_0, this$_0, file_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$VfsFile$listRecursiveFlow$lambda(this$VfsFile_0, closure$filter_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$VfsFile = this$VfsFile_0;
    this.local$closure$filter = closure$filter_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$VfsFile$listRecursiveFlow$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$listRecursiveFlow$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$listRecursiveFlow$lambda.prototype.constructor = Coroutine$VfsFile$listRecursiveFlow$lambda;
  Coroutine$VfsFile$listRecursiveFlow$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$VfsFile.listFlow(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var $receiver = this.result_0;
            var action = VfsFile$listRecursiveFlow$lambda$lambda(this.local$closure$filter, this.local$$receiver);
            this.state_0 = 3;
            this.result_0 = $receiver.collect_42ocv1$(new collect$ObjectLiteral_1(action), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function VfsFile$listRecursiveFlow$lambda_0(this$VfsFile_0, closure$filter_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$VfsFile$listRecursiveFlow$lambda(this$VfsFile_0, closure$filter_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  VfsFile.prototype.listRecursiveFlow_s5lnwc$ = function (filter, continuation) {
    if (filter === void 0)
      filter = VfsFile$listRecursiveFlow$lambda;
    return flow(VfsFile$listRecursiveFlow$lambda_0(this, filter));
  };
  VfsFile.prototype.exec_aqpaf4$ = function (cmdAndArgs, env, handler, continuation) {
    if (env === void 0)
      env = LinkedHashMap_init();
    if (handler === void 0)
      handler = new VfsProcessHandler();
    return this.vfs.exec_z6qifm$(this.path, cmdAndArgs, env, handler, continuation);
  };
  function VfsFile$execToString$ObjectLiteral(closure$out, closure$captureError, closure$err) {
    this.closure$out = closure$out;
    this.closure$captureError = closure$captureError;
    this.closure$err = closure$err;
    VfsProcessHandler.call(this);
  }
  VfsFile$execToString$ObjectLiteral.prototype.onOut_fqrh44$ = function (data, continuation) {
    this.closure$out.append_mj6st8$(data);
  };
  VfsFile$execToString$ObjectLiteral.prototype.onErr_fqrh44$ = function (data, continuation) {
    if (this.closure$captureError)
      this.closure$out.append_mj6st8$(data);
    this.closure$err.append_mj6st8$(data);
  };
  VfsFile$execToString$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [VfsProcessHandler]
  };
  function Coroutine$execToString_rejnxc$($this, cmdAndArgs_0, env_0, charset_0, captureError_0, throwOnError_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$out = void 0;
    this.local$err = void 0;
    this.local$cmdAndArgs = cmdAndArgs_0;
    this.local$env = env_0;
    this.local$charset = charset_0;
    this.local$captureError = captureError_0;
    this.local$throwOnError = throwOnError_0;
  }
  Coroutine$execToString_rejnxc$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$execToString_rejnxc$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$execToString_rejnxc$.prototype.constructor = Coroutine$execToString_rejnxc$;
  Coroutine$execToString_rejnxc$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$env === void 0)
              this.local$env = LinkedHashMap_init();
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            if (this.local$captureError === void 0)
              this.local$captureError = false;
            if (this.local$throwOnError === void 0)
              this.local$throwOnError = true;
            this.local$out = ByteArrayBuilder_init();
            this.local$err = ByteArrayBuilder_init();
            this.state_0 = 2;
            this.result_0 = this.$this.exec_aqpaf4$(this.local$cmdAndArgs, this.local$env, new VfsFile$execToString$ObjectLiteral(this.local$out, this.local$captureError, this.local$err), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var result = this.result_0;
            var errString = toString_2(this.local$err.toByteArray(), this.local$charset);
            var outString = toString_2(this.local$out.toByteArray(), this.local$charset);
            if (this.local$throwOnError && result !== 0)
              throw new VfsProcessException('Process not returned 0, but ' + result + '. Error: ' + errString + ', Output: ' + outString);
            return outString;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.execToString_rejnxc$ = function (cmdAndArgs_0, env_0, charset_0, captureError_0, throwOnError_0, continuation_0, suspended) {
    var instance = new Coroutine$execToString_rejnxc$(this, cmdAndArgs_0, env_0, charset_0, captureError_0, throwOnError_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  VfsFile.prototype.execToString_kd6qi3$ = function (cmdAndArgs, charset, continuation) {
    if (charset === void 0)
      charset = UTF8;
    return this.execToString_rejnxc$(toList_0(cmdAndArgs), void 0, charset, void 0, void 0, continuation);
  };
  function VfsFile$passthru$ObjectLiteral(closure$charset) {
    this.closure$charset = closure$charset;
    VfsProcessHandler.call(this);
  }
  VfsFile$passthru$ObjectLiteral.prototype.onOut_fqrh44$ = function (data, continuation) {
    return print(toString_2(data, this.closure$charset));
  };
  VfsFile$passthru$ObjectLiteral.prototype.onErr_fqrh44$ = function (data, continuation) {
    return print(toString_2(data, this.closure$charset));
  };
  VfsFile$passthru$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [VfsProcessHandler]
  };
  function Coroutine$passthru_msg81s$($this, cmdAndArgs_0, env_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$cmdAndArgs = cmdAndArgs_0;
    this.local$env = env_0;
    this.local$charset = charset_0;
  }
  Coroutine$passthru_msg81s$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$passthru_msg81s$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$passthru_msg81s$.prototype.constructor = Coroutine$passthru_msg81s$;
  Coroutine$passthru_msg81s$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$env === void 0)
              this.local$env = LinkedHashMap_init();
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            this.state_0 = 2;
            this.result_0 = this.$this.exec_aqpaf4$(toList(this.local$cmdAndArgs), this.local$env, new VfsFile$passthru$ObjectLiteral(this.local$charset), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var $receiver = this.result_0;
            println_0();
            return $receiver;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile.prototype.passthru_msg81s$ = function (cmdAndArgs_0, env_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$passthru_msg81s$(this, cmdAndArgs_0, env_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  VfsFile.prototype.passthru_2y9ixa$ = function (cmdAndArgs, env, charset, continuation) {
    if (env === void 0)
      env = LinkedHashMap_init();
    if (charset === void 0)
      charset = UTF8;
    return this.passthru_msg81s$(toList_0(cmdAndArgs), env, charset, continuation);
  };
  function Coroutine$VfsFile$watch$lambda$lambda(closure$handler_0, closure$event_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$closure$event = closure$event_0;
  }
  Coroutine$VfsFile$watch$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$VfsFile$watch$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$VfsFile$watch$lambda$lambda.prototype.constructor = Coroutine$VfsFile$watch$lambda$lambda;
  Coroutine$VfsFile$watch$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler(this.local$closure$event, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function VfsFile$watch$lambda$lambda(closure$handler_0, closure$event_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$VfsFile$watch$lambda$lambda(closure$handler_0, closure$event_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function VfsFile$watch$lambda(closure$cc, closure$handler) {
    return function (event) {
      launchImmediately_0(closure$cc, VfsFile$watch$lambda$lambda(closure$handler, event));
      return Unit;
    };
  }
  VfsFile.prototype.watch_7c156q$ = function (handler, continuation) {
    var cc = continuation.context;
    return this.vfs.watch_6lbnta$(this.path, VfsFile$watch$lambda(cc, handler), continuation);
  };
  function VfsFile$redirected$ObjectLiteral(closure$actualFile, closure$pathRedirector) {
    this.closure$actualFile = closure$actualFile;
    this.closure$pathRedirector = closure$pathRedirector;
    Vfs$Proxy.call(this);
  }
  function Coroutine$access_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$path = path_0;
  }
  Coroutine$access_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$access_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$access_61zpoe$.prototype.constructor = Coroutine$access_61zpoe$;
  Coroutine$access_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$tmp$ = this.$this.closure$actualFile;
            this.state_0 = 2;
            this.result_0 = this.$this.closure$pathRedirector(this.$this.closure$actualFile, this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$tmp$.get_61zpoe$(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  VfsFile$redirected$ObjectLiteral.prototype.access_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$access_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  VfsFile$redirected$ObjectLiteral.prototype.toString = function () {
    return 'VfsRedirected';
  };
  VfsFile$redirected$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [Vfs$Proxy]
  };
  VfsFile.prototype.redirected_j8632z$ = function (pathRedirector, continuation) {
    var actualFile = this;
    return new VfsFile(new VfsFile$redirected$ObjectLiteral(actualFile, pathRedirector), this.path);
  };
  VfsFile.prototype.jail = function () {
    return JailVfs(this);
  };
  VfsFile.prototype.getUnderlyingUnscapedFile = function (continuation) {
    return this.vfs.getUnderlyingUnscapedFile_61zpoe$(this.path, continuation);
  };
  VfsFile.prototype.toString = function () {
    return this.vfs.toString() + '[' + this.path + ']';
  };
  Object.defineProperty(VfsFile.prototype, 'extra', {
    get: function () {
      return this.$delegate_3ekr7n$_0.extra;
    },
    set: function (tmp$) {
      this.$delegate_3ekr7n$_0.extra = tmp$;
    }
  });
  VfsFile.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VfsFile',
    interfaces: [Extra, AsyncInputOpenable, VfsNamed]
  };
  VfsFile.prototype.component1 = function () {
    return this.vfs;
  };
  VfsFile.prototype.component2 = function () {
    return this.path;
  };
  VfsFile.prototype.copy_o2v52r$ = function (vfs, path) {
    return new VfsFile(vfs === void 0 ? this.vfs : vfs, path === void 0 ? this.path : path);
  };
  VfsFile.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.vfs) | 0;
    result = result * 31 + Kotlin.hashCode(this.path) | 0;
    return result;
  };
  VfsFile.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.vfs, other.vfs) && Kotlin.equals(this.path, other.path)))));
  };
  function toUnscaped($receiver) {
    return new FinalVfsFile($receiver);
  }
  function toFile($receiver) {
    return $receiver.file;
  }
  function FinalVfsFile(file) {
    this.file = file;
  }
  Object.defineProperty(FinalVfsFile.prototype, 'vfs', {
    get: function () {
      return this.file.vfs;
    }
  });
  Object.defineProperty(FinalVfsFile.prototype, 'path', {
    get: function () {
      return this.file.path;
    }
  });
  FinalVfsFile.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FinalVfsFile',
    interfaces: []
  };
  function FinalVfsFile_init(vfs, path, $this) {
    $this = $this || Object.create(FinalVfsFile.prototype);
    FinalVfsFile.call($this, vfs.get_61zpoe$(path));
    return $this;
  }
  FinalVfsFile.prototype.component1 = function () {
    return this.file;
  };
  FinalVfsFile.prototype.copy_3ekr7n$ = function (file) {
    return new FinalVfsFile(file === void 0 ? this.file : file);
  };
  FinalVfsFile.prototype.toString = function () {
    return 'FinalVfsFile(file=' + Kotlin.toString(this.file) + ')';
  };
  FinalVfsFile.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.file) | 0;
    return result;
  };
  FinalVfsFile.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.file, other.file))));
  };
  function Coroutine$useVfs($receiver_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver_0 = void 0;
    this.local$tmp$ = void 0;
    this.local$error = void 0;
    this.local$result = void 0;
    this.local$$receiver = $receiver_0;
    this.local$callback = callback_0;
  }
  Coroutine$useVfs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$useVfs.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$useVfs.prototype.constructor = Coroutine$useVfs;
  Coroutine$useVfs.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver_0 = this.local$$receiver.vfs;
            var tmp$;
            this.local$error = null;
            this.exceptionState_0 = 2;
            this.state_0 = 1;
            this.result_0 = this.local$callback(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.local$tmp$ = this.result_0;
            this.exceptionState_0 = 5;
            this.state_0 = 3;
            continue;
          case 2:
            this.exceptionState_0 = 5;
            var e_0 = this.exception_0;
            if (Kotlin.isType(e_0, Throwable)) {
              this.local$error = e_0;
              this.local$tmp$ = null;
            } else
              throw e_0;
            this.state_0 = 3;
            continue;
          case 3:
            this.local$result = this.local$tmp$;
            this.state_0 = 4;
            this.result_0 = this.local$$receiver_0.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            if (this.local$error != null)
              throw this.local$error;
            this.result_0 = (tmp$ = this.local$result) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
            return this.result_0;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function useVfs($receiver_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$useVfs($receiver_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$IsoVfs(file_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$file = file_0;
  }
  Coroutine$IsoVfs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$IsoVfs.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$IsoVfs.prototype.constructor = Coroutine$IsoVfs;
  Coroutine$IsoVfs.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$tmp$ = ISO_getInstance();
            this.state_0 = 2;
            this.result_0 = this.local$file.open_tiaunm$(VfsOpenMode$READ_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$tmp$.openVfs_wgmqyx$(this.result_0, true, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function IsoVfs(file_0, continuation_0, suspended) {
    var instance = new Coroutine$IsoVfs(file_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function IsoVfs_0(s, continuation) {
    return ISO_getInstance().openVfs_wgmqyx$(s, false, continuation);
  }
  function openAsIso($receiver, continuation) {
    return IsoVfs_0($receiver, continuation);
  }
  function openAsIso_0($receiver, continuation) {
    return IsoVfs($receiver, continuation);
  }
  function Coroutine$openAsIso($receiver_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$callback = callback_0;
  }
  Coroutine$openAsIso.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openAsIso.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openAsIso.prototype.constructor = Coroutine$openAsIso;
  Coroutine$openAsIso.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = openAsIso(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = useVfs(this.result_0, this.local$callback, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function openAsIso_1($receiver_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$openAsIso($receiver_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$openAsIso_0($receiver_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$callback = callback_0;
  }
  Coroutine$openAsIso_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openAsIso_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openAsIso_0.prototype.constructor = Coroutine$openAsIso_0;
  Coroutine$openAsIso_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = openAsIso_0(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = useVfs(this.result_0, this.local$callback, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function openAsIso_2($receiver_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$openAsIso_0($receiver_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function IsoVfs_1(iso, closeStream) {
    VfsV2.call(this);
    this.iso = iso;
    this.closeStream = closeStream;
    this.vfs = this;
    this.isoFile = this.iso;
  }
  function Coroutine$close_1($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_1.prototype.constructor = Coroutine$close_1;
  Coroutine$close_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.closeStream) {
              this.state_0 = 2;
              this.result_0 = this.$this.iso.reader.close(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  IsoVfs_1.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_1(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  IsoVfs_1.prototype.getVfsStat_38xve3$ = function (file) {
    return this.createExistsStat_14z8ds$(file.fullname, file.isDirectory, file.size, void 0, Kotlin.Long.fromInt(file.record.extent), void 0, void 0, void 0, void 0, void 0, void 0, new Int32Array([file.record.extent, 0, 0, 0, 0, 0]), file.fullname);
  };
  IsoVfs_1.prototype.stat_61zpoe$ = function (path, continuation) {
    try {
      return this.getVfsStat_38xve3$(this.isoFile.get_61zpoe$(path));
    } catch (e) {
      if (Kotlin.isType(e, Throwable)) {
        return this.createNonExistsStat_4w9ihe$(path);
      } else
        throw e;
    }
  };
  IsoVfs_1.prototype.open_vb0dls$ = function (path, mode, continuation) {
    return this.isoFile.get_61zpoe$(path).open2_tiaunm$(mode, continuation);
  };
  function Coroutine$IsoVfs$listFlow$lambda(this$IsoVfs_0, closure$path_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$IsoVfs = this$IsoVfs_0;
    this.local$closure$path = closure$path_0;
    this.local$$receiver = void 0;
    this.local$n = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$IsoVfs$listFlow$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$IsoVfs$listFlow$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$IsoVfs$listFlow$lambda.prototype.constructor = Coroutine$IsoVfs$listFlow$lambda;
  Coroutine$IsoVfs$listFlow$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var file = this.local$this$IsoVfs.isoFile.get_61zpoe$(this.local$closure$path);
            this.local$$receiver = file.children;
            var tmp$;
            this.local$n = 0;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$n >= this.local$$receiver.size) {
              this.state_0 = 4;
              continue;
            }
            this.state_0 = 3;
            this.result_0 = this.local$$receiver_0.emit_11rb$(this.local$this$IsoVfs.vfs.get_61zpoe$(this.local$$receiver.get_za3lpa$((tmp$ = this.local$n, this.local$n = tmp$ + 1 | 0, tmp$)).fullname), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 2;
            continue;
          case 4:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function IsoVfs$listFlow$lambda(this$IsoVfs_0, closure$path_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$IsoVfs$listFlow$lambda(this$IsoVfs_0, closure$path_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  IsoVfs_1.prototype.listFlow_61zpoe$ = function (path, continuation) {
    return flow(IsoVfs$listFlow$lambda(this, path));
  };
  IsoVfs_1.prototype.toString = function () {
    return 'IsoVfs(' + this.iso + ')';
  };
  IsoVfs_1.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IsoVfs',
    interfaces: [VfsV2]
  };
  function ISO() {
    ISO_instance = this;
    this.CHARSET = ASCII_getInstance();
    this.SECTOR_SIZE = L2048;
  }
  ISO.prototype.read_axnxby$ = function (s, continuation) {
    return (new ISO$IsoReader(s)).read(continuation);
  };
  function Coroutine$openVfs_wgmqyx$($this, s_0, closeStream_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$s = s_0;
    this.local$closeStream = closeStream_0;
  }
  Coroutine$openVfs_wgmqyx$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openVfs_wgmqyx$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openVfs_wgmqyx$.prototype.constructor = Coroutine$openVfs_wgmqyx$;
  Coroutine$openVfs_wgmqyx$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.read_axnxby$(this.local$s, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return (new IsoVfs_1(this.result_0, this.local$closeStream)).root;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ISO.prototype.openVfs_wgmqyx$ = function (s_0, closeStream_0, continuation_0, suspended) {
    var instance = new Coroutine$openVfs_wgmqyx$(this, s_0, closeStream_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function ISO$IsoReader(s) {
    this.s = s;
  }
  function Coroutine$close_2($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_2.prototype.constructor = Coroutine$close_2;
  Coroutine$close_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.s.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ISO$IsoReader.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_2(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  ISO$IsoReader.prototype.getSector_vux9f0$ = function (sector, size, continuation) {
    return sliceWithSize(this.s, Kotlin.Long.fromInt(sector).multiply(ISO_getInstance().SECTOR_SIZE), Kotlin.Long.fromInt(size), void 0, continuation);
  };
  function Coroutine$getSectorMemory_vux9f0$($this, sector_0, size_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$sector = sector_0;
    this.local$size = size_0;
  }
  Coroutine$getSectorMemory_vux9f0$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getSectorMemory_vux9f0$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getSectorMemory_vux9f0$.prototype.constructor = Coroutine$getSectorMemory_vux9f0$;
  Coroutine$getSectorMemory_vux9f0$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$size === void 0)
              this.local$size = 2048;
            this.state_0 = 2;
            this.result_0 = this.$this.getSector_vux9f0$(this.local$sector, this.local$size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = readAvailable(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return openSync(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ISO$IsoReader.prototype.getSectorMemory_vux9f0$ = function (sector_0, size_0, continuation_0, suspended) {
    var instance = new Coroutine$getSectorMemory_vux9f0$(this, sector_0, size_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$primary = void 0;
    this.local$udfFileSystem = void 0;
    this.local$n = void 0;
    this.local$root = void 0;
  }
  Coroutine$read.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read.prototype.constructor = Coroutine$read;
  Coroutine$read.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.state_0 = 2;
            this.result_0 = this.$this.getSectorMemory_vux9f0$(16, 2048, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$primary = ISO$ISO$PrimaryVolumeDescriptor_init(this.result_0);
            this.local$udfFileSystem = false;
            this.local$n = 0;
            this.state_0 = 3;
            continue;
          case 3:
            if (this.local$n >= 16) {
              this.state_0 = 6;
              continue;
            }
            this.state_0 = 4;
            this.result_0 = this.$this.getSectorMemory_vux9f0$(17 + this.local$n | 0, 2048, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            var s = this.result_0;
            var vdh = ISO$ISO$VolumeDescriptorHeader_init(s.clone());
            switch (vdh.id) {
              case 'CD001':
                break;
              case 'BEA01':
                break;
              case 'NSR02':
                this.local$udfFileSystem = true;
                break;
              case 'NSR03':
                this.local$udfFileSystem = true;
                break;
              case 'BOOT2':
                break;
              case 'TEA01':
                break;
            }

            this.state_0 = 5;
            continue;
          case 5:
            this.local$n++;
            this.state_0 = 3;
            continue;
          case 6:
            if (this.local$udfFileSystem) {
              this.state_0 = 7;
              this.result_0 = this.$this.getSectorMemory_vux9f0$(256, void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 9;
              continue;
            }

          case 7:
            var udfs = this.result_0;
            var avd = ISO$ISO$UdfAnchorVolumeDescriptorPointer_init(udfs);
            this.state_0 = 8;
            this.result_0 = this.$this.getSectorMemory_vux9f0$(avd.mainVolumeDescriptorSequenceExtent.location, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 8:
            var mvd = this.result_0;
            var pv = ISO$ISO$UdfPrimaryVolumeDescriptor_init(mvd);
            if (!((tmp$ = pv.descriptorTag.tagId) != null ? tmp$.equals(ISO$UdfDescriptorTag$TagId$Companion_getInstance().PRIMARY_VOLUME_DESCRIPTOR) : null)) {
              invalidOp('Expected UDF primary volume descriptor');
            }
            this.state_0 = 9;
            continue;
          case 9:
            this.local$root = new ISO$IsoFile(this.$this, this.local$primary.rootDirectoryRecord, null);
            this.state_0 = 10;
            this.result_0 = this.$this.getSectorMemory_vux9f0$(this.local$primary.rootDirectoryRecord.extent, this.local$primary.rootDirectoryRecord.size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 10:
            this.state_0 = 11;
            this.result_0 = this.$this.readDirectoryRecords_rclg8q$(this.local$root, this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 11:
            return this.local$root;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ISO$IsoReader.prototype.read = function (continuation_0, suspended) {
    var instance = new Coroutine$read(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readDirectoryRecords_rclg8q$($this, parent_0, sector_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$dr = void 0;
    this.local$file = void 0;
    this.local$parent = parent_0;
    this.local$sector = sector_0;
  }
  Coroutine$readDirectoryRecords_rclg8q$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readDirectoryRecords_rclg8q$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readDirectoryRecords_rclg8q$.prototype.constructor = Coroutine$readDirectoryRecords_rclg8q$;
  Coroutine$readDirectoryRecords_rclg8q$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (get_eof(this.local$sector)) {
              this.state_0 = 8;
              continue;
            }
            this.local$dr = ISO$DirectoryRecord$Companion_getInstance().invoke_39qel5$(this.local$sector);
            if (this.local$dr == null) {
              skipToAlign_0(this.local$sector, 2048);
              this.state_0 = 2;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            if (equals(this.local$dr.name, '') || equals(this.local$dr.name, '\x01')) {
              this.state_0 = 2;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.local$file = new ISO$IsoFile(this.$this, this.local$dr, this.local$parent);
            if (this.local$dr.isDirectory) {
              this.state_0 = 5;
              this.result_0 = this.$this.getSectorMemory_vux9f0$(this.local$dr.extent, this.local$dr.size, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 7;
              continue;
            }

          case 5:
            this.state_0 = 6;
            this.result_0 = this.$this.readDirectoryRecords_rclg8q$(this.local$file, this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            this.state_0 = 7;
            continue;
          case 7:
            this.state_0 = 2;
            continue;
          case 8:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ISO$IsoReader.prototype.readDirectoryRecords_rclg8q$ = function (parent_0, sector_0, continuation_0, suspended) {
    var instance = new Coroutine$readDirectoryRecords_rclg8q$(this, parent_0, sector_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  ISO$IsoReader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IsoReader',
    interfaces: [AsyncCloseable]
  };
  function ISO$IsoFile(reader, record, parent) {
    this.reader = reader;
    this.record = record;
    this.parent = parent;
    this.normalizedName = this.normalizeName_0(this.name);
    this.fullname = this.parent == null ? this.record.name : trimStart(this.parent.fullname + '/' + this.record.name, Kotlin.charArrayOf(47));
    this.children = ArrayList_init();
    this.childrenByName = LinkedHashMap_init();
    this.size = Kotlin.Long.fromInt(this.record.size);
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    (tmp$_0 = (tmp$ = this.parent) != null ? tmp$.children : null) != null ? tmp$_0.add_11rb$(this) : null;
    (tmp$_2 = (tmp$_1 = this.parent) != null ? tmp$_1.childrenByName : null) != null ? tmp$_2.put_xwzc9p$(this.normalizedName, this) : null;
  }
  Object.defineProperty(ISO$IsoFile.prototype, 'name', {
    get: function () {
      return this.record.name;
    }
  });
  Object.defineProperty(ISO$IsoFile.prototype, 'isDirectory', {
    get: function () {
      return this.record.isDirectory;
    }
  });
  ISO$IsoFile.prototype.dump = function () {
    println(this.fullname + ': ' + this.record);
    var $receiver = this.children;
    var tmp$;
    var n = 0;
    while (n < $receiver.size) {
      $receiver.get_za3lpa$((tmp$ = n, n = tmp$ + 1 | 0, tmp$)).dump();
    }
  };
  ISO$IsoFile.prototype.normalizeName_0 = function ($receiver) {
    return $receiver.toLowerCase();
  };
  ISO$IsoFile.prototype.open2_tiaunm$ = function (mode, continuation) {
    return this.reader.getSector_vux9f0$(this.record.extent, this.record.size, continuation);
  };
  ISO$IsoFile.prototype.get_61zpoe$ = function (name) {
    var current = {v: this};
    var $receiver = split_0(name, ['/']);
    var tmp$;
    var n = 0;
    while (n < $receiver.size) {
      var part = $receiver.get_za3lpa$((tmp$ = n, n = tmp$ + 1 | 0, tmp$));
      var tmp$_0;
      switch (part) {
        case '':
          break;
        case '.':
          break;
        case '..':
          current.v = ensureNotNull(current.v.parent);
          break;
        default:tmp$_0 = current.v.childrenByName.get_11rb$(this.normalizeName_0(part));
          if (tmp$_0 == null) {
            throw IllegalStateException_init("Can't find part " + part + ' for accessing path ' + name + ' children: ' + current.v.children);
          }
          current.v = tmp$_0;
          break;
      }
    }
    return current.v;
  };
  ISO$IsoFile.prototype.toString = function () {
    return "IsoFile(fullname='" + this.fullname + "', size=" + this.size.toString() + ')';
  };
  ISO$IsoFile.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IsoFile',
    interfaces: []
  };
  ISO.prototype.readLongArrayLE_hsu5ns$ = function ($receiver, count) {
    var $receiver_0 = until(0, count);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$;
    tmp$ = $receiver_0.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(readS64LE_1($receiver));
    }
    return toLongArray(destination);
  };
  ISO.prototype.readU32_leBE_ucmi9i$ = function ($receiver) {
    var le = readS32LE_1($receiver);
    readS32BE_1($receiver);
    return le;
  };
  ISO.prototype.readTextWithLength_ucmi9i$ = function ($receiver) {
    var len = readU8_1($receiver);
    return readStringz_4($receiver, len, this.CHARSET);
  };
  ISO.prototype.readU16_leBE_ucmi9i$ = function ($receiver) {
    var le = readS16LE_1($receiver);
    readS16BE_1($receiver);
    return le;
  };
  function ISO$UdfDescriptorTag(tagId, descVersion, tagChecksum, reserved, tagSerialNumber, descriptorCRC, descriptorCRCLength, tagLocation) {
    this.tagId = tagId;
    this.descVersion = descVersion;
    this.tagChecksum = tagChecksum;
    this.reserved = reserved;
    this.tagSerialNumber = tagSerialNumber;
    this.descriptorCRC = descriptorCRC;
    this.descriptorCRCLength = descriptorCRCLength;
    this.tagLocation = tagLocation;
  }
  function ISO$UdfDescriptorTag$TagId(id) {
    ISO$UdfDescriptorTag$TagId$Companion_getInstance();
    this.id = id;
  }
  function ISO$UdfDescriptorTag$TagId$Companion() {
    ISO$UdfDescriptorTag$TagId$Companion_instance = this;
    this.PRIMARY_VOLUME_DESCRIPTOR = new ISO$UdfDescriptorTag$TagId(1);
    this.ANCHOR_VOLUME_DESCRIPTOR_POINTER = new ISO$UdfDescriptorTag$TagId(2);
    this.VOLUME_DESCRIPTOR_POINTER = new ISO$UdfDescriptorTag$TagId(3);
    this.IMPLEMENTATION_USE_VOLUME_DESCRIPTOR = new ISO$UdfDescriptorTag$TagId(4);
    this.PARTITION_DESCRIPTOR = new ISO$UdfDescriptorTag$TagId(5);
    this.LOGICAL_VOLUME_DESCRIPTOR = new ISO$UdfDescriptorTag$TagId(6);
    this.UNALLOCATED_SPACE_DESCRIPTOR = new ISO$UdfDescriptorTag$TagId(7);
    this.TERMINATING_DESCRIPTOR = new ISO$UdfDescriptorTag$TagId(8);
    this.LOGICAL_VOLUME_INTEGRITY_DESCRIPTOR = new ISO$UdfDescriptorTag$TagId(9);
    this.FILE_SET_DESCRIPTOR = new ISO$UdfDescriptorTag$TagId(256);
    this.FILE_IDENTIFIER_DESCRIPTOR = new ISO$UdfDescriptorTag$TagId(257);
    this.ALLOCATION_EXTENT_DESCRIPTOR = new ISO$UdfDescriptorTag$TagId(258);
    this.INDIRECT_ENTRY = new ISO$UdfDescriptorTag$TagId(259);
    this.TERMINAL_ENTRY = new ISO$UdfDescriptorTag$TagId(260);
    this.FILE_ENTRY = new ISO$UdfDescriptorTag$TagId(261);
    this.EXTENDED_ATTRIBUTE_HEADER_DESCRIPTOR = new ISO$UdfDescriptorTag$TagId(262);
    this.UNALLOCATED_SPACE_ENTRY = new ISO$UdfDescriptorTag$TagId(263);
    this.SPACE_BITMAP_DESCRIPTOR = new ISO$UdfDescriptorTag$TagId(264);
    this.PARTITION_INTEGRITY_ENTRY = new ISO$UdfDescriptorTag$TagId(265);
    this.EXTENDED_FILE_ENTRY = new ISO$UdfDescriptorTag$TagId(266);
  }
  ISO$UdfDescriptorTag$TagId$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ISO$UdfDescriptorTag$TagId$Companion_instance = null;
  function ISO$UdfDescriptorTag$TagId$Companion_getInstance() {
    if (ISO$UdfDescriptorTag$TagId$Companion_instance === null) {
      new ISO$UdfDescriptorTag$TagId$Companion();
    }return ISO$UdfDescriptorTag$TagId$Companion_instance;
  }
  ISO$UdfDescriptorTag$TagId.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TagId',
    interfaces: []
  };
  ISO$UdfDescriptorTag$TagId.prototype.component1 = function () {
    return this.id;
  };
  ISO$UdfDescriptorTag$TagId.prototype.copy_za3lpa$ = function (id) {
    return new ISO$UdfDescriptorTag$TagId(id === void 0 ? this.id : id);
  };
  ISO$UdfDescriptorTag$TagId.prototype.toString = function () {
    return 'TagId(id=' + Kotlin.toString(this.id) + ')';
  };
  ISO$UdfDescriptorTag$TagId.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.id) | 0;
    return result;
  };
  ISO$UdfDescriptorTag$TagId.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.id, other.id))));
  };
  ISO$UdfDescriptorTag.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UdfDescriptorTag',
    interfaces: []
  };
  function ISO$ISO$UdfDescriptorTag_init(s, $this) {
    $this = $this || Object.create(ISO$UdfDescriptorTag.prototype);
    ISO$UdfDescriptorTag.call($this, new ISO$UdfDescriptorTag$TagId(readU16LE_1(s)), readU16LE_1(s), readU8_1(s), readU8_1(s), readU16LE_1(s), readU16LE_1(s), readU16LE_1(s), readS32LE_1(s));
    return $this;
  }
  ISO$UdfDescriptorTag.prototype.component1 = function () {
    return this.tagId;
  };
  ISO$UdfDescriptorTag.prototype.component2 = function () {
    return this.descVersion;
  };
  ISO$UdfDescriptorTag.prototype.component3 = function () {
    return this.tagChecksum;
  };
  ISO$UdfDescriptorTag.prototype.component4 = function () {
    return this.reserved;
  };
  ISO$UdfDescriptorTag.prototype.component5 = function () {
    return this.tagSerialNumber;
  };
  ISO$UdfDescriptorTag.prototype.component6 = function () {
    return this.descriptorCRC;
  };
  ISO$UdfDescriptorTag.prototype.component7 = function () {
    return this.descriptorCRCLength;
  };
  ISO$UdfDescriptorTag.prototype.component8 = function () {
    return this.tagLocation;
  };
  ISO$UdfDescriptorTag.prototype.copy_15om9v$ = function (tagId, descVersion, tagChecksum, reserved, tagSerialNumber, descriptorCRC, descriptorCRCLength, tagLocation) {
    return new ISO$UdfDescriptorTag(tagId === void 0 ? this.tagId : tagId, descVersion === void 0 ? this.descVersion : descVersion, tagChecksum === void 0 ? this.tagChecksum : tagChecksum, reserved === void 0 ? this.reserved : reserved, tagSerialNumber === void 0 ? this.tagSerialNumber : tagSerialNumber, descriptorCRC === void 0 ? this.descriptorCRC : descriptorCRC, descriptorCRCLength === void 0 ? this.descriptorCRCLength : descriptorCRCLength, tagLocation === void 0 ? this.tagLocation : tagLocation);
  };
  ISO$UdfDescriptorTag.prototype.toString = function () {
    return 'UdfDescriptorTag(tagId=' + Kotlin.toString(this.tagId) + (', descVersion=' + Kotlin.toString(this.descVersion)) + (', tagChecksum=' + Kotlin.toString(this.tagChecksum)) + (', reserved=' + Kotlin.toString(this.reserved)) + (', tagSerialNumber=' + Kotlin.toString(this.tagSerialNumber)) + (', descriptorCRC=' + Kotlin.toString(this.descriptorCRC)) + (', descriptorCRCLength=' + Kotlin.toString(this.descriptorCRCLength)) + (', tagLocation=' + Kotlin.toString(this.tagLocation)) + ')';
  };
  ISO$UdfDescriptorTag.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.tagId) | 0;
    result = result * 31 + Kotlin.hashCode(this.descVersion) | 0;
    result = result * 31 + Kotlin.hashCode(this.tagChecksum) | 0;
    result = result * 31 + Kotlin.hashCode(this.reserved) | 0;
    result = result * 31 + Kotlin.hashCode(this.tagSerialNumber) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptorCRC) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptorCRCLength) | 0;
    result = result * 31 + Kotlin.hashCode(this.tagLocation) | 0;
    return result;
  };
  ISO$UdfDescriptorTag.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.tagId, other.tagId) && Kotlin.equals(this.descVersion, other.descVersion) && Kotlin.equals(this.tagChecksum, other.tagChecksum) && Kotlin.equals(this.reserved, other.reserved) && Kotlin.equals(this.tagSerialNumber, other.tagSerialNumber) && Kotlin.equals(this.descriptorCRC, other.descriptorCRC) && Kotlin.equals(this.descriptorCRCLength, other.descriptorCRCLength) && Kotlin.equals(this.tagLocation, other.tagLocation)))));
  };
  function ISO$UdfExtent(length, location) {
    this.length = length;
    this.location = location;
  }
  ISO$UdfExtent.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UdfExtent',
    interfaces: []
  };
  function ISO$ISO$UdfExtent_init(s, $this) {
    $this = $this || Object.create(ISO$UdfExtent.prototype);
    ISO$UdfExtent.call($this, readS32LE_1(s), readS32LE_1(s));
    return $this;
  }
  ISO$UdfExtent.prototype.component1 = function () {
    return this.length;
  };
  ISO$UdfExtent.prototype.component2 = function () {
    return this.location;
  };
  ISO$UdfExtent.prototype.copy_vux9f0$ = function (length, location) {
    return new ISO$UdfExtent(length === void 0 ? this.length : length, location === void 0 ? this.location : location);
  };
  ISO$UdfExtent.prototype.toString = function () {
    return 'UdfExtent(length=' + Kotlin.toString(this.length) + (', location=' + Kotlin.toString(this.location)) + ')';
  };
  ISO$UdfExtent.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.length) | 0;
    result = result * 31 + Kotlin.hashCode(this.location) | 0;
    return result;
  };
  ISO$UdfExtent.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.length, other.length) && Kotlin.equals(this.location, other.location)))));
  };
  function ISO$UdfAnchorVolumeDescriptorPointer(descriptorTag, mainVolumeDescriptorSequenceExtent, reserveVolumeDescriptorSequenceExtent) {
    this.descriptorTag = descriptorTag;
    this.mainVolumeDescriptorSequenceExtent = mainVolumeDescriptorSequenceExtent;
    this.reserveVolumeDescriptorSequenceExtent = reserveVolumeDescriptorSequenceExtent;
  }
  ISO$UdfAnchorVolumeDescriptorPointer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UdfAnchorVolumeDescriptorPointer',
    interfaces: []
  };
  function ISO$ISO$UdfAnchorVolumeDescriptorPointer_init(s, $this) {
    $this = $this || Object.create(ISO$UdfAnchorVolumeDescriptorPointer.prototype);
    ISO$UdfAnchorVolumeDescriptorPointer.call($this, ISO$ISO$UdfDescriptorTag_init(s), ISO$ISO$UdfExtent_init(s), ISO$ISO$UdfExtent_init(s));
    return $this;
  }
  ISO$UdfAnchorVolumeDescriptorPointer.prototype.component1 = function () {
    return this.descriptorTag;
  };
  ISO$UdfAnchorVolumeDescriptorPointer.prototype.component2 = function () {
    return this.mainVolumeDescriptorSequenceExtent;
  };
  ISO$UdfAnchorVolumeDescriptorPointer.prototype.component3 = function () {
    return this.reserveVolumeDescriptorSequenceExtent;
  };
  ISO$UdfAnchorVolumeDescriptorPointer.prototype.copy_dfev2w$ = function (descriptorTag, mainVolumeDescriptorSequenceExtent, reserveVolumeDescriptorSequenceExtent) {
    return new ISO$UdfAnchorVolumeDescriptorPointer(descriptorTag === void 0 ? this.descriptorTag : descriptorTag, mainVolumeDescriptorSequenceExtent === void 0 ? this.mainVolumeDescriptorSequenceExtent : mainVolumeDescriptorSequenceExtent, reserveVolumeDescriptorSequenceExtent === void 0 ? this.reserveVolumeDescriptorSequenceExtent : reserveVolumeDescriptorSequenceExtent);
  };
  ISO$UdfAnchorVolumeDescriptorPointer.prototype.toString = function () {
    return 'UdfAnchorVolumeDescriptorPointer(descriptorTag=' + Kotlin.toString(this.descriptorTag) + (', mainVolumeDescriptorSequenceExtent=' + Kotlin.toString(this.mainVolumeDescriptorSequenceExtent)) + (', reserveVolumeDescriptorSequenceExtent=' + Kotlin.toString(this.reserveVolumeDescriptorSequenceExtent)) + ')';
  };
  ISO$UdfAnchorVolumeDescriptorPointer.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.descriptorTag) | 0;
    result = result * 31 + Kotlin.hashCode(this.mainVolumeDescriptorSequenceExtent) | 0;
    result = result * 31 + Kotlin.hashCode(this.reserveVolumeDescriptorSequenceExtent) | 0;
    return result;
  };
  ISO$UdfAnchorVolumeDescriptorPointer.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.descriptorTag, other.descriptorTag) && Kotlin.equals(this.mainVolumeDescriptorSequenceExtent, other.mainVolumeDescriptorSequenceExtent) && Kotlin.equals(this.reserveVolumeDescriptorSequenceExtent, other.reserveVolumeDescriptorSequenceExtent)))));
  };
  function ISO$UdfCharspec(characterSetType, characterSetInfo) {
    this.characterSetType = characterSetType;
    this.characterSetInfo = characterSetInfo;
  }
  ISO$UdfCharspec.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UdfCharspec',
    interfaces: []
  };
  function ISO$ISO$UdfCharspec_init(s, $this) {
    $this = $this || Object.create(ISO$UdfCharspec.prototype);
    ISO$UdfCharspec.call($this, readU8_1(s), readStringz_4(s, 63, ISO_getInstance().CHARSET));
    return $this;
  }
  ISO$UdfCharspec.prototype.component1 = function () {
    return this.characterSetType;
  };
  ISO$UdfCharspec.prototype.component2 = function () {
    return this.characterSetInfo;
  };
  ISO$UdfCharspec.prototype.copy_19mbxw$ = function (characterSetType, characterSetInfo) {
    return new ISO$UdfCharspec(characterSetType === void 0 ? this.characterSetType : characterSetType, characterSetInfo === void 0 ? this.characterSetInfo : characterSetInfo);
  };
  ISO$UdfCharspec.prototype.toString = function () {
    return 'UdfCharspec(characterSetType=' + Kotlin.toString(this.characterSetType) + (', characterSetInfo=' + Kotlin.toString(this.characterSetInfo)) + ')';
  };
  ISO$UdfCharspec.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.characterSetType) | 0;
    result = result * 31 + Kotlin.hashCode(this.characterSetInfo) | 0;
    return result;
  };
  ISO$UdfCharspec.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.characterSetType, other.characterSetType) && Kotlin.equals(this.characterSetInfo, other.characterSetInfo)))));
  };
  function ISO$UdfEntityId(flags, identifier, identifierSuffix) {
    this.flags = flags;
    this.identifier = identifier;
    this.identifierSuffix = identifierSuffix;
  }
  ISO$UdfEntityId.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UdfEntityId',
    interfaces: []
  };
  function ISO$ISO$UdfEntityId_init(s, $this) {
    $this = $this || Object.create(ISO$UdfEntityId.prototype);
    ISO$UdfEntityId.call($this, readU8_1(s), readStringz_4(s, 23, ISO_getInstance().CHARSET), readStringz_4(s, 8, ISO_getInstance().CHARSET));
    return $this;
  }
  ISO$UdfEntityId.prototype.component1 = function () {
    return this.flags;
  };
  ISO$UdfEntityId.prototype.component2 = function () {
    return this.identifier;
  };
  ISO$UdfEntityId.prototype.component3 = function () {
    return this.identifierSuffix;
  };
  ISO$UdfEntityId.prototype.copy_s4fhmi$ = function (flags, identifier, identifierSuffix) {
    return new ISO$UdfEntityId(flags === void 0 ? this.flags : flags, identifier === void 0 ? this.identifier : identifier, identifierSuffix === void 0 ? this.identifierSuffix : identifierSuffix);
  };
  ISO$UdfEntityId.prototype.toString = function () {
    return 'UdfEntityId(flags=' + Kotlin.toString(this.flags) + (', identifier=' + Kotlin.toString(this.identifier)) + (', identifierSuffix=' + Kotlin.toString(this.identifierSuffix)) + ')';
  };
  ISO$UdfEntityId.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.flags) | 0;
    result = result * 31 + Kotlin.hashCode(this.identifier) | 0;
    result = result * 31 + Kotlin.hashCode(this.identifierSuffix) | 0;
    return result;
  };
  ISO$UdfEntityId.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.flags, other.flags) && Kotlin.equals(this.identifier, other.identifier) && Kotlin.equals(this.identifierSuffix, other.identifierSuffix)))));
  };
  function ISO$UdfTimestamp(typeAndTimezone, year, month, day, hour, minute, second, centiseconds, hundredsofMicroseconds, microseconds) {
    this.typeAndTimezone = typeAndTimezone;
    this.year = year;
    this.month = month;
    this.day = day;
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.centiseconds = centiseconds;
    this.hundredsofMicroseconds = hundredsofMicroseconds;
    this.microseconds = microseconds;
  }
  ISO$UdfTimestamp.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UdfTimestamp',
    interfaces: []
  };
  function ISO$ISO$UdfTimestamp_init(s, $this) {
    $this = $this || Object.create(ISO$UdfTimestamp.prototype);
    ISO$UdfTimestamp.call($this, readS16LE_1(s), readS16LE_1(s), readU8_1(s), readU8_1(s), readU8_1(s), readU8_1(s), readU8_1(s), readU8_1(s), readU8_1(s), readU8_1(s));
    return $this;
  }
  ISO$UdfTimestamp.prototype.component1 = function () {
    return this.typeAndTimezone;
  };
  ISO$UdfTimestamp.prototype.component2 = function () {
    return this.year;
  };
  ISO$UdfTimestamp.prototype.component3 = function () {
    return this.month;
  };
  ISO$UdfTimestamp.prototype.component4 = function () {
    return this.day;
  };
  ISO$UdfTimestamp.prototype.component5 = function () {
    return this.hour;
  };
  ISO$UdfTimestamp.prototype.component6 = function () {
    return this.minute;
  };
  ISO$UdfTimestamp.prototype.component7 = function () {
    return this.second;
  };
  ISO$UdfTimestamp.prototype.component8 = function () {
    return this.centiseconds;
  };
  ISO$UdfTimestamp.prototype.component9 = function () {
    return this.hundredsofMicroseconds;
  };
  ISO$UdfTimestamp.prototype.component10 = function () {
    return this.microseconds;
  };
  ISO$UdfTimestamp.prototype.copy_q2ofzg$ = function (typeAndTimezone, year, month, day, hour, minute, second, centiseconds, hundredsofMicroseconds, microseconds) {
    return new ISO$UdfTimestamp(typeAndTimezone === void 0 ? this.typeAndTimezone : typeAndTimezone, year === void 0 ? this.year : year, month === void 0 ? this.month : month, day === void 0 ? this.day : day, hour === void 0 ? this.hour : hour, minute === void 0 ? this.minute : minute, second === void 0 ? this.second : second, centiseconds === void 0 ? this.centiseconds : centiseconds, hundredsofMicroseconds === void 0 ? this.hundredsofMicroseconds : hundredsofMicroseconds, microseconds === void 0 ? this.microseconds : microseconds);
  };
  ISO$UdfTimestamp.prototype.toString = function () {
    return 'UdfTimestamp(typeAndTimezone=' + Kotlin.toString(this.typeAndTimezone) + (', year=' + Kotlin.toString(this.year)) + (', month=' + Kotlin.toString(this.month)) + (', day=' + Kotlin.toString(this.day)) + (', hour=' + Kotlin.toString(this.hour)) + (', minute=' + Kotlin.toString(this.minute)) + (', second=' + Kotlin.toString(this.second)) + (', centiseconds=' + Kotlin.toString(this.centiseconds)) + (', hundredsofMicroseconds=' + Kotlin.toString(this.hundredsofMicroseconds)) + (', microseconds=' + Kotlin.toString(this.microseconds)) + ')';
  };
  ISO$UdfTimestamp.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.typeAndTimezone) | 0;
    result = result * 31 + Kotlin.hashCode(this.year) | 0;
    result = result * 31 + Kotlin.hashCode(this.month) | 0;
    result = result * 31 + Kotlin.hashCode(this.day) | 0;
    result = result * 31 + Kotlin.hashCode(this.hour) | 0;
    result = result * 31 + Kotlin.hashCode(this.minute) | 0;
    result = result * 31 + Kotlin.hashCode(this.second) | 0;
    result = result * 31 + Kotlin.hashCode(this.centiseconds) | 0;
    result = result * 31 + Kotlin.hashCode(this.hundredsofMicroseconds) | 0;
    result = result * 31 + Kotlin.hashCode(this.microseconds) | 0;
    return result;
  };
  ISO$UdfTimestamp.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.typeAndTimezone, other.typeAndTimezone) && Kotlin.equals(this.year, other.year) && Kotlin.equals(this.month, other.month) && Kotlin.equals(this.day, other.day) && Kotlin.equals(this.hour, other.hour) && Kotlin.equals(this.minute, other.minute) && Kotlin.equals(this.second, other.second) && Kotlin.equals(this.centiseconds, other.centiseconds) && Kotlin.equals(this.hundredsofMicroseconds, other.hundredsofMicroseconds) && Kotlin.equals(this.microseconds, other.microseconds)))));
  };
  function ISO$UdfPrimaryVolumeDescriptor(descriptorTag, volumeDescriptorSequenceNumber, primaryVolumeDescriptorNumber, volumeId, volumeSequenceNumber, maximumVolumeSequenceNumber, interchangeLevel, maximumInterchangeLevel, characterSetList, maximumCharacterSetList, volumeSetIdentifier, descriptorCharacterSet, explanatoryCharacterSet, volumeAbstract, volumeCopyrightNotice, applicationIdentifier, recordingDateandTime, implementationIdentifier, implementationUse, predecessorVolumeDescriptorSequenceLocation, flags) {
    this.descriptorTag = descriptorTag;
    this.volumeDescriptorSequenceNumber = volumeDescriptorSequenceNumber;
    this.primaryVolumeDescriptorNumber = primaryVolumeDescriptorNumber;
    this.volumeId = volumeId;
    this.volumeSequenceNumber = volumeSequenceNumber;
    this.maximumVolumeSequenceNumber = maximumVolumeSequenceNumber;
    this.interchangeLevel = interchangeLevel;
    this.maximumInterchangeLevel = maximumInterchangeLevel;
    this.characterSetList = characterSetList;
    this.maximumCharacterSetList = maximumCharacterSetList;
    this.volumeSetIdentifier = volumeSetIdentifier;
    this.descriptorCharacterSet = descriptorCharacterSet;
    this.explanatoryCharacterSet = explanatoryCharacterSet;
    this.volumeAbstract = volumeAbstract;
    this.volumeCopyrightNotice = volumeCopyrightNotice;
    this.applicationIdentifier = applicationIdentifier;
    this.recordingDateandTime = recordingDateandTime;
    this.implementationIdentifier = implementationIdentifier;
    this.implementationUse = implementationUse;
    this.predecessorVolumeDescriptorSequenceLocation = predecessorVolumeDescriptorSequenceLocation;
    this.flags = flags;
  }
  ISO$UdfPrimaryVolumeDescriptor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UdfPrimaryVolumeDescriptor',
    interfaces: []
  };
  function ISO$ISO$UdfPrimaryVolumeDescriptor_init(s, $this) {
    $this = $this || Object.create(ISO$UdfPrimaryVolumeDescriptor.prototype);
    ISO$UdfPrimaryVolumeDescriptor.call($this, ISO$ISO$UdfDescriptorTag_init(s), readS32LE_1(s), readS32LE_1(s), readUdfDString(s, 32), readU16LE_1(s), readU16LE_1(s), readU16LE_1(s), readU16LE_1(s), readS32LE_1(s), readS32LE_1(s), readUdfDString(s, 128), ISO$ISO$UdfCharspec_init(s), ISO$ISO$UdfCharspec_init(s), ISO$ISO$UdfExtent_init(s), ISO$ISO$UdfExtent_init(s), ISO$ISO$UdfEntityId_init(s), ISO$ISO$UdfTimestamp_init(s), ISO$ISO$UdfEntityId_init(s), readBytesExact_0(s, 64), readS32LE_1(s), readU16LE_1(s));
    return $this;
  }
  ISO$UdfPrimaryVolumeDescriptor.prototype.component1 = function () {
    return this.descriptorTag;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component2 = function () {
    return this.volumeDescriptorSequenceNumber;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component3 = function () {
    return this.primaryVolumeDescriptorNumber;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component4 = function () {
    return this.volumeId;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component5 = function () {
    return this.volumeSequenceNumber;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component6 = function () {
    return this.maximumVolumeSequenceNumber;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component7 = function () {
    return this.interchangeLevel;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component8 = function () {
    return this.maximumInterchangeLevel;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component9 = function () {
    return this.characterSetList;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component10 = function () {
    return this.maximumCharacterSetList;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component11 = function () {
    return this.volumeSetIdentifier;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component12 = function () {
    return this.descriptorCharacterSet;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component13 = function () {
    return this.explanatoryCharacterSet;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component14 = function () {
    return this.volumeAbstract;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component15 = function () {
    return this.volumeCopyrightNotice;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component16 = function () {
    return this.applicationIdentifier;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component17 = function () {
    return this.recordingDateandTime;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component18 = function () {
    return this.implementationIdentifier;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component19 = function () {
    return this.implementationUse;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component20 = function () {
    return this.predecessorVolumeDescriptorSequenceLocation;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.component21 = function () {
    return this.flags;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.copy_dguxyf$ = function (descriptorTag, volumeDescriptorSequenceNumber, primaryVolumeDescriptorNumber, volumeId, volumeSequenceNumber, maximumVolumeSequenceNumber, interchangeLevel, maximumInterchangeLevel, characterSetList, maximumCharacterSetList, volumeSetIdentifier, descriptorCharacterSet, explanatoryCharacterSet, volumeAbstract, volumeCopyrightNotice, applicationIdentifier, recordingDateandTime, implementationIdentifier, implementationUse, predecessorVolumeDescriptorSequenceLocation, flags) {
    return new ISO$UdfPrimaryVolumeDescriptor(descriptorTag === void 0 ? this.descriptorTag : descriptorTag, volumeDescriptorSequenceNumber === void 0 ? this.volumeDescriptorSequenceNumber : volumeDescriptorSequenceNumber, primaryVolumeDescriptorNumber === void 0 ? this.primaryVolumeDescriptorNumber : primaryVolumeDescriptorNumber, volumeId === void 0 ? this.volumeId : volumeId, volumeSequenceNumber === void 0 ? this.volumeSequenceNumber : volumeSequenceNumber, maximumVolumeSequenceNumber === void 0 ? this.maximumVolumeSequenceNumber : maximumVolumeSequenceNumber, interchangeLevel === void 0 ? this.interchangeLevel : interchangeLevel, maximumInterchangeLevel === void 0 ? this.maximumInterchangeLevel : maximumInterchangeLevel, characterSetList === void 0 ? this.characterSetList : characterSetList, maximumCharacterSetList === void 0 ? this.maximumCharacterSetList : maximumCharacterSetList, volumeSetIdentifier === void 0 ? this.volumeSetIdentifier : volumeSetIdentifier, descriptorCharacterSet === void 0 ? this.descriptorCharacterSet : descriptorCharacterSet, explanatoryCharacterSet === void 0 ? this.explanatoryCharacterSet : explanatoryCharacterSet, volumeAbstract === void 0 ? this.volumeAbstract : volumeAbstract, volumeCopyrightNotice === void 0 ? this.volumeCopyrightNotice : volumeCopyrightNotice, applicationIdentifier === void 0 ? this.applicationIdentifier : applicationIdentifier, recordingDateandTime === void 0 ? this.recordingDateandTime : recordingDateandTime, implementationIdentifier === void 0 ? this.implementationIdentifier : implementationIdentifier, implementationUse === void 0 ? this.implementationUse : implementationUse, predecessorVolumeDescriptorSequenceLocation === void 0 ? this.predecessorVolumeDescriptorSequenceLocation : predecessorVolumeDescriptorSequenceLocation, flags === void 0 ? this.flags : flags);
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.toString = function () {
    return 'UdfPrimaryVolumeDescriptor(descriptorTag=' + Kotlin.toString(this.descriptorTag) + (', volumeDescriptorSequenceNumber=' + Kotlin.toString(this.volumeDescriptorSequenceNumber)) + (', primaryVolumeDescriptorNumber=' + Kotlin.toString(this.primaryVolumeDescriptorNumber)) + (', volumeId=' + Kotlin.toString(this.volumeId)) + (', volumeSequenceNumber=' + Kotlin.toString(this.volumeSequenceNumber)) + (', maximumVolumeSequenceNumber=' + Kotlin.toString(this.maximumVolumeSequenceNumber)) + (', interchangeLevel=' + Kotlin.toString(this.interchangeLevel)) + (', maximumInterchangeLevel=' + Kotlin.toString(this.maximumInterchangeLevel)) + (', characterSetList=' + Kotlin.toString(this.characterSetList)) + (', maximumCharacterSetList=' + Kotlin.toString(this.maximumCharacterSetList)) + (', volumeSetIdentifier=' + Kotlin.toString(this.volumeSetIdentifier)) + (', descriptorCharacterSet=' + Kotlin.toString(this.descriptorCharacterSet)) + (', explanatoryCharacterSet=' + Kotlin.toString(this.explanatoryCharacterSet)) + (', volumeAbstract=' + Kotlin.toString(this.volumeAbstract)) + (', volumeCopyrightNotice=' + Kotlin.toString(this.volumeCopyrightNotice)) + (', applicationIdentifier=' + Kotlin.toString(this.applicationIdentifier)) + (', recordingDateandTime=' + Kotlin.toString(this.recordingDateandTime)) + (', implementationIdentifier=' + Kotlin.toString(this.implementationIdentifier)) + (', implementationUse=' + Kotlin.toString(this.implementationUse)) + (', predecessorVolumeDescriptorSequenceLocation=' + Kotlin.toString(this.predecessorVolumeDescriptorSequenceLocation)) + (', flags=' + Kotlin.toString(this.flags)) + ')';
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.descriptorTag) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeDescriptorSequenceNumber) | 0;
    result = result * 31 + Kotlin.hashCode(this.primaryVolumeDescriptorNumber) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeId) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeSequenceNumber) | 0;
    result = result * 31 + Kotlin.hashCode(this.maximumVolumeSequenceNumber) | 0;
    result = result * 31 + Kotlin.hashCode(this.interchangeLevel) | 0;
    result = result * 31 + Kotlin.hashCode(this.maximumInterchangeLevel) | 0;
    result = result * 31 + Kotlin.hashCode(this.characterSetList) | 0;
    result = result * 31 + Kotlin.hashCode(this.maximumCharacterSetList) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeSetIdentifier) | 0;
    result = result * 31 + Kotlin.hashCode(this.descriptorCharacterSet) | 0;
    result = result * 31 + Kotlin.hashCode(this.explanatoryCharacterSet) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeAbstract) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeCopyrightNotice) | 0;
    result = result * 31 + Kotlin.hashCode(this.applicationIdentifier) | 0;
    result = result * 31 + Kotlin.hashCode(this.recordingDateandTime) | 0;
    result = result * 31 + Kotlin.hashCode(this.implementationIdentifier) | 0;
    result = result * 31 + Kotlin.hashCode(this.implementationUse) | 0;
    result = result * 31 + Kotlin.hashCode(this.predecessorVolumeDescriptorSequenceLocation) | 0;
    result = result * 31 + Kotlin.hashCode(this.flags) | 0;
    return result;
  };
  ISO$UdfPrimaryVolumeDescriptor.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.descriptorTag, other.descriptorTag) && Kotlin.equals(this.volumeDescriptorSequenceNumber, other.volumeDescriptorSequenceNumber) && Kotlin.equals(this.primaryVolumeDescriptorNumber, other.primaryVolumeDescriptorNumber) && Kotlin.equals(this.volumeId, other.volumeId) && Kotlin.equals(this.volumeSequenceNumber, other.volumeSequenceNumber) && Kotlin.equals(this.maximumVolumeSequenceNumber, other.maximumVolumeSequenceNumber) && Kotlin.equals(this.interchangeLevel, other.interchangeLevel) && Kotlin.equals(this.maximumInterchangeLevel, other.maximumInterchangeLevel) && Kotlin.equals(this.characterSetList, other.characterSetList) && Kotlin.equals(this.maximumCharacterSetList, other.maximumCharacterSetList) && Kotlin.equals(this.volumeSetIdentifier, other.volumeSetIdentifier) && Kotlin.equals(this.descriptorCharacterSet, other.descriptorCharacterSet) && Kotlin.equals(this.explanatoryCharacterSet, other.explanatoryCharacterSet) && Kotlin.equals(this.volumeAbstract, other.volumeAbstract) && Kotlin.equals(this.volumeCopyrightNotice, other.volumeCopyrightNotice) && Kotlin.equals(this.applicationIdentifier, other.applicationIdentifier) && Kotlin.equals(this.recordingDateandTime, other.recordingDateandTime) && Kotlin.equals(this.implementationIdentifier, other.implementationIdentifier) && Kotlin.equals(this.implementationUse, other.implementationUse) && Kotlin.equals(this.predecessorVolumeDescriptorSequenceLocation, other.predecessorVolumeDescriptorSequenceLocation) && Kotlin.equals(this.flags, other.flags)))));
  };
  function ISO$PrimaryVolumeDescriptor(volumeDescriptorHeader, pad1, systemId, volumeId, pad2, volumeSpaceSize, pad3, volumeSetSize, volumeSequenceNumber, logicalBlockSize, pathTableSize, typeLPathTable, optType1PathTable, typeMPathTable, optTypeMPathTable, rootDirectoryRecord, volumeSetId, publisherId, preparerId, applicationId, copyrightFileId, abstractFileId, bibliographicFileId, creationDate, modificationDate, expirationDate, effectiveDate, fileStructureVersion, pad5, applicationData, pad6) {
    this.volumeDescriptorHeader = volumeDescriptorHeader;
    this.pad1 = pad1;
    this.systemId = systemId;
    this.volumeId = volumeId;
    this.pad2 = pad2;
    this.volumeSpaceSize = volumeSpaceSize;
    this.pad3 = pad3;
    this.volumeSetSize = volumeSetSize;
    this.volumeSequenceNumber = volumeSequenceNumber;
    this.logicalBlockSize = logicalBlockSize;
    this.pathTableSize = pathTableSize;
    this.typeLPathTable = typeLPathTable;
    this.optType1PathTable = optType1PathTable;
    this.typeMPathTable = typeMPathTable;
    this.optTypeMPathTable = optTypeMPathTable;
    this.rootDirectoryRecord = rootDirectoryRecord;
    this.volumeSetId = volumeSetId;
    this.publisherId = publisherId;
    this.preparerId = preparerId;
    this.applicationId = applicationId;
    this.copyrightFileId = copyrightFileId;
    this.abstractFileId = abstractFileId;
    this.bibliographicFileId = bibliographicFileId;
    this.creationDate = creationDate;
    this.modificationDate = modificationDate;
    this.expirationDate = expirationDate;
    this.effectiveDate = effectiveDate;
    this.fileStructureVersion = fileStructureVersion;
    this.pad5 = pad5;
    this.applicationData = applicationData;
    this.pad6 = pad6;
  }
  ISO$PrimaryVolumeDescriptor.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'PrimaryVolumeDescriptor',
    interfaces: []
  };
  function ISO$ISO$PrimaryVolumeDescriptor_init(s, $this) {
    $this = $this || Object.create(ISO$PrimaryVolumeDescriptor.prototype);
    ISO$PrimaryVolumeDescriptor.call($this, ISO$ISO$VolumeDescriptorHeader_init(s), readU8_1(s), readStringz_4(s, 32, ISO_getInstance().CHARSET), readStringz_4(s, 32, ISO_getInstance().CHARSET), readS64LE_1(s), ISO_getInstance().readU32_leBE_ucmi9i$(s), ISO_getInstance().readLongArrayLE_hsu5ns$(s, 4), ISO_getInstance().readU16_leBE_ucmi9i$(s), ISO_getInstance().readU16_leBE_ucmi9i$(s), ISO_getInstance().readU16_leBE_ucmi9i$(s), ISO_getInstance().readU32_leBE_ucmi9i$(s), readS32LE_1(s), readS32LE_1(s), readS32LE_1(s), readS32LE_1(s), ensureNotNull(ISO$DirectoryRecord$Companion_getInstance().invoke_39qel5$(s)), readStringz_4(s, 128, ISO_getInstance().CHARSET), readStringz_4(s, 128, ISO_getInstance().CHARSET), readStringz_4(s, 128, ISO_getInstance().CHARSET), readStringz_4(s, 128, ISO_getInstance().CHARSET), readStringz_4(s, 37, ISO_getInstance().CHARSET), readStringz_4(s, 37, ISO_getInstance().CHARSET), readStringz_4(s, 37, ISO_getInstance().CHARSET), ISO$ISO$IsoDate_init(s), ISO$ISO$IsoDate_init(s), ISO$ISO$IsoDate_init(s), ISO$ISO$IsoDate_init(s), readU8_1(s), readU8_1(s), readBytes_0(s, 512), readBytes_0(s, 653));
    return $this;
  }
  ISO$PrimaryVolumeDescriptor.prototype.component1 = function () {
    return this.volumeDescriptorHeader;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component2 = function () {
    return this.pad1;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component3 = function () {
    return this.systemId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component4 = function () {
    return this.volumeId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component5 = function () {
    return this.pad2;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component6 = function () {
    return this.volumeSpaceSize;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component7 = function () {
    return this.pad3;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component8 = function () {
    return this.volumeSetSize;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component9 = function () {
    return this.volumeSequenceNumber;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component10 = function () {
    return this.logicalBlockSize;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component11 = function () {
    return this.pathTableSize;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component12 = function () {
    return this.typeLPathTable;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component13 = function () {
    return this.optType1PathTable;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component14 = function () {
    return this.typeMPathTable;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component15 = function () {
    return this.optTypeMPathTable;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component16 = function () {
    return this.rootDirectoryRecord;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component17 = function () {
    return this.volumeSetId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component18 = function () {
    return this.publisherId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component19 = function () {
    return this.preparerId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component20 = function () {
    return this.applicationId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component21 = function () {
    return this.copyrightFileId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component22 = function () {
    return this.abstractFileId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component23 = function () {
    return this.bibliographicFileId;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component24 = function () {
    return this.creationDate;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component25 = function () {
    return this.modificationDate;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component26 = function () {
    return this.expirationDate;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component27 = function () {
    return this.effectiveDate;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component28 = function () {
    return this.fileStructureVersion;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component29 = function () {
    return this.pad5;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component30 = function () {
    return this.applicationData;
  };
  ISO$PrimaryVolumeDescriptor.prototype.component31 = function () {
    return this.pad6;
  };
  ISO$PrimaryVolumeDescriptor.prototype.copy_6anmjz$ = function (volumeDescriptorHeader, pad1, systemId, volumeId, pad2, volumeSpaceSize, pad3, volumeSetSize, volumeSequenceNumber, logicalBlockSize, pathTableSize, typeLPathTable, optType1PathTable, typeMPathTable, optTypeMPathTable, rootDirectoryRecord, volumeSetId, publisherId, preparerId, applicationId, copyrightFileId, abstractFileId, bibliographicFileId, creationDate, modificationDate, expirationDate, effectiveDate, fileStructureVersion, pad5, applicationData, pad6) {
    return new ISO$PrimaryVolumeDescriptor(volumeDescriptorHeader === void 0 ? this.volumeDescriptorHeader : volumeDescriptorHeader, pad1 === void 0 ? this.pad1 : pad1, systemId === void 0 ? this.systemId : systemId, volumeId === void 0 ? this.volumeId : volumeId, pad2 === void 0 ? this.pad2 : pad2, volumeSpaceSize === void 0 ? this.volumeSpaceSize : volumeSpaceSize, pad3 === void 0 ? this.pad3 : pad3, volumeSetSize === void 0 ? this.volumeSetSize : volumeSetSize, volumeSequenceNumber === void 0 ? this.volumeSequenceNumber : volumeSequenceNumber, logicalBlockSize === void 0 ? this.logicalBlockSize : logicalBlockSize, pathTableSize === void 0 ? this.pathTableSize : pathTableSize, typeLPathTable === void 0 ? this.typeLPathTable : typeLPathTable, optType1PathTable === void 0 ? this.optType1PathTable : optType1PathTable, typeMPathTable === void 0 ? this.typeMPathTable : typeMPathTable, optTypeMPathTable === void 0 ? this.optTypeMPathTable : optTypeMPathTable, rootDirectoryRecord === void 0 ? this.rootDirectoryRecord : rootDirectoryRecord, volumeSetId === void 0 ? this.volumeSetId : volumeSetId, publisherId === void 0 ? this.publisherId : publisherId, preparerId === void 0 ? this.preparerId : preparerId, applicationId === void 0 ? this.applicationId : applicationId, copyrightFileId === void 0 ? this.copyrightFileId : copyrightFileId, abstractFileId === void 0 ? this.abstractFileId : abstractFileId, bibliographicFileId === void 0 ? this.bibliographicFileId : bibliographicFileId, creationDate === void 0 ? this.creationDate : creationDate, modificationDate === void 0 ? this.modificationDate : modificationDate, expirationDate === void 0 ? this.expirationDate : expirationDate, effectiveDate === void 0 ? this.effectiveDate : effectiveDate, fileStructureVersion === void 0 ? this.fileStructureVersion : fileStructureVersion, pad5 === void 0 ? this.pad5 : pad5, applicationData === void 0 ? this.applicationData : applicationData, pad6 === void 0 ? this.pad6 : pad6);
  };
  ISO$PrimaryVolumeDescriptor.prototype.toString = function () {
    return 'PrimaryVolumeDescriptor(volumeDescriptorHeader=' + Kotlin.toString(this.volumeDescriptorHeader) + (', pad1=' + Kotlin.toString(this.pad1)) + (', systemId=' + Kotlin.toString(this.systemId)) + (', volumeId=' + Kotlin.toString(this.volumeId)) + (', pad2=' + Kotlin.toString(this.pad2)) + (', volumeSpaceSize=' + Kotlin.toString(this.volumeSpaceSize)) + (', pad3=' + Kotlin.toString(this.pad3)) + (', volumeSetSize=' + Kotlin.toString(this.volumeSetSize)) + (', volumeSequenceNumber=' + Kotlin.toString(this.volumeSequenceNumber)) + (', logicalBlockSize=' + Kotlin.toString(this.logicalBlockSize)) + (', pathTableSize=' + Kotlin.toString(this.pathTableSize)) + (', typeLPathTable=' + Kotlin.toString(this.typeLPathTable)) + (', optType1PathTable=' + Kotlin.toString(this.optType1PathTable)) + (', typeMPathTable=' + Kotlin.toString(this.typeMPathTable)) + (', optTypeMPathTable=' + Kotlin.toString(this.optTypeMPathTable)) + (', rootDirectoryRecord=' + Kotlin.toString(this.rootDirectoryRecord)) + (', volumeSetId=' + Kotlin.toString(this.volumeSetId)) + (', publisherId=' + Kotlin.toString(this.publisherId)) + (', preparerId=' + Kotlin.toString(this.preparerId)) + (', applicationId=' + Kotlin.toString(this.applicationId)) + (', copyrightFileId=' + Kotlin.toString(this.copyrightFileId)) + (', abstractFileId=' + Kotlin.toString(this.abstractFileId)) + (', bibliographicFileId=' + Kotlin.toString(this.bibliographicFileId)) + (', creationDate=' + Kotlin.toString(this.creationDate)) + (', modificationDate=' + Kotlin.toString(this.modificationDate)) + (', expirationDate=' + Kotlin.toString(this.expirationDate)) + (', effectiveDate=' + Kotlin.toString(this.effectiveDate)) + (', fileStructureVersion=' + Kotlin.toString(this.fileStructureVersion)) + (', pad5=' + Kotlin.toString(this.pad5)) + (', applicationData=' + Kotlin.toString(this.applicationData)) + (', pad6=' + Kotlin.toString(this.pad6)) + ')';
  };
  ISO$PrimaryVolumeDescriptor.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.volumeDescriptorHeader) | 0;
    result = result * 31 + Kotlin.hashCode(this.pad1) | 0;
    result = result * 31 + Kotlin.hashCode(this.systemId) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeId) | 0;
    result = result * 31 + Kotlin.hashCode(this.pad2) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeSpaceSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.pad3) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeSetSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeSequenceNumber) | 0;
    result = result * 31 + Kotlin.hashCode(this.logicalBlockSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.pathTableSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.typeLPathTable) | 0;
    result = result * 31 + Kotlin.hashCode(this.optType1PathTable) | 0;
    result = result * 31 + Kotlin.hashCode(this.typeMPathTable) | 0;
    result = result * 31 + Kotlin.hashCode(this.optTypeMPathTable) | 0;
    result = result * 31 + Kotlin.hashCode(this.rootDirectoryRecord) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeSetId) | 0;
    result = result * 31 + Kotlin.hashCode(this.publisherId) | 0;
    result = result * 31 + Kotlin.hashCode(this.preparerId) | 0;
    result = result * 31 + Kotlin.hashCode(this.applicationId) | 0;
    result = result * 31 + Kotlin.hashCode(this.copyrightFileId) | 0;
    result = result * 31 + Kotlin.hashCode(this.abstractFileId) | 0;
    result = result * 31 + Kotlin.hashCode(this.bibliographicFileId) | 0;
    result = result * 31 + Kotlin.hashCode(this.creationDate) | 0;
    result = result * 31 + Kotlin.hashCode(this.modificationDate) | 0;
    result = result * 31 + Kotlin.hashCode(this.expirationDate) | 0;
    result = result * 31 + Kotlin.hashCode(this.effectiveDate) | 0;
    result = result * 31 + Kotlin.hashCode(this.fileStructureVersion) | 0;
    result = result * 31 + Kotlin.hashCode(this.pad5) | 0;
    result = result * 31 + Kotlin.hashCode(this.applicationData) | 0;
    result = result * 31 + Kotlin.hashCode(this.pad6) | 0;
    return result;
  };
  ISO$PrimaryVolumeDescriptor.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.volumeDescriptorHeader, other.volumeDescriptorHeader) && Kotlin.equals(this.pad1, other.pad1) && Kotlin.equals(this.systemId, other.systemId) && Kotlin.equals(this.volumeId, other.volumeId) && Kotlin.equals(this.pad2, other.pad2) && Kotlin.equals(this.volumeSpaceSize, other.volumeSpaceSize) && Kotlin.equals(this.pad3, other.pad3) && Kotlin.equals(this.volumeSetSize, other.volumeSetSize) && Kotlin.equals(this.volumeSequenceNumber, other.volumeSequenceNumber) && Kotlin.equals(this.logicalBlockSize, other.logicalBlockSize) && Kotlin.equals(this.pathTableSize, other.pathTableSize) && Kotlin.equals(this.typeLPathTable, other.typeLPathTable) && Kotlin.equals(this.optType1PathTable, other.optType1PathTable) && Kotlin.equals(this.typeMPathTable, other.typeMPathTable) && Kotlin.equals(this.optTypeMPathTable, other.optTypeMPathTable) && Kotlin.equals(this.rootDirectoryRecord, other.rootDirectoryRecord) && Kotlin.equals(this.volumeSetId, other.volumeSetId) && Kotlin.equals(this.publisherId, other.publisherId) && Kotlin.equals(this.preparerId, other.preparerId) && Kotlin.equals(this.applicationId, other.applicationId) && Kotlin.equals(this.copyrightFileId, other.copyrightFileId) && Kotlin.equals(this.abstractFileId, other.abstractFileId) && Kotlin.equals(this.bibliographicFileId, other.bibliographicFileId) && Kotlin.equals(this.creationDate, other.creationDate) && Kotlin.equals(this.modificationDate, other.modificationDate) && Kotlin.equals(this.expirationDate, other.expirationDate) && Kotlin.equals(this.effectiveDate, other.effectiveDate) && Kotlin.equals(this.fileStructureVersion, other.fileStructureVersion) && Kotlin.equals(this.pad5, other.pad5) && Kotlin.equals(this.applicationData, other.applicationData) && Kotlin.equals(this.pad6, other.pad6)))));
  };
  function ISO$VolumeDescriptorHeader(type, id, version) {
    this.type = type;
    this.id = id;
    this.version = version;
  }
  function ISO$VolumeDescriptorHeader$TypeEnum(id) {
    ISO$VolumeDescriptorHeader$TypeEnum$Companion_getInstance();
    this.id = id;
  }
  function ISO$VolumeDescriptorHeader$TypeEnum$Companion() {
    ISO$VolumeDescriptorHeader$TypeEnum$Companion_instance = this;
    this.BootRecord = new ISO$VolumeDescriptorHeader$TypeEnum(0);
    this.VolumePartitionSetTerminator = new ISO$VolumeDescriptorHeader$TypeEnum(255);
    this.PrimaryVolumeDescriptor = new ISO$VolumeDescriptorHeader$TypeEnum(1);
    this.SupplementaryVolumeDescriptor = new ISO$VolumeDescriptorHeader$TypeEnum(2);
    this.VolumePartitionDescriptor = new ISO$VolumeDescriptorHeader$TypeEnum(3);
  }
  ISO$VolumeDescriptorHeader$TypeEnum$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ISO$VolumeDescriptorHeader$TypeEnum$Companion_instance = null;
  function ISO$VolumeDescriptorHeader$TypeEnum$Companion_getInstance() {
    if (ISO$VolumeDescriptorHeader$TypeEnum$Companion_instance === null) {
      new ISO$VolumeDescriptorHeader$TypeEnum$Companion();
    }return ISO$VolumeDescriptorHeader$TypeEnum$Companion_instance;
  }
  ISO$VolumeDescriptorHeader$TypeEnum.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TypeEnum',
    interfaces: []
  };
  ISO$VolumeDescriptorHeader$TypeEnum.prototype.component1 = function () {
    return this.id;
  };
  ISO$VolumeDescriptorHeader$TypeEnum.prototype.copy_za3lpa$ = function (id) {
    return new ISO$VolumeDescriptorHeader$TypeEnum(id === void 0 ? this.id : id);
  };
  ISO$VolumeDescriptorHeader$TypeEnum.prototype.toString = function () {
    return 'TypeEnum(id=' + Kotlin.toString(this.id) + ')';
  };
  ISO$VolumeDescriptorHeader$TypeEnum.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.id) | 0;
    return result;
  };
  ISO$VolumeDescriptorHeader$TypeEnum.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.id, other.id))));
  };
  ISO$VolumeDescriptorHeader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'VolumeDescriptorHeader',
    interfaces: []
  };
  function ISO$ISO$VolumeDescriptorHeader_init(s, $this) {
    $this = $this || Object.create(ISO$VolumeDescriptorHeader.prototype);
    ISO$VolumeDescriptorHeader.call($this, new ISO$VolumeDescriptorHeader$TypeEnum(readU8_1(s)), readStringz_4(s, 5, ISO_getInstance().CHARSET), readU8_1(s));
    return $this;
  }
  ISO$VolumeDescriptorHeader.prototype.component1 = function () {
    return this.type;
  };
  ISO$VolumeDescriptorHeader.prototype.component2 = function () {
    return this.id;
  };
  ISO$VolumeDescriptorHeader.prototype.component3 = function () {
    return this.version;
  };
  ISO$VolumeDescriptorHeader.prototype.copy_bt1c73$ = function (type, id, version) {
    return new ISO$VolumeDescriptorHeader(type === void 0 ? this.type : type, id === void 0 ? this.id : id, version === void 0 ? this.version : version);
  };
  ISO$VolumeDescriptorHeader.prototype.toString = function () {
    return 'VolumeDescriptorHeader(type=' + Kotlin.toString(this.type) + (', id=' + Kotlin.toString(this.id)) + (', version=' + Kotlin.toString(this.version)) + ')';
  };
  ISO$VolumeDescriptorHeader.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    result = result * 31 + Kotlin.hashCode(this.id) | 0;
    result = result * 31 + Kotlin.hashCode(this.version) | 0;
    return result;
  };
  ISO$VolumeDescriptorHeader.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.type, other.type) && Kotlin.equals(this.id, other.id) && Kotlin.equals(this.version, other.version)))));
  };
  function ISO$IsoDate(data) {
    this.data = data;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    this.year = (tmp$ = toIntOrNull_0(this.data.substring(0, 4))) != null ? tmp$ : 0;
    this.month = (tmp$_0 = toIntOrNull_0(this.data.substring(4, 6))) != null ? tmp$_0 : 0;
    this.day = (tmp$_1 = toIntOrNull_0(this.data.substring(6, 8))) != null ? tmp$_1 : 0;
    this.hour = (tmp$_2 = toIntOrNull_0(this.data.substring(8, 10))) != null ? tmp$_2 : 0;
    this.minute = (tmp$_3 = toIntOrNull_0(this.data.substring(10, 12))) != null ? tmp$_3 : 0;
    this.second = (tmp$_4 = toIntOrNull_0(this.data.substring(12, 14))) != null ? tmp$_4 : 0;
    this.hsecond = (tmp$_5 = toIntOrNull_0(this.data.substring(14, 16))) != null ? tmp$_5 : 0;
  }
  ISO$IsoDate.prototype.toString = function () {
    return format('IsoDate(%04d-%02d-%02d %02d:%02d:%02d.%d)', [this.year, this.month, this.day, this.hour, this.minute, this.second, this.hsecond]);
  };
  ISO$IsoDate.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IsoDate',
    interfaces: []
  };
  function ISO$ISO$IsoDate_init(s, $this) {
    $this = $this || Object.create(ISO$IsoDate.prototype);
    ISO$IsoDate.call($this, readString_2(s, 17, ASCII_getInstance()));
    return $this;
  }
  ISO$IsoDate.prototype.component1 = function () {
    return this.data;
  };
  ISO$IsoDate.prototype.copy_61zpoe$ = function (data) {
    return new ISO$IsoDate(data === void 0 ? this.data : data);
  };
  ISO$IsoDate.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.data) | 0;
    return result;
  };
  ISO$IsoDate.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.data, other.data))));
  };
  function ISO$DateStruct(year, month, day, hour, minute, second, offset) {
    this.year = year;
    this.month = month;
    this.day = day;
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.offset = offset;
    this.fullYear = 1900 + this.year | 0;
  }
  ISO$DateStruct.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DateStruct',
    interfaces: []
  };
  function ISO$ISO$DateStruct_init(s, $this) {
    $this = $this || Object.create(ISO$DateStruct.prototype);
    ISO$DateStruct.call($this, readU8_1(s), readU8_1(s), readU8_1(s), readU8_1(s), readU8_1(s), readU8_1(s), readU8_1(s));
    return $this;
  }
  ISO$DateStruct.prototype.component1 = function () {
    return this.year;
  };
  ISO$DateStruct.prototype.component2 = function () {
    return this.month;
  };
  ISO$DateStruct.prototype.component3 = function () {
    return this.day;
  };
  ISO$DateStruct.prototype.component4 = function () {
    return this.hour;
  };
  ISO$DateStruct.prototype.component5 = function () {
    return this.minute;
  };
  ISO$DateStruct.prototype.component6 = function () {
    return this.second;
  };
  ISO$DateStruct.prototype.component7 = function () {
    return this.offset;
  };
  ISO$DateStruct.prototype.copy_ui44o2$ = function (year, month, day, hour, minute, second, offset) {
    return new ISO$DateStruct(year === void 0 ? this.year : year, month === void 0 ? this.month : month, day === void 0 ? this.day : day, hour === void 0 ? this.hour : hour, minute === void 0 ? this.minute : minute, second === void 0 ? this.second : second, offset === void 0 ? this.offset : offset);
  };
  ISO$DateStruct.prototype.toString = function () {
    return 'DateStruct(year=' + Kotlin.toString(this.year) + (', month=' + Kotlin.toString(this.month)) + (', day=' + Kotlin.toString(this.day)) + (', hour=' + Kotlin.toString(this.hour)) + (', minute=' + Kotlin.toString(this.minute)) + (', second=' + Kotlin.toString(this.second)) + (', offset=' + Kotlin.toString(this.offset)) + ')';
  };
  ISO$DateStruct.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.year) | 0;
    result = result * 31 + Kotlin.hashCode(this.month) | 0;
    result = result * 31 + Kotlin.hashCode(this.day) | 0;
    result = result * 31 + Kotlin.hashCode(this.hour) | 0;
    result = result * 31 + Kotlin.hashCode(this.minute) | 0;
    result = result * 31 + Kotlin.hashCode(this.second) | 0;
    result = result * 31 + Kotlin.hashCode(this.offset) | 0;
    return result;
  };
  ISO$DateStruct.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.year, other.year) && Kotlin.equals(this.month, other.month) && Kotlin.equals(this.day, other.day) && Kotlin.equals(this.hour, other.hour) && Kotlin.equals(this.minute, other.minute) && Kotlin.equals(this.second, other.second) && Kotlin.equals(this.offset, other.offset)))));
  };
  function ISO$DirectoryRecord(length, extendedAttributeLength, extent, size, date, flags, fileUnitSize, interleave, volumeSequenceNumber, rawName) {
    ISO$DirectoryRecord$Companion_getInstance();
    this.length = length;
    this.extendedAttributeLength = extendedAttributeLength;
    this.extent = extent;
    this.size = size;
    this.date = date;
    this.flags = flags;
    this.fileUnitSize = fileUnitSize;
    this.interleave = interleave;
    this.volumeSequenceNumber = volumeSequenceNumber;
    this.rawName = rawName;
    this.name = substringBefore(this.rawName, 59);
    this.offset = Kotlin.Long.fromInt(this.extent).multiply(ISO_getInstance().SECTOR_SIZE);
    this.isDirectory = (this.flags & 2) !== 0;
  }
  function ISO$DirectoryRecord$Companion() {
    ISO$DirectoryRecord$Companion_instance = this;
  }
  ISO$DirectoryRecord$Companion.prototype.invoke_39qel5$ = function (_s) {
    var length = readU8_1(_s);
    if (length <= 0) {
      return null;
    } else {
      var s = readStream_2(_s, Kotlin.Long.fromInt(length - 1 | 0));
      var dr = new ISO$DirectoryRecord(length, readU8_1(s), ISO_getInstance().readU32_leBE_ucmi9i$(s), ISO_getInstance().readU32_leBE_ucmi9i$(s), ISO$ISO$DateStruct_init(s), readU8_1(s), readU8_1(s), readU8_1(s), ISO_getInstance().readU16_leBE_ucmi9i$(s), ISO_getInstance().readTextWithLength_ucmi9i$(s));
      return dr;
    }
  };
  ISO$DirectoryRecord$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var ISO$DirectoryRecord$Companion_instance = null;
  function ISO$DirectoryRecord$Companion_getInstance() {
    if (ISO$DirectoryRecord$Companion_instance === null) {
      new ISO$DirectoryRecord$Companion();
    }return ISO$DirectoryRecord$Companion_instance;
  }
  ISO$DirectoryRecord.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DirectoryRecord',
    interfaces: []
  };
  ISO$DirectoryRecord.prototype.component1 = function () {
    return this.length;
  };
  ISO$DirectoryRecord.prototype.component2 = function () {
    return this.extendedAttributeLength;
  };
  ISO$DirectoryRecord.prototype.component3 = function () {
    return this.extent;
  };
  ISO$DirectoryRecord.prototype.component4 = function () {
    return this.size;
  };
  ISO$DirectoryRecord.prototype.component5 = function () {
    return this.date;
  };
  ISO$DirectoryRecord.prototype.component6 = function () {
    return this.flags;
  };
  ISO$DirectoryRecord.prototype.component7 = function () {
    return this.fileUnitSize;
  };
  ISO$DirectoryRecord.prototype.component8 = function () {
    return this.interleave;
  };
  ISO$DirectoryRecord.prototype.component9 = function () {
    return this.volumeSequenceNumber;
  };
  ISO$DirectoryRecord.prototype.component10 = function () {
    return this.rawName;
  };
  ISO$DirectoryRecord.prototype.copy_j11yol$ = function (length, extendedAttributeLength, extent, size, date, flags, fileUnitSize, interleave, volumeSequenceNumber, rawName) {
    return new ISO$DirectoryRecord(length === void 0 ? this.length : length, extendedAttributeLength === void 0 ? this.extendedAttributeLength : extendedAttributeLength, extent === void 0 ? this.extent : extent, size === void 0 ? this.size : size, date === void 0 ? this.date : date, flags === void 0 ? this.flags : flags, fileUnitSize === void 0 ? this.fileUnitSize : fileUnitSize, interleave === void 0 ? this.interleave : interleave, volumeSequenceNumber === void 0 ? this.volumeSequenceNumber : volumeSequenceNumber, rawName === void 0 ? this.rawName : rawName);
  };
  ISO$DirectoryRecord.prototype.toString = function () {
    return 'DirectoryRecord(length=' + Kotlin.toString(this.length) + (', extendedAttributeLength=' + Kotlin.toString(this.extendedAttributeLength)) + (', extent=' + Kotlin.toString(this.extent)) + (', size=' + Kotlin.toString(this.size)) + (', date=' + Kotlin.toString(this.date)) + (', flags=' + Kotlin.toString(this.flags)) + (', fileUnitSize=' + Kotlin.toString(this.fileUnitSize)) + (', interleave=' + Kotlin.toString(this.interleave)) + (', volumeSequenceNumber=' + Kotlin.toString(this.volumeSequenceNumber)) + (', rawName=' + Kotlin.toString(this.rawName)) + ')';
  };
  ISO$DirectoryRecord.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.length) | 0;
    result = result * 31 + Kotlin.hashCode(this.extendedAttributeLength) | 0;
    result = result * 31 + Kotlin.hashCode(this.extent) | 0;
    result = result * 31 + Kotlin.hashCode(this.size) | 0;
    result = result * 31 + Kotlin.hashCode(this.date) | 0;
    result = result * 31 + Kotlin.hashCode(this.flags) | 0;
    result = result * 31 + Kotlin.hashCode(this.fileUnitSize) | 0;
    result = result * 31 + Kotlin.hashCode(this.interleave) | 0;
    result = result * 31 + Kotlin.hashCode(this.volumeSequenceNumber) | 0;
    result = result * 31 + Kotlin.hashCode(this.rawName) | 0;
    return result;
  };
  ISO$DirectoryRecord.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.length, other.length) && Kotlin.equals(this.extendedAttributeLength, other.extendedAttributeLength) && Kotlin.equals(this.extent, other.extent) && Kotlin.equals(this.size, other.size) && Kotlin.equals(this.date, other.date) && Kotlin.equals(this.flags, other.flags) && Kotlin.equals(this.fileUnitSize, other.fileUnitSize) && Kotlin.equals(this.interleave, other.interleave) && Kotlin.equals(this.volumeSequenceNumber, other.volumeSequenceNumber) && Kotlin.equals(this.rawName, other.rawName)))));
  };
  ISO.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ISO',
    interfaces: []
  };
  var ISO_instance = null;
  function ISO_getInstance() {
    if (ISO_instance === null) {
      new ISO();
    }return ISO_instance;
  }
  function readUdfDString($receiver, bytes) {
    var ss = readStream_1($receiver, bytes);
    var count = readU16LE_1(ss) / 2 | 0;
    return readUtf16LE(ss, count);
  }
  function readUtf16LE($receiver, count) {
    var s = '';
    for (var n = 0; n < count; n++) {
      s += String.fromCharCode(toChar(readS16LE_1($receiver)));
    }
    return s;
  }
  function JailVfs$ObjectLiteral(closure$jailRoot) {
    this.closure$jailRoot = closure$jailRoot;
    Vfs$Proxy.call(this);
    this.baseJail = normalize(closure$jailRoot.pathInfo);
  }
  JailVfs$ObjectLiteral.prototype.access_61zpoe$ = function (path, continuation) {
    return this.closure$jailRoot.get_61zpoe$(trim(normalize(get_pathInfo(path)), Kotlin.charArrayOf(47)));
  };
  JailVfs$ObjectLiteral.prototype.transform_yirdke$ = function ($receiver, continuation) {
    var outPath = normalize(get_pathInfo($receiver.path));
    if (!startsWith(outPath, this.baseJail))
      throw UnsupportedOperationException_init_0('Jail not base root : ' + $receiver.path + ' | ' + this.baseJail);
    var startIndex = this.baseJail.length;
    return this.file_61zpoe$(outPath.substring(startIndex));
  };
  Object.defineProperty(JailVfs$ObjectLiteral.prototype, 'absolutePath', {
    get: function () {
      return this.closure$jailRoot.absolutePath;
    }
  });
  JailVfs$ObjectLiteral.prototype.toString = function () {
    return 'JailVfs(' + this.closure$jailRoot + ')';
  };
  JailVfs$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [Vfs$Proxy]
  };
  function JailVfs(jailRoot) {
    return (new JailVfs$ObjectLiteral(jailRoot)).root;
  }
  function LocalVfs() {
    LocalVfs$Companion_getInstance();
    Vfs.call(this);
  }
  function LocalVfs$Companion() {
    LocalVfs$Companion_instance = this;
  }
  LocalVfs$Companion.prototype.get_61zpoe$ = function (base) {
    return localVfs(base);
  };
  LocalVfs$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var LocalVfs$Companion_instance = null;
  function LocalVfs$Companion_getInstance() {
    if (LocalVfs$Companion_instance === null) {
      new LocalVfs$Companion();
    }return LocalVfs$Companion_instance;
  }
  LocalVfs.prototype.toString = function () {
    return 'LocalVfs';
  };
  LocalVfs.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LocalVfs',
    interfaces: [Vfs]
  };
  function LocalVfsV2() {
    LocalVfs.call(this);
  }
  function Coroutine$list_61zpoe$_1($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$list_61zpoe$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$list_61zpoe$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$list_61zpoe$_1.prototype.constructor = Coroutine$list_61zpoe$_1;
  Coroutine$list_61zpoe$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.listFlow_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = toChannel_0(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LocalVfsV2.prototype.list_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$list_61zpoe$_1(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  LocalVfsV2.prototype.listFlow_61zpoe$ = function (path, continuation) {
    return emptyFlow();
  };
  LocalVfsV2.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LocalVfsV2',
    interfaces: [LocalVfs]
  };
  var resourcesVfsDebug;
  function get_localCurrentDirVfs() {
    return get_applicationVfs();
  }
  function jailedLocalVfs(base) {
    return localVfs(base).jail();
  }
  function LogVfs(parent) {
    Vfs$Proxy.call(this);
    this.parent = parent;
    this.log = ArrayList_init();
    this.modifiedFiles = LinkedHashSet_init();
  }
  Object.defineProperty(LogVfs.prototype, 'logstr', {
    get: function () {
      return this.log.toString();
    }
  });
  LogVfs.prototype.access_61zpoe$ = function (path, continuation) {
    return this.parent.get_61zpoe$(path);
  };
  LogVfs.prototype.exec_z6qifm$$default = function (path, cmdAndArgs, env, handler, continuation) {
    var $receiver = this.log;
    var element = 'exec(' + path + ', ' + cmdAndArgs + ', ' + env + ', ' + handler + ')';
    $receiver.add_11rb$(element);
    return this.exec_z6qifm$(path, cmdAndArgs, env, handler, continuation, Vfs$Proxy.prototype.exec_z6qifm$$default.bind(this));
  };
  function LogVfs$open$ObjectLiteral(closure$base, this$LogVfs, closure$path) {
    this.closure$base = closure$base;
    this.this$LogVfs = this$LogVfs;
    this.closure$path = closure$path;
    AsyncStreamBase.call(this);
  }
  LogVfs$open$ObjectLiteral.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    this.closure$base.position = position;
    return this.closure$base.read_mj6st8$(buffer, offset, len, continuation);
  };
  function Coroutine$write_4m9kcn$($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_4m9kcn$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_4m9kcn$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_4m9kcn$.prototype.constructor = Coroutine$write_4m9kcn$;
  Coroutine$write_4m9kcn$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.$this.closure$base.position = this.local$position;
            this.state_0 = 2;
            this.result_0 = this.$this.closure$base.write_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var $receiver = this.$this.this$LogVfs.modifiedFiles;
            var element = this.$this.closure$path;
            $receiver.add_11rb$(element);
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogVfs$open$ObjectLiteral.prototype.write_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_4m9kcn$(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setLength_s8cxhz$($this, value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$value = value_0;
  }
  Coroutine$setLength_s8cxhz$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setLength_s8cxhz$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setLength_s8cxhz$.prototype.constructor = Coroutine$setLength_s8cxhz$;
  Coroutine$setLength_s8cxhz$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.closure$base.setLength_s8cxhz$(this.local$value, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var $receiver = this.$this.this$LogVfs.modifiedFiles;
            var element = this.$this.closure$path;
            $receiver.add_11rb$(element);
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogVfs$open$ObjectLiteral.prototype.setLength_s8cxhz$ = function (value_0, continuation_0, suspended) {
    var instance = new Coroutine$setLength_s8cxhz$(this, value_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  LogVfs$open$ObjectLiteral.prototype.getLength = function (continuation) {
    return this.closure$base.getLength(continuation);
  };
  LogVfs$open$ObjectLiteral.prototype.close = function (continuation) {
    return this.closure$base.close(continuation);
  };
  LogVfs$open$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncStreamBase]
  };
  function Coroutine$open_vb0dls$_0($this, path_0, mode_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$mode = mode_0;
  }
  Coroutine$open_vb0dls$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$open_vb0dls$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$open_vb0dls$_0.prototype.constructor = Coroutine$open_vb0dls$_0;
  Coroutine$open_vb0dls$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var $receiver = this.$this.log;
            var element = 'open(' + this.local$path + ', ' + this.local$mode + ')';
            $receiver.add_11rb$(element);
            this.state_0 = 2;
            this.result_0 = Vfs$Proxy.prototype.open_vb0dls$.call(this.$this, this.local$path, this.local$mode, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var base = this.result_0;
            return toAsyncStream_0(new LogVfs$open$ObjectLiteral(base, this.$this, this.local$path));
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogVfs.prototype.open_vb0dls$ = function (path_0, mode_0, continuation_0, suspended) {
    var instance = new Coroutine$open_vb0dls$_0(this, path_0, mode_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  LogVfs.prototype.readRange_fmne7s$ = function (path, range, continuation) {
    var $receiver = this.log;
    var element = 'readRange(' + path + ', ' + range + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.readRange_fmne7s$.call(this, path, range, continuation);
  };
  LogVfs.prototype.put_18ksq8$$default = function (path, content, attributes, continuation) {
    this.modifiedFiles.add_11rb$(path);
    var $receiver = this.log;
    var element = 'put(' + path + ', ' + content + ', ' + attributes + ')';
    $receiver.add_11rb$(element);
    return this.put_18ksq8$(path, content, attributes, continuation, Vfs$Proxy.prototype.put_18ksq8$$default.bind(this));
  };
  function Coroutine$setSize_4wgjuj$_1($this, path_0, size_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$size = size_0;
  }
  Coroutine$setSize_4wgjuj$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setSize_4wgjuj$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setSize_4wgjuj$_1.prototype.constructor = Coroutine$setSize_4wgjuj$_1;
  Coroutine$setSize_4wgjuj$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.$this.modifiedFiles.add_11rb$(this.local$path);
            var $receiver = this.$this.log;
            var element = 'setSize(' + this.local$path + ', ' + this.local$size.toString() + ')';
            $receiver.add_11rb$(element);
            this.state_0 = 2;
            this.result_0 = Vfs$Proxy.prototype.setSize_4wgjuj$.call(this.$this, this.local$path, this.local$size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogVfs.prototype.setSize_4wgjuj$ = function (path_0, size_0, continuation_0, suspended) {
    var instance = new Coroutine$setSize_4wgjuj$_1(this, path_0, size_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  LogVfs.prototype.stat_61zpoe$ = function (path, continuation) {
    var $receiver = this.log;
    var element = 'stat(' + path + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.stat_61zpoe$.call(this, path, continuation);
  };
  LogVfs.prototype.list_61zpoe$ = function (path, continuation) {
    var $receiver = this.log;
    var element = 'list(' + path + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.list_61zpoe$.call(this, path, continuation);
  };
  LogVfs.prototype.listFlow_61zpoe$ = function (path, continuation) {
    var $receiver = this.log;
    var element = 'listFlow(' + path + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.listFlow_61zpoe$.call(this, path, continuation);
  };
  LogVfs.prototype.delete_61zpoe$ = function (path, continuation) {
    this.modifiedFiles.add_11rb$(path);
    var $receiver = this.log;
    var element = 'delete(' + path + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.delete_61zpoe$.call(this, path, continuation);
  };
  function Coroutine$setAttributes_z6b3ik$_0($this, path_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$setAttributes_z6b3ik$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setAttributes_z6b3ik$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setAttributes_z6b3ik$_0.prototype.constructor = Coroutine$setAttributes_z6b3ik$_0;
  Coroutine$setAttributes_z6b3ik$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.$this.modifiedFiles.add_11rb$(this.local$path);
            var $receiver = this.$this.log;
            var element = 'setAttributes(' + this.local$path + ', ' + this.local$attributes + ')';
            $receiver.add_11rb$(element);
            this.state_0 = 2;
            this.result_0 = Vfs$Proxy.prototype.setAttributes_z6b3ik$.call(this.$this, this.local$path, this.local$attributes, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogVfs.prototype.setAttributes_z6b3ik$ = function (path_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$setAttributes_z6b3ik$_0(this, path_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  LogVfs.prototype.mkdir_z6b3ik$ = function (path, attributes, continuation) {
    this.modifiedFiles.add_11rb$(path);
    var $receiver = this.log;
    var element = 'mkdir(' + path + ', ' + attributes + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.mkdir_z6b3ik$.call(this, path, attributes, continuation);
  };
  function Coroutine$touch_wk1zco$_0($this, path_0, time_0, atime_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$time = time_0;
    this.local$atime = atime_0;
  }
  Coroutine$touch_wk1zco$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$touch_wk1zco$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$touch_wk1zco$_0.prototype.constructor = Coroutine$touch_wk1zco$_0;
  Coroutine$touch_wk1zco$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.$this.modifiedFiles.add_11rb$(this.local$path);
            var $receiver = this.$this.log;
            var element = 'touch(' + this.local$path + ', ' + this.local$time + ', ' + this.local$atime + ')';
            $receiver.add_11rb$(element);
            this.state_0 = 2;
            this.result_0 = Vfs$Proxy.prototype.touch_wk1zco$.call(this.$this, this.local$path, this.local$time, this.local$atime, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  LogVfs.prototype.touch_wk1zco$ = function (path_0, time_0, atime_0, continuation_0, suspended) {
    var instance = new Coroutine$touch_wk1zco$_0(this, path_0, time_0, atime_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  LogVfs.prototype.rename_puj7f4$ = function (src, dst, continuation) {
    this.modifiedFiles.add_11rb$(src);
    this.modifiedFiles.add_11rb$(dst);
    var $receiver = this.log;
    var element = 'rename(' + src + ', ' + dst + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.rename_puj7f4$.call(this, src, dst, continuation);
  };
  LogVfs.prototype.watch_6lbnta$ = function (path, handler, continuation) {
    var $receiver = this.log;
    var element = 'watch(' + path + ')';
    $receiver.add_11rb$(element);
    return Vfs$Proxy.prototype.watch_6lbnta$.call(this, path, handler, continuation);
  };
  LogVfs.prototype.toString = function () {
    return 'LogVfs';
  };
  LogVfs.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LogVfs',
    interfaces: [Vfs$Proxy]
  };
  function log($receiver) {
    return (new LogVfs($receiver)).root;
  }
  var arraycopy$lambda_0 = wrapFunction(function () {
    var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
    return function (closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$size) {
      return function () {
        arrayCopy(closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$srcPos + closure$size | 0);
        return Unit;
      };
    };
  });
  function toVfs($receiver) {
    return (new MapLikeStorageVfs($receiver)).root;
  }
  function MapLikeStorageVfs(storage) {
    VfsV2.call(this);
    this.storage = storage;
    this.files_0 = new StorageFiles(this.storage);
    this.initialized_0 = false;
  }
  function Coroutine$initOnce_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$initOnce_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$initOnce_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$initOnce_0.prototype.constructor = Coroutine$initOnce_0;
  Coroutine$initOnce_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (!this.$this.initialized_0) {
              this.$this.initialized_0 = true;
              this.state_0 = 2;
              this.result_0 = this.$this.files_0.hasEntryInfo_61zpoe$('/', this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 5;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            if (!this.result_0) {
              this.state_0 = 3;
              this.result_0 = this.$this.files_0.setEntryInfo_qv0hih$('/', new StorageFiles$EntryInfo(false, L0), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            this.state_0 = 5;
            continue;
          case 5:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MapLikeStorageVfs.prototype.initOnce_0 = function (continuation_0, suspended) {
    var instance = new Coroutine$initOnce_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  MapLikeStorageVfs.prototype.normalizePath_pdl1vz$ = function ($receiver) {
    return '/' + replace(trim($receiver, Kotlin.charArrayOf(47)), 92, 47);
  };
  function Coroutine$remove_ivxn3r$($this, path_0, directory_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$npath = void 0;
    this.local$path = path_0;
    this.local$directory = directory_0;
  }
  Coroutine$remove_ivxn3r$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$remove_ivxn3r$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$remove_ivxn3r$.prototype.constructor = Coroutine$remove_ivxn3r$;
  Coroutine$remove_ivxn3r$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$npath = this.$this.normalizePath_pdl1vz$(this.local$path);
            this.state_0 = 3;
            this.result_0 = this.$this.files_0.getEntryInfo_61zpoe$(this.local$npath, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$tmp$ = this.result_0;
            if (this.local$tmp$ == null) {
              return false;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            var entry = this.local$tmp$;
            if (entry.isDirectory === this.local$directory) {
              var tmp$ = this.local$directory;
              if (tmp$) {
                tmp$ = !entry.children.isEmpty();
              }if (tmp$)
                throw new IOException("Directory '" + this.local$npath + "' is not empty");
              this.state_0 = 5;
              this.result_0 = this.$this.files_0.removeEntryInfo_61zpoe$(this.local$npath, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.local$tmp$_0 = false;
              this.state_0 = 6;
              continue;
            }

          case 5:
            this.local$tmp$_0 = this.result_0;
            this.state_0 = 6;
            continue;
          case 6:
            return this.local$tmp$_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MapLikeStorageVfs.prototype.remove_ivxn3r$ = function (path_0, directory_0, continuation_0, suspended) {
    var instance = new Coroutine$remove_ivxn3r$(this, path_0, directory_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  MapLikeStorageVfs.prototype.rmdir_61zpoe$ = function (path, continuation) {
    return this.remove_ivxn3r$(path, true, continuation);
  };
  MapLikeStorageVfs.prototype.delete_61zpoe$ = function (path, continuation) {
    return this.remove_ivxn3r$(path, false, continuation);
  };
  function Coroutine$stat_61zpoe$_0($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$path = path_0;
  }
  Coroutine$stat_61zpoe$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$stat_61zpoe$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$stat_61zpoe$_0.prototype.constructor = Coroutine$stat_61zpoe$_0;
  Coroutine$stat_61zpoe$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var npath = this.$this.normalizePath_pdl1vz$(this.local$path);
            this.state_0 = 3;
            this.result_0 = this.$this.files_0.getEntryInfo_61zpoe$(npath, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$tmp$ = this.result_0;
            if (this.local$tmp$ == null) {
              return this.$this.createNonExistsStat_4w9ihe$(this.local$path);
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            var entry = this.local$tmp$;
            return this.$this.createExistsStat_14z8ds$(this.local$path, entry.isDirectory, entry.size, void 0, void 0, void 0, void 0, void 0, entry.createdTime, entry.modifiedTime);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MapLikeStorageVfs.prototype.stat_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$stat_61zpoe$_0(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$ensureParentDirectory_0($this, nparent_0, npath_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$nparent = nparent_0;
    this.local$npath = npath_0;
  }
  Coroutine$ensureParentDirectory_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ensureParentDirectory_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ensureParentDirectory_0.prototype.constructor = Coroutine$ensureParentDirectory_0;
  Coroutine$ensureParentDirectory_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.files_0.hasEntryInfo_61zpoe$(this.local$nparent, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.result_0)
              throw new IOException("Parent directory '" + this.local$nparent + "' for file '" + this.local$npath + "' doesn't exists");
            this.state_0 = 3;
            this.result_0 = this.$this.files_0.getEntryInfo_61zpoe$(this.local$nparent, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var parent = ensureNotNull(this.result_0);
            if (parent.isFile)
              throw new IOException("'" + this.local$nparent + "' is a file");
            return parent;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MapLikeStorageVfs.prototype.ensureParentDirectory_0 = function (nparent_0, npath_0, continuation_0, suspended) {
    var instance = new Coroutine$ensureParentDirectory_0(this, nparent_0, npath_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$mkdir_z6b3ik$_0($this, path_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$npath = void 0;
    this.local$nparent = void 0;
    this.local$parent = void 0;
    this.local$now = void 0;
    this.local$path = path_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$mkdir_z6b3ik$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$mkdir_z6b3ik$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$mkdir_z6b3ik$_0.prototype.constructor = Coroutine$mkdir_z6b3ik$_0;
  Coroutine$mkdir_z6b3ik$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$npath = this.$this.normalizePath_pdl1vz$(this.local$path);
            this.local$nparent = this.$this.normalizePath_pdl1vz$(get_folder(new PathInfo(this.local$npath)));
            this.state_0 = 3;
            this.result_0 = this.$this.files_0.hasEntryInfo_61zpoe$(this.local$nparent, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            if (!this.result_0) {
              this.state_0 = 4;
              this.result_0 = this.$this.mkdir_z6b3ik$(this.local$nparent, this.local$attributes, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 5;
              continue;
            }

          case 4:
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.$this.ensureParentDirectory_0(this.local$nparent, this.local$npath, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            this.local$parent = this.result_0;
            this.local$now = DateTime.Companion.now();
            this.state_0 = 7;
            this.result_0 = this.$this.files_0.hasEntryInfo_61zpoe$(this.local$npath, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 7:
            if (this.result_0) {
              return false;
            } else {
              this.state_0 = 8;
              continue;
            }

          case 8:
            this.state_0 = 9;
            this.result_0 = this.$this.files_0.setEntryInfo_qv0hih$(this.local$nparent, this.local$parent.copy_yw9vdz$(void 0, void 0, plus_0(this.local$parent.children, this.local$npath)), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 9:
            this.state_0 = 10;
            this.result_0 = this.$this.files_0.setEntryInfo_nojj3t$(this.local$npath, false, L0, emptyList(), this.local$now, this.local$now, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 10:
            return true;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MapLikeStorageVfs.prototype.mkdir_z6b3ik$ = function (path_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$mkdir_z6b3ik$_0(this, path_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$listFlow_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$listFlow_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listFlow_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listFlow_61zpoe$.prototype.constructor = Coroutine$listFlow_61zpoe$;
  Coroutine$listFlow_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var npath = this.$this.normalizePath_pdl1vz$(this.local$path);
            this.state_0 = 3;
            this.result_0 = this.$this.files_0.getEntryInfo_61zpoe$(npath, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            tmp$ = this.result_0;
            if (tmp$ == null) {
              throw new IOException("Can't find '" + this.local$path + "'");
            }
            var entry = tmp$;
            var $receiver = entry.children;
            var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
            var tmp$_0;
            tmp$_0 = $receiver.iterator();
            while (tmp$_0.hasNext()) {
              var item = tmp$_0.next();
              destination.add_11rb$(new VfsFile(this.$this, item));
            }

            return asFlow(destination);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MapLikeStorageVfs.prototype.listFlow_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$listFlow_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function MapLikeStorageVfs$open$ObjectLiteral(closure$info, this$MapLikeStorageVfs, closure$npath) {
    this.closure$info = closure$info;
    this.this$MapLikeStorageVfs = this$MapLikeStorageVfs;
    this.closure$npath = closure$npath;
    AsyncStreamBase.call(this);
  }
  function Coroutine$updateInfo_0($this, newInfo_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$newInfo = newInfo_0;
  }
  Coroutine$updateInfo_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$updateInfo_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$updateInfo_0.prototype.constructor = Coroutine$updateInfo_0;
  Coroutine$updateInfo_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            if (!((tmp$ = this.$this.closure$info.v) != null ? tmp$.equals(this.local$newInfo) : null)) {
              this.$this.closure$info.v = this.local$newInfo;
              this.state_0 = 2;
              this.result_0 = this.$this.this$MapLikeStorageVfs.files_0.setEntryInfo_qv0hih$(this.$this.closure$npath, this.$this.closure$info.v, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MapLikeStorageVfs$open$ObjectLiteral.prototype.updateInfo_0 = function (newInfo_0, continuation_0, suspended) {
    var instance = new Coroutine$updateInfo_0(this, newInfo_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  MapLikeStorageVfs$open$ObjectLiteral.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    return this.this$MapLikeStorageVfs.files_0.readData_88b6yz$(this.closure$npath, position, buffer, offset, len, continuation);
  };
  function Coroutine$write_4m9kcn$_0($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_4m9kcn$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_4m9kcn$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_4m9kcn$_0.prototype.constructor = Coroutine$write_4m9kcn$_0;
  Coroutine$write_4m9kcn$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.this$MapLikeStorageVfs.files_0.writeData_88b6yz$(this.$this.closure$npath, this.local$position, this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var tmp$ = this.$this.closure$info.v;
            var tmp$_0 = void 0;
            var a = this.$this.closure$info.v.size;
            var b = this.local$position.add(Kotlin.Long.fromInt(this.local$len));
            this.state_0 = 3;
            this.result_0 = this.$this.updateInfo_0(tmp$.copy_yw9vdz$(tmp$_0, a.compareTo_11rb$(b) >= 0 ? a : b), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MapLikeStorageVfs$open$ObjectLiteral.prototype.write_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_4m9kcn$_0(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setLength_s8cxhz$_0($this, value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$value = value_0;
  }
  Coroutine$setLength_s8cxhz$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setLength_s8cxhz$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setLength_s8cxhz$_0.prototype.constructor = Coroutine$setLength_s8cxhz$_0;
  Coroutine$setLength_s8cxhz$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.updateInfo_0(this.$this.closure$info.v.copy_yw9vdz$(void 0, this.local$value), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MapLikeStorageVfs$open$ObjectLiteral.prototype.setLength_s8cxhz$ = function (value_0, continuation_0, suspended) {
    var instance = new Coroutine$setLength_s8cxhz$_0(this, value_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  MapLikeStorageVfs$open$ObjectLiteral.prototype.getLength = function (continuation) {
    return this.closure$info.v.size;
  };
  MapLikeStorageVfs$open$ObjectLiteral.prototype.close = function (continuation) {
  };
  MapLikeStorageVfs$open$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncStreamBase]
  };
  function Coroutine$open_vb0dls$_1($this, path_0, mode_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$npath = void 0;
    this.local$nparent = void 0;
    this.local$parent = void 0;
    this.local$now = void 0;
    this.local$path = path_0;
    this.local$mode = mode_0;
  }
  Coroutine$open_vb0dls$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$open_vb0dls$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$open_vb0dls$_1.prototype.constructor = Coroutine$open_vb0dls$_1;
  Coroutine$open_vb0dls$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$npath = this.$this.normalizePath_pdl1vz$(this.local$path);
            this.local$nparent = this.$this.normalizePath_pdl1vz$(get_folder(new PathInfo(this.local$npath)));
            this.state_0 = 3;
            this.result_0 = this.$this.ensureParentDirectory_0(this.local$nparent, this.local$npath, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$parent = this.result_0;
            this.state_0 = 4;
            this.result_0 = this.$this.files_0.hasEntryInfo_61zpoe$(this.local$npath, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            if (!this.result_0) {
              if (!this.local$mode.createIfNotExists)
                throw new IOException("File '" + this.local$npath + "' doesn't exists");
              this.state_0 = 5;
              this.result_0 = this.$this.files_0.setEntryInfo_qv0hih$(this.local$nparent, this.local$parent.copy_yw9vdz$(void 0, void 0, plus_0(this.local$parent.children, this.local$npath)), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 6;
              continue;
            }

          case 5:
            this.state_0 = 6;
            continue;
          case 6:
            this.local$now = DateTime.Companion.now();
            this.state_0 = 7;
            this.result_0 = this.$this.files_0.getEntryInfo_61zpoe$(this.local$npath, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 7:
            var listOf$result;
            listOf$result = emptyList();
            var info = {v: (tmp$ = this.result_0) != null ? tmp$ : new StorageFiles$EntryInfo(true, L0, listOf$result, this.local$now, this.local$now)};
            if (info.v.isDirectory)
              throw new IOException("Can't open a directory");
            return toAsyncStream_0(new MapLikeStorageVfs$open$ObjectLiteral(info, this.$this, this.local$npath));
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MapLikeStorageVfs.prototype.open_vb0dls$ = function (path_0, mode_0, continuation_0, suspended) {
    var instance = new Coroutine$open_vb0dls$_1(this, path_0, mode_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$touch_wk1zco$_1($this, path_0, time_0, atime_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$npath = void 0;
    this.local$path = path_0;
    this.local$time = time_0;
  }
  Coroutine$touch_wk1zco$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$touch_wk1zco$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$touch_wk1zco$_1.prototype.constructor = Coroutine$touch_wk1zco$_1;
  Coroutine$touch_wk1zco$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.initOnce_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$npath = this.$this.normalizePath_pdl1vz$(this.local$path);
            this.state_0 = 3;
            this.result_0 = this.$this.files_0.hasEntryInfo_61zpoe$(this.local$npath, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            if (this.result_0) {
              this.local$tmp$ = this.$this.files_0;
              this.state_0 = 4;
              this.result_0 = this.$this.files_0.getEntryInfo_61zpoe$(this.local$npath, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 6;
              continue;
            }

          case 4:
            this.state_0 = 5;
            this.result_0 = this.local$tmp$.setEntryInfo_qv0hih$(this.local$npath, ensureNotNull(this.result_0).copy_yw9vdz$(void 0, void 0, void 0, void 0, this.local$time), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.state_0 = 6;
            continue;
          case 6:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MapLikeStorageVfs.prototype.touch_wk1zco$ = function (path_0, time_0, atime_0, continuation_0, suspended) {
    var instance = new Coroutine$touch_wk1zco$_1(this, path_0, time_0, atime_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  MapLikeStorageVfs.prototype.toString = function () {
    return 'MapLikeStorageVfs';
  };
  MapLikeStorageVfs.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MapLikeStorageVfs',
    interfaces: [VfsV2]
  };
  function StorageFiles(storage) {
    StorageFiles$Companion_getInstance();
    this.storage = storage;
  }
  function StorageFiles$Companion() {
    StorageFiles$Companion_instance = this;
    this.CHUNK_SIZE = 16384;
  }
  StorageFiles$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var StorageFiles$Companion_instance = null;
  function StorageFiles$Companion_getInstance() {
    if (StorageFiles$Companion_instance === null) {
      new StorageFiles$Companion();
    }return StorageFiles$Companion_instance;
  }
  StorageFiles.prototype.getStatsKey_61zpoe$ = function (fileName) {
    return 'korio_stats_v1_' + fileName;
  };
  StorageFiles.prototype.getChunkKey_bm4lxs$ = function (fileName, chunk) {
    return 'korio_chunk' + chunk + '_v1_' + fileName;
  };
  function StorageFiles$EntryInfo(isFile, size, children, createdTime, modifiedTime) {
    if (size === void 0)
      size = L0;
    if (children === void 0) {
      children = emptyList();
    }if (createdTime === void 0)
      createdTime = DateTime.Companion.EPOCH;
    if (modifiedTime === void 0)
      modifiedTime = DateTime.Companion.EPOCH;
    this.isFile = isFile;
    this.size = size;
    this.children = children;
    this.createdTime = createdTime;
    this.modifiedTime = modifiedTime;
  }
  Object.defineProperty(StorageFiles$EntryInfo.prototype, 'isDirectory', {
    get: function () {
      return !this.isFile;
    }
  });
  StorageFiles$EntryInfo.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EntryInfo',
    interfaces: []
  };
  StorageFiles$EntryInfo.prototype.component1 = function () {
    return this.isFile;
  };
  StorageFiles$EntryInfo.prototype.component2 = function () {
    return this.size;
  };
  StorageFiles$EntryInfo.prototype.component3 = function () {
    return this.children;
  };
  StorageFiles$EntryInfo.prototype.component4 = function () {
    return this.createdTime;
  };
  StorageFiles$EntryInfo.prototype.component5 = function () {
    return this.modifiedTime;
  };
  StorageFiles$EntryInfo.prototype.copy_yw9vdz$ = function (isFile, size, children, createdTime, modifiedTime) {
    return new StorageFiles$EntryInfo(isFile === void 0 ? this.isFile : isFile, size === void 0 ? this.size : size, children === void 0 ? this.children : children, createdTime === void 0 ? this.createdTime : createdTime, modifiedTime === void 0 ? this.modifiedTime : modifiedTime);
  };
  StorageFiles$EntryInfo.prototype.toString = function () {
    return 'EntryInfo(isFile=' + Kotlin.toString(this.isFile) + (', size=' + Kotlin.toString(this.size)) + (', children=' + Kotlin.toString(this.children)) + (', createdTime=' + Kotlin.toString(this.createdTime)) + (', modifiedTime=' + Kotlin.toString(this.modifiedTime)) + ')';
  };
  StorageFiles$EntryInfo.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.isFile) | 0;
    result = result * 31 + Kotlin.hashCode(this.size) | 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    result = result * 31 + Kotlin.hashCode(this.createdTime) | 0;
    result = result * 31 + Kotlin.hashCode(this.modifiedTime) | 0;
    return result;
  };
  StorageFiles$EntryInfo.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.isFile, other.isFile) && Kotlin.equals(this.size, other.size) && Kotlin.equals(this.children, other.children) && Kotlin.equals(this.createdTime, other.createdTime) && Kotlin.equals(this.modifiedTime, other.modifiedTime)))));
  };
  function Coroutine$setEntryInfo_qv0hih$($this, fileName_0, info_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$fileName = fileName_0;
    this.local$info = info_0;
  }
  Coroutine$setEntryInfo_qv0hih$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setEntryInfo_qv0hih$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setEntryInfo_qv0hih$.prototype.constructor = Coroutine$setEntryInfo_qv0hih$;
  Coroutine$setEntryInfo_qv0hih$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.setEntryInfo_nojj3t$(this.local$fileName, this.local$info.isFile, this.local$info.size, this.local$info.children, this.local$info.createdTime, this.local$info.modifiedTime, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  StorageFiles.prototype.setEntryInfo_qv0hih$ = function (fileName_0, info_0, continuation_0, suspended) {
    var instance = new Coroutine$setEntryInfo_qv0hih$(this, fileName_0, info_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setEntryInfo_nojj3t$($this, fileName_0, isFile_0, size_0, children_0, createdTime_0, modifiedTime_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$fileName = fileName_0;
    this.local$isFile = isFile_0;
    this.local$size = size_0;
    this.local$children = children_0;
    this.local$createdTime = createdTime_0;
    this.local$modifiedTime = modifiedTime_0;
  }
  Coroutine$setEntryInfo_nojj3t$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setEntryInfo_nojj3t$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setEntryInfo_nojj3t$.prototype.constructor = Coroutine$setEntryInfo_nojj3t$;
  Coroutine$setEntryInfo_nojj3t$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$createdTime === void 0)
              this.local$createdTime = DateTime.Companion.EPOCH;
            if (this.local$modifiedTime === void 0)
              this.local$modifiedTime = DateTime.Companion.EPOCH;
            this.state_0 = 2;
            this.result_0 = this.$this.getEntryInfo_61zpoe$(this.local$fileName, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var oldEntry = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.$this.storage.set_puj7f4$(this.$this.getStatsKey_61zpoe$(this.local$fileName), Json_getInstance().stringify_oud20p$(hashMapOf([to(getPropertyCallableRef('isFile', 1, function ($receiver) {
              return $receiver.isFile;
            }).callableName, this.local$isFile), to(getPropertyCallableRef('size', 1, function ($receiver) {
              return $receiver.size;
            }).callableName, this.local$size.toNumber()), to(getPropertyCallableRef('children', 1, function ($receiver) {
              return $receiver.children;
            }).callableName, this.local$children), to(getPropertyCallableRef('createdTime', 1, function ($receiver) {
              return $receiver.createdTime;
            }).callableName, this.local$createdTime.unixMillisDouble), to(getPropertyCallableRef('modifiedTime', 1, function ($receiver) {
              return $receiver.modifiedTime;
            }).callableName, this.local$modifiedTime.unixMillisDouble)])), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  StorageFiles.prototype.setEntryInfo_nojj3t$ = function (fileName_0, isFile_0, size_0, children_0, createdTime_0, modifiedTime_0, continuation_0, suspended) {
    var instance = new Coroutine$setEntryInfo_nojj3t$(this, fileName_0, isFile_0, size_0, children_0, createdTime_0, modifiedTime_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$hasEntryInfo_61zpoe$($this, fileName_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$fileName = fileName_0;
  }
  Coroutine$hasEntryInfo_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$hasEntryInfo_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$hasEntryInfo_61zpoe$.prototype.constructor = Coroutine$hasEntryInfo_61zpoe$;
  Coroutine$hasEntryInfo_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.getEntryInfo_61zpoe$(this.local$fileName, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0 != null;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  StorageFiles.prototype.hasEntryInfo_61zpoe$ = function (fileName_0, continuation_0, suspended) {
    var instance = new Coroutine$hasEntryInfo_61zpoe$(this, fileName_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$getEntryInfo_61zpoe$($this, fileName_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$fileName = fileName_0;
  }
  Coroutine$getEntryInfo_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getEntryInfo_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getEntryInfo_61zpoe$.prototype.constructor = Coroutine$getEntryInfo_61zpoe$;
  Coroutine$getEntryInfo_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
            this.state_0 = 2;
            this.result_0 = this.$this.storage.get_61zpoe$(this.$this.getStatsKey_61zpoe$(this.local$fileName), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            if (this.local$tmp$ == null) {
              return null;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            var info = this.local$tmp$;
            var di = Kotlin.isType(tmp$ = Json_getInstance().parse_61zpoe$(info), Map) ? tmp$ : throwCCE();
            return new StorageFiles$EntryInfo(typeof (tmp$_0 = ensureNotNull(di.get_11rb$(getPropertyCallableRef('isFile', 1, function ($receiver) {
              return $receiver.isFile;
            }).callableName))) === 'boolean' ? tmp$_0 : throwCCE(), numberToLong(Kotlin.isNumber(tmp$_1 = ensureNotNull(di.get_11rb$(getPropertyCallableRef('size', 1, function ($receiver) {
              return $receiver.size;
            }).callableName))) ? tmp$_1 : throwCCE()), toList(Kotlin.isType(tmp$_2 = di.get_11rb$(getPropertyCallableRef('children', 1, function ($receiver) {
              return $receiver.children;
            }).callableName), Iterable) ? tmp$_2 : throwCCE()), DateTime.Companion.fromUnix_14dthe$(numberToDouble(Kotlin.isNumber(tmp$_3 = di.get_11rb$(getPropertyCallableRef('createdTime', 1, function ($receiver) {
              return $receiver.createdTime;
            }).callableName)) ? tmp$_3 : throwCCE())), DateTime.Companion.fromUnix_14dthe$(numberToDouble(Kotlin.isNumber(tmp$_4 = di.get_11rb$(getPropertyCallableRef('modifiedTime', 1, function ($receiver) {
              return $receiver.modifiedTime;
            }).callableName)) ? tmp$_4 : throwCCE())));
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  StorageFiles.prototype.getEntryInfo_61zpoe$ = function (fileName_0, continuation_0, suspended) {
    var instance = new Coroutine$getEntryInfo_61zpoe$(this, fileName_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$removeEntryInfo_61zpoe$($this, fileName_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$$receiver = void 0;
    this.local$n = void 0;
    this.local$fileName = fileName_0;
  }
  Coroutine$removeEntryInfo_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$removeEntryInfo_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$removeEntryInfo_61zpoe$.prototype.constructor = Coroutine$removeEntryInfo_61zpoe$;
  Coroutine$removeEntryInfo_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.getEntryInfo_61zpoe$(this.local$fileName, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var entry = this.result_0;
            if (entry != null) {
              this.local$$receiver = entry.children;
              var tmp$;
              this.local$n = 0;
              this.state_0 = 3;
              continue;
            } else {
              this.local$tmp$ = false;
              this.state_0 = 6;
              continue;
            }

          case 3:
            if (this.local$n >= this.local$$receiver.size) {
              this.state_0 = 5;
              continue;
            }
            this.state_0 = 4;
            this.result_0 = this.$this.removeEntryInfo_61zpoe$(this.local$$receiver.get_za3lpa$((tmp$ = this.local$n, this.local$n = tmp$ + 1 | 0, tmp$)), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.state_0 = 3;
            continue;
          case 5:
            this.local$tmp$ = true;
            this.state_0 = 6;
            continue;
          case 6:
            return this.local$tmp$;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  StorageFiles.prototype.removeEntryInfo_61zpoe$ = function (fileName_0, continuation_0, suspended) {
    var instance = new Coroutine$removeEntryInfo_61zpoe$(this, fileName_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$setFileChunk_swwd4w$($this, fileName_0, chunk_0, data_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$fileName = fileName_0;
    this.local$chunk = chunk_0;
    this.local$data = data_0;
  }
  Coroutine$setFileChunk_swwd4w$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setFileChunk_swwd4w$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setFileChunk_swwd4w$.prototype.constructor = Coroutine$setFileChunk_swwd4w$;
  Coroutine$setFileChunk_swwd4w$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.storage.set_puj7f4$(this.$this.getChunkKey_bm4lxs$(this.local$fileName, this.local$chunk), get_hex(this.local$data), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  StorageFiles.prototype.setFileChunk_swwd4w$ = function (fileName_0, chunk_0, data_0, continuation_0, suspended) {
    var instance = new Coroutine$setFileChunk_swwd4w$(this, fileName_0, chunk_0, data_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$getFileChunk_bm4lxs$($this, fileName_0, chunk_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$fileName = fileName_0;
    this.local$chunk = chunk_0;
  }
  Coroutine$getFileChunk_bm4lxs$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getFileChunk_bm4lxs$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getFileChunk_bm4lxs$.prototype.constructor = Coroutine$getFileChunk_bm4lxs$;
  Coroutine$getFileChunk_bm4lxs$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.state_0 = 2;
            this.result_0 = this.$this.storage.get_61zpoe$(this.$this.getChunkKey_bm4lxs$(this.local$fileName, this.local$chunk), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return (tmp$ = this.result_0) != null ? get_unhex(tmp$) : null;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  StorageFiles.prototype.getFileChunk_bm4lxs$ = function (fileName_0, chunk_0, continuation_0, suspended) {
    var instance = new Coroutine$getFileChunk_bm4lxs$(this, fileName_0, chunk_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$writeData_88b6yz$($this, fileName_0, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$pending = void 0;
    this.local$apos = void 0;
    this.local$aoffset = void 0;
    this.local$chunk = void 0;
    this.local$inChunk = void 0;
    this.local$written = void 0;
    this.local$fileName = fileName_0;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$writeData_88b6yz$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeData_88b6yz$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeData_88b6yz$.prototype.constructor = Coroutine$writeData_88b6yz$;
  Coroutine$writeData_88b6yz$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.local$pending = this.local$len;
            this.local$apos = this.local$position;
            this.local$aoffset = this.local$offset;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$pending <= 0) {
              this.state_0 = 5;
              continue;
            }
            this.local$chunk = this.local$apos.div(Kotlin.Long.fromInt(StorageFiles$Companion_getInstance().CHUNK_SIZE)).toInt();
            this.local$inChunk = this.local$apos.modulo(Kotlin.Long.fromInt(StorageFiles$Companion_getInstance().CHUNK_SIZE)).toInt();
            this.state_0 = 3;
            this.result_0 = this.$this.getFileChunk_bm4lxs$(this.local$fileName, this.local$chunk, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var c = (tmp$ = this.result_0) != null ? tmp$ : new Int8Array([]);
            var available = StorageFiles$Companion_getInstance().CHUNK_SIZE - this.local$inChunk | 0;
            var b = this.local$pending;
            this.local$written = Math_0.min(available, b);
            if (this.local$written <= 0)
              invalidOp('Unexpected written');
            var cc = copyOf(c, this.local$inChunk + this.local$written | 0);
            var srcPos = this.local$aoffset;
            arrayCopy(this.local$buffer, cc, this.local$inChunk, srcPos, srcPos + this.local$written | 0);
            this.state_0 = 4;
            this.result_0 = this.$this.setFileChunk_swwd4w$(this.local$fileName, this.local$chunk, cc, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.local$pending = this.local$pending - this.local$written | 0;
            this.local$apos = this.local$apos.add(Kotlin.Long.fromInt(this.local$written));
            this.local$aoffset = this.local$aoffset + this.local$written | 0;
            this.state_0 = 2;
            continue;
          case 5:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  StorageFiles.prototype.writeData_88b6yz$ = function (fileName_0, position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$writeData_88b6yz$(this, fileName_0, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readData_88b6yz$($this, fileName_0, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$inChunk = void 0;
    this.local$fileName = fileName_0;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$readData_88b6yz$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readData_88b6yz$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readData_88b6yz$.prototype.constructor = Coroutine$readData_88b6yz$;
  Coroutine$readData_88b6yz$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.getEntryInfo_61zpoe$(this.local$fileName, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            if (this.local$tmp$ == null) {
              return -1;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            var info = this.local$tmp$;
            if (this.local$position.compareTo_11rb$(info.size) >= 0) {
              return 0;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            var chunk = this.local$position.div(Kotlin.Long.fromInt(StorageFiles$Companion_getInstance().CHUNK_SIZE)).toInt();
            this.local$inChunk = this.local$position.modulo(Kotlin.Long.fromInt(StorageFiles$Companion_getInstance().CHUNK_SIZE)).toInt();
            this.state_0 = 5;
            this.result_0 = this.$this.getFileChunk_bm4lxs$(this.local$fileName, chunk, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.local$tmp$_0 = this.result_0;
            if (this.local$tmp$_0 == null) {
              return 0;
            } else {
              this.state_0 = 6;
              continue;
            }

          case 6:
            var c = this.local$tmp$_0;
            var available = c.length - this.local$inChunk | 0;
            var read = Math_0.min(available, this.local$len);
            arrayCopy(c, this.local$buffer, this.local$offset, this.local$inChunk, this.local$inChunk + read | 0);
            return read;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  StorageFiles.prototype.readData_88b6yz$ = function (fileName_0, position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$readData_88b6yz$(this, fileName_0, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  StorageFiles.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StorageFiles',
    interfaces: []
  };
  function MemoryVfs(items, caseSensitive) {
    if (items === void 0)
      items = LinkedHashMap_init();
    if (caseSensitive === void 0)
      caseSensitive = true;
    var tmp$;
    var vfs = new NodeVfs(caseSensitive);
    tmp$ = items.entries.iterator();
    while (tmp$.hasNext()) {
      var tmp$_0 = tmp$.next();
      var path = tmp$_0.key;
      var stream = tmp$_0.value;
      var info = new PathInfo(path);
      var folderNode = vfs.rootNode.access_ivxn3r$(get_folder(info), true);
      var fileNode = folderNode.createChild_ivxn3r$(get_baseName(info), false);
      fileNode.stream = stream;
    }
    return vfs.root;
  }
  function MemoryVfsMix(items, caseSensitive, charset) {
    if (items === void 0)
      items = LinkedHashMap_init();
    if (caseSensitive === void 0)
      caseSensitive = true;
    if (charset === void 0)
      charset = UTF8;
    var destination = LinkedHashMap_init_0(mapCapacity(items.size));
    var tmp$;
    tmp$ = items.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0 = destination.put_xwzc9p$;
      var tmp$_1 = element.key;
      var transform$result;
      var v = element.value;
      if (Kotlin.isType(v, SyncStream)) {
        transform$result = toAsync(v);
      } else if (Kotlin.isByteArray(v)) {
        transform$result = openAsync(v);
      } else if (typeof v === 'string') {
        transform$result = openAsync_0(v, charset);
      } else {
        transform$result = openAsync(toByteArray(v.toString(), charset));
      }
      tmp$_0.call(destination, tmp$_1, transform$result);
    }
    return MemoryVfs(destination, caseSensitive);
  }
  function MemoryVfsMix_0(items, caseSensitive, charset) {
    if (caseSensitive === void 0)
      caseSensitive = true;
    if (charset === void 0)
      charset = UTF8;
    return MemoryVfsMix(toMap_0(items), caseSensitive, charset);
  }
  function asMemoryVfsFile($receiver, name) {
    if (name === void 0)
      name = 'temp.bin';
    return MemoryVfs(mapOf(to(name, openAsync($receiver)))).get_61zpoe$(name);
  }
  function Coroutine$cachedToMemory($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$cachedToMemory.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$cachedToMemory.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$cachedToMemory.prototype.constructor = Coroutine$cachedToMemory;
  Coroutine$cachedToMemory.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.readAll(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return asMemoryVfsFile(this.result_0, get_fullName_0(this.local$$receiver));
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function cachedToMemory($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$cachedToMemory($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function MergedVfs(vfsList) {
    if (vfsList === void 0) {
      vfsList = emptyList();
    }Vfs$Proxy.call(this);
    this.vfsList_jy9dkt$_0 = ArrayList_init_1(vfsList);
  }
  MergedVfs.prototype.plusAssign_3ekr7n$ = function (other) {
    this.vfsList_jy9dkt$_0.add_11rb$(other);
  };
  MergedVfs.prototype.minusAssign_3ekr7n$ = function (other) {
    this.vfsList_jy9dkt$_0.remove_11rb$(other);
  };
  function Coroutine$access_61zpoe$_0($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$destination = void 0;
    this.local$firstOrNull$result = void 0;
    this.local$tmp$ = void 0;
    this.local$element = void 0;
    this.local$path = path_0;
  }
  Coroutine$access_61zpoe$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$access_61zpoe$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$access_61zpoe$_0.prototype.constructor = Coroutine$access_61zpoe$_0;
  Coroutine$access_61zpoe$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0, tmp$_1;
            if (this.$this.vfsList_jy9dkt$_0.size === 1) {
              return first_0(this.$this.vfsList_jy9dkt$_0).get_61zpoe$(this.local$path);
            } else {
              var tmp$_2;
              var $receiver = this.$this.vfsList_jy9dkt$_0;
              this.local$destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
              var tmp$_3;
              tmp$_3 = $receiver.iterator();
              while (tmp$_3.hasNext()) {
                var item = tmp$_3.next();
                this.local$destination.add_11rb$(item.get_61zpoe$(this.local$path));
              }
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.local$destination.iterator();
            this.state_0 = 3;
            continue;
          case 3:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 6;
              continue;
            }
            this.local$element = this.local$tmp$.next();
            this.state_0 = 4;
            this.result_0 = this.local$element.exists(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            if (this.result_0) {
              this.local$firstOrNull$result = this.local$element;
              this.state_0 = 7;
              continue;
            } else {
              this.state_0 = 5;
              continue;
            }

          case 5:
            this.state_0 = 3;
            continue;
          case 6:
            this.local$firstOrNull$result = null;
            if (!false) {
              this.state_0 = 7;
              continue;
            }
            this.state_0 = 2;
            continue;
          case 7:
            if ((tmp$_1 = (tmp$_0 = this.local$firstOrNull$result) != null ? tmp$_0 : (tmp$ = firstOrNull(this.$this.vfsList_jy9dkt$_0)) != null ? tmp$.get_61zpoe$(this.local$path) : null) != null)
              tmp$_2 = tmp$_1;
            else {
              throw IllegalStateException_init(('MergedVfs.access: VfsList is empty ' + this.$this.vfsList_jy9dkt$_0).toString());
            }

            return tmp$_2;
          case 8:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MergedVfs.prototype.access_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$access_61zpoe$_0(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$stat_61zpoe$_1($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$n = void 0;
    this.local$path = path_0;
  }
  Coroutine$stat_61zpoe$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$stat_61zpoe$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$stat_61zpoe$_1.prototype.constructor = Coroutine$stat_61zpoe$_1;
  Coroutine$stat_61zpoe$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = this.$this.vfsList_jy9dkt$_0;
            var tmp$;
            this.local$n = 0;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$n >= this.local$$receiver.size) {
              this.state_0 = 5;
              continue;
            }
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.get_za3lpa$((tmp$ = this.local$n, this.local$n = tmp$ + 1 | 0, tmp$)).get_61zpoe$(this.local$path).stat(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var result = this.result_0;
            if (result.exists) {
              return result.copy_glgbus$(this.$this.file_61zpoe$(this.local$path));
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 2;
            continue;
          case 5:
            return this.$this.createNonExistsStat_4w9ihe$(this.local$path);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MergedVfs.prototype.stat_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$stat_61zpoe$_1(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$MergedVfs$listFlow$lambda(this$MergedVfs_0, closure$path_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 19;
    this.local$this$MergedVfs = this$MergedVfs_0;
    this.local$closure$path = closure$path_0;
    this.local$emitted = void 0;
    this.local$$receiver = void 0;
    this.local$n = void 0;
    this.local$closure$path_0 = void 0;
    this.local$this$MergedVfs_0 = void 0;
    this.local$vfs = void 0;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$runIgnoringExceptions$result = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$MergedVfs$listFlow$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$MergedVfs$listFlow$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$MergedVfs$listFlow$lambda.prototype.constructor = Coroutine$MergedVfs$listFlow$lambda;
  Coroutine$MergedVfs$listFlow$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$emitted = LinkedHashSet_init();
            this.local$$receiver = this.local$this$MergedVfs.vfsList_jy9dkt$_0;
            var tmp$;
            this.local$n = 0;
            this.state_0 = 1;
            continue;
          case 1:
            if (this.local$n >= this.local$$receiver.size) {
              this.state_0 = 20;
              continue;
            }
            this.local$closure$path_0 = this.local$closure$path;
            this.local$this$MergedVfs_0 = this.local$this$MergedVfs;
            this.local$vfs = this.local$$receiver.get_za3lpa$((tmp$ = this.local$n, this.local$n = tmp$ + 1 | 0, tmp$));
            this.state_0 = 2;
            continue;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            this.exceptionState_0 = 5;
            this.state_0 = 4;
            this.result_0 = this.local$vfs.get_61zpoe$(this.local$closure$path_0).list(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.local$runIgnoringExceptions$result = this.result_0;
            this.exceptionState_0 = 19;
            this.state_0 = 7;
            continue;
          case 5:
            this.exceptionState_0 = 19;
            var e_0 = this.exception_0;
            if (Kotlin.isType(e_0, Throwable)) {
              if (false)
                printStackTrace_0(e_0);
              this.local$runIgnoringExceptions$result = null;
              this.exceptionState_0 = 5;
              this.state_0 = 8;
              continue;
            } else {
              throw e_0;
            }

          case 6:
            this.state_0 = 7;
            continue;
          case 7:
            if (!false) {
              this.state_0 = 8;
              continue;
            }
            this.state_0 = 3;
            continue;
          case 8:
            this.local$tmp$ = this.local$runIgnoringExceptions$result;
            if (this.local$tmp$ == null) {
              this.state_0 = 18;
              continue;
            } else {
              this.state_0 = 9;
              continue;
            }

          case 9:
            var items = this.local$tmp$;
            this.exceptionState_0 = 16;
            this.local$tmp$_0 = items.iterator();
            this.state_0 = 10;
            continue;
          case 10:
            this.state_0 = 11;
            this.result_0 = this.local$tmp$_0.hasNext(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 11:
            if (!this.result_0) {
              this.state_0 = 15;
              continue;
            } else {
              this.state_0 = 12;
              continue;
            }

          case 12:
            var v = this.local$tmp$_0.next();
            if (!this.local$emitted.contains_11rb$(get_baseName_0(v))) {
              var element = get_baseName_0(v);
              this.local$emitted.add_11rb$(element);
              this.state_0 = 13;
              this.result_0 = this.local$$receiver_0.emit_11rb$(this.local$this$MergedVfs_0.file_61zpoe$(this.local$closure$path_0 + '/' + get_baseName_0(v)), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 14;
              continue;
            }

          case 13:
            this.state_0 = 14;
            continue;
          case 14:
            this.state_0 = 10;
            continue;
          case 15:
            this.exceptionState_0 = 19;
            this.state_0 = 17;
            continue;
          case 16:
            this.exceptionState_0 = 19;
            var e_1 = this.exception_0;
            if (!Kotlin.isType(e_1, Throwable))
              throw e_1;
            this.state_0 = 17;
            continue;
          case 17:
            if (!false) {
              this.state_0 = 18;
              continue;
            }
            this.state_0 = 2;
            continue;
          case 18:
            this.state_0 = 1;
            continue;
          case 19:
            throw this.exception_0;
          case 20:
            return Unit;
          default:this.state_0 = 19;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 19) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function MergedVfs$listFlow$lambda(this$MergedVfs_0, closure$path_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$MergedVfs$listFlow$lambda(this$MergedVfs_0, closure$path_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  MergedVfs.prototype.listFlow_61zpoe$ = function (path, continuation) {
    return flow(MergedVfs$listFlow$lambda(this, path));
  };
  MergedVfs.prototype.toString = function () {
    return 'MergedVfs(' + this.vfsList_jy9dkt$_0 + ')';
  };
  MergedVfs.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MergedVfs',
    interfaces: [Vfs$Proxy]
  };
  function Comparator$ObjectLiteral(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareByDescending$lambda = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(b), selector(a));
      };
    };
  });
  function MountableVfs$ObjectLiteral(closure$closeMounts) {
    this.closure$closeMounts = closure$closeMounts;
    Vfs$Proxy.call(this);
    this.mounts_0 = ArrayList_init();
  }
  function Coroutine$close_3($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$n = void 0;
  }
  Coroutine$close_3.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_3.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_3.prototype.constructor = Coroutine$close_3;
  Coroutine$close_3.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.closure$closeMounts) {
              this.local$$receiver = this.$this.mounts_0;
              var tmp$;
              this.local$n = 0;
              this.state_0 = 2;
              continue;
            } else {
              this.state_0 = 5;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$n >= this.local$$receiver.size) {
              this.state_0 = 4;
              continue;
            }
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.get_za3lpa$((tmp$ = this.local$n, this.local$n = tmp$ + 1 | 0, tmp$)).second.vfs.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 2;
            continue;
          case 4:
            this.state_0 = 5;
            continue;
          case 5:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  MountableVfs$ObjectLiteral.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_3(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  MountableVfs$ObjectLiteral.prototype.mount_tv2dhr$ = function (folder, file) {
    this.unmountInternal_0(folder);
    var $receiver = this.mounts_0;
    var element = to(normalize(get_pathInfo(folder)), file);
    $receiver.add_11rb$(element);
    this.resort_0();
    return this;
  };
  MountableVfs$ObjectLiteral.prototype.unmount_61zpoe$ = function (folder) {
    this.unmountInternal_0(folder);
    this.resort_0();
    return this;
  };
  function MountableVfs$ObjectLiteral$unmountInternal$lambda(closure$folder) {
    return function (it) {
      return equals(it.first, normalize(get_pathInfo(closure$folder)));
    };
  }
  MountableVfs$ObjectLiteral.prototype.unmountInternal_0 = function (folder) {
    removeAll(this.mounts_0, MountableVfs$ObjectLiteral$unmountInternal$lambda(folder));
  };
  function MountableVfs$ObjectLiteral$resort$lambda(it) {
    return it.first.length;
  }
  MountableVfs$ObjectLiteral.prototype.resort_0 = function () {
    var $receiver = this.mounts_0;
    if ($receiver.size > 1) {
      sortWith($receiver, new Comparator$ObjectLiteral(compareByDescending$lambda(MountableVfs$ObjectLiteral$resort$lambda)));
    }};
  MountableVfs$ObjectLiteral.prototype.access_61zpoe$ = function (path, continuation) {
    var rpath = normalize(get_pathInfo(path));
    var $receiver = this.mounts_0;
    var tmp$;
    var n = 0;
    while (n < $receiver.size) {
      var f = $receiver.get_za3lpa$((tmp$ = n, n = tmp$ + 1 | 0, tmp$));
      var base = f.component1()
      , file = f.component2();
      if (startsWith(rpath, base)) {
        var startIndex = base.length;
        return file.get_61zpoe$(rpath.substring(startIndex));
      }}
    throw new FileNotFoundException(path);
  };
  MountableVfs$ObjectLiteral.prototype.toString = function () {
    return 'MountableVfs';
  };
  MountableVfs$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [Mountable, Vfs$Proxy]
  };
  function Coroutine$MountableVfs(closeMounts_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$mount = void 0;
    this.local$closeMounts = closeMounts_0;
    this.local$callback = callback_0;
  }
  Coroutine$MountableVfs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$MountableVfs.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$MountableVfs.prototype.constructor = Coroutine$MountableVfs;
  Coroutine$MountableVfs.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$closeMounts === void 0)
              this.local$closeMounts = false;
            this.local$mount = new MountableVfs$ObjectLiteral(this.local$closeMounts);
            this.state_0 = 2;
            this.result_0 = this.local$callback(this.local$mount, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$mount.root;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function MountableVfs(closeMounts_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$MountableVfs(closeMounts_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Mountable() {
  }
  Mountable.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Mountable',
    interfaces: []
  };
  function NodeVfs(caseSensitive) {
    if (caseSensitive === void 0)
      caseSensitive = true;
    VfsV2.call(this);
    this.caseSensitive = caseSensitive;
    this.events = new Signal();
    this.rootNode = new NodeVfs$Node(this, '', true);
  }
  function NodeVfs$Node($outer, name, isDirectory, parent) {
    this.$outer = $outer;
    if (isDirectory === void 0)
      isDirectory = false;
    if (parent === void 0)
      parent = null;
    this.name = name;
    this.isDirectory = isDirectory;
    this.nameLC = this.name.toLowerCase();
    this.parent_kg672a$_0 = null;
    this.parent = parent;
    this.data = null;
    this.children = LinkedHashMap_init();
    this.childrenLC = LinkedHashMap_init();
    this.stream = null;
  }
  NodeVfs$Node.prototype.iterator = function () {
    return this.children.values.iterator();
  };
  Object.defineProperty(NodeVfs$Node.prototype, 'parent', {
    get: function () {
      return this.parent_kg672a$_0;
    },
    set: function (value) {
      var tmp$, tmp$_0, tmp$_1, tmp$_2;
      if (this.parent_kg672a$_0 != null) {
        ensureNotNull(this.parent_kg672a$_0).children.remove_11rb$(this.name);
        ensureNotNull(this.parent_kg672a$_0).childrenLC.remove_11rb$(this.nameLC);
      }this.parent_kg672a$_0 = value;
      if ((tmp$_0 = (tmp$ = this.parent_kg672a$_0) != null ? tmp$.children : null) != null) {
        var key = this.name;
        tmp$_0.put_xwzc9p$(key, this);
      }if ((tmp$_2 = (tmp$_1 = this.parent_kg672a$_0) != null ? tmp$_1.childrenLC : null) != null) {
        var key_0 = this.nameLC;
        tmp$_2.put_xwzc9p$(key_0, this);
      }}
  });
  Object.defineProperty(NodeVfs$Node.prototype, 'root', {
    get: function () {
      var tmp$, tmp$_0;
      return (tmp$_0 = (tmp$ = this.parent) != null ? tmp$.root : null) != null ? tmp$_0 : this;
    }
  });
  NodeVfs$Node.prototype.child_61zpoe$ = function (name) {
    switch (name) {
      case '':
      case '.':
        return this;
      case '..':
        return this.parent;
      default:if (this.$outer.caseSensitive) {
          return this.children.get_11rb$(name);
        } else {
          return this.childrenLC.get_11rb$(name.toLowerCase());
        }

    }
  };
  NodeVfs$Node.prototype.createChild_ivxn3r$ = function (name, isDirectory) {
    if (isDirectory === void 0)
      isDirectory = false;
    return new NodeVfs$Node(this.$outer, name, isDirectory, this);
  };
  NodeVfs$Node.prototype.get_61zpoe$ = function (path) {
    return this.access_ivxn3r$(path, false);
  };
  NodeVfs$Node.prototype.getOrNull_61zpoe$ = function (path) {
    try {
      return this.access_ivxn3r$(path, false);
    } catch (e) {
      if (Kotlin.isType(e, FileNotFoundException)) {
        return null;
      } else
        throw e;
    }
  };
  NodeVfs$Node.prototype.access_ivxn3r$ = function (path, createFolders) {
    if (createFolders === void 0)
      createFolders = false;
    var node = {v: startsWith_0(path, 47) ? this.root : this};
    var $receiver = parts(get_pathInfo(path));
    var tmp$;
    var n = 0;
    while (n < $receiver.size) {
      var part = $receiver.get_za3lpa$((tmp$ = n, n = tmp$ + 1 | 0, tmp$));
      var child = node.v.child_61zpoe$(part);
      if (child == null && createFolders)
        child = node.v.createChild_ivxn3r$(part, true);
      if (child == null) {
        throw new FileNotFoundException("Can't find '" + part + "' in " + path);
      }node.v = child;
    }
    return node.v;
  };
  NodeVfs$Node.prototype.mkdir_61zpoe$ = function (name) {
    if (this.child_61zpoe$(name) != null) {
      return false;
    } else {
      this.createChild_ivxn3r$(name, true);
      return true;
    }
  };
  NodeVfs$Node.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Node',
    interfaces: [Iterable]
  };
  function NodeVfs$createStream$ObjectLiteral(closure$s, this$NodeVfs, closure$vfsFile) {
    this.closure$s = closure$s;
    this.this$NodeVfs = this$NodeVfs;
    this.closure$vfsFile = closure$vfsFile;
    AsyncStreamBase.call(this);
  }
  NodeVfs$createStream$ObjectLiteral.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    return this.closure$s.read_4m9kcn$(position, buffer, offset, len);
  };
  NodeVfs$createStream$ObjectLiteral.prototype.write_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    this.closure$s.write_4m9kcn$(position, buffer, offset, len);
    this.this$NodeVfs.events.invoke_11rb$(new Vfs$FileEvent(Vfs$FileEvent$Kind$MODIFIED_getInstance(), this.closure$vfsFile));
  };
  NodeVfs$createStream$ObjectLiteral.prototype.setLength_s8cxhz$ = function (value, continuation) {
    this.closure$s.length = value;
    this.this$NodeVfs.events.invoke_11rb$(new Vfs$FileEvent(Vfs$FileEvent$Kind$MODIFIED_getInstance(), this.closure$vfsFile));
  };
  NodeVfs$createStream$ObjectLiteral.prototype.getLength = function (continuation) {
    return this.closure$s.length;
  };
  NodeVfs$createStream$ObjectLiteral.prototype.close = function (continuation) {
    return this.closure$s.close();
  };
  NodeVfs$createStream$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncStreamBase]
  };
  NodeVfs.prototype.createStream_euh1mn$_0 = function (s, vfsFile) {
    return toAsyncStream_0(new NodeVfs$createStream$ObjectLiteral(s, this, vfsFile));
  };
  NodeVfs.prototype.open_vb0dls$ = function (path, mode, continuation) {
    var tmp$, tmp$_0;
    var pathInfo = new PathInfo(path);
    var folder = this.rootNode.access_ivxn3r$(get_folder(pathInfo));
    var node = folder.child_61zpoe$(get_baseName(pathInfo));
    var vfsFile = this.get_61zpoe$(path);
    if (node == null && mode.createIfNotExists) {
      node = folder.createChild_ivxn3r$(get_baseName(pathInfo), false);
      node.stream = this.createStream_euh1mn$_0(MemorySyncStream().base, vfsFile);
    } else if (mode.truncate) {
      node != null ? (node.stream = this.createStream_euh1mn$_0(MemorySyncStream().base, vfsFile)) : null;
    }tmp$_0 = (tmp$ = node != null ? node.stream : null) != null ? tmp$.duplicate() : null;
    if (tmp$_0 == null) {
      throw new FileNotFoundException(path);
    }return tmp$_0;
  };
  function Coroutine$stat_61zpoe$_2($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.$this = $this;
    this.local$tmp$_1 = void 0;
    this.local$node = void 0;
    this.local$path = path_0;
  }
  Coroutine$stat_61zpoe$_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$stat_61zpoe$_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$stat_61zpoe$_2.prototype.constructor = Coroutine$stat_61zpoe$_2;
  Coroutine$stat_61zpoe$_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            this.exceptionState_0 = 3;
            this.local$node = this.$this.rootNode.access_ivxn3r$(this.local$path);
            if ((tmp$ = this.local$node.stream) != null) {
              this.state_0 = 1;
              this.result_0 = tmp$.getLength(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.result_0 = null;
              this.state_0 = 2;
              continue;
            }

          case 1:
            this.state_0 = 2;
            continue;
          case 2:
            var length = (tmp$_0 = this.result_0) != null ? tmp$_0 : L0;
            this.local$tmp$_1 = this.$this.createExistsStat_14z8ds$(this.local$path, this.local$node.isDirectory, length);
            this.exceptionState_0 = 5;
            this.state_0 = 4;
            continue;
          case 3:
            this.exceptionState_0 = 5;
            var e = this.exception_0;
            if (Kotlin.isType(e, Throwable)) {
              this.local$tmp$_1 = this.$this.createNonExistsStat_4w9ihe$(this.local$path);
            } else
              throw e;
            this.state_0 = 4;
            continue;
          case 4:
            return this.local$tmp$_1;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeVfs.prototype.stat_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$stat_61zpoe$_2(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$NodeVfs$listFlow$lambda(this$NodeVfs_0, closure$path_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$NodeVfs = this$NodeVfs_0;
    this.local$closure$path = closure$path_0;
    this.local$tmp$ = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$NodeVfs$listFlow$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$NodeVfs$listFlow$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$NodeVfs$listFlow$lambda.prototype.constructor = Coroutine$NodeVfs$listFlow$lambda;
  Coroutine$NodeVfs$listFlow$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var node = this.local$this$NodeVfs.rootNode.get_61zpoe$(this.local$closure$path);
            this.local$tmp$ = node.children.entries.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 4;
              continue;
            }
            var tmp$ = this.local$tmp$.next();
            var name = tmp$.key;
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.emit_11rb$(this.local$this$NodeVfs.file_61zpoe$(this.local$closure$path + '/' + name), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 2;
            continue;
          case 4:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function NodeVfs$listFlow$lambda(this$NodeVfs_0, closure$path_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$NodeVfs$listFlow$lambda(this$NodeVfs_0, closure$path_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  NodeVfs.prototype.listFlow_61zpoe$ = function (path, continuation) {
    return flow(NodeVfs$listFlow$lambda(this, path));
  };
  NodeVfs.prototype.delete_61zpoe$ = function (path, continuation) {
    var tmp$;
    var node = this.rootNode.getOrNull_61zpoe$(path);
    if (node != null) {
      node.parent = null;
      this.events.invoke_11rb$(new Vfs$FileEvent(Vfs$FileEvent$Kind$DELETED_getInstance(), this.get_61zpoe$(path)));
      tmp$ = true;
    } else {
      tmp$ = false;
    }
    return tmp$;
  };
  NodeVfs.prototype.mkdir_z6b3ik$ = function (path, attributes, continuation) {
    var pathInfo = new PathInfo(path);
    var out = this.rootNode.access_ivxn3r$(get_folder(pathInfo)).mkdir_61zpoe$(get_baseName(pathInfo));
    this.events.invoke_11rb$(new Vfs$FileEvent(Vfs$FileEvent$Kind$CREATED_getInstance(), this.get_61zpoe$(path)));
    return out;
  };
  NodeVfs.prototype.rename_puj7f4$ = function (src, dst, continuation) {
    if (equals(src, dst))
      return false;
    var dstInfo = new PathInfo(dst);
    var srcNode = this.rootNode.access_ivxn3r$(src);
    var dstFolder = this.rootNode.access_ivxn3r$(get_folder(dstInfo));
    srcNode.parent = dstFolder;
    this.events.invoke_11rb$(new Vfs$FileEvent(Vfs$FileEvent$Kind$RENAMED_getInstance(), this.get_61zpoe$(src), this.get_61zpoe$(dst)));
    return true;
  };
  function NodeVfs$watch$lambda(closure$handler) {
    return function (it) {
      closure$handler(it);
      return Unit;
    };
  }
  NodeVfs.prototype.watch_6lbnta$ = function (path, handler, continuation) {
    return this.events.invoke_qlkmfe$(NodeVfs$watch$lambda(handler));
  };
  NodeVfs.prototype.toString = function () {
    return 'NodeVfs';
  };
  NodeVfs.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeVfs',
    interfaces: [VfsV2]
  };
  function UniversalVfs() {
    UniversalVfs_instance = this;
  }
  UniversalVfs.prototype.invoke_rjr2vy$ = function (uri, providers, base) {
    if (base === void 0)
      base = null;
    var tmp$;
    if (URL$Companion_getInstance().isAbsolute_61zpoe$(uri)) {
      var uriUri = URL$Companion_getInstance().invoke_61zpoe$(uri);
      var $receiver = providers.providers;
      var key = uriUri.scheme;
      var tmp$_0;
      var builder = (Kotlin.isType(tmp$_0 = $receiver, Map) ? tmp$_0 : throwCCE()).get_11rb$(key);
      if (builder != null) {
        tmp$ = builder.provider(uriUri);
      } else {
        tmp$ = invalidOp("Unsupported scheme '" + toString(uriUri.scheme) + "'");
      }
    } else if (base != null)
      tmp$ = base.get_61zpoe$(uri);
    else
      tmp$ = get_localCurrentDirVfs().get_61zpoe$(uri);
    return tmp$;
  };
  UniversalVfs.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'UniversalVfs',
    interfaces: []
  };
  var UniversalVfs_instance = null;
  function UniversalVfs_getInstance() {
    if (UniversalVfs_instance === null) {
      new UniversalVfs();
    }return UniversalVfs_instance;
  }
  function UniSchema(name, provider) {
    this.name = name;
    this.provider = provider;
  }
  UniSchema.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniSchema',
    interfaces: []
  };
  function UniSchemaProviders(providers) {
    this.providers = providers;
  }
  UniSchemaProviders.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UniSchemaProviders',
    interfaces: []
  };
  function UniSchemaProviders_init(providers, $this) {
    $this = $this || Object.create(UniSchemaProviders.prototype);
    var capacity = coerceAtLeast(mapCapacity(collectionSizeOrDefault(providers, 10)), 16);
    var destination = LinkedHashMap_init_0(capacity);
    var tmp$;
    tmp$ = providers.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      destination.put_xwzc9p$(element.name, element);
    }
    UniSchemaProviders.call($this, destination);
    return $this;
  }
  function UniSchemaProviders_init_0(providers, $this) {
    $this = $this || Object.create(UniSchemaProviders.prototype);
    var capacity = coerceAtLeast(mapCapacity(providers.length), 16);
    var destination = LinkedHashMap_init_0(capacity);
    var tmp$;
    for (tmp$ = 0; tmp$ !== providers.length; ++tmp$) {
      var element = providers[tmp$];
      destination.put_xwzc9p$(element.name, element);
    }
    UniSchemaProviders.call($this, destination);
    return $this;
  }
  function defaultUniSchema$lambda(it) {
    return UrlVfs_0(it);
  }
  function defaultUniSchema$lambda_0(it) {
    return UrlVfs_0(it);
  }
  function defaultUniSchema$lambda_1(it) {
    return get_rootLocalVfs().get_61zpoe$(it.path);
  }
  var defaultUniSchema;
  function registerUniSchema(schema) {
    defaultUniSchema = plus_4(defaultUniSchema, schema);
  }
  var registerUniSchemaTemporarily = defineInlineFunction('korio-root-korio.com.soywiz.korio.file.std.registerUniSchemaTemporarily_9sb2qk$', wrapFunction(function () {
    var std = _.com.soywiz.korio.file.std;
    var plus = _.com.soywiz.korio.file.std.plus_lkui5v$;
    var minus = _.com.soywiz.korio.file.std.minus_lkui5v$;
    return function (schema, callback) {
      var old = std.defaultUniSchema;
      std.defaultUniSchema = plus(std.defaultUniSchema, schema);
      try {
        return callback();
      }finally {
        std.defaultUniSchema = minus(std.defaultUniSchema, schema);
      }
    };
  }));
  function plus_3($receiver, other) {
    return new UniSchemaProviders(plus_1($receiver.providers, other.providers));
  }
  function plus_4($receiver, other) {
    return new UniSchemaProviders(plus_1($receiver.providers, mapOf(to(other.name, other))));
  }
  function minus_1($receiver, other) {
    return new UniSchemaProviders(minus($receiver.providers, other.providers.keys));
  }
  function minus_2($receiver, other) {
    return new UniSchemaProviders(minus_0($receiver.providers, other.name));
  }
  function get_uniVfs($receiver) {
    return UniversalVfs_getInstance().invoke_rjr2vy$($receiver, defaultUniSchema);
  }
  function uniVfs($receiver, providers, base) {
    if (base === void 0)
      base = null;
    return UniversalVfs_getInstance().invoke_rjr2vy$($receiver, providers, base);
  }
  function UrlVfs(url, client) {
    if (client === void 0)
      client = createHttpClient();
    return UrlVfs_0(URL$Companion_getInstance().invoke_61zpoe$(url), client);
  }
  function UrlVfs_0(url, client) {
    if (client === void 0)
      client = createHttpClient();
    return (new UrlVfs_1(url.copy_xduyly$(void 0, void 0, void 0, void 0, '', null).fullUrl, Unit, client)).get_61zpoe$(url.path);
  }
  function UrlVfsJailed(url, client) {
    if (client === void 0)
      client = createHttpClient();
    return UrlVfsJailed_0(URL$Companion_getInstance().invoke_61zpoe$(url), client);
  }
  function UrlVfsJailed_0(url, client) {
    if (client === void 0)
      client = createHttpClient();
    return (new UrlVfs_1(url.fullUrl, Unit, client)).get_61zpoe$(url.path);
  }
  function UrlVfs_1(url, dummy, client) {
    if (client === void 0)
      client = createHttpClient();
    Vfs.call(this);
    this.url = url;
    this.dummy = dummy;
    this.client = client;
    this.absolutePath_lqyott$_0 = this.url;
  }
  Object.defineProperty(UrlVfs_1.prototype, 'absolutePath', {
    get: function () {
      return this.absolutePath_lqyott$_0;
    }
  });
  UrlVfs_1.prototype.getFullUrl_61zpoe$ = function (path) {
    var result = trim(this.url, Kotlin.charArrayOf(47)) + String.fromCharCode(toBoxedChar(47)) + trim(path, Kotlin.charArrayOf(47));
    return result;
  };
  function UrlVfs$open$ObjectLiteral(this$UrlVfs, closure$fullUrl, closure$stat) {
    this.this$UrlVfs = this$UrlVfs;
    this.closure$fullUrl = closure$fullUrl;
    this.closure$stat = closure$stat;
    AsyncStreamBase.call(this);
  }
  function Coroutine$read_4m9kcn$($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$s = void 0;
    this.local$coffset = void 0;
    this.local$pending = void 0;
    this.local$totalRead = void 0;
    this.local$read = void 0;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_4m9kcn$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_4m9kcn$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_4m9kcn$.prototype.constructor = Coroutine$read_4m9kcn$;
  Coroutine$read_4m9kcn$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$len === 0) {
              return 0;
            } else {
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.this$UrlVfs.client.request_v6tn8p$(Http$Method$Companion_getInstance().GET, this.$this.closure$fullUrl, Http$Http$Headers_init_0(linkedMapOf([to('range', 'bytes=' + this.local$position.toString() + '-' + this.local$position.add(Kotlin.Long.fromInt(this.local$len)).subtract(Kotlin.Long.fromInt(1)).toString())])), void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var res = this.result_0;
            this.local$s = res.content;
            this.local$coffset = this.local$offset;
            this.local$pending = this.local$len;
            this.local$totalRead = 0;
            this.state_0 = 4;
            continue;
          case 4:
            if (this.local$pending <= 0) {
              this.state_0 = 8;
              continue;
            }
            this.state_0 = 5;
            this.result_0 = this.local$s.read_mj6st8$(this.local$buffer, this.local$coffset, this.local$pending, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.local$read = this.result_0;
            if (this.local$read < 0 && this.local$totalRead === 0) {
              return this.local$read;
            } else {
              this.state_0 = 6;
              continue;
            }

          case 6:
            if (this.local$read <= 0) {
              this.state_0 = 8;
              continue;
            } else {
              this.state_0 = 7;
              continue;
            }

          case 7:
            this.local$pending = this.local$pending - this.local$read | 0;
            this.local$totalRead = this.local$totalRead + this.local$read | 0;
            this.local$coffset = this.local$coffset + this.local$read | 0;
            this.state_0 = 4;
            continue;
          case 8:
            return this.local$totalRead;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  UrlVfs$open$ObjectLiteral.prototype.read_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_4m9kcn$(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  UrlVfs$open$ObjectLiteral.prototype.getLength = function (continuation) {
    return this.closure$stat.size;
  };
  UrlVfs$open$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncStreamBase]
  };
  function Coroutine$open_vb0dls$_2($this, path_0, mode_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.$this = $this;
    this.local$fullUrl = void 0;
    this.local$path = path_0;
  }
  Coroutine$open_vb0dls$_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$open_vb0dls$_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$open_vb0dls$_2.prototype.constructor = Coroutine$open_vb0dls$_2;
  Coroutine$open_vb0dls$_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            this.exceptionState_0 = 4;
            this.local$fullUrl = this.$this.getFullUrl_61zpoe$(this.local$path);
            if (startsWith(this.local$fullUrl, 'file:')) {
              this.state_0 = 1;
              this.result_0 = this.$this.client.readBytes_2y0c3t$(this.local$fullUrl, void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 2;
              continue;
            }

          case 1:
            return openAsync(this.result_0);
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.stat_61zpoe$(this.local$path, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var stat = this.result_0;
            var response = Kotlin.isType(tmp$ = stat.extraInfo, HttpClient$Response) ? tmp$ : null;
            if (!stat.exists) {
              throw new FileNotFoundException('Unexistant ' + this.local$fullUrl + ' : ' + toString(response));
            }
            return buffered(toAsyncStream_0(new UrlVfs$open$ObjectLiteral(this.$this, this.local$fullUrl, stat)));
          case 4:
            this.exceptionState_0 = 6;
            var e = this.exception_0;
            if (Kotlin.isType(e, RuntimeException)) {
              throw new FileNotFoundException((tmp$_0 = e.message) != null ? tmp$_0 : 'error');
            } else
              throw e;
          case 5:
            return;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  UrlVfs_1.prototype.open_vb0dls$ = function (path_0, mode_0, continuation_0, suspended) {
    var instance = new Coroutine$open_vb0dls$_2(this, path_0, mode_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$openInputStream_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$openInputStream_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openInputStream_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openInputStream_61zpoe$.prototype.constructor = Coroutine$openInputStream_61zpoe$;
  Coroutine$openInputStream_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.client.request_v6tn8p$(Http$Method$Companion_getInstance().GET, this.$this.getFullUrl_61zpoe$(this.local$path), void 0, void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.content;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  UrlVfs_1.prototype.openInputStream_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$openInputStream_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readRange_fmne7s$_1($this, path_0, range_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$range = range_0;
  }
  Coroutine$readRange_fmne7s$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readRange_fmne7s$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readRange_fmne7s$_1.prototype.constructor = Coroutine$readRange_fmne7s$_1;
  Coroutine$readRange_fmne7s$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.client.requestAsBytes_v6tn8p$(Http$Method$Companion_getInstance().GET, this.$this.getFullUrl_61zpoe$(this.local$path), Http$Http$Headers_init_0((this.local$range != null ? this.local$range.equals(LONG_ZERO_TO_MAX_RANGE) : null) ? LinkedHashMap_init() : linkedHashMapOf([to('range', 'bytes=' + this.local$range.start.toString() + '-' + this.local$range.endInclusive.toString())])), void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.content;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  UrlVfs_1.prototype.readRange_fmne7s$ = function (path_0, range_0, continuation_0, suspended) {
    var instance = new Coroutine$readRange_fmne7s$_1(this, path_0, range_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function UrlVfs$HttpHeaders(headers) {
    this.headers = headers;
  }
  UrlVfs$HttpHeaders.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HttpHeaders',
    interfaces: [Vfs$Attribute]
  };
  function Coroutine$put_18ksq8$$default_1($this, path_0, content_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$mimeType = void 0;
    this.local$hheaders = void 0;
    this.local$path = path_0;
    this.local$content = content_0;
    this.local$attributes = attributes_0;
  }
  Coroutine$put_18ksq8$$default_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$put_18ksq8$$default_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$put_18ksq8$$default_1.prototype.constructor = Coroutine$put_18ksq8$$default_1;
  Coroutine$put_18ksq8$$default_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            if (!Kotlin.isType(this.local$content, AsyncStream))
              invalidOp('UrlVfs.put requires content to be AsyncStream');
            var tmp$_1;
            var firstOrNull$result;
            firstOrNull$break: do {
              var tmp$_2;
              tmp$_2 = this.local$attributes.iterator();
              while (tmp$_2.hasNext()) {
                var element = tmp$_2.next();
                if (Kotlin.isType(element, UrlVfs$HttpHeaders)) {
                  firstOrNull$result = element;
                  break firstOrNull$break;
                }}
              firstOrNull$result = null;
            }
             while (false);
            var headers = (tmp$_1 = firstOrNull$result) == null || Kotlin.isType(tmp$_1, UrlVfs$HttpHeaders) ? tmp$_1 : throwCCE();
            var tmp$_3;
            var firstOrNull$result_0;
            firstOrNull$break: do {
              var tmp$_4;
              tmp$_4 = this.local$attributes.iterator();
              while (tmp$_4.hasNext()) {
                var element_0 = tmp$_4.next();
                if (Kotlin.isType(element_0, MimeType)) {
                  firstOrNull$result_0 = element_0;
                  break firstOrNull$break;
                }}
              firstOrNull$result_0 = null;
            }
             while (false);
            this.local$mimeType = (tmp$ = (tmp$_3 = firstOrNull$result_0) == null || Kotlin.isType(tmp$_3, MimeType) ? tmp$_3 : throwCCE()) != null ? tmp$ : MimeType$Companion_getInstance().APPLICATION_JSON;
            this.local$hheaders = (tmp$_0 = headers != null ? headers.headers : null) != null ? tmp$_0 : Http$Http$Headers_init([]);
            this.state_0 = 2;
            this.result_0 = this.local$content.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var contentLength = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.$this.client.request_v6tn8p$(Http$Method$Companion_getInstance().PUT, this.$this.getFullUrl_61zpoe$(this.local$path), this.local$hheaders.withReplaceHeaders_9ih0sy$([to(Http$Headers$Companion_getInstance().ContentLength, contentLength.toString()), to(Http$Headers$Companion_getInstance().ContentType, this.local$mimeType.mime)]), this.local$content, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$content.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  UrlVfs_1.prototype.put_18ksq8$$default = function (path_0, content_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$put_18ksq8$$default_1(this, path_0, content_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$stat_61zpoe$_3($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.$this = $this;
    this.local$tmp$_1 = void 0;
    this.local$path = path_0;
  }
  Coroutine$stat_61zpoe$_3.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$stat_61zpoe$_3.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$stat_61zpoe$_3.prototype.constructor = Coroutine$stat_61zpoe$_3;
  Coroutine$stat_61zpoe$_3.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            var fullUrl = this.$this.getFullUrl_61zpoe$(this.local$path);
            if (startsWith(fullUrl, 'file:')) {
              this.exceptionState_0 = 3;
              this.state_0 = 2;
              this.result_0 = this.$this.client.readBytes_2y0c3t$(fullUrl, void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 1;
              this.result_0 = this.$this.client.request_v6tn8p$(Http$Method$Companion_getInstance().HEAD, fullUrl, void 0, void 0, void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            }

          case 1:
            var result = this.result_0;
            if (result.success) {
              this.local$tmp$_1 = this.$this.createExistsStat_14z8ds$(this.local$path, false, (tmp$_0 = (tmp$ = result.headers.get_61zpoe$(Http$Headers$Companion_getInstance().ContentLength)) != null ? toLongOrNull_0(tmp$) : null) != null ? tmp$_0 : L0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, result);
            } else {
              this.local$tmp$_1 = this.$this.createNonExistsStat_4w9ihe$(this.local$path, result);
            }

            this.state_0 = 5;
            continue;
          case 2:
            var size = Kotlin.Long.fromInt(this.result_0.length);
            this.local$tmp$_1 = this.$this.createExistsStat_14z8ds$(this.local$path, false, size, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, null);
            this.exceptionState_0 = 6;
            this.state_0 = 4;
            continue;
          case 3:
            this.exceptionState_0 = 6;
            var e = this.exception_0;
            if (Kotlin.isType(e, Throwable)) {
              printStackTrace_0(e);
              this.local$tmp$_1 = this.$this.createNonExistsStat_4w9ihe$(this.local$path);
            } else
              throw e;
            this.state_0 = 4;
            continue;
          case 4:
            this.state_0 = 5;
            continue;
          case 5:
            return this.local$tmp$_1;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  UrlVfs_1.prototype.stat_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$stat_61zpoe$_3(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  UrlVfs_1.prototype.toString = function () {
    return 'UrlVfs';
  };
  UrlVfs_1.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UrlVfs',
    interfaces: [Vfs]
  };
  function ZipVfs$Impl(closure$closeStream, closure$s, closure$zipFile) {
    this.closure$closeStream = closure$closeStream;
    this.closure$s = closure$s;
    this.closure$zipFile = closure$zipFile;
    VfsV2.call(this);
    this.vfs = this;
  }
  function Coroutine$close_4($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close_4.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_4.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_4.prototype.constructor = Coroutine$close_4;
  Coroutine$close_4.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.closure$closeStream) {
              this.state_0 = 2;
              this.result_0 = this.$this.closure$s.close(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZipVfs$Impl.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_4(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$open_vb0dls$_3($this, path_0, mode_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$entry = void 0;
    this.local$base = void 0;
    this.local$block$result = void 0;
    this.local$crc = void 0;
    this.local$fileNameLength = void 0;
    this.local$extraLength = void 0;
    this.local$method = void 0;
    this.local$path = path_0;
    this.local$mode = mode_0;
  }
  Coroutine$open_vb0dls$_3.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$open_vb0dls$_3.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$open_vb0dls$_3.prototype.constructor = Coroutine$open_vb0dls$_3;
  Coroutine$open_vb0dls$_3.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            tmp$ = this.$this.closure$zipFile.files.get_11rb$(this.$this.closure$zipFile.normalizeName_61zpoe$(this.local$path));
            if (tmp$ == null) {
              throw new FileNotFoundException("Path: '" + this.local$path + "'");
            }
            this.local$entry = tmp$;
            if (this.local$entry.isDirectory)
              throw new IOException("Can't open a zip directory for " + this.local$mode);
            this.state_0 = 2;
            this.result_0 = sliceStart(this.local$entry.headerEntry, void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$base = this.result_0;
            var tmp$_0;
            this.state_0 = 3;
            this.result_0 = this.local$base.getAvailable(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            if (this.result_0.toNumber() < 16)
              throw IllegalStateException_init('Chunk to small to be a ZIP chunk');
            this.state_0 = 4;
            this.result_0 = readS32BE_0(this.local$base, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            if (this.result_0 !== 1347093252)
              throw IllegalStateException_init('Not a zip file (readS32BE() != 0x504B_0304)');
            this.state_0 = 5;
            this.result_0 = readU16LE_0(this.local$base, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            var version = this.result_0;
            this.state_0 = 6;
            this.result_0 = readU16LE_0(this.local$base, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            var flags = this.result_0;
            this.state_0 = 7;
            this.result_0 = readU16LE_0(this.local$base, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 7:
            var compressionType = this.result_0;
            this.state_0 = 8;
            this.result_0 = readU16LE_0(this.local$base, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 8:
            var fileTime = this.result_0;
            this.state_0 = 9;
            this.result_0 = readU16LE_0(this.local$base, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 9:
            var fileDate = this.result_0;
            this.state_0 = 10;
            this.result_0 = readS32LE_0(this.local$base, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 10:
            this.local$crc = this.result_0;
            this.state_0 = 11;
            this.result_0 = readS32LE_0(this.local$base, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 11:
            var compressedSize = this.result_0;
            this.state_0 = 12;
            this.result_0 = readS32LE_0(this.local$base, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 12:
            var uncompressedSize = this.result_0;
            this.state_0 = 13;
            this.result_0 = readU16LE_0(this.local$base, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 13:
            this.local$fileNameLength = this.result_0;
            this.state_0 = 14;
            this.result_0 = readU16LE_0(this.local$base, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 14:
            this.local$extraLength = this.result_0;
            this.state_0 = 15;
            this.result_0 = readString_1(this.local$base, this.local$fileNameLength, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 15:
            var name = this.result_0;
            this.state_0 = 16;
            this.result_0 = readBytesExact(this.local$base, this.local$extraLength, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 16:
            var extra = this.result_0;
            this.state_0 = 17;
            this.result_0 = readSlice(this.local$base, this.local$entry.compressedSize, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 17:
            var compressedData = this.result_0;
            if (this.local$entry.compressionMethod === 0) {
              this.local$block$result = compressedData;
              this.state_0 = 19;
              continue;
            } else {
              if (this.local$entry.compressionMethod === 8)
                tmp$_0 = get_Deflate();
              else {
                throw new NotImplementedError_init('An operation is not implemented: ' + ('Not implemented zip method ' + this.local$entry.compressionMethod));
              }
              this.local$method = tmp$_0;
              this.state_0 = 18;
              this.result_0 = readAll(compressedData, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            }

          case 18:
            var compressed = uncompress_1(this.result_0, this.local$method);
            if (this.local$crc !== 0) {
              var computedCrc = compute(CRC32_getInstance(), compressed);
              if (computedCrc !== this.local$crc) {
                throw IllegalStateException_init(("Uncompressed file crc doesn't match: expected=" + get_hex_0(this.local$crc) + ', actual=' + get_hex_0(computedCrc)).toString());
              }}
            this.local$block$result = openAsync(compressed);
            this.state_0 = 19;
            continue;
          case 19:
            return this.local$block$result;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  ZipVfs$Impl.prototype.open_vb0dls$ = function (path_0, mode_0, continuation_0, suspended) {
    var instance = new Coroutine$open_vb0dls$_3(this, path_0, mode_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  ZipVfs$Impl.prototype.stat_61zpoe$ = function (path, continuation) {
    return toStat(this.closure$zipFile.files.get_11rb$(this.closure$zipFile.normalizeName_61zpoe$(path)), this.get_61zpoe$(path));
  };
  function Coroutine$ZipVfs$Impl$listFlow$lambda(closure$zipFile_0, closure$path_0, this$Impl_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$zipFile = closure$zipFile_0;
    this.local$closure$path = closure$path_0;
    this.local$this$Impl = this$Impl_0;
    this.local$tmp$_0 = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$ZipVfs$Impl$listFlow$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ZipVfs$Impl$listFlow$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ZipVfs$Impl$listFlow$lambda.prototype.constructor = Coroutine$ZipVfs$Impl$listFlow$lambda;
  Coroutine$ZipVfs$Impl$listFlow$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.local$tmp$_0 = ((tmp$ = this.local$closure$zipFile.filesPerFolder.get_11rb$(this.local$closure$zipFile.normalizeName_61zpoe$(this.local$closure$path))) != null ? tmp$ : LinkedHashMap_init()).entries.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$tmp$_0.hasNext()) {
              this.state_0 = 4;
              continue;
            }
            var tmp$_0 = this.local$tmp$_0.next();
            var entry = tmp$_0.value;
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.emit_11rb$(this.local$this$Impl.vfs.get_61zpoe$(entry.path), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 2;
            continue;
          case 4:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function ZipVfs$Impl$listFlow$lambda(closure$zipFile_0, closure$path_0, this$Impl_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$ZipVfs$Impl$listFlow$lambda(closure$zipFile_0, closure$path_0, this$Impl_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  ZipVfs$Impl.prototype.listFlow_61zpoe$ = function (path, continuation) {
    return flow(ZipVfs$Impl$listFlow$lambda(this.closure$zipFile, path, this));
  };
  ZipVfs$Impl.prototype.toString = function () {
    return 'ZipVfs(' + this.closure$zipFile + ')';
  };
  ZipVfs$Impl.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Impl',
    interfaces: [VfsV2]
  };
  function Coroutine$ZipVfs(s_0, zipFile_0, caseSensitive_0, closeStream_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$s = s_0;
    this.local$zipFile = zipFile_0;
    this.local$caseSensitive = caseSensitive_0;
    this.local$closeStream = closeStream_0;
  }
  Coroutine$ZipVfs.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$ZipVfs.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$ZipVfs.prototype.constructor = Coroutine$ZipVfs;
  Coroutine$ZipVfs.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$zipFile === void 0)
              this.local$zipFile = null;
            if (this.local$caseSensitive === void 0)
              this.local$caseSensitive = true;
            if (this.local$closeStream === void 0)
              this.local$closeStream = false;
            this.state_0 = 2;
            this.result_0 = ZipFile$Companion_getInstance().invoke_wgmqyx$(this.local$s, this.local$caseSensitive, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var zipFile = this.result_0;
            return (new ZipVfs$Impl(this.local$closeStream, this.local$s, zipFile)).root;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function ZipVfs(s_0, zipFile_0, caseSensitive_0, closeStream_0, continuation_0, suspended) {
    var instance = new Coroutine$ZipVfs(s_0, zipFile_0, caseSensitive_0, closeStream_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$openAsZip($receiver_0, caseSensitive_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$caseSensitive = caseSensitive_0;
  }
  Coroutine$openAsZip.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openAsZip.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openAsZip.prototype.constructor = Coroutine$openAsZip;
  Coroutine$openAsZip.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$caseSensitive === void 0)
              this.local$caseSensitive = true;
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.open_tiaunm$(VfsOpenMode$READ_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = ZipVfs(this.result_0, this.local$$receiver, this.local$caseSensitive, true, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function openAsZip($receiver_0, caseSensitive_0, continuation_0, suspended) {
    var instance = new Coroutine$openAsZip($receiver_0, caseSensitive_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function openAsZip_0($receiver, caseSensitive, continuation) {
    if (caseSensitive === void 0)
      caseSensitive = true;
    return ZipVfs($receiver, void 0, caseSensitive, false, continuation);
  }
  function Coroutine$openAsZip_0($receiver_0, caseSensitive_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 8;
    this.local$file = void 0;
    this.local$$receiver = $receiver_0;
    this.local$caseSensitive = caseSensitive_0;
    this.local$callback = callback_0;
  }
  Coroutine$openAsZip_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openAsZip_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openAsZip_0.prototype.constructor = Coroutine$openAsZip_0;
  Coroutine$openAsZip_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$caseSensitive === void 0)
              this.local$caseSensitive = true;
            this.state_0 = 1;
            this.result_0 = openAsZip(this.local$$receiver, this.local$caseSensitive, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.local$file = this.result_0;
            this.exceptionState_0 = 5;
            this.state_0 = 2;
            this.result_0 = this.local$callback(this.local$file, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            this.exceptionState_0 = 8;
            this.finallyPath_0 = [3];
            this.state_0 = 6;
            this.$returnValue = this.result_0;
            continue;
          case 3:
            return this.$returnValue;
          case 4:
            return;
          case 5:
            this.finallyPath_0 = [8];
            this.state_0 = 6;
            continue;
          case 6:
            this.exceptionState_0 = 8;
            this.state_0 = 7;
            this.result_0 = this.local$file.vfs.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 7:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 8:
            throw this.exception_0;
          default:this.state_0 = 8;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 8) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function openAsZip_1($receiver_0, caseSensitive_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$openAsZip_0($receiver_0, caseSensitive_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$openAsZip_1($receiver_0, caseSensitive_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.local$$receiver = $receiver_0;
    this.local$caseSensitive = caseSensitive_0;
    this.local$callback = callback_0;
  }
  Coroutine$openAsZip_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$openAsZip_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$openAsZip_1.prototype.constructor = Coroutine$openAsZip_1;
  Coroutine$openAsZip_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$caseSensitive === void 0)
              this.local$caseSensitive = true;
            this.state_0 = 1;
            this.result_0 = openAsZip_0(this.local$$receiver, this.local$caseSensitive, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var file = this.result_0;
            this.exceptionState_0 = 5;
            this.state_0 = 2;
            this.result_0 = this.local$callback(file, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            this.exceptionState_0 = 7;
            this.finallyPath_0 = [3];
            this.state_0 = 6;
            this.$returnValue = this.result_0;
            continue;
          case 3:
            return this.$returnValue;
          case 4:
            return;
          case 5:
            this.finallyPath_0 = [7];
            this.state_0 = 6;
            continue;
          case 6:
            this.exceptionState_0 = 7;
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 7:
            throw this.exception_0;
          default:this.state_0 = 7;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 7) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function openAsZip_2($receiver_0, caseSensitive_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$openAsZip_1($receiver_0, caseSensitive_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function createZipFromTree($receiver, continuation) {
    return ZipBuilder$Companion_getInstance().createZipFromTree_3ekr7n$($receiver, continuation);
  }
  function createZipFromTreeTo($receiver, s, continuation) {
    return ZipBuilder$Companion_getInstance().createZipFromTreeTo_duml5b$($receiver, s, continuation);
  }
  function toStat($receiver, file) {
    var tmp$;
    var vfs = file.vfs;
    if ($receiver != null) {
      tmp$ = vfs.createExistsStat_14z8ds$(file.path, $receiver.isDirectory, $receiver.uncompressedSize, void 0, $receiver.inode, void 0, void 0, void 0, $receiver.time.utc);
    } else {
      tmp$ = vfs.createNonExistsStat_4w9ihe$(file.path);
    }
    return tmp$;
  }
  function indexOf_2($receiver, other) {
    var tmp$;
    var full = $receiver;
    tmp$ = full.length - other.length | 0;
    loop_label: for (var n = 0; n < tmp$; n++) {
      var $receiver_0 = get_indices(other);
      var all$result;
      all$break: do {
        var tmp$_0;
        if (Kotlin.isType($receiver_0, Collection) && $receiver_0.isEmpty()) {
          all$result = true;
          break all$break;
        }tmp$_0 = $receiver_0.iterator();
        while (tmp$_0.hasNext()) {
          var element = tmp$_0.next();
          if (!(full[n + element | 0] === other[element])) {
            all$result = false;
            break all$break;
          }}
        all$result = true;
      }
       while (false);
      if (all$result)
        return n;
    }
    return -1;
  }
  var KORIO_VERSION;
  var BYTES_TEMP_SIZE;
  function bytesTempPool$lambda$lambda(it) {
    return new Int8Array(65536);
  }
  function bytesTempPool$lambda() {
    return Pool_init(1, bytesTempPool$lambda$lambda);
  }
  var bytesTempPool;
  function get_bytesTempPool() {
    return bytesTempPool.local.get();
  }
  function smallBytesPool$lambda$lambda(it) {
    return new Int8Array(16);
  }
  function smallBytesPool$lambda() {
    return Pool_init(16, smallBytesPool$lambda$lambda);
  }
  var smallBytesPool;
  function get_smallBytesPool() {
    return smallBytesPool.local.get();
  }
  var alloc2 = defineInlineFunction('korio-root-korio.com.soywiz.korio.internal.alloc2_nh0ohv$', function ($receiver, callback) {
    var temp = $receiver.alloc();
    try {
      return callback(temp);
    }finally {
      $receiver.free_11rb$(temp);
    }
  });
  var allocThis = defineInlineFunction('korio-root-korio.com.soywiz.korio.internal.allocThis_nh0ohv$', function ($receiver, callback) {
    var temp = $receiver.alloc();
    try {
      return callback(temp);
    }finally {
      $receiver.free_11rb$(temp);
    }
  });
  var assert = defineInlineFunction('korio-root-korio.com.soywiz.korio.lang.assert_6taknv$', wrapFunction(function () {
    var AssertionError_init = Kotlin.kotlin.AssertionError_init;
    return function (cond) {
      if (!cond)
        throw AssertionError_init();
    };
  }));
  function Charset(name) {
    Charset$Companion_getInstance();
    this.name = name;
  }
  Charset.prototype.encode_sa8v9s$ = function (out, src, start, end, callback$default) {
    if (start === void 0)
      start = 0;
    if (end === void 0)
      end = src.length;
    callback$default ? callback$default(out, src, start, end) : this.encode_sa8v9s$$default(out, src, start, end);
  };
  Charset.prototype.decode_9w11d2$ = function (out, src, start, end, callback$default) {
    if (start === void 0)
      start = 0;
    if (end === void 0)
      end = src.length;
    callback$default ? callback$default(out, src, start, end) : this.decode_9w11d2$$default(out, src, start, end);
  };
  function Charset$Companion() {
    Charset$Companion_instance = this;
  }
  Charset$Companion.prototype.forName_61zpoe$ = function (name) {
    return UTF8;
  };
  Charset$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Charset$Companion_instance = null;
  function Charset$Companion_getInstance() {
    if (Charset$Companion_instance === null) {
      new Charset$Companion();
    }return Charset$Companion_instance;
  }
  Charset.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Charset',
    interfaces: []
  };
  function UTC8CharsetBase(name) {
    Charset.call(this, name);
  }
  UTC8CharsetBase.prototype.createByte_80dzbf$_0 = function (codePoint, shift) {
    return codePoint >> shift & 63 | 128;
  };
  UTC8CharsetBase.prototype.encode_sa8v9s$$default = function (out, src, start, end) {
    for (var n = start; n < end; n++) {
      var codePoint = src.charCodeAt(n) | 0;
      if ((codePoint & -128) === 0) {
        out.append_s8j3t7$(toByte(codePoint));
      } else {
        if ((codePoint & -2048) === 0)
          out.append_s8j3t7$(toByte(codePoint >> 6 & 31 | 192));
        else if ((codePoint & -65536) === 0) {
          out.append_s8j3t7$(toByte(codePoint >> 12 & 15 | 224));
          out.append_s8j3t7$(toByte(this.createByte_80dzbf$_0(codePoint, 6)));
        } else if ((codePoint & -2097152) === 0) {
          out.append_s8j3t7$(toByte(codePoint >> 18 & 7 | 240));
          out.append_s8j3t7$(toByte(this.createByte_80dzbf$_0(codePoint, 12)));
          out.append_s8j3t7$(toByte(this.createByte_80dzbf$_0(codePoint, 6)));
        }out.append_s8j3t7$(toByte(codePoint & 63 | 128));
      }
    }
  };
  UTC8CharsetBase.prototype.decode_9w11d2$$default = function (out, src, start, end) {
    var tmp$;
    if (start < 0 || start > src.length || (end < 0 || end > src.length)) {
      throw IllegalStateException_init('Out of bounds'.toString());
    }var i = start;
    while (i < end) {
      var c = src[i] & 255;
      tmp$ = c >> 4;
      if (tmp$ >= 0 && tmp$ <= 7) {
        out.append_s8itvh$(toChar(c));
        i = i + 1 | 0;
      } else if (tmp$ >= 12 && tmp$ <= 13) {
        out.append_s8itvh$(toChar((c & 31) << 6 | src[i + 1 | 0] & 63));
        i = i + 2 | 0;
      } else if (tmp$ === 14) {
        out.append_s8itvh$(toChar((c & 15) << 12 | (src[i + 1 | 0] & 63) << 6 | src[i + 2 | 0] & 63));
        i = i + 3 | 0;
      } else {
        i = i + 1 | 0;
      }
    }
  };
  UTC8CharsetBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UTC8CharsetBase',
    interfaces: [Charset]
  };
  function SingleByteCharset(name, conv) {
    Charset.call(this, name);
    this.conv = conv;
    var $receiver = IntIntMap_init();
    var tmp$;
    tmp$ = this.conv.length;
    for (var n = 0; n < tmp$; n++)
      $receiver.set_vux9f0$(this.conv.charCodeAt(n) | 0, n);
    this.v = $receiver;
  }
  SingleByteCharset.prototype.encode_sa8v9s$$default = function (out, src, start, end) {
    for (var n = start; n < end; n++) {
      var c = src.charCodeAt(n) | 0;
      out.append_s8j3t7$(this.v.contains_za3lpa$(c) ? toByte(this.v.get_za3lpa$(c)) : toByte(63 | 0));
    }
  };
  SingleByteCharset.prototype.decode_9w11d2$$default = function (out, src, start, end) {
    for (var n = start; n < end; n++) {
      out.append_s8itvh$(this.conv.charCodeAt(src[n] & 255));
    }
  };
  SingleByteCharset.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SingleByteCharset',
    interfaces: [Charset]
  };
  function ISO_8859_1() {
    ISO_8859_1_instance = this;
    var $receiver = StringBuilder_init();
    for (var n = 0; n < 256; n++)
      $receiver.append_s8itvh$(toChar(n));
    SingleByteCharset.call(this, 'ISO-8859-1', $receiver.toString());
  }
  ISO_8859_1.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ISO_8859_1',
    interfaces: [SingleByteCharset]
  };
  var ISO_8859_1_instance = null;
  function ISO_8859_1_getInstance() {
    if (ISO_8859_1_instance === null) {
      new ISO_8859_1();
    }return ISO_8859_1_instance;
  }
  function UTF16Charset(le) {
    Charset.call(this, 'UTF-16-' + (le ? 'LE' : 'BE'));
    this.le = le;
  }
  UTF16Charset.prototype.decode_9w11d2$$default = function (out, src, start, end) {
    for (var n = start; n < end; n += 2)
      out.append_s8itvh$(toChar(readS16(src, n, this.le)));
  };
  UTF16Charset.prototype.encode_sa8v9s$$default = function (out, src, start, end) {
    var temp = new Int8Array(2);
    for (var n = start; n < end; n++) {
      write16(temp, 0, src.charCodeAt(n) | 0, this.le);
      out.append_mj6st8$(temp);
    }
  };
  UTF16Charset.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UTF16Charset',
    interfaces: [Charset]
  };
  function ASCII() {
    ASCII_instance = this;
    Charset.call(this, 'ASCII');
  }
  ASCII.prototype.encode_sa8v9s$$default = function (out, src, start, end) {
    for (var n = start; n < end; n++)
      out.append_s8j3t7$(toByte(src.charCodeAt(n) | 0));
  };
  ASCII.prototype.decode_9w11d2$$default = function (out, src, start, end) {
    for (var n = start; n < end; n++)
      out.append_s8itvh$(toChar(src[n]));
  };
  ASCII.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'ASCII',
    interfaces: [Charset]
  };
  var ASCII_instance = null;
  function ASCII_getInstance() {
    if (ASCII_instance === null) {
      new ASCII();
    }return ASCII_instance;
  }
  var LATIN1;
  var UTF16_LE;
  var UTF16_BE;
  function Charsets() {
    Charsets_instance = this;
  }
  Object.defineProperty(Charsets.prototype, 'UTF8', {
    get: function () {
      return UTF8;
    }
  });
  Object.defineProperty(Charsets.prototype, 'LATIN1', {
    get: function () {
      return LATIN1;
    }
  });
  Object.defineProperty(Charsets.prototype, 'UTF16_LE', {
    get: function () {
      return UTF16_LE;
    }
  });
  Object.defineProperty(Charsets.prototype, 'UTF16_BE', {
    get: function () {
      return UTF16_BE;
    }
  });
  Charsets.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Charsets',
    interfaces: []
  };
  var Charsets_instance = null;
  function Charsets_getInstance() {
    if (Charsets_instance === null) {
      new Charsets();
    }return Charsets_instance;
  }
  function toByteArray($receiver, charset) {
    if (charset === void 0)
      charset = UTF8;
    var out = ByteArrayBuilder_init();
    charset.encode_sa8v9s$(out, $receiver);
    return out.toByteArray();
  }
  function toString_2($receiver, charset) {
    var out = StringBuilder_init();
    charset.decode_9w11d2$(out, $receiver);
    return out.toString();
  }
  function readStringz($receiver, o, size, charset) {
    if (charset === void 0)
      charset = UTF8;
    var idx = o;
    var b = o + size | 0;
    var stop = Math_0.min($receiver.length, b);
    while (idx < stop && $receiver[idx] !== toByte(0)) {
      idx = idx + 1 | 0;
    }
    return toString_2(copyOfRange($receiver, o, idx), charset);
  }
  function readStringz_0($receiver, o, charset) {
    if (charset === void 0)
      charset = UTF8;
    return readStringz($receiver, o, $receiver.length - o | 0, charset);
  }
  function readString($receiver, o, size, charset) {
    if (charset === void 0)
      charset = UTF8;
    return toString_2(copyOfRange($receiver, o, o + size | 0), charset);
  }
  function Disposable() {
  }
  Disposable.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Disposable',
    interfaces: []
  };
  function Closeable() {
    Closeable$Companion_getInstance();
  }
  function Closeable$Companion() {
    Closeable$Companion_instance = this;
  }
  function Closeable$Companion$invoke$ObjectLiteral(closure$callback) {
    this.closure$callback = closure$callback;
  }
  Closeable$Companion$invoke$ObjectLiteral.prototype.close = function () {
    this.closure$callback();
  };
  Closeable$Companion$invoke$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [Closeable]
  };
  Closeable$Companion.prototype.invoke_o14v8n$ = function (callback) {
    return new Closeable$Companion$invoke$ObjectLiteral(callback);
  };
  Closeable$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Closeable$Companion_instance = null;
  function Closeable$Companion_getInstance() {
    if (Closeable$Companion_instance === null) {
      new Closeable$Companion();
    }return Closeable$Companion_instance;
  }
  Closeable.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Closeable',
    interfaces: []
  };
  function DummyCloseable() {
    DummyCloseable_instance = this;
  }
  DummyCloseable.prototype.close = function () {
  };
  DummyCloseable.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'DummyCloseable',
    interfaces: [Closeable]
  };
  var DummyCloseable_instance = null;
  function DummyCloseable_getInstance() {
    if (DummyCloseable_instance === null) {
      new DummyCloseable();
    }return DummyCloseable_instance;
  }
  function OptionalCloseable() {
  }
  OptionalCloseable.prototype.close = function () {
  };
  OptionalCloseable.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'OptionalCloseable',
    interfaces: [Closeable]
  };
  var use_0 = defineInlineFunction('korio-root-korio.com.soywiz.korio.lang.use_jgrjek$', function ($receiver, callback) {
    try {
      return callback($receiver);
    }finally {
      $receiver.close();
    }
  });
  function Cancellable() {
    Cancellable$Companion_getInstance();
  }
  Cancellable.prototype.cancel_tcv7n7$ = function (e, callback$default) {
    if (e === void 0)
      e = CancellationException_init('');
    callback$default ? callback$default(e) : this.cancel_tcv7n7$$default(e);
  };
  function Cancellable$Listener() {
  }
  Cancellable$Listener.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Listener',
    interfaces: []
  };
  function Cancellable$Companion() {
    Cancellable$Companion_instance = this;
  }
  function Cancellable$Companion$invoke$ObjectLiteral(closure$callback) {
    this.closure$callback = closure$callback;
  }
  Cancellable$Companion$invoke$ObjectLiteral.prototype.cancel_tcv7n7$$default = function (e) {
    this.closure$callback(e);
  };
  Cancellable$Companion$invoke$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [Cancellable]
  };
  Cancellable$Companion.prototype.invoke_4m4org$ = function (callback) {
    return new Cancellable$Companion$invoke$ObjectLiteral(callback);
  };
  Cancellable$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Cancellable$Companion_instance = null;
  function Cancellable$Companion_getInstance() {
    if (Cancellable$Companion_instance === null) {
      new Cancellable$Companion();
    }return Cancellable$Companion_instance;
  }
  Cancellable.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Cancellable',
    interfaces: []
  };
  function cancel($receiver, e) {
    if (e === void 0)
      e = CancellationException_init('');
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var c = tmp$.next();
      c.cancel_tcv7n7$(e);
    }
  }
  function cancellable$lambda(this$cancellable) {
    return function (it) {
      cancel(this$cancellable);
      return Unit;
    };
  }
  function cancellable($receiver) {
    return Cancellable$Companion_getInstance().invoke_4m4org$(cancellable$lambda($receiver));
  }
  function close($receiver) {
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var c = tmp$.next();
      c.close();
    }
  }
  function closeable$lambda(this$closeable) {
    return function () {
      close(this$closeable);
      return Unit;
    };
  }
  function closeable($receiver) {
    return Closeable$Companion_getInstance().invoke_o14v8n$(closeable$lambda($receiver));
  }
  function cancellable$lambda_0(this$cancellable) {
    return function (it) {
      this$cancellable.close();
      return Unit;
    };
  }
  function cancellable_0($receiver) {
    return Cancellable$Companion_getInstance().invoke_4m4org$(cancellable$lambda_0($receiver));
  }
  function closeable$lambda_0() {
    return CancellationException_init('');
  }
  function closeable$lambda_1(this$closeable, closure$e) {
    return function () {
      this$closeable.cancel_tcv7n7$(closure$e());
      return Unit;
    };
  }
  function closeable_0($receiver, e) {
    if (e === void 0)
      e = closeable$lambda_0;
    return Closeable$Companion_getInstance().invoke_o14v8n$(closeable$lambda_1($receiver, e));
  }
  function FileAlreadyExistsException(msg) {
    IOException.call(this, msg);
    this.name = 'FileAlreadyExistsException';
  }
  FileAlreadyExistsException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FileAlreadyExistsException',
    interfaces: [IOException]
  };
  function InvalidOperationException(str) {
    if (str === void 0)
      str = 'Invalid Operation';
    Exception_init(str, this);
    this.name = 'InvalidOperationException';
  }
  InvalidOperationException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InvalidOperationException',
    interfaces: [Exception]
  };
  function OutOfBoundsException(index, str) {
    if (index === void 0)
      index = -1;
    if (str === void 0)
      str = 'Out Of Bounds';
    Exception_init(str, this);
    this.name = 'OutOfBoundsException';
  }
  OutOfBoundsException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OutOfBoundsException',
    interfaces: [Exception]
  };
  function KeyNotFoundException(str) {
    if (str === void 0)
      str = 'Key Not Found';
    Exception_init(str, this);
    this.name = 'KeyNotFoundException';
  }
  KeyNotFoundException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'KeyNotFoundException',
    interfaces: [Exception]
  };
  function NotImplementedException(str) {
    if (str === void 0)
      str = 'Not Implemented';
    Exception_init(str, this);
    this.name = 'NotImplementedException';
  }
  NotImplementedException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NotImplementedException',
    interfaces: [Exception]
  };
  function InvalidArgumentException(str) {
    if (str === void 0)
      str = 'Invalid Argument';
    Exception_init(str, this);
    this.name = 'InvalidArgumentException';
  }
  InvalidArgumentException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'InvalidArgumentException',
    interfaces: [Exception]
  };
  function MustValidateCodeException(str) {
    if (str === void 0)
      str = 'Must Validate Code';
    Exception_init(str, this);
    this.name = 'MustValidateCodeException';
  }
  MustValidateCodeException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MustValidateCodeException',
    interfaces: [Exception]
  };
  function MustOverrideException(str) {
    if (str === void 0)
      str = 'Must Override';
    Exception_init(str, this);
    this.name = 'MustOverrideException';
  }
  MustOverrideException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MustOverrideException',
    interfaces: [Exception]
  };
  function DeprecatedException(str) {
    if (str === void 0)
      str = 'Deprecated';
    Exception_init(str, this);
    this.name = 'DeprecatedException';
  }
  DeprecatedException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DeprecatedException',
    interfaces: [Exception]
  };
  function UnexpectedException(str) {
    if (str === void 0)
      str = 'Unexpected';
    Exception_init(str, this);
    this.name = 'UnexpectedException';
  }
  UnexpectedException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UnexpectedException',
    interfaces: [Exception]
  };
  function CancelException(str) {
    if (str === void 0)
      str = 'Cancel';
    Exception_init(str, this);
    this.name = 'CancelException';
  }
  CancelException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CancelException',
    interfaces: [Exception]
  };
  function get_deprecated() {
    throw new MustValidateCodeException();
  }
  function get_mustValidate() {
    throw new NotImplementedException();
  }
  function get_noImpl() {
    throw new NotImplementedException();
  }
  function get_invalidOp() {
    throw new InvalidOperationException();
  }
  function get_invalidArg() {
    throw new InvalidArgumentException();
  }
  function deprecated(msg) {
    throw new DeprecatedException(msg);
  }
  function mustValidate(msg) {
    throw new MustValidateCodeException(msg);
  }
  function noImpl(msg) {
    throw new NotImplementedException(msg);
  }
  function invalidOp(msg) {
    throw new InvalidOperationException(msg);
  }
  function invalidArg(msg) {
    throw new InvalidArgumentException(msg);
  }
  function unsupported(msg) {
    throw UnsupportedOperationException_init_0(msg);
  }
  function unsupported_0() {
    throw UnsupportedOperationException_init_0('unsupported');
  }
  function invalidArgument(msg) {
    throw new InvalidArgumentException(msg);
  }
  function unexpected(msg) {
    throw new UnexpectedException(msg);
  }
  var runIgnoringExceptions = defineInlineFunction('korio-root-korio.com.soywiz.korio.lang.runIgnoringExceptions_nkfre5$', wrapFunction(function () {
    var printStackTrace = _.com.soywiz.korio.lang.printStackTrace_dbl4o4$;
    var Throwable = Error;
    return function (show, action) {
      if (show === void 0)
        show = false;
      try {
        return action();
      } catch (e) {
        if (Kotlin.isType(e, Throwable)) {
          if (show)
            printStackTrace(e);
          return null;
        } else
          throw e;
      }
    };
  }));
  function printStackTrace() {
    printStackTrace_0(Exception_init('printStackTrace'));
  }
  function lazyVar(callback) {
    this.callback = callback;
    this.current = null;
  }
  lazyVar.prototype.getValue_t0xcdd$ = function (obj, property) {
    if (this.current == null) {
      this.current = this.callback();
    }return ensureNotNull(this.current);
  };
  lazyVar.prototype.setValue_809r6s$ = function (obj, property, value) {
    this.current = value;
  };
  lazyVar.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'lazyVar',
    interfaces: []
  };
  function invoke_1($receiver, arrays, offset, size) {
    if (offset === void 0)
      offset = 0;
    if (size === void 0)
      size = arrays.length - offset | 0;
    var tmp$;
    var sb = StringBuilder_init();
    tmp$ = offset + size | 0;
    for (var n = offset; n < tmp$; n++) {
      sb.append_s8itvh$(toChar(arrays[n]));
    }
    return sb.toString();
  }
  function String_fromIntArray(arrays, offset, size) {
    if (offset === void 0)
      offset = 0;
    if (size === void 0)
      size = arrays.length - offset | 0;
    return invoke_1(String_0.Companion, arrays, offset, size);
  }
  function String_fromCharArray(arrays, offset, size) {
    if (offset === void 0)
      offset = 0;
    if (size === void 0)
      size = arrays.length - offset | 0;
    return String_1(arrays, offset, size);
  }
  var formatRegex;
  function format($receiver, params) {
    var paramIndex = {v: 0};
    var $this = formatRegex;
    var replace_20wsma$result;
    replace_20wsma$break: do {
      var match = $this.find_905azu$($receiver);
      if (match == null) {
        replace_20wsma$result = $receiver.toString();
        break replace_20wsma$break;
      }var lastStart = 0;
      var length = $receiver.length;
      var sb = StringBuilder_init_0(length);
      do {
        var foundMatch = ensureNotNull(match);
        sb.append_ezbsdh$($receiver, lastStart, foundMatch.range.start);
        var tmp$ = sb.append_gw00v9$;
        var tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
        var param = params[tmp$_0 = paramIndex.v, paramIndex.v = tmp$_0 + 1 | 0, tmp$_0];
        var size = foundMatch.groupValues.get_za3lpa$(1);
        var type = foundMatch.groupValues.get_za3lpa$(2);
        switch (type) {
          case 'd':
            tmp$_4 = numberToLong(Kotlin.isNumber(tmp$_1 = param) ? tmp$_1 : throwCCE()).toString();
            break;
          case 'X':
          case 'x':
            if (typeof param === 'number')
              tmp$_3 = toStringUnsigned(param, 16);
            else
              tmp$_3 = toStringUnsigned_0(numberToLong(Kotlin.isNumber(tmp$_2 = param) ? tmp$_2 : throwCCE()), 16);
            var res = tmp$_3;
            tmp$_4 = equals(type, 'X') ? res.toUpperCase() : res.toLowerCase();
            break;
          default:tmp$_4 = param.toString();
            break;
        }
        var str = tmp$_4;
        var prefix = startsWith_0(size, 48) ? 48 : 32;
        var asize = toIntOrNull_0(size);
        var str2 = str;
        if (asize != null) {
          while (str2.length < asize) {
            var other = str2;
            str2 = String.fromCharCode(prefix) + other;
          }
        }tmp$.call(sb, str2);
        lastStart = foundMatch.range.endInclusive + 1 | 0;
        match = foundMatch.next();
      }
       while (lastStart < length && match != null);
      if (lastStart < length) {
        sb.append_ezbsdh$($receiver, lastStart, length);
      }replace_20wsma$result = sb.toString();
    }
     while (false);
    return replace_20wsma$result;
  }
  function splitKeep($receiver, regex) {
    var tmp$;
    var str = $receiver;
    var out = ArrayList_init();
    var lastPos = 0;
    tmp$ = regex.findAll_905azu$($receiver).iterator();
    while (tmp$.hasNext()) {
      var part = tmp$.next();
      var prange = part.range;
      if (lastPos !== prange.start) {
        var startIndex = lastPos;
        var endIndex = prange.start;
        var element = str.substring(startIndex, endIndex);
        out.add_11rb$(element);
      }var element_0 = substring(str, prange);
      out.add_11rb$(element_0);
      lastPos = prange.endInclusive + 1 | 0;
    }
    if (lastPos !== str.length) {
      var startIndex_0 = lastPos;
      var element_1 = str.substring(startIndex_0);
      out.add_11rb$(element_1);
    }return out;
  }
  function replaceNonPrintableCharactersRegex$lambda() {
    return Regex_init('[^ -~]');
  }
  var replaceNonPrintableCharactersRegex;
  function get_replaceNonPrintableCharactersRegex() {
    return replaceNonPrintableCharactersRegex.value;
  }
  function replaceNonPrintableCharacters($receiver, replacement) {
    if (replacement === void 0)
      replacement = '?';
    return get_replaceNonPrintableCharactersRegex().replace_x2uqeu$($receiver, replacement);
  }
  function toBytez($receiver, len, charset) {
    if (charset === void 0)
      charset = UTF8;
    var out = ByteArrayBuilder_init();
    out.append_mj6st8$(toByteArray($receiver, charset));
    while (out.size < len)
      out.append_s8j3t7$(toByte(0));
    return out.toByteArray();
  }
  function toBytez_0($receiver, charset) {
    if (charset === void 0)
      charset = UTF8;
    var out = ByteArrayBuilder_init();
    out.append_mj6st8$(toByteArray($receiver, charset));
    out.append_s8j3t7$(toByte(0));
    return out.toByteArray();
  }
  function indexOfOrNull($receiver, char, startIndex) {
    if (startIndex === void 0)
      startIndex = 0;
    var $receiver_0 = indexOf_0($receiver, char, startIndex);
    return $receiver_0 >= 0 ? $receiver_0 : null;
  }
  function lastIndexOfOrNull($receiver, char, startIndex) {
    if (startIndex === void 0)
      startIndex = get_lastIndex($receiver);
    var $receiver_0 = lastIndexOf($receiver, char, startIndex);
    return $receiver_0 >= 0 ? $receiver_0 : null;
  }
  function splitInChunks($receiver, size) {
    var out = ArrayList_init();
    var pos = 0;
    while (pos < $receiver.length) {
      var tmp$ = pos;
      var a = $receiver.length;
      var b = pos + size | 0;
      var endIndex = Math_0.min(a, b);
      var element = $receiver.substring(tmp$, endIndex);
      out.add_11rb$(element);
      pos = pos + size | 0;
    }
    return out;
  }
  function substr($receiver, start) {
    return substr_0($receiver, start, $receiver.length);
  }
  function substr_0($receiver, start, length) {
    var low = clamp(start >= 0 ? start : $receiver.length + start | 0, 0, $receiver.length);
    var high = clamp(length >= 0 ? low + length | 0 : $receiver.length + length | 0, 0, $receiver.length);
    return high >= low ? $receiver.substring(low, high) : '';
  }
  var eachBuilder = defineInlineFunction('korio-root-korio.com.soywiz.korio.lang.eachBuilder_n3qf5l$', wrapFunction(function () {
    var toBoxedChar = Kotlin.toBoxedChar;
    var StringBuilder_init = Kotlin.kotlin.text.StringBuilder_init;
    return function ($receiver, transform) {
      var $receiver_0 = StringBuilder_init();
      var tmp$;
      tmp$ = $receiver.length;
      for (var n = 0; n < tmp$; n++)
        transform($receiver_0, toBoxedChar($receiver.charCodeAt(n)));
      return $receiver_0.toString();
    };
  }));
  var transform = defineInlineFunction('korio-root-korio.com.soywiz.korio.lang.transform_37eajw$', wrapFunction(function () {
    var toBoxedChar = Kotlin.toBoxedChar;
    var StringBuilder_init = Kotlin.kotlin.text.StringBuilder_init;
    return function ($receiver, transform) {
      var $receiver_0 = StringBuilder_init();
      var tmp$;
      tmp$ = $receiver.length;
      for (var n = 0; n < tmp$; n++)
        $receiver_0.append_61zpoe$(transform(toBoxedChar($receiver.charCodeAt(n))));
      return $receiver_0.toString();
    };
  }));
  function parseInt($receiver) {
    if (startsWith($receiver, '0x', true)) {
      return toLong($receiver.substring(2), 16).toInt();
    } else if (startsWith($receiver, '0o', true)) {
      return toLong($receiver.substring(2), 8).toInt();
    } else if (startsWith($receiver, '0b', true)) {
      return toLong($receiver.substring(2), 2).toInt();
    } else
      return toInt($receiver);
  }
  function get_quoted($receiver) {
    return quote_0($receiver);
  }
  function toCharArray($receiver) {
    var tmp$;
    var array = charArray($receiver.length, null);
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var value = unboxChar(toBoxedChar($receiver.charCodeAt(i)));
      array[i] = value;
    }
    return array;
  }
  function threadLocal(gen) {
    this.gen = gen;
    this.local = new threadLocal$local$ObjectLiteral(this);
  }
  threadLocal.prototype.getValue_n5byny$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.lang.threadLocal.getValue_n5byny$', function (thisRef, property) {
    return this.local.get();
  });
  threadLocal.prototype.setValue_sq4zib$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.lang.threadLocal.setValue_sq4zib$', function (thisRef, property, value) {
    this.local.set_11rb$(value);
  });
  function threadLocal$local$ObjectLiteral(this$threadLocal) {
    this.this$threadLocal = this$threadLocal;
    NativeThreadLocal.call(this);
  }
  threadLocal$local$ObjectLiteral.prototype.initialValue = function () {
    return this.this$threadLocal.gen();
  };
  threadLocal$local$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [NativeThreadLocal]
  };
  threadLocal.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'threadLocal',
    interfaces: []
  };
  function AsyncSocketFactory() {
  }
  AsyncSocketFactory.prototype.createClient_6taknv$ = function (secure, continuation, callback$default) {
    if (secure === void 0)
      secure = false;
    return callback$default ? callback$default(secure, continuation) : this.createClient_6taknv$$default(secure, continuation);
  };
  AsyncSocketFactory.prototype.createServer_kr8lbh$ = function (port, host, backlog, secure, continuation, callback$default) {
    if (host === void 0)
      host = '127.0.0.1';
    if (backlog === void 0)
      backlog = 511;
    if (secure === void 0)
      secure = false;
    return callback$default ? callback$default(port, host, backlog, secure, continuation) : this.createServer_kr8lbh$$default(port, host, backlog, secure, continuation);
  };
  AsyncSocketFactory.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncSocketFactory',
    interfaces: []
  };
  function createTcpClient(secure, continuation) {
    if (secure === void 0)
      secure = false;
    return get_asyncSocketFactory().createClient_6taknv$(secure, continuation);
  }
  function createTcpServer(port, host, backlog, secure, continuation) {
    if (port === void 0)
      port = AsyncServer$Companion_getInstance().ANY_PORT;
    if (host === void 0)
      host = '127.0.0.1';
    if (backlog === void 0)
      backlog = 511;
    if (secure === void 0)
      secure = false;
    return get_asyncSocketFactory().createServer_kr8lbh$(port, host, backlog, secure, continuation);
  }
  function Coroutine$createTcpClient(host_0, port_0, secure_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = void 0;
    this.local$host = host_0;
    this.local$port = port_0;
    this.local$secure = secure_0;
  }
  Coroutine$createTcpClient.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$createTcpClient.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$createTcpClient.prototype.constructor = Coroutine$createTcpClient;
  Coroutine$createTcpClient.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$secure === void 0)
              this.local$secure = false;
            this.state_0 = 2;
            this.result_0 = get_asyncSocketFactory().createClient_6taknv$(this.local$secure, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$$receiver = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.connect_bm4lxs$(this.local$host, this.local$port, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.local$$receiver;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function createTcpClient_0(host_0, port_0, secure_0, continuation_0, suspended) {
    var instance = new Coroutine$createTcpClient(host_0, port_0, secure_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function AsyncClient() {
    AsyncClient$Companion_getInstance();
  }
  function AsyncClient$Stats() {
    AsyncClient$Stats_instance = this;
    this.writeCountStart = korAtomic_2(L0);
    this.writeCountEnd = korAtomic_2(L0);
    this.writeCountError = korAtomic_2(L0);
  }
  AsyncClient$Stats.prototype.toString = function () {
    return 'AsyncClient.Stats(' + this.writeCountStart + '/' + this.writeCountEnd + '/' + this.writeCountError + ')';
  };
  AsyncClient$Stats.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Stats',
    interfaces: []
  };
  var AsyncClient$Stats_instance = null;
  function AsyncClient$Stats_getInstance() {
    if (AsyncClient$Stats_instance === null) {
      new AsyncClient$Stats();
    }return AsyncClient$Stats_instance;
  }
  function AsyncClient$Companion() {
    AsyncClient$Companion_instance = this;
  }
  function Coroutine$invoke_m20oq8$($this, host_0, port_0, secure_0, connect_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$host = host_0;
    this.local$port = port_0;
    this.local$secure = secure_0;
    this.local$connect = connect_0;
  }
  Coroutine$invoke_m20oq8$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$invoke_m20oq8$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$invoke_m20oq8$.prototype.constructor = Coroutine$invoke_m20oq8$;
  Coroutine$invoke_m20oq8$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$secure === void 0)
              this.local$secure = false;
            if (this.local$connect === void 0)
              this.local$connect = true;
            this.state_0 = 2;
            this.result_0 = get_asyncSocketFactory().createClient_6taknv$(this.local$secure, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$$receiver = this.result_0;
            if (this.local$connect) {
              this.state_0 = 3;
              this.result_0 = this.local$$receiver.connect_bm4lxs$(this.local$host, this.local$port, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            return this.local$$receiver;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncClient$Companion.prototype.invoke_m20oq8$ = function (host_0, port_0, secure_0, connect_0, continuation_0, suspended) {
    var instance = new Coroutine$invoke_m20oq8$(this, host_0, port_0, secure_0, connect_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AsyncClient$Companion.prototype.create_6taknv$ = function (secure, continuation) {
    if (secure === void 0)
      secure = false;
    return get_asyncSocketFactory().createClient_6taknv$(secure, continuation);
  };
  AsyncClient$Companion.prototype.createAndConnect_37lk95$ = function (host, port, secure, continuation) {
    if (secure === void 0)
      secure = false;
    return this.invoke_m20oq8$(host, port, secure, void 0, continuation);
  };
  AsyncClient$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AsyncClient$Companion_instance = null;
  function AsyncClient$Companion_getInstance() {
    if (AsyncClient$Companion_instance === null) {
      new AsyncClient$Companion();
    }return AsyncClient$Companion_instance;
  }
  AsyncClient.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncClient',
    interfaces: [AsyncOutputStream, AsyncInputStream, AsyncCloseable]
  };
  function AsyncServer() {
    AsyncServer$Companion_getInstance();
  }
  function AsyncServer$Companion() {
    AsyncServer$Companion_instance = this;
    this.ANY_PORT = 0;
  }
  AsyncServer$Companion.prototype.invoke_jl0c9m$ = function (port, host, backlog, continuation) {
    if (host === void 0)
      host = '127.0.0.1';
    if (backlog === void 0)
      backlog = -1;
    return get_asyncSocketFactory().createServer_kr8lbh$(port, host, backlog, void 0, continuation);
  };
  AsyncServer$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var AsyncServer$Companion_instance = null;
  function AsyncServer$Companion_getInstance() {
    if (AsyncServer$Companion_instance === null) {
      new AsyncServer$Companion();
    }return AsyncServer$Companion_instance;
  }
  function Coroutine$AsyncServer$listen$lambda(closure$handler_0, this$AsyncServer_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$this$AsyncServer = this$AsyncServer_0;
  }
  Coroutine$AsyncServer$listen$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncServer$listen$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncServer$listen$lambda.prototype.constructor = Coroutine$AsyncServer$listen$lambda;
  Coroutine$AsyncServer$listen$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$this$AsyncServer.accept(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$closure$handler(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.state_0 = 2;
            continue;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncServer$listen$lambda(closure$handler_0, this$AsyncServer_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncServer$listen$lambda(closure$handler_0, this$AsyncServer_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function AsyncServer$listen$lambda_0(closure$job) {
    return function () {
      closure$job.cancel_m4sck1$();
      return Unit;
    };
  }
  AsyncServer.prototype.listen_lsub1v$ = function (handler, continuation) {
    var job = async_1(continuation.context, AsyncServer$listen$lambda(handler, this));
    return Closeable$Companion_getInstance().invoke_o14v8n$(AsyncServer$listen$lambda_0(job));
  };
  function Coroutine$listen($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$listen.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listen.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listen.prototype.constructor = Coroutine$listen;
  Coroutine$listen.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.listenFlow(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = toChannel_0(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncServer.prototype.listen = function (continuation_0, suspended) {
    var instance = new Coroutine$listen(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$AsyncServer$listenFlow$lambda(this$AsyncServer_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$AsyncServer = this$AsyncServer_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$AsyncServer$listenFlow$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncServer$listenFlow$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncServer$listenFlow$lambda.prototype.constructor = Coroutine$AsyncServer$listenFlow$lambda;
  Coroutine$AsyncServer$listenFlow$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$this$AsyncServer.accept(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$$receiver.emit_11rb$(this.result_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.state_0 = 2;
            continue;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncServer$listenFlow$lambda(this$AsyncServer_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$AsyncServer$listenFlow$lambda(this$AsyncServer_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AsyncServer.prototype.listenFlow = function (continuation) {
    return flow(AsyncServer$listenFlow$lambda(this));
  };
  AsyncServer.prototype.close = function (continuation) {
  };
  AsyncServer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncServer',
    interfaces: [AsyncCloseable]
  };
  function HostWithPort(host, port) {
    HostWithPort$Companion_getInstance();
    this.host = host;
    this.port = port;
  }
  function HostWithPort$Companion() {
    HostWithPort$Companion_instance = this;
  }
  HostWithPort$Companion.prototype.parse_bm4lxs$ = function (str, defaultPort) {
    var parts = split(str, Kotlin.charArrayOf(58), void 0, 2);
    return new HostWithPort(parts.get_za3lpa$(0), toInt(1 >= 0 && 1 <= get_lastIndex_0(parts) ? parts.get_za3lpa$(1) : defaultPort.toString()));
  };
  HostWithPort$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var HostWithPort$Companion_instance = null;
  function HostWithPort$Companion_getInstance() {
    if (HostWithPort$Companion_instance === null) {
      new HostWithPort$Companion();
    }return HostWithPort$Companion_instance;
  }
  HostWithPort.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HostWithPort',
    interfaces: []
  };
  HostWithPort.prototype.component1 = function () {
    return this.host;
  };
  HostWithPort.prototype.component2 = function () {
    return this.port;
  };
  HostWithPort.prototype.copy_bm4lxs$ = function (host, port) {
    return new HostWithPort(host === void 0 ? this.host : host, port === void 0 ? this.port : port);
  };
  HostWithPort.prototype.toString = function () {
    return 'HostWithPort(host=' + Kotlin.toString(this.host) + (', port=' + Kotlin.toString(this.port)) + ')';
  };
  HostWithPort.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.host) | 0;
    result = result * 31 + Kotlin.hashCode(this.port) | 0;
    return result;
  };
  HostWithPort.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.host, other.host) && Kotlin.equals(this.port, other.port)))));
  };
  function MimeType_byExtensions$lambda() {
    return LinkedHashMap_init();
  }
  var MimeType_byExtensions;
  function get_MimeType_byExtensions() {
    return MimeType_byExtensions.value;
  }
  function MimeType(mime, exts) {
    MimeType$Companion_getInstance();
    this.mime = mime;
    this.exts = exts;
  }
  function MimeType$Companion() {
    MimeType$Companion_instance = this;
    this.APPLICATION_OCTET_STREAM = new MimeType('application/octet-stream', listOf_0('bin'));
    this.APPLICATION_JSON = new MimeType('application/json', listOf_0('json'));
    this.IMAGE_PNG = new MimeType('image/png', listOf_0('png'));
    this.IMAGE_JPEG = new MimeType('image/jpeg', listOf(['jpg', 'jpeg']));
    this.IMAGE_GIF = new MimeType('image/gif', listOf_0('gif'));
    this.TEXT_HTML = new MimeType('text/html', listOf(['htm', 'html']));
    this.TEXT_PLAIN = new MimeType('text/plain', listOf(['txt', 'text']));
    this.TEXT_CSS = new MimeType('text/css', listOf_0('css'));
    this.TEXT_JS = new MimeType('application/javascript', listOf_0('js'));
    this.register_ceippw$([this.APPLICATION_OCTET_STREAM, this.APPLICATION_JSON, this.IMAGE_PNG, this.IMAGE_JPEG, this.IMAGE_GIF, this.TEXT_HTML, this.TEXT_PLAIN, this.TEXT_CSS, this.TEXT_JS]);
  }
  MimeType$Companion.prototype.register_dtz7bj$ = function (mimeType) {
    var $receiver = mimeType.exts;
    var tmp$;
    var n = 0;
    while (n < $receiver.size) {
      var ext = $receiver.get_za3lpa$((tmp$ = n, n = tmp$ + 1 | 0, tmp$));
      get_MimeType_byExtensions().put_xwzc9p$(ext, mimeType);
    }
  };
  MimeType$Companion.prototype.register_ceippw$ = function (mimeTypes) {
    var tmp$;
    var n = 0;
    while (n < mimeTypes.length) {
      this.register_dtz7bj$(mimeTypes[tmp$ = n, n = tmp$ + 1 | 0, tmp$]);
    }
  };
  MimeType$Companion.prototype.register_60y5e1$ = function (mime, exsts) {
    var destination = ArrayList_init_0(exsts.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== exsts.length; ++tmp$) {
      var item = exsts[tmp$];
      destination.add_11rb$(item.toLowerCase());
    }
    this.register_dtz7bj$(new MimeType(mime, destination));
  };
  MimeType$Companion.prototype.getByExtension_nxhpy7$ = function (ext, default_0) {
    if (default_0 === void 0)
      default_0 = this.APPLICATION_OCTET_STREAM;
    var tmp$;
    return (tmp$ = get_MimeType_byExtensions().get_11rb$(ext.toLowerCase())) != null ? tmp$ : default_0;
  };
  MimeType$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var MimeType$Companion_instance = null;
  function MimeType$Companion_getInstance() {
    if (MimeType$Companion_instance === null) {
      new MimeType$Companion();
    }return MimeType$Companion_instance;
  }
  MimeType.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MimeType',
    interfaces: [Vfs$Attribute]
  };
  function mimeType($receiver) {
    return MimeType$Companion_getInstance().getByExtension_nxhpy7$(get_extensionLC_0($receiver));
  }
  function QueryString() {
    QueryString_instance = this;
  }
  QueryString.prototype.decode_6bul2c$ = function (str) {
    var out = LinkedHashMap_init();
    var $receiver = split(str, Kotlin.charArrayOf(38));
    var tmp$;
    var n = 0;
    while (n < $receiver.size) {
      var parts = split($receiver.get_za3lpa$((tmp$ = n, n = tmp$ + 1 | 0, tmp$)), Kotlin.charArrayOf(61), void 0, 2);
      var key = URL$Companion_getInstance().decodeComponent_58gtll$(parts.get_za3lpa$(0), UTF8, true);
      var value = URL$Companion_getInstance().decodeComponent_58gtll$(1 >= 0 && 1 <= get_lastIndex_0(parts) ? parts.get_za3lpa$(1) : key, UTF8, true);
      var tmp$_0;
      var value_0 = out.get_11rb$(key);
      if (value_0 == null) {
        var answer = ArrayList_init();
        out.put_xwzc9p$(key, answer);
        tmp$_0 = answer;
      } else {
        tmp$_0 = value_0;
      }
      var list = tmp$_0;
      list.add_11rb$(value);
    }
    return out;
  };
  QueryString.prototype.encode_atu3vi$ = function (map) {
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = map.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var key = element.key;
      var value = element.value;
      var destination_0 = ArrayList_init_0(collectionSizeOrDefault(value, 10));
      var tmp$_0;
      tmp$_0 = value.iterator();
      while (tmp$_0.hasNext()) {
        var item = tmp$_0.next();
        destination_0.add_11rb$(to(key, item));
      }
      var list = destination_0;
      addAll(destination, list);
    }
    return this.encode_9ih0sy$(copyToArray(destination).slice());
  };
  QueryString.prototype.encode_9ih0sy$ = function (items) {
    var parts = ArrayList_init();
    var tmp$;
    var n = 0;
    while (n < items.length) {
      var f = items[tmp$ = n, n = tmp$ + 1 | 0, tmp$];
      var key = f.component1()
      , value = f.component2();
      var element = URL$Companion_getInstance().encodeComponent_58gtll$(key, UTF8, true) + '=' + URL$Companion_getInstance().encodeComponent_58gtll$(value, UTF8, true);
      parts.add_11rb$(element);
    }
    return joinToString(parts, '&');
  };
  QueryString.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'QueryString',
    interfaces: []
  };
  var QueryString_instance = null;
  function QueryString_getInstance() {
    if (QueryString_instance === null) {
      new QueryString();
    }return QueryString_instance;
  }
  function URL_0(isOpaque, scheme, userInfo, host, path, query, fragment, defaultPort) {
    URL$Companion_getInstance();
    this.isOpaque = isOpaque;
    this.scheme = scheme;
    this.userInfo = userInfo;
    this.host = host;
    this.path = path;
    this.query = query;
    this.fragment = fragment;
    this.defaultPort = defaultPort;
    this.fullUrl_xdesau$_0 = lazy(URL$fullUrl$lambda(this));
    this.fullUrlWithoutScheme_p4o8kt$_0 = lazy(URL$fullUrlWithoutScheme$lambda(this));
    this.pathWithQuery_c9p6pp$_0 = lazy(URL$pathWithQuery$lambda(this));
  }
  Object.defineProperty(URL_0.prototype, 'user', {
    get: function () {
      var tmp$;
      return (tmp$ = this.userInfo) != null ? substringBefore(tmp$, 58) : null;
    }
  });
  Object.defineProperty(URL_0.prototype, 'password', {
    get: function () {
      var tmp$;
      return (tmp$ = this.userInfo) != null ? substringAfter(tmp$, 58) : null;
    }
  });
  Object.defineProperty(URL_0.prototype, 'isHierarchical', {
    get: function () {
      return !this.isOpaque;
    }
  });
  Object.defineProperty(URL_0.prototype, 'isSecureScheme', {
    get: function () {
      return equals(this.scheme, 'https') || equals(this.scheme, 'wss') || equals(this.scheme, 'ftps');
    }
  });
  Object.defineProperty(URL_0.prototype, 'defaultSchemePort', {
    get: function () {
      return URL$Companion_getInstance().defaultPortForScheme_pdl1vj$(this.scheme);
    }
  });
  Object.defineProperty(URL_0.prototype, 'port', {
    get: function () {
      return this.defaultPort === URL$Companion_getInstance().DEFAULT_PORT ? this.defaultSchemePort : this.defaultPort;
    }
  });
  Object.defineProperty(URL_0.prototype, 'fullUrl', {
    get: function () {
      return this.fullUrl_xdesau$_0.value;
    }
  });
  Object.defineProperty(URL_0.prototype, 'fullUrlWithoutScheme', {
    get: function () {
      return this.fullUrlWithoutScheme_p4o8kt$_0.value;
    }
  });
  Object.defineProperty(URL_0.prototype, 'pathWithQuery', {
    get: function () {
      return this.pathWithQuery_c9p6pp$_0.value;
    }
  });
  URL_0.prototype.toUrlString_86i9zv$ = function (includeScheme, out) {
    if (includeScheme === void 0)
      includeScheme = true;
    if (out === void 0)
      out = StringBuilder_init();
    if (includeScheme && this.scheme != null) {
      out.append_61zpoe$(toString(this.scheme) + ':');
      if (!this.isOpaque)
        out.append_61zpoe$('//');
    }if (this.userInfo != null)
      out.append_61zpoe$(toString(this.userInfo) + '@');
    if (this.host != null)
      out.append_61zpoe$(this.host);
    if (this.port !== URL$Companion_getInstance().DEFAULT_PORT && this.port !== this.defaultSchemePort)
      out.append_s8itvh$(58).append_s8jyv4$(this.port);
    out.append_61zpoe$(this.path);
    if (this.query != null)
      out.append_61zpoe$('?' + toString(this.query));
    if (this.fragment != null)
      out.append_61zpoe$('#' + toString(this.fragment));
    return out;
  };
  Object.defineProperty(URL_0.prototype, 'isAbsolute', {
    get: function () {
      return this.scheme != null;
    }
  });
  URL_0.prototype.toString = function () {
    return this.fullUrl;
  };
  function URL$toComponentString$lambda(it) {
    return it.first + '=' + toString(it.second);
  }
  URL_0.prototype.toComponentString = function () {
    var $receiver = listOf([getPropertyCallableRef('scheme', 0, function ($receiver) {
      return $receiver.scheme;
    }.bind(null, this)), getPropertyCallableRef('userInfo', 0, function ($receiver) {
      return $receiver.userInfo;
    }.bind(null, this)), getPropertyCallableRef('host', 0, function ($receiver) {
      return $receiver.host;
    }.bind(null, this)), getPropertyCallableRef('path', 0, function ($receiver) {
      return $receiver.path;
    }.bind(null, this)), getPropertyCallableRef('query', 0, function ($receiver) {
      return $receiver.query;
    }.bind(null, this)), getPropertyCallableRef('fragment', 0, function ($receiver) {
      return $receiver.fragment;
    }.bind(null, this))]);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(to(item.callableName, item.get()));
    }
    var destination_0 = ArrayList_init();
    var tmp$_0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      if (element.second != null)
        destination_0.add_11rb$(element);
    }
    return 'URL(' + joinToString(destination_0, ', ', void 0, void 0, void 0, void 0, URL$toComponentString$lambda) + ')';
  };
  URL_0.prototype.resolve_ptvjoy$ = function (path) {
    return URL$Companion_getInstance().invoke_61zpoe$(URL$Companion_getInstance().resolve_puj7f4$(this.fullUrl, path.fullUrl));
  };
  function URL$Companion() {
    URL$Companion_instance = this;
    this.DEFAULT_PORT = 0;
    this.schemeRegex_0 = Regex_init('\\w+:');
  }
  URL$Companion.prototype.defaultPortForScheme_pdl1vj$ = function (scheme) {
    switch (scheme) {
      case 'ftp':
        return 21;
      case 'ftps':
        return 990;
      case 'http':
      case 'ws':
        return 80;
      case 'https':
      case 'wss':
        return 443;
      default:return -1;
    }
  };
  URL$Companion.prototype.invoke_k2ssjq$ = function (scheme, userInfo, host, path, query, fragment, opaque, port) {
    if (opaque === void 0)
      opaque = false;
    if (port === void 0)
      port = this.DEFAULT_PORT;
    return new URL_0(opaque, scheme, userInfo, host, path, query, fragment, port);
  };
  URL$Companion.prototype.invoke_61zpoe$ = function (url) {
    var tmp$, tmp$_0;
    var r = new StrReader(url);
    var schemeColon = r.tryRegex_t7befh$(this.schemeRegex_0);
    if (schemeColon != null) {
      var isHierarchical = r.tryLit_61zpoe$('//') != null;
      var nonScheme = r.readRemaining();
      var scheme = dropLast(schemeColon, 1);
      var nonFragment = substringBefore(nonScheme, 35);
      var fragment = substringAfterOrNull(nonScheme, 35);
      var nonQuery = substringBefore(nonFragment, 63);
      var query = substringAfterOrNull(nonFragment, 63);
      var authority = substringBefore(nonQuery, 47);
      var path = substringAfterOrNull(nonQuery, 47);
      var hostWithPort = substringAfter(authority, 64);
      var userInfo = substringBeforeOrNull(authority, 64);
      var host = substringBefore(hostWithPort, 58);
      var port = substringAfterOrNull(hostWithPort, 58);
      tmp$_0 = URL$Companion_getInstance().invoke_k2ssjq$(scheme, userInfo, host.length > 0 ? host : null, path != null ? '/' + toString(path) : '', query, fragment, !isHierarchical, (tmp$ = port != null ? toIntOrNull_0(port) : null) != null ? tmp$ : this.DEFAULT_PORT);
    } else {
      var nonFragment_0 = substringBefore(url, 35);
      var fragment_0 = substringAfterOrNull(url, 35);
      var path_0 = substringBefore(nonFragment_0, 63);
      var query_0 = substringAfterOrNull(nonFragment_0, 63);
      tmp$_0 = URL$Companion_getInstance().invoke_k2ssjq$(null, null, null, path_0, query_0, fragment_0, false);
    }
    return tmp$_0;
  };
  URL$Companion.prototype.isAbsolute_61zpoe$ = function (url) {
    return (new StrReader(url)).tryRegex_t7befh$(this.schemeRegex_0) != null;
  };
  URL$Companion.prototype.resolve_puj7f4$ = function (base, access) {
    if (this.isAbsolute_61zpoe$(access))
      return access;
    else if (startsWith(access, '/'))
      return URL$Companion_getInstance().invoke_61zpoe$(base).copy_xduyly$(void 0, void 0, void 0, void 0, access).fullUrl;
    else {
      var $receiver = URL$Companion_getInstance().invoke_61zpoe$(base);
      return $receiver.copy_xduyly$(void 0, void 0, void 0, void 0, '/' + trimStart(normalize(get_pathInfo(substringBeforeLast($receiver.path, 47) + '/' + access)), Kotlin.charArrayOf(47))).fullUrl;
    }
  };
  URL$Companion.prototype.decodeComponent_58gtll$ = function (s, charset, formUrlEncoded) {
    if (charset === void 0)
      charset = UTF8;
    if (formUrlEncoded === void 0)
      formUrlEncoded = false;
    var bos = ByteArrayBuilder_init();
    var len = s.length;
    var n = 0;
    while (n < len) {
      var c = s.charCodeAt(n);
      switch (c) {
        case 37:
          bos.append_s8j3t7$(toByte(toInt_0(substr_0(s, n + 1 | 0, 2), 16)));
          n = n + 2 | 0;
          break;
        case 43:
          if (formUrlEncoded) {
            bos.append_s8j3t7$(toByte(32));
          } else {
            bos.append_s8j3t7$(toByte(43));
          }

          break;
        default:bos.append_s8j3t7$(toByte(c | 0));
          break;
      }
      n = n + 1 | 0;
    }
    return toString_2(bos.toByteArray(), charset);
  };
  URL$Companion.prototype.encodeComponent_58gtll$ = function (s, charset, formUrlEncoded) {
    if (charset === void 0)
      charset = UTF8;
    if (formUrlEncoded === void 0)
      formUrlEncoded = false;
    var sb = StringBuilder_init_0(s.length);
    var data = toByteArray(s, charset);
    for (var n = 0; n < data.length; n++) {
      var c = data[n];
      var cc = toChar(c);
      if (cc === 32)
        if (formUrlEncoded)
          sb.append_61zpoe$('+');
        else
          sb.append_61zpoe$('%20');
      else if ((new CharRange(97, 122)).contains_mef7kx$(cc) || (new CharRange(65, 90)).contains_mef7kx$(cc) || (new CharRange(48, 57)).contains_mef7kx$(cc) || cc === 45 || cc === 95 || cc === 46 || cc === 42)
        sb.append_s8itvh$(cc);
      else {
        sb.append_s8itvh$(37);
        for (var n_0 = 1; n_0 >= 0; n_0--)
          sb.append_s8itvh$(Hex_getInstance().DIGITS_UPPER.charCodeAt(c >>> (n_0 * 4 | 0) & 15));
      }
    }
    return sb.toString();
  };
  URL$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var URL$Companion_instance = null;
  function URL$Companion_getInstance() {
    if (URL$Companion_instance === null) {
      new URL$Companion();
    }return URL$Companion_instance;
  }
  function URL$fullUrl$lambda(this$URL) {
    return function () {
      return this$URL.toUrlString_86i9zv$().toString();
    };
  }
  function URL$fullUrlWithoutScheme$lambda(this$URL) {
    return function () {
      return this$URL.toUrlString_86i9zv$(false).toString();
    };
  }
  function URL$pathWithQuery$lambda(this$URL) {
    return function () {
      if (this$URL.query != null) {
        return this$URL.path + '?' + toString(this$URL.query);
      } else {
        return this$URL.path;
      }
    };
  }
  URL_0.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'URL',
    interfaces: []
  };
  URL_0.prototype.component1 = function () {
    return this.isOpaque;
  };
  URL_0.prototype.component2 = function () {
    return this.scheme;
  };
  URL_0.prototype.component3 = function () {
    return this.userInfo;
  };
  URL_0.prototype.component4 = function () {
    return this.host;
  };
  URL_0.prototype.component5 = function () {
    return this.path;
  };
  URL_0.prototype.component6 = function () {
    return this.query;
  };
  URL_0.prototype.component7 = function () {
    return this.fragment;
  };
  URL_0.prototype.component8 = function () {
    return this.defaultPort;
  };
  URL_0.prototype.copy_xduyly$ = function (isOpaque, scheme, userInfo, host, path, query, fragment, defaultPort) {
    return new URL_0(isOpaque === void 0 ? this.isOpaque : isOpaque, scheme === void 0 ? this.scheme : scheme, userInfo === void 0 ? this.userInfo : userInfo, host === void 0 ? this.host : host, path === void 0 ? this.path : path, query === void 0 ? this.query : query, fragment === void 0 ? this.fragment : fragment, defaultPort === void 0 ? this.defaultPort : defaultPort);
  };
  URL_0.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.isOpaque) | 0;
    result = result * 31 + Kotlin.hashCode(this.scheme) | 0;
    result = result * 31 + Kotlin.hashCode(this.userInfo) | 0;
    result = result * 31 + Kotlin.hashCode(this.host) | 0;
    result = result * 31 + Kotlin.hashCode(this.path) | 0;
    result = result * 31 + Kotlin.hashCode(this.query) | 0;
    result = result * 31 + Kotlin.hashCode(this.fragment) | 0;
    result = result * 31 + Kotlin.hashCode(this.defaultPort) | 0;
    return result;
  };
  URL_0.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.isOpaque, other.isOpaque) && Kotlin.equals(this.scheme, other.scheme) && Kotlin.equals(this.userInfo, other.userInfo) && Kotlin.equals(this.host, other.host) && Kotlin.equals(this.path, other.path) && Kotlin.equals(this.query, other.query) && Kotlin.equals(this.fragment, other.fragment) && Kotlin.equals(this.defaultPort, other.defaultPort)))));
  };
  function createBase64URLForData(data, contentType) {
    return 'data:' + contentType + ';base64,' + toBase64(data);
  }
  function Comparator$ObjectLiteral_0(closure$comparison) {
    this.closure$comparison = closure$comparison;
  }
  Comparator$ObjectLiteral_0.prototype.compare = function (a, b) {
    return this.closure$comparison(a, b);
  };
  Comparator$ObjectLiteral_0.$metadata$ = {kind: Kind_CLASS, interfaces: [Comparator]};
  var compareBy$lambda = wrapFunction(function () {
    var compareValues = Kotlin.kotlin.comparisons.compareValues_s00gnj$;
    return function (closure$selector) {
      return function (a, b) {
        var selector = closure$selector;
        return compareValues(selector(a), selector(b));
      };
    };
  });
  function Http() {
    Http$Companion_getInstance();
  }
  function Http$Companion() {
    Http$Companion_instance = this;
    this.Date = DateFormat.Companion.invoke_61zpoe$('EEE, dd MMM yyyy HH:mm:ss z');
  }
  Http$Companion.prototype.TemporalRedirect_61zpoe$ = function (uri) {
    return new Http$RedirectException(307, uri);
  };
  Http$Companion.prototype.PermanentRedirect_61zpoe$ = function (uri) {
    return new Http$RedirectException(301, uri);
  };
  Http$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Http$Companion_instance = null;
  function Http$Companion_getInstance() {
    if (Http$Companion_instance === null) {
      new Http$Companion();
    }return Http$Companion_instance;
  }
  function Http$Methods(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Http$Methods_initFields() {
    Http$Methods_initFields = function () {
    };
    Http$Methods$ALL_instance = new Http$Methods('ALL', 0);
    Http$Methods$OPTIONS_instance = new Http$Methods('OPTIONS', 1);
    Http$Methods$GET_instance = new Http$Methods('GET', 2);
    Http$Methods$HEAD_instance = new Http$Methods('HEAD', 3);
    Http$Methods$POST_instance = new Http$Methods('POST', 4);
    Http$Methods$PUT_instance = new Http$Methods('PUT', 5);
    Http$Methods$DELETE_instance = new Http$Methods('DELETE', 6);
    Http$Methods$TRACE_instance = new Http$Methods('TRACE', 7);
    Http$Methods$CONNECT_instance = new Http$Methods('CONNECT', 8);
    Http$Methods$PATCH_instance = new Http$Methods('PATCH', 9);
  }
  var Http$Methods$ALL_instance;
  function Http$Methods$ALL_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$ALL_instance;
  }
  var Http$Methods$OPTIONS_instance;
  function Http$Methods$OPTIONS_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$OPTIONS_instance;
  }
  var Http$Methods$GET_instance;
  function Http$Methods$GET_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$GET_instance;
  }
  var Http$Methods$HEAD_instance;
  function Http$Methods$HEAD_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$HEAD_instance;
  }
  var Http$Methods$POST_instance;
  function Http$Methods$POST_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$POST_instance;
  }
  var Http$Methods$PUT_instance;
  function Http$Methods$PUT_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$PUT_instance;
  }
  var Http$Methods$DELETE_instance;
  function Http$Methods$DELETE_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$DELETE_instance;
  }
  var Http$Methods$TRACE_instance;
  function Http$Methods$TRACE_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$TRACE_instance;
  }
  var Http$Methods$CONNECT_instance;
  function Http$Methods$CONNECT_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$CONNECT_instance;
  }
  var Http$Methods$PATCH_instance;
  function Http$Methods$PATCH_getInstance() {
    Http$Methods_initFields();
    return Http$Methods$PATCH_instance;
  }
  Http$Methods.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Methods',
    interfaces: [Http$Method, Enum]
  };
  function Http$Methods$values() {
    return [Http$Methods$ALL_getInstance(), Http$Methods$OPTIONS_getInstance(), Http$Methods$GET_getInstance(), Http$Methods$HEAD_getInstance(), Http$Methods$POST_getInstance(), Http$Methods$PUT_getInstance(), Http$Methods$DELETE_getInstance(), Http$Methods$TRACE_getInstance(), Http$Methods$CONNECT_getInstance(), Http$Methods$PATCH_getInstance()];
  }
  Http$Methods.values = Http$Methods$values;
  function Http$Methods$valueOf(name) {
    switch (name) {
      case 'ALL':
        return Http$Methods$ALL_getInstance();
      case 'OPTIONS':
        return Http$Methods$OPTIONS_getInstance();
      case 'GET':
        return Http$Methods$GET_getInstance();
      case 'HEAD':
        return Http$Methods$HEAD_getInstance();
      case 'POST':
        return Http$Methods$POST_getInstance();
      case 'PUT':
        return Http$Methods$PUT_getInstance();
      case 'DELETE':
        return Http$Methods$DELETE_getInstance();
      case 'TRACE':
        return Http$Methods$TRACE_getInstance();
      case 'CONNECT':
        return Http$Methods$CONNECT_getInstance();
      case 'PATCH':
        return Http$Methods$PATCH_getInstance();
      default:throwISE('No enum constant com.soywiz.korio.net.http.Http.Methods.' + name);
    }
  }
  Http$Methods.valueOf_61zpoe$ = Http$Methods$valueOf;
  function Http$Method() {
    Http$Method$Companion_getInstance();
  }
  function Http$Method$Companion() {
    Http$Method$Companion_instance = this;
    this.OPTIONS = Http$Methods$OPTIONS_getInstance();
    this.GET = Http$Methods$GET_getInstance();
    this.HEAD = Http$Methods$HEAD_getInstance();
    this.POST = Http$Methods$POST_getInstance();
    this.PUT = Http$Methods$PUT_getInstance();
    this.DELETE = Http$Methods$DELETE_getInstance();
    this.TRACE = Http$Methods$TRACE_getInstance();
    this.CONNECT = Http$Methods$CONNECT_getInstance();
    this.PATCH = Http$Methods$PATCH_getInstance();
    this._values = listOf([this.OPTIONS, this.GET, this.HEAD, this.POST, this.PUT, this.DELETE, this.TRACE, this.CONNECT, this.PATCH]);
    var $receiver = this._values;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(to(item.name, item));
    }
    this.valuesMap = toMap(destination);
  }
  Http$Method$Companion.prototype.values = function () {
    return this._values;
  };
  Http$Method$Companion.prototype.get_61zpoe$ = function (name) {
    var tmp$ = this.valuesMap;
    var $receiver = name.toUpperCase();
    var tmp$_0;
    var key = trim_0(Kotlin.isCharSequence(tmp$_0 = $receiver) ? tmp$_0 : throwCCE()).toString();
    var tmp$_1;
    return (tmp$_1 = tmp$.get_11rb$(key)) != null ? tmp$_1 : new Http$CustomMethod(name);
  };
  Http$Method$Companion.prototype.invoke_61zpoe$ = function (name) {
    return this.get_61zpoe$(name);
  };
  Http$Method$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Http$Method$Companion_instance = null;
  function Http$Method$Companion_getInstance() {
    if (Http$Method$Companion_instance === null) {
      new Http$Method$Companion();
    }return Http$Method$Companion_instance;
  }
  Http$Method.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Method',
    interfaces: []
  };
  function Http$CustomMethod(_name) {
    this._name = _name;
    var $receiver = this._name;
    var tmp$;
    this.nameUC = trim_0(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE()).toString().toUpperCase();
  }
  Object.defineProperty(Http$CustomMethod.prototype, 'name', {
    get: function () {
      return this.nameUC;
    }
  });
  Http$CustomMethod.prototype.toString = function () {
    return this.nameUC;
  };
  Http$CustomMethod.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CustomMethod',
    interfaces: [Http$Method]
  };
  Http$CustomMethod.prototype.component1 = function () {
    return this._name;
  };
  Http$CustomMethod.prototype.copy_61zpoe$ = function (_name) {
    return new Http$CustomMethod(_name === void 0 ? this._name : _name);
  };
  Http$CustomMethod.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this._name) | 0;
    return result;
  };
  Http$CustomMethod.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this._name, other._name))));
  };
  function Http$HttpException(statusCode, msg, statusText, headers) {
    Http$HttpException$Companion_getInstance();
    var tmp$;
    if (msg === void 0)
      msg = 'Error' + statusCode;
    if (statusText === void 0)
      statusText = (tmp$ = HttpStatusMessage_getInstance().CODES.get_11rb$(statusCode)) != null ? tmp$ : 'Error' + statusCode;
    if (headers === void 0)
      headers = Http$Http$Headers_init([]);
    IOException.call(this, statusCode.toString() + ' ' + statusText + ' - ' + msg);
    this.statusCode = statusCode;
    this.msg = msg;
    this.statusText = statusText;
    this.headers = headers;
    this.name = 'Http$HttpException';
  }
  function Http$HttpException$Companion() {
    Http$HttpException$Companion_instance = this;
  }
  Http$HttpException$Companion.prototype.unauthorizedBasic_puj7f4$ = function (realm, msg) {
    if (realm === void 0)
      realm = 'Realm';
    if (msg === void 0)
      msg = 'Unauthorized';
    throw new Http$HttpException(401, msg, void 0, Http$Http$Headers_init([to('WWW-Authenticate', 'Basic realm=' + '"' + realm + '"')]));
  };
  Http$HttpException$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Http$HttpException$Companion_instance = null;
  function Http$HttpException$Companion_getInstance() {
    if (Http$HttpException$Companion_instance === null) {
      new Http$HttpException$Companion();
    }return Http$HttpException$Companion_instance;
  }
  Http$HttpException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HttpException',
    interfaces: [IOException]
  };
  function Http$Auth(user, pass, digest) {
    Http$Auth$Companion_getInstance();
    this.user = user;
    this.pass = pass;
    this.digest = digest;
  }
  function Http$Auth$Companion() {
    Http$Auth$Companion_instance = this;
  }
  Http$Auth$Companion.prototype.parse_61zpoe$ = function (auth) {
    var parts = split(auth, Kotlin.charArrayOf(32), void 0, 2);
    if (equals_0(parts.get_za3lpa$(0), 'basic', true)) {
      var parts_0 = split(toString_2(fromBase64(parts.get_za3lpa$(1)), UTF8), Kotlin.charArrayOf(58), void 0, 2);
      return new Http$Auth(parts_0.get_za3lpa$(0), parts_0.get_za3lpa$(1), '');
    } else {
      if (parts.get_za3lpa$(0).length === 0) {
        return new Http$Auth('', '', '');
      } else {
        invalidOp('Just supported basic auth');
      }
    }
  };
  Http$Auth$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Http$Auth$Companion_instance = null;
  function Http$Auth$Companion_getInstance() {
    if (Http$Auth$Companion_instance === null) {
      new Http$Auth$Companion();
    }return Http$Auth$Companion_instance;
  }
  Http$Auth.prototype.validate_6hosri$ = function (expectedUser, expectedPass, realm) {
    if (realm === void 0)
      realm = 'Realm';
    if (equals(this.user, expectedUser) && equals(this.pass, expectedPass))
      return true;
    return false;
  };
  function Coroutine$checkBasic_1amyco$($this, realm_0, check_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$realm = realm_0;
    this.local$check = check_0;
  }
  Coroutine$checkBasic_1amyco$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$checkBasic_1amyco$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$checkBasic_1amyco$.prototype.constructor = Coroutine$checkBasic_1amyco$;
  Coroutine$checkBasic_1amyco$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$realm === void 0)
              this.local$realm = 'Realm';
            if (!(this.$this.user.length === 0)) {
              this.state_0 = 2;
              this.result_0 = this.local$check(this.$this, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.local$tmp$ = true;
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = !this.result_0;
            this.state_0 = 3;
            continue;
          case 3:
            if (this.local$tmp$)
              Http$HttpException$Companion_getInstance().unauthorizedBasic_puj7f4$('Domain', 'Invalid auth');
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Http$Auth.prototype.checkBasic_1amyco$ = function (realm_0, check_0, continuation_0, suspended) {
    var instance = new Coroutine$checkBasic_1amyco$(this, realm_0, check_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  Http$Auth.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Auth',
    interfaces: []
  };
  Http$Auth.prototype.component1 = function () {
    return this.user;
  };
  Http$Auth.prototype.component2 = function () {
    return this.pass;
  };
  Http$Auth.prototype.component3 = function () {
    return this.digest;
  };
  Http$Auth.prototype.copy_6hosri$ = function (user, pass, digest) {
    return new Http$Auth(user === void 0 ? this.user : user, pass === void 0 ? this.pass : pass, digest === void 0 ? this.digest : digest);
  };
  Http$Auth.prototype.toString = function () {
    return 'Auth(user=' + Kotlin.toString(this.user) + (', pass=' + Kotlin.toString(this.pass)) + (', digest=' + Kotlin.toString(this.digest)) + ')';
  };
  Http$Auth.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.user) | 0;
    result = result * 31 + Kotlin.hashCode(this.pass) | 0;
    result = result * 31 + Kotlin.hashCode(this.digest) | 0;
    return result;
  };
  Http$Auth.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.user, other.user) && Kotlin.equals(this.pass, other.pass) && Kotlin.equals(this.digest, other.digest)))));
  };
  function Http$Request(uri, headers) {
    this.uri = uri;
    this.headers = headers;
    this.parts_jrdksm$_0 = lazy(Http$Request$parts$lambda(this));
    this.path_ufa8h7$_0 = lazy(Http$Request$path$lambda(this));
    this.queryString_69y35t$_0 = lazy(Http$Request$queryString$lambda(this));
    this.getParams_q1kxia$_0 = lazy(Http$Request$getParams$lambda(this));
    this.absoluteURI_58azy3$_0 = lazy(Http$Request$absoluteURI$lambda(this));
  }
  Object.defineProperty(Http$Request.prototype, 'parts_0', {
    get: function () {
      return this.parts_jrdksm$_0.value;
    }
  });
  Object.defineProperty(Http$Request.prototype, 'path', {
    get: function () {
      return this.path_ufa8h7$_0.value;
    }
  });
  Object.defineProperty(Http$Request.prototype, 'queryString', {
    get: function () {
      return this.queryString_69y35t$_0.value;
    }
  });
  Object.defineProperty(Http$Request.prototype, 'getParams', {
    get: function () {
      return this.getParams_q1kxia$_0.value;
    }
  });
  Object.defineProperty(Http$Request.prototype, 'absoluteURI', {
    get: function () {
      return this.absoluteURI_58azy3$_0.value;
    }
  });
  function Http$Request$parts$lambda(this$Request) {
    return function () {
      return split(this$Request.uri, Kotlin.charArrayOf(63), void 0, 2);
    };
  }
  function Http$Request$path$lambda(this$Request) {
    return function () {
      return this$Request.parts_0.get_za3lpa$(0);
    };
  }
  function Http$Request$queryString$lambda(this$Request) {
    return function () {
      var $receiver = this$Request.parts_0;
      return 1 >= 0 && 1 <= get_lastIndex_0($receiver) ? $receiver.get_za3lpa$(1) : '';
    };
  }
  function Http$Request$getParams$lambda(this$Request) {
    return function () {
      return QueryString_getInstance().decode_6bul2c$(this$Request.queryString);
    };
  }
  function Http$Request$absoluteURI$lambda(this$Request) {
    return function () {
      return this$Request.uri;
    };
  }
  Http$Request.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Request',
    interfaces: []
  };
  function Http$Response() {
    this.headers = ArrayList_init();
  }
  Http$Response.prototype.header_puj7f4$ = function (key, value) {
    var $receiver = this.headers;
    var element = to(key, value);
    $receiver.add_11rb$(element);
  };
  Http$Response.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Response',
    interfaces: []
  };
  function Http$Headers(items) {
    Http$Headers$Companion_getInstance();
    this.items = items;
  }
  Http$Headers.prototype.iterator = function () {
    return this.items.iterator();
  };
  Http$Headers.prototype.get_61zpoe$ = function (key) {
    return this.getFirst_61zpoe$(key);
  };
  Http$Headers.prototype.getAll_61zpoe$ = function (key) {
    var $receiver = this.items;
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (equals_0(element.first, key, true))
        destination.add_11rb$(element);
    }
    var destination_0 = ArrayList_init_0(collectionSizeOrDefault(destination, 10));
    var tmp$_0;
    tmp$_0 = destination.iterator();
    while (tmp$_0.hasNext()) {
      var item = tmp$_0.next();
      destination_0.add_11rb$(item.second);
    }
    return destination_0;
  };
  Http$Headers.prototype.getFirst_61zpoe$ = function (key) {
    var tmp$;
    var $receiver = this.items;
    var firstOrNull$result;
    firstOrNull$break: do {
      var tmp$_0;
      tmp$_0 = $receiver.iterator();
      while (tmp$_0.hasNext()) {
        var element = tmp$_0.next();
        if (equals_0(element.first, key, true)) {
          firstOrNull$result = element;
          break firstOrNull$break;
        }}
      firstOrNull$result = null;
    }
     while (false);
    return (tmp$ = firstOrNull$result) != null ? tmp$.second : null;
  };
  function Http$Headers$toListGrouped$lambda(it) {
    return it.first.toLowerCase();
  }
  Http$Headers.prototype.toListGrouped = function () {
    var $receiver = this.items;
    var destination = LinkedHashMap_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var key = element.first.toLowerCase();
      var tmp$_0;
      var value = destination.get_11rb$(key);
      if (value == null) {
        var answer = ArrayList_init();
        destination.put_xwzc9p$(key, answer);
        tmp$_0 = answer;
      } else {
        tmp$_0 = value;
      }
      var list = tmp$_0;
      list.add_11rb$(element);
    }
    var destination_0 = ArrayList_init_0(destination.size);
    var tmp$_1;
    tmp$_1 = destination.entries.iterator();
    while (tmp$_1.hasNext()) {
      var item = tmp$_1.next();
      var tmp$_2 = destination_0.add_11rb$;
      var tmp$_3 = first_0(item.value).first;
      var $receiver_0 = item.value;
      var destination_1 = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
      var tmp$_4;
      tmp$_4 = $receiver_0.iterator();
      while (tmp$_4.hasNext()) {
        var item_0 = tmp$_4.next();
        destination_1.add_11rb$(item_0.second);
      }
      tmp$_2.call(destination_0, to(tmp$_3, destination_1));
    }
    return sortedWith(destination_0, new Comparator$ObjectLiteral_0(compareBy$lambda(Http$Headers$toListGrouped$lambda)));
  };
  Http$Headers.prototype.withAppendedHeaders_3efbss$ = function (newHeaders) {
    return new Http$Headers(plus(this.items, toList(newHeaders)));
  };
  Http$Headers.prototype.withReplaceHeaders_3efbss$ = function (newHeaders) {
    var destination = ArrayList_init_0(collectionSizeOrDefault(newHeaders, 10));
    var tmp$;
    tmp$ = newHeaders.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(item.first.toLowerCase());
    }
    var replaceKeys = toSet(destination);
    var $receiver = this.items;
    var destination_0 = ArrayList_init();
    var tmp$_0;
    tmp$_0 = $receiver.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      if (!replaceKeys.contains_11rb$(element.first.toLowerCase()))
        destination_0.add_11rb$(element);
    }
    return new Http$Headers(plus(destination_0, toList(newHeaders)));
  };
  Http$Headers.prototype.withAppendedHeaders_9ih0sy$ = function (newHeaders) {
    return this.withAppendedHeaders_3efbss$(toList_0(newHeaders));
  };
  Http$Headers.prototype.withReplaceHeaders_9ih0sy$ = function (newHeaders) {
    return this.withReplaceHeaders_3efbss$(toList_0(newHeaders));
  };
  Http$Headers.prototype.withReplaceHeaders_5dayij$ = function (newHeaders) {
    return this.withReplaceHeaders_3efbss$(toList(newHeaders));
  };
  Http$Headers.prototype.containsAll_5dayij$ = function (other) {
    var $receiver = other.items;
    var all$result;
    all$break: do {
      var tmp$;
      if (Kotlin.isType($receiver, Collection) && $receiver.isEmpty()) {
        all$result = true;
        break all$break;
      }tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!contains_0(this, element)) {
          all$result = false;
          break all$break;
        }}
      all$result = true;
    }
     while (false);
    return all$result;
  };
  Http$Headers.prototype.plus_5dayij$ = function (that) {
    return this.withAppendedHeaders_3efbss$(that.items);
  };
  Http$Headers.prototype.toString = function () {
    return 'Headers(' + joinToString(this.toListGrouped(), ', ') + ')';
  };
  function Http$Headers$Builder() {
    this.items_0 = ArrayList_init();
  }
  Http$Headers$Builder.prototype.put_puj7f4$ = function (key, value) {
    var $receiver = this.items_0;
    var element = to(key, value);
    $receiver.add_11rb$(element);
  };
  Http$Headers$Builder.prototype.build = function () {
    return new Http$Headers(this.items_0);
  };
  Http$Headers$Builder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Builder',
    interfaces: []
  };
  function Http$Headers$Companion() {
    Http$Headers$Companion_instance = this;
    this.ContentLength = 'Content-Length';
    this.ContentType = 'Content-Type';
  }
  Http$Headers$Companion.prototype.build_amwc05$ = function (block) {
    var $receiver = new Http$Headers$Builder();
    block($receiver);
    return $receiver.build();
  };
  Http$Headers$Companion.prototype.fromListMap_wd7g4x$ = function (map) {
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = map.entries.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var tmp$_0;
      if (element.key == null) {
        tmp$_0 = emptyList();
      } else {
        var $receiver = element.value;
        var destination_0 = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
        var tmp$_1;
        tmp$_1 = $receiver.iterator();
        while (tmp$_1.hasNext()) {
          var item = tmp$_1.next();
          destination_0.add_11rb$(to(ensureNotNull(element.key), item));
        }
        tmp$_0 = destination_0;
      }
      var list = tmp$_0;
      addAll(destination, list);
    }
    return new Http$Headers(destination);
  };
  Http$Headers$Companion.prototype.parse_pdl1vj$ = function (str) {
    if (str == null)
      return Http$Http$Headers_init([]);
    var $receiver = split_0(str, ['\n']);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var tmp$_0 = destination.add_11rb$;
      var tmp$_1;
      var parts = split(trim_0(Kotlin.isCharSequence(tmp$_1 = item) ? tmp$_1 : throwCCE()).toString(), Kotlin.charArrayOf(58), void 0, 2);
      var tmp$_2;
      if (parts.size >= 2) {
        var $receiver_0 = parts.get_za3lpa$(0);
        var tmp$_3;
        var tmp$_4 = trim_0(Kotlin.isCharSequence(tmp$_3 = $receiver_0) ? tmp$_3 : throwCCE()).toString();
        var $receiver_1 = parts.get_za3lpa$(1);
        var tmp$_5;
        tmp$_2 = to(tmp$_4, trim_0(Kotlin.isCharSequence(tmp$_5 = $receiver_1) ? tmp$_5 : throwCCE()).toString());
      } else
        tmp$_2 = null;
      tmp$_0.call(destination, tmp$_2);
    }
    return new Http$Headers(filterNotNull(destination));
  };
  Http$Headers$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Http$Headers$Companion_instance = null;
  function Http$Headers$Companion_getInstance() {
    if (Http$Headers$Companion_instance === null) {
      new Http$Headers$Companion();
    }return Http$Headers$Companion_instance;
  }
  Http$Headers.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Headers',
    interfaces: [Iterable]
  };
  function Http$Http$Headers_init(items, $this) {
    $this = $this || Object.create(Http$Headers.prototype);
    Http$Headers.call($this, toList_0(items));
    return $this;
  }
  function Http$Http$Headers_init_0(map, $this) {
    $this = $this || Object.create(Http$Headers.prototype);
    var destination = ArrayList_init_0(map.size);
    var tmp$;
    tmp$ = map.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(to(item.key, item.value));
    }
    Http$Headers.call($this, destination);
    return $this;
  }
  function Http$Http$Headers_init_1(str, $this) {
    $this = $this || Object.create(Http$Headers.prototype);
    Http$Headers.call($this, Http$Headers$Companion_getInstance().parse_pdl1vj$(str).items);
    return $this;
  }
  Http$Headers.prototype.component1 = function () {
    return this.items;
  };
  Http$Headers.prototype.copy_3efbss$ = function (items) {
    return new Http$Headers(items === void 0 ? this.items : items);
  };
  Http$Headers.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.items) | 0;
    return result;
  };
  Http$Headers.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.items, other.items))));
  };
  function Http$RedirectException(code, redirectUri) {
    if (code === void 0)
      code = 307;
    Http$HttpException.call(this, code, HttpStatusMessage_getInstance().invoke_za3lpa$(code));
    this.code = code;
    this.redirectUri = redirectUri;
    this.name = 'Http$RedirectException';
  }
  Http$RedirectException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RedirectException',
    interfaces: [Http$HttpException]
  };
  Http$RedirectException.prototype.component1 = function () {
    return this.code;
  };
  Http$RedirectException.prototype.component2 = function () {
    return this.redirectUri;
  };
  Http$RedirectException.prototype.copy_19mbxw$ = function (code, redirectUri) {
    return new Http$RedirectException(code === void 0 ? this.code : code, redirectUri === void 0 ? this.redirectUri : redirectUri);
  };
  Http$RedirectException.prototype.toString = function () {
    return 'RedirectException(code=' + Kotlin.toString(this.code) + (', redirectUri=' + Kotlin.toString(this.redirectUri)) + ')';
  };
  Http$RedirectException.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.code) | 0;
    result = result * 31 + Kotlin.hashCode(this.redirectUri) | 0;
    return result;
  };
  Http$RedirectException.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.code, other.code) && Kotlin.equals(this.redirectUri, other.redirectUri)))));
  };
  Http.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Http',
    interfaces: []
  };
  function HttpClient() {
    HttpClient$Companion_getInstance();
    this.ignoreSslCertificates = false;
  }
  HttpClient.prototype.requestInternal_wintjk$ = function (method, url, headers, content, continuation, callback$default) {
    if (headers === void 0)
      headers = Http$Http$Headers_init([]);
    if (content === void 0)
      content = null;
    return callback$default ? callback$default(method, url, headers, content, continuation) : this.requestInternal_wintjk$$default(method, url, headers, content, continuation);
  };
  function HttpClient$Response(status, statusText, headers, content) {
    this.status = status;
    this.statusText = statusText;
    this.headers = headers;
    this.content = content;
    this.success = this.status < 400;
    this.responseCharset_pcy4sm$_0 = lazy(HttpClient$Response$responseCharset$lambda);
  }
  function Coroutine$readAllBytes($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$readAllBytes.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readAllBytes.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readAllBytes.prototype.constructor = Coroutine$readAllBytes;
  Coroutine$readAllBytes.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readAll(this.$this.content, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var allContent = this.result_0;
            return allContent;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient$Response.prototype.readAllBytes = function (continuation_0, suspended) {
    var instance = new Coroutine$readAllBytes(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  Object.defineProperty(HttpClient$Response.prototype, 'responseCharset', {
    get: function () {
      return this.responseCharset_pcy4sm$_0.value;
    }
  });
  function Coroutine$readAllString_qa9gbo$($this, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$charset = charset_0;
  }
  Coroutine$readAllString_qa9gbo$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readAllString_qa9gbo$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readAllString_qa9gbo$.prototype.constructor = Coroutine$readAllString_qa9gbo$;
  Coroutine$readAllString_qa9gbo$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = this.$this.responseCharset;
            this.state_0 = 2;
            this.result_0 = this.$this.readAllBytes(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var bytes = this.result_0;
            return toString_2(bytes, this.local$charset);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient$Response.prototype.readAllString_qa9gbo$ = function (charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readAllString_qa9gbo$(this, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$checkErrors($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
  }
  Coroutine$checkErrors.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$checkErrors.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$checkErrors.prototype.constructor = Coroutine$checkErrors;
  Coroutine$checkErrors.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (!this.$this.success) {
              this.local$tmp$ = this.$this.status;
              this.state_0 = 2;
              this.result_0 = this.$this.readAllString_qa9gbo$(void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            throw new Http$HttpException(this.local$tmp$, this.result_0, this.$this.statusText);
          case 3:
            return this.$this;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient$Response.prototype.checkErrors = function (continuation_0, suspended) {
    var instance = new Coroutine$checkErrors(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  HttpClient$Response.prototype.withStringResponse_6zdodq$ = function (str, charset) {
    if (charset === void 0)
      charset = UTF8;
    return this.copy_54vabp$(void 0, void 0, void 0, openAsync(toByteArray(str, charset)));
  };
  HttpClient$Response.prototype.toCompletedResponse_mh5how$ = function (content) {
    return new HttpClient$CompletedResponse(this.status, this.statusText, this.headers, content);
  };
  function HttpClient$Response$responseCharset$lambda() {
    return UTF8;
  }
  HttpClient$Response.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Response',
    interfaces: []
  };
  HttpClient$Response.prototype.component1 = function () {
    return this.status;
  };
  HttpClient$Response.prototype.component2 = function () {
    return this.statusText;
  };
  HttpClient$Response.prototype.component3 = function () {
    return this.headers;
  };
  HttpClient$Response.prototype.component4 = function () {
    return this.content;
  };
  HttpClient$Response.prototype.copy_54vabp$ = function (status, statusText, headers, content) {
    return new HttpClient$Response(status === void 0 ? this.status : status, statusText === void 0 ? this.statusText : statusText, headers === void 0 ? this.headers : headers, content === void 0 ? this.content : content);
  };
  HttpClient$Response.prototype.toString = function () {
    return 'Response(status=' + Kotlin.toString(this.status) + (', statusText=' + Kotlin.toString(this.statusText)) + (', headers=' + Kotlin.toString(this.headers)) + (', content=' + Kotlin.toString(this.content)) + ')';
  };
  HttpClient$Response.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.status) | 0;
    result = result * 31 + Kotlin.hashCode(this.statusText) | 0;
    result = result * 31 + Kotlin.hashCode(this.headers) | 0;
    result = result * 31 + Kotlin.hashCode(this.content) | 0;
    return result;
  };
  HttpClient$Response.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.status, other.status) && Kotlin.equals(this.statusText, other.statusText) && Kotlin.equals(this.headers, other.headers) && Kotlin.equals(this.content, other.content)))));
  };
  function HttpClient$CompletedResponse(status, statusText, headers, content) {
    this.status = status;
    this.statusText = statusText;
    this.headers = headers;
    this.content = content;
    this.success = this.status < 400;
  }
  HttpClient$CompletedResponse.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CompletedResponse',
    interfaces: []
  };
  HttpClient$CompletedResponse.prototype.component1 = function () {
    return this.status;
  };
  HttpClient$CompletedResponse.prototype.component2 = function () {
    return this.statusText;
  };
  HttpClient$CompletedResponse.prototype.component3 = function () {
    return this.headers;
  };
  HttpClient$CompletedResponse.prototype.component4 = function () {
    return this.content;
  };
  HttpClient$CompletedResponse.prototype.copy_alsvp4$ = function (status, statusText, headers, content) {
    return new HttpClient$CompletedResponse(status === void 0 ? this.status : status, statusText === void 0 ? this.statusText : statusText, headers === void 0 ? this.headers : headers, content === void 0 ? this.content : content);
  };
  HttpClient$CompletedResponse.prototype.toString = function () {
    return 'CompletedResponse(status=' + Kotlin.toString(this.status) + (', statusText=' + Kotlin.toString(this.statusText)) + (', headers=' + Kotlin.toString(this.headers)) + (', content=' + Kotlin.toString(this.content)) + ')';
  };
  HttpClient$CompletedResponse.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.status) | 0;
    result = result * 31 + Kotlin.hashCode(this.statusText) | 0;
    result = result * 31 + Kotlin.hashCode(this.headers) | 0;
    result = result * 31 + Kotlin.hashCode(this.content) | 0;
    return result;
  };
  HttpClient$CompletedResponse.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.status, other.status) && Kotlin.equals(this.statusText, other.statusText) && Kotlin.equals(this.headers, other.headers) && Kotlin.equals(this.content, other.content)))));
  };
  function HttpClient$RequestConfig(followRedirects, throwErrors, maxRedirects, referer, simulateBrowser) {
    if (followRedirects === void 0)
      followRedirects = true;
    if (throwErrors === void 0)
      throwErrors = false;
    if (maxRedirects === void 0)
      maxRedirects = 10;
    if (referer === void 0)
      referer = null;
    if (simulateBrowser === void 0)
      simulateBrowser = false;
    this.followRedirects = followRedirects;
    this.throwErrors = throwErrors;
    this.maxRedirects = maxRedirects;
    this.referer = referer;
    this.simulateBrowser = simulateBrowser;
  }
  HttpClient$RequestConfig.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RequestConfig',
    interfaces: []
  };
  HttpClient$RequestConfig.prototype.component1 = function () {
    return this.followRedirects;
  };
  HttpClient$RequestConfig.prototype.component2 = function () {
    return this.throwErrors;
  };
  HttpClient$RequestConfig.prototype.component3 = function () {
    return this.maxRedirects;
  };
  HttpClient$RequestConfig.prototype.component4 = function () {
    return this.referer;
  };
  HttpClient$RequestConfig.prototype.component5 = function () {
    return this.simulateBrowser;
  };
  HttpClient$RequestConfig.prototype.copy_nslxbw$ = function (followRedirects, throwErrors, maxRedirects, referer, simulateBrowser) {
    return new HttpClient$RequestConfig(followRedirects === void 0 ? this.followRedirects : followRedirects, throwErrors === void 0 ? this.throwErrors : throwErrors, maxRedirects === void 0 ? this.maxRedirects : maxRedirects, referer === void 0 ? this.referer : referer, simulateBrowser === void 0 ? this.simulateBrowser : simulateBrowser);
  };
  HttpClient$RequestConfig.prototype.toString = function () {
    return 'RequestConfig(followRedirects=' + Kotlin.toString(this.followRedirects) + (', throwErrors=' + Kotlin.toString(this.throwErrors)) + (', maxRedirects=' + Kotlin.toString(this.maxRedirects)) + (', referer=' + Kotlin.toString(this.referer)) + (', simulateBrowser=' + Kotlin.toString(this.simulateBrowser)) + ')';
  };
  HttpClient$RequestConfig.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.followRedirects) | 0;
    result = result * 31 + Kotlin.hashCode(this.throwErrors) | 0;
    result = result * 31 + Kotlin.hashCode(this.maxRedirects) | 0;
    result = result * 31 + Kotlin.hashCode(this.referer) | 0;
    result = result * 31 + Kotlin.hashCode(this.simulateBrowser) | 0;
    return result;
  };
  HttpClient$RequestConfig.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.followRedirects, other.followRedirects) && Kotlin.equals(this.throwErrors, other.throwErrors) && Kotlin.equals(this.maxRedirects, other.maxRedirects) && Kotlin.equals(this.referer, other.referer) && Kotlin.equals(this.simulateBrowser, other.simulateBrowser)))));
  };
  HttpClient.prototype.mergeUrls_h5cdg$_0 = function (base, append) {
    return URL$Companion_getInstance().resolve_puj7f4$(base, append);
  };
  function Coroutine$request_v6tn8p$($this, method_0, url_0, headers_0, content_0, config_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$response = void 0;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
    this.local$config = config_0;
  }
  Coroutine$request_v6tn8p$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$request_v6tn8p$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$request_v6tn8p$.prototype.constructor = Coroutine$request_v6tn8p$;
  Coroutine$request_v6tn8p$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$headers === void 0)
              this.local$headers = Http$Http$Headers_init([]);
            if (this.local$content === void 0)
              this.local$content = null;
            if (this.local$config === void 0)
              this.local$config = new HttpClient$RequestConfig();
            var tmp$;
            if (this.local$content != null) {
              this.state_0 = 2;
              this.result_0 = this.local$content.getLength(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.result_0 = null;
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            var contentLength = (tmp$ = this.result_0) != null ? tmp$ : L0;
            var actualHeaders = this.local$headers;
            var tmp$_0 = this.local$content != null;
            if (tmp$_0) {
              var any$result;
              any$break: do {
                var tmp$_1;
                if (Kotlin.isType(this.local$headers, Collection) && this.local$headers.isEmpty()) {
                  any$result = false;
                  break any$break;
                }tmp$_1 = this.local$headers.iterator();
                while (tmp$_1.hasNext()) {
                  var element = tmp$_1.next();
                  if (equals_0(element.first, Http$Headers$Companion_getInstance().ContentLength, true)) {
                    any$result = true;
                    break any$break;
                  }}
                any$result = false;
              }
               while (false);
              tmp$_0 = !any$result;
            }
            if (tmp$_0) {
              actualHeaders = actualHeaders.withReplaceHeaders_9ih0sy$([to(Http$Headers$Companion_getInstance().ContentLength, contentLength.toString())]);
            }
            if (this.local$config.simulateBrowser) {
              actualHeaders = HttpClient$Companion_getInstance().combineHeadersForHost_nyoy6g$(actualHeaders, null);
            }
            this.state_0 = 4;
            this.result_0 = this.$this.requestInternal_wintjk$(this.local$method, this.local$url, actualHeaders, this.local$content, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.local$$receiver = this.result_0;
            if (this.local$config.throwErrors) {
              this.state_0 = 5;
              this.result_0 = this.local$$receiver.checkErrors(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 6;
              continue;
            }

          case 5:
            this.state_0 = 6;
            continue;
          case 6:
            this.local$response = this.local$$receiver;
            if (this.local$config.followRedirects && this.local$config.maxRedirects >= 0) {
              var redirectLocation = this.local$response.headers.get_61zpoe$('location');
              if (redirectLocation != null) {
                this.state_0 = 7;
                this.result_0 = this.$this.request_v6tn8p$(this.local$method, this.$this.mergeUrls_h5cdg$_0(this.local$url, redirectLocation), this.local$headers.withReplaceHeaders_9ih0sy$([to('Referer', this.local$url)]), this.local$content, this.local$config.copy_nslxbw$(void 0, void 0, this.local$config.maxRedirects - 1 | 0), this);
                if (this.result_0 === COROUTINE_SUSPENDED)
                  return COROUTINE_SUSPENDED;
                continue;
              } else {
                this.state_0 = 8;
                continue;
              }
            } else {
              this.state_0 = 9;
              continue;
            }

          case 7:
            return this.result_0;
          case 8:
            this.state_0 = 9;
            continue;
          case 9:
            return this.local$response;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient.prototype.request_v6tn8p$ = function (method_0, url_0, headers_0, content_0, config_0, continuation_0, suspended) {
    var instance = new Coroutine$request_v6tn8p$(this, method_0, url_0, headers_0, content_0, config_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$requestAsString_v6tn8p$($this, method_0, url_0, headers_0, content_0, config_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$res = void 0;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
    this.local$config = config_0;
  }
  Coroutine$requestAsString_v6tn8p$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$requestAsString_v6tn8p$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$requestAsString_v6tn8p$.prototype.constructor = Coroutine$requestAsString_v6tn8p$;
  Coroutine$requestAsString_v6tn8p$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$headers === void 0)
              this.local$headers = Http$Http$Headers_init([]);
            if (this.local$content === void 0)
              this.local$content = null;
            if (this.local$config === void 0)
              this.local$config = new HttpClient$RequestConfig();
            this.state_0 = 2;
            this.result_0 = this.$this.request_v6tn8p$(this.local$method, this.local$url, this.local$headers, this.local$content, this.local$config, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$res = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$res.readAllString_qa9gbo$(void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.local$res.toCompletedResponse_mh5how$(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient.prototype.requestAsString_v6tn8p$ = function (method_0, url_0, headers_0, content_0, config_0, continuation_0, suspended) {
    var instance = new Coroutine$requestAsString_v6tn8p$(this, method_0, url_0, headers_0, content_0, config_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$requestAsBytes_v6tn8p$($this, method_0, url_0, headers_0, content_0, config_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$res = void 0;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
    this.local$config = config_0;
  }
  Coroutine$requestAsBytes_v6tn8p$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$requestAsBytes_v6tn8p$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$requestAsBytes_v6tn8p$.prototype.constructor = Coroutine$requestAsBytes_v6tn8p$;
  Coroutine$requestAsBytes_v6tn8p$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$headers === void 0)
              this.local$headers = Http$Http$Headers_init([]);
            if (this.local$content === void 0)
              this.local$content = null;
            if (this.local$config === void 0)
              this.local$config = new HttpClient$RequestConfig();
            this.state_0 = 2;
            this.result_0 = this.$this.request_v6tn8p$(this.local$method, this.local$url, this.local$headers, this.local$content, this.local$config, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$res = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$res.readAllBytes(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.local$res.toCompletedResponse_mh5how$(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient.prototype.requestAsBytes_v6tn8p$ = function (method_0, url_0, headers_0, content_0, config_0, continuation_0, suspended) {
    var instance = new Coroutine$requestAsBytes_v6tn8p$(this, method_0, url_0, headers_0, content_0, config_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readBytes_2y0c3t$($this, url_0, config_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$url = url_0;
    this.local$config = config_0;
  }
  Coroutine$readBytes_2y0c3t$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readBytes_2y0c3t$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readBytes_2y0c3t$.prototype.constructor = Coroutine$readBytes_2y0c3t$;
  Coroutine$readBytes_2y0c3t$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$config === void 0)
              this.local$config = new HttpClient$RequestConfig();
            this.state_0 = 2;
            this.result_0 = this.$this.requestAsBytes_v6tn8p$(Http$Method$Companion_getInstance().GET, this.local$url, void 0, void 0, this.local$config.copy_nslxbw$(void 0, true), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.content;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient.prototype.readBytes_2y0c3t$ = function (url_0, config_0, continuation_0, suspended) {
    var instance = new Coroutine$readBytes_2y0c3t$(this, url_0, config_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readString_2y0c3t$($this, url_0, config_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$url = url_0;
    this.local$config = config_0;
  }
  Coroutine$readString_2y0c3t$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readString_2y0c3t$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readString_2y0c3t$.prototype.constructor = Coroutine$readString_2y0c3t$;
  Coroutine$readString_2y0c3t$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$config === void 0)
              this.local$config = new HttpClient$RequestConfig();
            this.state_0 = 2;
            this.result_0 = this.$this.requestAsString_v6tn8p$(Http$Method$Companion_getInstance().GET, this.local$url, void 0, void 0, this.local$config.copy_nslxbw$(void 0, true), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.content;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient.prototype.readString_2y0c3t$ = function (url_0, config_0, continuation_0, suspended) {
    var instance = new Coroutine$readString_2y0c3t$(this, url_0, config_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readJson_2y0c3t$($this, url_0, config_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$url = url_0;
    this.local$config = config_0;
  }
  Coroutine$readJson_2y0c3t$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readJson_2y0c3t$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readJson_2y0c3t$.prototype.constructor = Coroutine$readJson_2y0c3t$;
  Coroutine$readJson_2y0c3t$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$config === void 0)
              this.local$config = new HttpClient$RequestConfig();
            this.local$tmp$ = Json_getInstance();
            this.state_0 = 2;
            this.result_0 = this.$this.requestAsString_v6tn8p$(Http$Method$Companion_getInstance().GET, this.local$url, void 0, void 0, this.local$config.copy_nslxbw$(void 0, true), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$tmp$.parse_61zpoe$(this.result_0.content);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClient.prototype.readJson_2y0c3t$ = function (url_0, config_0, continuation_0, suspended) {
    var instance = new Coroutine$readJson_2y0c3t$(this, url_0, config_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function HttpClient$Companion() {
    HttpClient$Companion_instance = this;
    this.DEFAULT_USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36';
    this.DEFAULT_ACCEPT = 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8';
    this.DEFAULT_LANGUAGE = 'en-us';
    this.DEFAULT_ENCODING = 'gzip, deflate';
    this.DEFAULT_CONNECTION = 'Close';
  }
  HttpClient$Companion.prototype.combineHeadersForHost_nyoy6g$ = function (headers, host) {
    var out = Http$Http$Headers_init([to('User-Agent', this.DEFAULT_USER_AGENT), to('Accept', this.DEFAULT_ACCEPT), to('Accept-Language', this.DEFAULT_LANGUAGE), to('Accept-Encoding', this.DEFAULT_ENCODING), to('Connection', this.DEFAULT_CONNECTION)]).withReplaceHeaders_5dayij$(headers);
    return host != null ? out.withReplaceHeaders_9ih0sy$([to('Host', host)]) : out;
  };
  HttpClient$Companion.prototype.invoke = function () {
    return get_defaultHttpFactory().createClient();
  };
  HttpClient$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var HttpClient$Companion_instance = null;
  function HttpClient$Companion_getInstance() {
    if (HttpClient$Companion_instance === null) {
      new HttpClient$Companion();
    }return HttpClient$Companion_instance;
  }
  HttpClient.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HttpClient',
    interfaces: []
  };
  function DelayedHttpClient(delayMs, parent) {
    HttpClient.call(this);
    this.delayMs = delayMs;
    this.parent = parent;
    this.queue_w2hal5$_0 = new AsyncThread();
  }
  function Coroutine$DelayedHttpClient$requestInternal$lambda(this$DelayedHttpClient_0, closure$url_0, closure$method_0, closure$headers_0, closure$content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$DelayedHttpClient = this$DelayedHttpClient_0;
    this.local$closure$url = closure$url_0;
    this.local$closure$method = closure$method_0;
    this.local$closure$headers = closure$headers_0;
    this.local$closure$content = closure$content_0;
  }
  Coroutine$DelayedHttpClient$requestInternal$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$DelayedHttpClient$requestInternal$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$DelayedHttpClient$requestInternal$lambda.prototype.constructor = Coroutine$DelayedHttpClient$requestInternal$lambda;
  Coroutine$DelayedHttpClient$requestInternal$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            println('Waiting ' + this.local$this$DelayedHttpClient.delayMs.toString() + ' milliseconds for ' + this.local$closure$url + '...');
            this.state_0 = 2;
            this.result_0 = delay(this.local$this$DelayedHttpClient.delayMs, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$this$DelayedHttpClient.parent.request_v6tn8p$(this.local$closure$method, this.local$closure$url, this.local$closure$headers, this.local$closure$content, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function DelayedHttpClient$requestInternal$lambda(this$DelayedHttpClient_0, closure$url_0, closure$method_0, closure$headers_0, closure$content_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$DelayedHttpClient$requestInternal$lambda(this$DelayedHttpClient_0, closure$url_0, closure$method_0, closure$headers_0, closure$content_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  DelayedHttpClient.prototype.requestInternal_wintjk$$default = function (method, url, headers, content, continuation) {
    return this.queue_w2hal5$_0.invoke_lnyleu$(DelayedHttpClient$requestInternal$lambda(this, url, method, headers, content), continuation);
  };
  DelayedHttpClient.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'DelayedHttpClient',
    interfaces: [HttpClient]
  };
  function delayed($receiver, ms) {
    return new DelayedHttpClient(ms, $receiver);
  }
  function FakeHttpClient(redirect) {
    if (redirect === void 0)
      redirect = null;
    HttpClient.call(this);
    this.redirect = redirect;
    this.log = ArrayList_init();
    this.defaultResponse = new HttpClient$Response(200, 'OK', Http$Http$Headers_init([]), openAsync(toByteArray('LogHttpClient.response', UTF8)));
    this.rules_0 = LinkedHashMap_init();
  }
  function Coroutine$requestInternal_wintjk$$default($this, method_0, url_0, headers_0, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$requestNumber = void 0;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
  }
  Coroutine$requestInternal_wintjk$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$requestInternal_wintjk$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$requestInternal_wintjk$$default.prototype.constructor = Coroutine$requestInternal_wintjk$$default;
  Coroutine$requestInternal_wintjk$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
            if (this.local$content != null) {
              this.state_0 = 2;
              this.result_0 = sliceStart(this.local$content, void 0, void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.result_0 = null;
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            if ((tmp$ = this.result_0) != null) {
              this.state_0 = 4;
              this.result_0 = readAll(tmp$, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.result_0 = null;
              this.state_0 = 5;
              continue;
            }

          case 4:
            this.state_0 = 5;
            continue;
          case 5:
            var contentString = (tmp$_0 = this.result_0) != null ? toString_2(tmp$_0, UTF8) : null;
            this.local$requestNumber = this.$this.log.size;
            var $receiver = this.$this.log;
            var element = this.local$method.toString() + ', ' + this.local$url + ', ' + this.local$headers + ', ' + toString(contentString);
            $receiver.add_11rb$(element);
            if (this.$this.redirect != null) {
              this.state_0 = 6;
              this.result_0 = this.$this.redirect.request_v6tn8p$(this.local$method, this.local$url, this.local$headers, this.local$content, void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 7;
              continue;
            }

          case 6:
            return this.result_0;
          case 7:
            if (this.local$content != null) {
              this.state_0 = 8;
              this.result_0 = readAll(this.local$content, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.result_0 = null;
              this.state_0 = 9;
              continue;
            }

          case 8:
            this.state_0 = 9;
            continue;
          case 9:
            var readedContent = this.result_0;
            var $receiver_0 = reversed(this.$this.rules_0.entries);
            var destination = ArrayList_init();
            var tmp$_4;
            tmp$_4 = $receiver_0.iterator();
            while (tmp$_4.hasNext()) {
              var element_0 = tmp$_4.next();
              if (element_0.key.matches_wdsubw$(this.local$method, this.local$url, this.local$headers, readedContent))
                destination.add_11rb$(element_0);
            }

            var matchedRules = destination;
            var rule = firstOrNull(matchedRules);
            return (tmp$_3 = (tmp$_2 = (tmp$_1 = rule != null ? rule.value : null) != null ? getCyclic(tmp$_1, this.local$requestNumber) : null) != null ? tmp$_2.buildResponse_8be2vx$() : null) != null ? tmp$_3 : this.$this.defaultResponse;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  FakeHttpClient.prototype.requestInternal_wintjk$$default = function (method_0, url_0, headers_0, content_0, continuation_0, suspended) {
    var instance = new Coroutine$requestInternal_wintjk$$default(this, method_0, url_0, headers_0, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function FakeHttpClient$ResponseBuilder() {
    this.responseCode_0 = 200;
    this.responseContent_0 = toByteArray('LogHttpClient.response', UTF8);
    this.responseHeaders_0 = Http$Http$Headers_init([]);
  }
  FakeHttpClient$ResponseBuilder.prototype.response_hz75og$ = function (content, code, charset) {
    if (code === void 0)
      code = 200;
    if (charset === void 0)
      charset = UTF8;
    this.responseCode_0 = code;
    this.responseContent_0 = toByteArray(content, charset);
  };
  FakeHttpClient$ResponseBuilder.prototype.response_ir89t6$ = function (content, code) {
    if (code === void 0)
      code = 200;
    this.responseCode_0 = code;
    this.responseContent_0 = content;
  };
  FakeHttpClient$ResponseBuilder.prototype.redirect_bm4lxs$ = function (url, code) {
    if (code === void 0)
      code = 302;
    this.responseCode_0 = code;
    this.responseHeaders_0 = this.responseHeaders_0.plus_5dayij$(Http$Http$Headers_init([to('Location', url)]));
  };
  FakeHttpClient$ResponseBuilder.prototype.ok_61zpoe$ = function (content) {
    this.response_hz75og$(content, 200);
  };
  FakeHttpClient$ResponseBuilder.prototype.ok_fqrh44$ = function (content) {
    this.response_ir89t6$(content, 200);
  };
  FakeHttpClient$ResponseBuilder.prototype.notFound_61zpoe$ = function (content) {
    if (content === void 0)
      content = '404 - Not Found';
    this.response_hz75og$(content, 404);
  };
  FakeHttpClient$ResponseBuilder.prototype.internalServerError_61zpoe$ = function (content) {
    if (content === void 0)
      content = '500 - Internal Server Error';
    this.response_hz75og$(content, 500);
  };
  FakeHttpClient$ResponseBuilder.prototype.buildResponse_8be2vx$ = function () {
    return new HttpClient$Response(this.responseCode_0, HttpStatusMessage_getInstance().invoke_za3lpa$(this.responseCode_0), this.responseHeaders_0, openAsync(this.responseContent_0));
  };
  FakeHttpClient$ResponseBuilder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ResponseBuilder',
    interfaces: []
  };
  function FakeHttpClient$Rule(method, url, headers) {
    if (url === void 0)
      url = null;
    if (headers === void 0)
      headers = null;
    this.method = method;
    this.url = url;
    this.headers = headers;
  }
  FakeHttpClient$Rule.prototype.matches_wdsubw$ = function (method, url, headers, content) {
    if (this.method != null && !equals(this.method, method))
      return false;
    if (this.url != null && !equals(this.url, url))
      return false;
    if (this.headers != null && !headers.containsAll_5dayij$(this.headers))
      return false;
    return true;
  };
  FakeHttpClient$Rule.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Rule',
    interfaces: []
  };
  FakeHttpClient$Rule.prototype.component1 = function () {
    return this.method;
  };
  FakeHttpClient$Rule.prototype.component2 = function () {
    return this.url;
  };
  FakeHttpClient$Rule.prototype.component3 = function () {
    return this.headers;
  };
  FakeHttpClient$Rule.prototype.copy_v43kw2$ = function (method, url, headers) {
    return new FakeHttpClient$Rule(method === void 0 ? this.method : method, url === void 0 ? this.url : url, headers === void 0 ? this.headers : headers);
  };
  FakeHttpClient$Rule.prototype.toString = function () {
    return 'Rule(method=' + Kotlin.toString(this.method) + (', url=' + Kotlin.toString(this.url)) + (', headers=' + Kotlin.toString(this.headers)) + ')';
  };
  FakeHttpClient$Rule.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.method) | 0;
    result = result * 31 + Kotlin.hashCode(this.url) | 0;
    result = result * 31 + Kotlin.hashCode(this.headers) | 0;
    return result;
  };
  FakeHttpClient$Rule.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.method, other.method) && Kotlin.equals(this.url, other.url) && Kotlin.equals(this.headers, other.headers)))));
  };
  FakeHttpClient.prototype.onRequest_v43kw2$ = function (method, url, headers) {
    if (method === void 0)
      method = null;
    if (url === void 0)
      url = null;
    if (headers === void 0)
      headers = null;
    var $receiver = this.rules_0;
    var key = new FakeHttpClient$Rule(method, url, headers);
    var tmp$;
    var value = $receiver.get_11rb$(key);
    if (value == null) {
      var answer = ArrayList_init();
      $receiver.put_xwzc9p$(key, answer);
      tmp$ = answer;
    } else {
      tmp$ = value;
    }
    var responseBuilders = tmp$;
    var responseBuilder = new FakeHttpClient$ResponseBuilder();
    responseBuilders.add_11rb$(responseBuilder);
    return responseBuilder;
  };
  FakeHttpClient.prototype.getAndClearLog = function () {
    var $receiver = toList(this.log);
    this.log.clear();
    return $receiver;
  };
  FakeHttpClient.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FakeHttpClient',
    interfaces: [HttpClient]
  };
  function LogHttpClient() {
    return new FakeHttpClient();
  }
  function HttpStatusMessage() {
    HttpStatusMessage_instance = this;
    this.CODES = linkedMapOf([to(100, 'Continue'), to(101, 'Switching Protocols'), to(200, 'OK'), to(201, 'Created'), to(202, 'Accepted'), to(203, 'Non-Authoritative Information'), to(204, 'No Content'), to(205, 'Reset Content'), to(206, 'Partial Content'), to(300, 'Multiple Choices'), to(301, 'Moved Permanently'), to(302, 'Found'), to(303, 'See Other'), to(304, 'Not Modified'), to(305, 'Use Proxy'), to(307, 'Temporary Redirect'), to(400, 'Bad Request'), to(401, 'Unauthorized'), to(402, 'Payment Required'), to(403, 'Forbidden'), to(404, 'Not Found'), to(405, 'Method Not Allowed'), to(406, 'Not Acceptable'), to(407, 'Proxy Authentication Required'), to(408, 'Request Timeout'), to(409, 'Conflict'), to(410, 'Gone'), to(411, 'Length Required'), to(412, 'Precondition Failed'), to(413, 'Request Entity Too Large'), to(414, 'Request-URI Too Long'), to(415, 'Unsupported Media Type'), to(416, 'Requested Range Not Satisfiable'), to(417, 'Expectation Failed'), to(418, "I'm a teapot"), to(422, 'Unprocessable Entity (WebDAV - RFC 4918)'), to(423, 'Locked (WebDAV - RFC 4918)'), to(424, 'Failed Dependency (WebDAV) (RFC 4918)'), to(425, 'Unassigned'), to(426, 'Upgrade Required (RFC 7231)'), to(428, 'Precondition Required'), to(429, 'Too Many Requests'), to(431, 'Request Header Fileds Too Large)'), to(449, 'Error449'), to(451, 'Unavailable for Legal Reasons'), to(500, 'Internal Server Error'), to(501, 'Not Implemented'), to(502, 'Bad Gateway'), to(503, 'Service Unavailable'), to(504, 'Gateway Timeout'), to(505, 'HTTP Version Not Supported'), to(506, 'Variant Also Negotiates (RFC 2295)'), to(507, 'Insufficient Storage (WebDAV - RFC 4918)'), to(508, 'Loop Detected (WebDAV)'), to(509, 'Bandwidth Limit Exceeded'), to(510, 'Not Extended (RFC 2774)'), to(511, 'Network Authentication Required')]);
  }
  HttpStatusMessage.prototype.invoke_za3lpa$ = function (code) {
    var tmp$;
    return (tmp$ = this.CODES.get_11rb$(code)) != null ? tmp$ : 'Error' + code;
  };
  HttpStatusMessage.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'HttpStatusMessage',
    interfaces: []
  };
  var HttpStatusMessage_instance = null;
  function HttpStatusMessage_getInstance() {
    if (HttpStatusMessage_instance === null) {
      new HttpStatusMessage();
    }return HttpStatusMessage_instance;
  }
  function HttpStats() {
    HttpStats_instance = this;
    this.connections = korAtomic_2(L0);
    this.disconnections = korAtomic_2(L0);
  }
  HttpStats.prototype.toString = function () {
    return 'HttpStats(connections=' + this.connections + ', Disconnections=' + this.disconnections + ')';
  };
  HttpStats.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'HttpStats',
    interfaces: []
  };
  var HttpStats_instance = null;
  function HttpStats_getInstance() {
    if (HttpStats_instance === null) {
      new HttpStats();
    }return HttpStats_instance;
  }
  function HttpFactory() {
  }
  HttpFactory.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'HttpFactory',
    interfaces: []
  };
  function ProxiedHttpFactory(parent) {
    this.parent = parent;
    this.$delegate_k7ip1y$_0 = parent;
  }
  ProxiedHttpFactory.prototype.createClient = function () {
    return this.$delegate_k7ip1y$_0.createClient();
  };
  ProxiedHttpFactory.prototype.createServer = function () {
    return this.$delegate_k7ip1y$_0.createServer();
  };
  ProxiedHttpFactory.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ProxiedHttpFactory',
    interfaces: [HttpFactory]
  };
  function _defaultHttpFactory$lambda() {
    return new ProxiedHttpFactory(get_httpFactory());
  }
  var _defaultHttpFactory;
  function get__defaultHttpFactory() {
    return _defaultHttpFactory.value;
  }
  function get_defaultHttpFactory() {
    return get__defaultHttpFactory();
  }
  function setDefaultHttpFactory(factory) {
    get__defaultHttpFactory().parent = factory;
  }
  function createClientEndpoint($receiver, endpoint_0) {
    return endpoint($receiver.createClient(), endpoint_0);
  }
  function createHttpClient() {
    return get_defaultHttpFactory().createClient();
  }
  function createHttpServer() {
    return get_defaultHttpFactory().createServer();
  }
  function createHttpClientEndpoint(endpoint_0) {
    return endpoint(createHttpClient(), endpoint_0);
  }
  function httpError(code, msg) {
    throw new Http$HttpException(code, msg);
  }
  function HttpClientEndpoint() {
  }
  HttpClientEndpoint.prototype.request_v6tn8p$ = function (method, path, headers, content, config, continuation, callback$default) {
    if (headers === void 0)
      headers = Http$Http$Headers_init([]);
    if (content === void 0)
      content = null;
    if (config === void 0)
      config = new HttpClient$RequestConfig();
    return callback$default ? callback$default(method, path, headers, content, config, continuation) : this.request_v6tn8p$$default(method, path, headers, content, config, continuation);
  };
  HttpClientEndpoint.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'HttpClientEndpoint',
    interfaces: []
  };
  function Request(method, path, headers, content) {
    Request$Companion_getInstance();
    this.method = method;
    this.path = path;
    this.headers = headers;
    this.content = content;
  }
  function Request$Companion() {
    Request$Companion_instance = this;
    this.FORMAT_REGEX = Regex_init('\\{\\w+\\}');
  }
  Request$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Request$Companion_instance = null;
  function Request$Companion_getInstance() {
    if (Request$Companion_instance === null) {
      new Request$Companion();
    }return Request$Companion_instance;
  }
  function Coroutine$format_61zpoe$($this, format_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$format = format_0;
  }
  Coroutine$format_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$format_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$format_61zpoe$.prototype.constructor = Coroutine$format_61zpoe$;
  Coroutine$format_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$format === void 0)
              this.local$format = '{METHOD}:{PATH}:{CONTENT}';
            var tmp$, tmp$_0;
            if ((tmp$ = this.$this.content) != null) {
              this.state_0 = 2;
              this.result_0 = readAll(tmp$, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.result_0 = null;
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            var content = (tmp$_0 = this.result_0) != null ? toString_2(tmp$_0, UTF8) : null;
            var regex = Request$Companion_getInstance().FORMAT_REGEX;
            var replace_20wsma$result;
            replace_20wsma$break: do {
              var match = regex.find_905azu$(this.local$format);
              if (match == null) {
                replace_20wsma$result = this.local$format.toString();
                break replace_20wsma$break;
              }var lastStart = 0;
              var length = this.local$format.length;
              var sb = StringBuilder_init_0(length);
              loop_label: do {
                var foundMatch = ensureNotNull(match);
                sb.append_ezbsdh$(this.local$format, lastStart, foundMatch.range.start);
                var tmp$_1 = sb.append_gw00v9$;
                var transform$result;
                transform$break: do {
                  var name = foundMatch.groupValues.get_za3lpa$(0);
                  switch (name) {
                    case '{METHOD}':
                      transform$result = this.$this.method.toString();
                      break transform$break;
                    case '{PATH}':
                      transform$result = this.$this.path;
                      break transform$break;
                    case '{CONTENT}':
                      transform$result = toString(content);
                      break transform$break;
                    default:transform$result = name;
                      break transform$break;
                  }
                }
                 while (false);
                tmp$_1.call(sb, transform$result);
                lastStart = foundMatch.range.endInclusive + 1 | 0;
                match = foundMatch.next();
              }
               while (lastStart < length && match != null);
              if (lastStart < length) {
                sb.append_ezbsdh$(this.local$format, lastStart, length);
              }replace_20wsma$result = sb.toString();
            }
             while (false);
            return replace_20wsma$result;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  Request.prototype.format_61zpoe$ = function (format_0, continuation_0, suspended) {
    var instance = new Coroutine$format_61zpoe$(this, format_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  Request.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Request',
    interfaces: []
  };
  Request.prototype.component1 = function () {
    return this.method;
  };
  Request.prototype.component2 = function () {
    return this.path;
  };
  Request.prototype.component3 = function () {
    return this.headers;
  };
  Request.prototype.component4 = function () {
    return this.content;
  };
  Request.prototype.copy_wintjk$ = function (method, path, headers, content) {
    return new Request(method === void 0 ? this.method : method, path === void 0 ? this.path : path, headers === void 0 ? this.headers : headers, content === void 0 ? this.content : content);
  };
  Request.prototype.toString = function () {
    return 'Request(method=' + Kotlin.toString(this.method) + (', path=' + Kotlin.toString(this.path)) + (', headers=' + Kotlin.toString(this.headers)) + (', content=' + Kotlin.toString(this.content)) + ')';
  };
  Request.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.method) | 0;
    result = result * 31 + Kotlin.hashCode(this.path) | 0;
    result = result * 31 + Kotlin.hashCode(this.headers) | 0;
    result = result * 31 + Kotlin.hashCode(this.content) | 0;
    return result;
  };
  Request.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.method, other.method) && Kotlin.equals(this.path, other.path) && Kotlin.equals(this.headers, other.headers) && Kotlin.equals(this.content, other.content)))));
  };
  function FakeHttpClientEndpoint(defaultMessage) {
    if (defaultMessage === void 0)
      defaultMessage = '{}';
    this.defaultMessage = defaultMessage;
    this.log_0 = ArrayList_init();
    this.responsePointer_0 = 0;
    this.responses_0 = ArrayList_init();
  }
  FakeHttpClientEndpoint.prototype.getResponse_0 = function (code, content) {
    var tmp$;
    return new HttpClient$Response(code, (tmp$ = HttpStatusMessage_getInstance().CODES.get_11rb$(code)) != null ? tmp$ : 'Code' + code, Http$Http$Headers_init([]), openAsync_0(content));
  };
  FakeHttpClientEndpoint.prototype.addResponse_19mbxw$ = function (code, content) {
    var $receiver = this.responses_0;
    var element = this.getResponse_0(code, content);
    $receiver.add_11rb$(element);
  };
  FakeHttpClientEndpoint.prototype.addOkResponse_61zpoe$ = function (content) {
    this.addResponse_19mbxw$(200, content);
  };
  FakeHttpClientEndpoint.prototype.addNotFoundResponse_61zpoe$ = function (content) {
    this.addResponse_19mbxw$(404, content);
  };
  function FakeHttpClientEndpoint$request$lambda(this$FakeHttpClientEndpoint) {
    return function (it) {
      return this$FakeHttpClientEndpoint.getResponse_0(200, this$FakeHttpClientEndpoint.defaultMessage);
    };
  }
  FakeHttpClientEndpoint.prototype.request_v6tn8p$$default = function (method, path, headers, content, config, continuation) {
    var tmp$, tmp$_0;
    var $receiver = this.log_0;
    var element = new Request(method, path, headers, content);
    $receiver.add_11rb$(element);
    if (this.responses_0.isEmpty())
      this.addOkResponse_61zpoe$(this.defaultMessage);
    tmp$_0 = this.responses_0;
    var index = (tmp$ = this.responsePointer_0, this.responsePointer_0 = tmp$ + 1 | 0, tmp$) % this.responses_0.size;
    return index >= 0 && index <= get_lastIndex_0(tmp$_0) ? tmp$_0.get_za3lpa$(index) : FakeHttpClientEndpoint$request$lambda(this)(index);
  };
  function Coroutine$capture_b6n9uf$($this, format_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$start = void 0;
    this.local$destination = void 0;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$format = format_0;
    this.local$callback = callback_0;
  }
  Coroutine$capture_b6n9uf$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$capture_b6n9uf$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$capture_b6n9uf$.prototype.constructor = Coroutine$capture_b6n9uf$;
  Coroutine$capture_b6n9uf$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$format === void 0)
              this.local$format = '{METHOD}:{PATH}:{CONTENT}';
            this.local$start = this.$this.log_0.size;
            this.state_0 = 2;
            this.result_0 = this.local$callback(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var end = this.$this.log_0.size;
            var $receiver = slice(this.$this.log_0, until(this.local$start, end));
            this.local$destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
            this.local$tmp$ = $receiver.iterator();
            this.state_0 = 3;
            continue;
          case 3:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 5;
              continue;
            }
            var item = this.local$tmp$.next();
            this.local$tmp$_0 = this.local$destination.add_11rb$;
            this.state_0 = 4;
            this.result_0 = item.format_61zpoe$(this.local$format, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.local$tmp$_0.call(this.local$destination, this.result_0);
            this.state_0 = 3;
            continue;
          case 5:
            return this.local$destination;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  FakeHttpClientEndpoint.prototype.capture_b6n9uf$ = function (format_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$capture_b6n9uf$(this, format_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  FakeHttpClientEndpoint.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FakeHttpClientEndpoint',
    interfaces: [HttpClientEndpoint]
  };
  function endpoint$ObjectLiteral(closure$endpoint, closure$client) {
    this.closure$endpoint = closure$endpoint;
    this.closure$client = closure$client;
  }
  endpoint$ObjectLiteral.prototype.request_v6tn8p$$default = function (method, path, headers, content, config, continuation) {
    var resolvedUrl = URL$Companion_getInstance().resolve_puj7f4$(this.closure$endpoint, '/' + trimStart(path, Kotlin.charArrayOf(47))).toString();
    return this.closure$client.request_v6tn8p$(method, resolvedUrl, headers, content, config, continuation);
  };
  endpoint$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [HttpClientEndpoint]
  };
  function endpoint($receiver, endpoint) {
    var client = $receiver;
    return new endpoint$ObjectLiteral(endpoint, client);
  }
  function HttpPortable() {
    HttpPortable_instance = this;
  }
  HttpPortable.prototype.computeHeader_ao485g$ = function (method, url, rheaders2) {
    var $receiver = StringBuilder_init();
    var tmp$;
    var EOL = '\r\n';
    $receiver.append_61zpoe$(method.toString() + ' ' + url.pathWithQuery + ' HTTP/1.1' + EOL);
    tmp$ = rheaders2.iterator();
    while (tmp$.hasNext()) {
      var header = tmp$.next();
      $receiver.append_61zpoe$(header.first + ': ' + header.second + EOL);
    }
    $receiver.append_61zpoe$(EOL);
    return $receiver.toString();
  };
  function HttpPortable$createClient$ObjectLiteral() {
    HttpClient.call(this);
  }
  function Coroutine$requestInternal_wintjk$$default_0($this, method_0, url_0, headers_0, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$url_0 = void 0;
    this.local$client = void 0;
    this.local$rheaders = void 0;
    this.local$responseCode = void 0;
    this.local$responseMessage = void 0;
    this.local$headers_0 = void 0;
    this.local$line = void 0;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
  }
  Coroutine$requestInternal_wintjk$$default_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$requestInternal_wintjk$$default_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$requestInternal_wintjk$$default_0.prototype.constructor = Coroutine$requestInternal_wintjk$$default_0;
  Coroutine$requestInternal_wintjk$$default_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.local$url_0 = URL$Companion_getInstance().invoke_61zpoe$(this.local$url);
            var secure = equals(this.local$url_0.scheme, 'https');
            this.state_0 = 2;
            this.result_0 = createTcpClient_0(ensureNotNull(this.local$url_0.host), this.local$url_0.port, secure, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$client = this.result_0;
            this.local$rheaders = HttpClient$Companion_getInstance().combineHeadersForHost_nyoy6g$(this.local$headers, this.local$url_0.host);
            if (this.local$content != null) {
              this.local$tmp$ = Http$Headers$Companion_getInstance().ContentLength;
              this.state_0 = 3;
              this.result_0 = this.local$content.getLength(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.local$tmp$_0 = this.local$rheaders;
              this.state_0 = 4;
              continue;
            }

          case 3:
            this.local$tmp$_0 = this.local$rheaders.withReplaceHeaders_5dayij$(Http$Http$Headers_init([to(this.local$tmp$, this.result_0.toString())]));
            this.state_0 = 4;
            continue;
          case 4:
            var rheaders2 = this.local$tmp$_0;
            this.state_0 = 5;
            this.result_0 = writeString(this.local$client, HttpPortable_getInstance().computeHeader_ao485g$(this.local$method, this.local$url_0, rheaders2), void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            if (this.local$content != null) {
              this.state_0 = 6;
              this.result_0 = copyTo(this.local$content, this.local$client, void 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.result_0 = null;
              this.state_0 = 7;
              continue;
            }

          case 6:
            this.state_0 = 7;
            continue;
          case 7:
            this.state_0 = 8;
            this.result_0 = readLine(this.local$client, void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 8:
            var firstLine = this.result_0;
            var tmp$_0;
            if ((tmp$ = Regex_init('HTTP/1.\\d+ (\\d+) (.*)').find_905azu$(firstLine)) != null)
              tmp$_0 = tmp$;
            else {
              throw IllegalStateException_init(('Invalid HTTP response ' + firstLine).toString());
            }

            var responseInfo = tmp$_0;
            this.local$responseCode = toInt(responseInfo.groupValues.get_za3lpa$(1));
            this.local$responseMessage = responseInfo.groupValues.get_za3lpa$(2);
            this.local$headers_0 = ArrayList_init();
            this.state_0 = 9;
            continue;
          case 9:
            this.state_0 = 10;
            this.result_0 = readLine(this.local$client, void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 10:
            var $receiver = this.result_0;
            var tmp$_1;
            this.local$line = trim_0(Kotlin.isCharSequence(tmp$_1 = $receiver) ? tmp$_1 : throwCCE()).toString();
            if (this.local$line.length === 0) {
              this.state_0 = 12;
              continue;
            } else {
              this.state_0 = 11;
              continue;
            }

          case 11:
            this.local$headers_0.add_11rb$(this.local$line);
            this.state_0 = 9;
            continue;
          case 12:
            var destination = ArrayList_init_0(collectionSizeOrDefault(this.local$headers_0, 10));
            var tmp$_2;
            tmp$_2 = this.local$headers_0.iterator();
            while (tmp$_2.hasNext()) {
              var item = tmp$_2.next();
              var tmp$_3 = destination.add_11rb$;
              var parts = split(item, Kotlin.charArrayOf(58), void 0, 2);
              tmp$_3.call(destination, to(0 >= 0 && 0 <= get_lastIndex_0(parts) ? parts.get_za3lpa$(0) : '', 1 >= 0 && 1 <= get_lastIndex_0(parts) ? parts.get_za3lpa$(1) : ''));
            }

            var responseHeaders = new Http$Headers(destination);
            return new HttpClient$Response(this.local$responseCode, this.local$responseMessage, responseHeaders, this.local$client);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpPortable$createClient$ObjectLiteral.prototype.requestInternal_wintjk$$default = function (method_0, url_0, headers_0, content_0, continuation_0, suspended) {
    var instance = new Coroutine$requestInternal_wintjk$$default_0(this, method_0, url_0, headers_0, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  HttpPortable$createClient$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [HttpClient]
  };
  HttpPortable.prototype.createClient = function () {
    return new HttpPortable$createClient$ObjectLiteral();
  };
  function HttpPortable$createServer$ObjectLiteral(closure$HeaderRegex) {
    this.closure$HeaderRegex = closure$HeaderRegex;
    HttpServer.call(this);
    this.BodyChunkSize = 1024;
    this.LimitRequestFieldSize = 8190;
    this.LimitRequestFields = 100;
    this.wshandler = HttpPortable$createServer$ObjectLiteral$wshandler$lambda;
    this.handler = HttpPortable$createServer$ObjectLiteral$handler$lambda;
    this.onClose = new Signal();
    this.actualPort_2v6dv3$_0 = -1;
  }
  Object.defineProperty(HttpPortable$createServer$ObjectLiteral.prototype, 'actualPort', {
    get: function () {
      return this.actualPort_2v6dv3$_0;
    },
    set: function (actualPort) {
      this.actualPort_2v6dv3$_0 = actualPort;
    }
  });
  HttpPortable$createServer$ObjectLiteral.prototype.websocketHandlerInternal_d3ycxo$ = function (handler, continuation) {
    this.wshandler = handler;
  };
  HttpPortable$createServer$ObjectLiteral.prototype.httpHandlerInternal_b59mbs$ = function (handler, continuation) {
    this.handler = handler;
  };
  function HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda(it) {
    return Unit;
  }
  function HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda_0() {
    return Unit;
  }
  function HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda$ObjectLiteral(closure$bodyHandler, closure$endHandler, closure$httpVersion, closure$client, closure$requestCompleted, method, uri, headers, requestConfig) {
    this.closure$bodyHandler = closure$bodyHandler;
    this.closure$endHandler = closure$endHandler;
    this.closure$httpVersion = closure$httpVersion;
    this.closure$client = closure$client;
    this.closure$requestCompleted = closure$requestCompleted;
    HttpServer$Request.call(this, method, uri, headers, requestConfig);
  }
  HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda$ObjectLiteral.prototype._handler_949j03$ = function (handler, continuation) {
    this.closure$bodyHandler;
    this.closure$bodyHandler.v = handler;
    return Unit;
  };
  HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda$ObjectLiteral.prototype._endHandler_o14v8n$ = function (handler, continuation) {
    this.closure$endHandler;
    this.closure$endHandler.v = handler;
    return Unit;
  };
  function Coroutine$_sendHeader_j29v25$($this, code_0, message_0, headers_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$code = code_0;
    this.local$message = message_0;
    this.local$headers = headers_0;
  }
  Coroutine$_sendHeader_j29v25$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$_sendHeader_j29v25$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$_sendHeader_j29v25$.prototype.constructor = Coroutine$_sendHeader_j29v25$;
  Coroutine$_sendHeader_j29v25$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            var sb = StringBuilder_init();
            sb.append_61zpoe$(this.$this.closure$httpVersion + ' ' + this.local$code + ' ' + this.local$message + '\r' + '\n');
            tmp$ = this.local$headers.iterator();
            while (tmp$.hasNext()) {
              var header = tmp$.next();
              sb.append_61zpoe$(header.first + ': ' + header.second + '\r' + '\n');
            }

            sb.append_61zpoe$('\r\n');
            this.state_0 = 2;
            this.result_0 = this.$this.closure$client.write_mj6st8$(toByteArray(sb.toString(), UTF8), void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda$ObjectLiteral.prototype._sendHeader_j29v25$ = function (code_0, message_0, headers_0, continuation_0, suspended) {
    var instance = new Coroutine$_sendHeader_j29v25$(this, code_0, message_0, headers_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$_write_mj6st8$$default($this, data_0, offset_0, size_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$data = data_0;
    this.local$offset = offset_0;
    this.local$size = size_0;
  }
  Coroutine$_write_mj6st8$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$_write_mj6st8$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$_write_mj6st8$$default.prototype.constructor = Coroutine$_write_mj6st8$$default;
  Coroutine$_write_mj6st8$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.closure$client.write_mj6st8$(this.local$data, this.local$offset, this.local$size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda$ObjectLiteral.prototype._write_mj6st8$$default = function (data_0, offset_0, size_0, continuation_0, suspended) {
    var instance = new Coroutine$_write_mj6st8$$default(this, data_0, offset_0, size_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda$ObjectLiteral.prototype._end = function (continuation) {
    this.closure$requestCompleted.complete_11rb$(Unit);
  };
  HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [HttpServer$Request]
  };
  function Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda(this$_0, closure$bodyHandler_0, closure$endHandler_0, closure$httpVersion_0, closure$client_0, closure$requestCompleted_0, closure$method_0, closure$url_0, closure$headers_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$closure$bodyHandler = closure$bodyHandler_0;
    this.local$closure$endHandler = closure$endHandler_0;
    this.local$closure$httpVersion = closure$httpVersion_0;
    this.local$closure$client = closure$client_0;
    this.local$closure$requestCompleted = closure$requestCompleted_0;
    this.local$closure$method = closure$method_0;
    this.local$closure$url = closure$url_0;
    this.local$closure$headers = closure$headers_0;
  }
  Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda.prototype.constructor = Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda;
  Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$.handler(new HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda$ObjectLiteral(this.local$closure$bodyHandler, this.local$closure$endHandler, this.local$closure$httpVersion, this.local$closure$client, this.local$closure$requestCompleted, Http$Method$Companion_getInstance().invoke_61zpoe$(this.local$closure$method), this.local$closure$url, this.local$closure$headers), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda_1(this$_0, closure$bodyHandler_0, closure$endHandler_0, closure$httpVersion_0, closure$client_0, closure$requestCompleted_0, closure$method_0, closure$url_0, closure$headers_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda(this$_0, closure$bodyHandler_0, closure$endHandler_0, closure$httpVersion_0, closure$client_0, closure$requestCompleted_0, closure$method_0, closure$url_0, closure$headers_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda(this$_0, closure$HeaderRegex_0, client_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$closure$HeaderRegex = closure$HeaderRegex_0;
    this.local$tmp$_0 = void 0;
    this.local$cb = void 0;
    this.local$method = void 0;
    this.local$url = void 0;
    this.local$httpVersion = void 0;
    this.local$headerList = void 0;
    this.local$n = void 0;
    this.local$line = void 0;
    this.local$keepAlive = void 0;
    this.local$requestCompleted = void 0;
    this.local$bodyHandler = void 0;
    this.local$endHandler = void 0;
    this.local$remaining = void 0;
    this.local$client = client_0;
  }
  Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda.prototype.constructor = Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda;
  Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            var tmp$_0, tmp$_1;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$cb = bufferedInput(this.local$client);
            this.state_0 = 3;
            this.result_0 = this.local$cb.readUntil_vlsdy4$(toByte(10 | 0), void 0, this.local$this$.LimitRequestFieldSize, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var $receiver = toString_2(this.result_0, UTF8);
            var tmp$_2;
            var fline = trim_0(Kotlin.isCharSequence(tmp$_2 = $receiver) ? tmp$_2 : throwCCE()).toString();
            tmp$ = this.local$closure$HeaderRegex.matchEntire_6bul2c$(fline);
            if (tmp$ == null) {
              throw IllegalStateException_init("Not a valid request '" + fline + "'");
            }
            var match = tmp$;
            this.local$method = match.groupValues.get_za3lpa$(1);
            this.local$url = match.groupValues.get_za3lpa$(2);
            this.local$httpVersion = match.groupValues.get_za3lpa$(3);
            this.local$headerList = ArrayList_init();
            this.local$tmp$_0 = this.local$this$.LimitRequestFields;
            this.local$n = 0;
            this.state_0 = 4;
            continue;
          case 4:
            if (this.local$n >= this.local$tmp$_0) {
              this.state_0 = 8;
              continue;
            }
            this.state_0 = 5;
            this.result_0 = this.local$cb.readUntil_vlsdy4$(toByte(10 | 0), void 0, this.local$this$.LimitRequestFieldSize, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            var $receiver_0 = toString_2(this.result_0, UTF8);
            var tmp$_3;
            this.local$line = trim_0(Kotlin.isCharSequence(tmp$_3 = $receiver_0) ? tmp$_3 : throwCCE()).toString();
            if (this.local$line.length === 0) {
              this.state_0 = 8;
              continue;
            } else {
              this.state_0 = 6;
              continue;
            }

          case 6:
            var parts = split(this.local$line, Kotlin.charArrayOf(58), void 0, 2);
            var $receiver_1 = 0 >= 0 && 0 <= get_lastIndex_0(parts) ? parts.get_za3lpa$(0) : '';
            var tmp$_4;
            var tmp$_5 = trim_0(Kotlin.isCharSequence(tmp$_4 = $receiver_1) ? tmp$_4 : throwCCE()).toString();
            var $receiver_2 = 1 >= 0 && 1 <= get_lastIndex_0(parts) ? parts.get_za3lpa$(1) : '';
            var tmp$_6;
            var element = to(tmp$_5, trim_0(Kotlin.isCharSequence(tmp$_6 = $receiver_2) ? tmp$_6 : throwCCE()).toString());
            this.local$headerList.add_11rb$(element);
            this.state_0 = 7;
            continue;
          case 7:
            this.local$n++;
            this.state_0 = 4;
            continue;
          case 8:
            var headers = new Http$Headers(this.local$headerList);
            this.local$keepAlive = equals((tmp$_0 = headers.get_61zpoe$('connection')) != null ? tmp$_0.toLowerCase() : null, 'keep-alive');
            var contentLength = (tmp$_1 = headers.get_61zpoe$(Http$Headers$Companion_getInstance().ContentLength)) != null ? toLongOrNull_0(tmp$_1) : null;
            this.local$requestCompleted = CompletableDeferred_0(Job());
            this.local$bodyHandler = {v: HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda};
            this.local$endHandler = {v: HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda_0};
            launchImmediately_0(this.context, HttpPortable$createServer$ObjectLiteral$listenInternal$lambda$lambda_1(this.local$this$, this.local$bodyHandler, this.local$endHandler, this.local$httpVersion, this.local$client, this.local$requestCompleted, this.local$method, this.local$url, headers));
            if (contentLength != null) {
              this.local$remaining = contentLength;
              this.state_0 = 9;
              continue;
            } else {
              this.state_0 = 12;
              continue;
            }

          case 9:
            if (this.local$remaining.toNumber() <= 0) {
              this.state_0 = 11;
              continue;
            }
            var a = Kotlin.Long.fromInt(this.local$this$.BodyChunkSize);
            var b = this.local$remaining;
            var toRead = (a.compareTo_11rb$(b) <= 0 ? a : b).toInt();
            this.state_0 = 10;
            this.result_0 = readBytesUpToFirst(this.local$cb, toRead, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 10:
            var read = this.result_0;
            this.local$bodyHandler.v(read);
            this.local$remaining = this.local$remaining.subtract(Kotlin.Long.fromInt(read.length));
            this.state_0 = 9;
            continue;
          case 11:
            this.state_0 = 12;
            continue;
          case 12:
            this.local$endHandler.v();
            this.state_0 = 13;
            this.result_0 = this.local$requestCompleted.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 13:
            if (this.local$keepAlive) {
              this.state_0 = 2;
              continue;
            } else {
              this.state_0 = 14;
              continue;
            }

          case 14:
            this.state_0 = 15;
            this.result_0 = this.local$client.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 15:
            this.state_0 = 16;
            continue;
          case 16:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpPortable$createServer$ObjectLiteral$listenInternal$lambda(this$_0, closure$HeaderRegex_0) {
    return function (client_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpPortable$createServer$ObjectLiteral$listenInternal$lambda(this$_0, closure$HeaderRegex_0, client_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function HttpPortable$createServer$ObjectLiteral$listenInternal$lambda_0(closure$close) {
    return function (it) {
      closure$close.close();
      return Unit;
    };
  }
  function Coroutine$listenInternal_19mbxw$$default($this, port_0, host_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$port = port_0;
    this.local$host = host_0;
  }
  Coroutine$listenInternal_19mbxw$$default.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listenInternal_19mbxw$$default.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listenInternal_19mbxw$$default.prototype.constructor = Coroutine$listenInternal_19mbxw$$default;
  Coroutine$listenInternal_19mbxw$$default.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var context = this.context;
            this.state_0 = 2;
            this.result_0 = createTcpServer(this.local$port, this.local$host, void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var socket = this.result_0;
            this.$this.actualPort = socket.port;
            this.state_0 = 3;
            this.result_0 = socket.listen_lsub1v$(HttpPortable$createServer$ObjectLiteral$listenInternal$lambda(this.$this, this.$this.closure$HeaderRegex), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var close = this.result_0;
            this.$this.onClose.invoke_qlkmfe$(HttpPortable$createServer$ObjectLiteral$listenInternal$lambda_0(close));
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpPortable$createServer$ObjectLiteral.prototype.listenInternal_19mbxw$$default = function (port_0, host_0, continuation_0, suspended) {
    var instance = new Coroutine$listenInternal_19mbxw$$default(this, port_0, host_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  HttpPortable$createServer$ObjectLiteral.prototype.closeInternal = function (continuation) {
    invoke_0(this.onClose);
  };
  function Coroutine$HttpPortable$createServer$ObjectLiteral$wshandler$lambda(it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
  }
  Coroutine$HttpPortable$createServer$ObjectLiteral$wshandler$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpPortable$createServer$ObjectLiteral$wshandler$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpPortable$createServer$ObjectLiteral$wshandler$lambda.prototype.constructor = Coroutine$HttpPortable$createServer$ObjectLiteral$wshandler$lambda;
  Coroutine$HttpPortable$createServer$ObjectLiteral$wshandler$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return Unit;
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpPortable$createServer$ObjectLiteral$wshandler$lambda(it_0, continuation_0, suspended) {
    var instance = new Coroutine$HttpPortable$createServer$ObjectLiteral$wshandler$lambda(it_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$HttpPortable$createServer$ObjectLiteral$handler$lambda(it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
  }
  Coroutine$HttpPortable$createServer$ObjectLiteral$handler$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpPortable$createServer$ObjectLiteral$handler$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpPortable$createServer$ObjectLiteral$handler$lambda.prototype.constructor = Coroutine$HttpPortable$createServer$ObjectLiteral$handler$lambda;
  Coroutine$HttpPortable$createServer$ObjectLiteral$handler$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return Unit;
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpPortable$createServer$ObjectLiteral$handler$lambda(it_0, continuation_0, suspended) {
    var instance = new Coroutine$HttpPortable$createServer$ObjectLiteral$handler$lambda(it_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  HttpPortable$createServer$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [HttpServer]
  };
  HttpPortable.prototype.createServer = function () {
    var HeaderRegex = Regex_init('^(\\w+)\\s+(.*)\\s+(HTTP/1.[01])$');
    return new HttpPortable$createServer$ObjectLiteral(HeaderRegex);
  };
  HttpPortable.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'HttpPortable',
    interfaces: []
  };
  var HttpPortable_instance = null;
  function HttpPortable_getInstance() {
    if (HttpPortable_instance === null) {
      new HttpPortable();
    }return HttpPortable_instance;
  }
  function HttpRestClient(endpoint) {
    this.endpoint = endpoint;
  }
  function Coroutine$request_e4v99u$($this, method_0, path_0, request_0, mapper_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$result = void 0;
    this.local$method = method_0;
    this.local$path = path_0;
    this.local$request = request_0;
    this.local$mapper = mapper_0;
  }
  Coroutine$request_e4v99u$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$request_e4v99u$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$request_e4v99u$.prototype.constructor = Coroutine$request_e4v99u$;
  Coroutine$request_e4v99u$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$mapper === void 0)
              this.local$mapper = Mapper;
            var tmp$, tmp$_0, tmp$_1, tmp$_2;
            var requestContent = this.local$request != null ? Json_getInstance().stringify_oud20p$(this.local$mapper.toUntyped_b1ce0a$(PrimitiveClasses$anyClass, this.local$request), false) : null;
            tmp$_0 = this.$this.endpoint;
            tmp$ = requestContent != null ? openAsync_0(requestContent) : null;
            this.state_0 = 2;
            this.result_0 = tmp$_0.request_v6tn8p$(this.local$method, this.local$path, Http$Http$Headers_init([to(Http$Headers$Companion_getInstance().ContentType, 'application/json')]), tmp$, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$result = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$result.checkErrors(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$result.readAllString_qa9gbo$(void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            var stringResult = this.result_0;
            try {
              tmp$_2 = (tmp$_1 = Json_getInstance().parse_61zpoe$(stringResult)) != null ? tmp$_1 : emptyMap();
            } catch (e) {
              if (Kotlin.isType(e, IOException)) {
                tmp$_2 = emptyMap();
              } else
                throw e;
            }

            return tmp$_2;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpRestClient.prototype.request_e4v99u$ = function (method_0, path_0, request_0, mapper_0, continuation_0, suspended) {
    var instance = new Coroutine$request_e4v99u$(this, method_0, path_0, request_0, mapper_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  HttpRestClient.prototype.head_61zpoe$ = function (path, continuation) {
    return this.request_e4v99u$(Http$Method$Companion_getInstance().HEAD, path, null, void 0, continuation);
  };
  HttpRestClient.prototype.delete_61zpoe$ = function (path, continuation) {
    return this.request_e4v99u$(Http$Method$Companion_getInstance().DELETE, path, null, void 0, continuation);
  };
  HttpRestClient.prototype.get_61zpoe$ = function (path, continuation) {
    return this.request_e4v99u$(Http$Method$Companion_getInstance().GET, path, null, void 0, continuation);
  };
  HttpRestClient.prototype.put_bm4g0d$ = function (path, request, continuation) {
    return this.request_e4v99u$(Http$Method$Companion_getInstance().PUT, path, request, void 0, continuation);
  };
  HttpRestClient.prototype.post_bm4g0d$ = function (path, request, continuation) {
    return this.request_e4v99u$(Http$Method$Companion_getInstance().POST, path, request, void 0, continuation);
  };
  HttpRestClient.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HttpRestClient',
    interfaces: []
  };
  function rest($receiver) {
    return new HttpRestClient($receiver);
  }
  function rest_0($receiver, endpoint_0) {
    return new HttpRestClient(endpoint($receiver, endpoint_0));
  }
  function createRestClient($receiver, endpoint_0, mapper) {
    return rest(endpoint($receiver.createClient(), endpoint_0));
  }
  function suspendCoroutine$lambda_0(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(intercepted(c));
      closure$block(safe);
      return safe.getOrThrow();
    };
  }
  function HttpServer() {
    HttpServer$Companion_getInstance();
    this.requestConfig = new HttpServer$RequestConfig();
    this.actualPort_dj4hyl$_0 = 0;
  }
  function HttpServer$Companion() {
    HttpServer$Companion_instance = this;
  }
  HttpServer$Companion.prototype.invoke = function () {
    return get_defaultHttpFactory().createServer();
  };
  HttpServer$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var HttpServer$Companion_instance = null;
  function HttpServer$Companion_getInstance() {
    if (HttpServer$Companion_instance === null) {
      new HttpServer$Companion();
    }return HttpServer$Companion_instance;
  }
  function HttpServer$BaseRequest(uri, headers) {
    this.uri = uri;
    this.headers = headers;
    this.$delegate_2xdu1s$_0 = new Extra$Mixin();
    this.parts_ivoofc$_aszb59$_0 = lazy(HttpServer$BaseRequest$parts$lambda(this));
    this.path_ptae93$_0 = lazy(HttpServer$BaseRequest$path$lambda(this));
    this.queryString_jju9jl$_0 = lazy(HttpServer$BaseRequest$queryString$lambda(this));
    this.getParams_n9fo1g$_0 = lazy(HttpServer$BaseRequest$getParams$lambda(this));
    this.absoluteURI_v23cnh$_0 = lazy(HttpServer$BaseRequest$absoluteURI$lambda(this));
  }
  Object.defineProperty(HttpServer$BaseRequest.prototype, 'parts_ivoofc$_0', {
    get: function () {
      return this.parts_ivoofc$_aszb59$_0.value;
    }
  });
  Object.defineProperty(HttpServer$BaseRequest.prototype, 'path', {
    get: function () {
      return this.path_ptae93$_0.value;
    }
  });
  Object.defineProperty(HttpServer$BaseRequest.prototype, 'queryString', {
    get: function () {
      return this.queryString_jju9jl$_0.value;
    }
  });
  Object.defineProperty(HttpServer$BaseRequest.prototype, 'getParams', {
    get: function () {
      return this.getParams_n9fo1g$_0.value;
    }
  });
  Object.defineProperty(HttpServer$BaseRequest.prototype, 'absoluteURI', {
    get: function () {
      return this.absoluteURI_v23cnh$_0.value;
    }
  });
  Object.defineProperty(HttpServer$BaseRequest.prototype, 'extra', {
    get: function () {
      return this.$delegate_2xdu1s$_0.extra;
    },
    set: function (tmp$) {
      this.$delegate_2xdu1s$_0.extra = tmp$;
    }
  });
  function HttpServer$BaseRequest$parts$lambda(this$BaseRequest) {
    return function () {
      return split(this$BaseRequest.uri, Kotlin.charArrayOf(63), void 0, 2);
    };
  }
  function HttpServer$BaseRequest$path$lambda(this$BaseRequest) {
    return function () {
      return this$BaseRequest.parts_ivoofc$_0.get_za3lpa$(0);
    };
  }
  function HttpServer$BaseRequest$queryString$lambda(this$BaseRequest) {
    return function () {
      var $receiver = this$BaseRequest.parts_ivoofc$_0;
      return 1 >= 0 && 1 <= get_lastIndex_0($receiver) ? $receiver.get_za3lpa$(1) : '';
    };
  }
  function HttpServer$BaseRequest$getParams$lambda(this$BaseRequest) {
    return function () {
      return QueryString_getInstance().decode_6bul2c$(this$BaseRequest.queryString);
    };
  }
  function HttpServer$BaseRequest$absoluteURI$lambda(this$BaseRequest) {
    return function () {
      return this$BaseRequest.uri;
    };
  }
  HttpServer$BaseRequest.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BaseRequest',
    interfaces: [Extra]
  };
  function HttpServer$WsRequest(uri, headers, scope) {
    HttpServer$BaseRequest.call(this, uri, headers);
    this.scope = scope;
  }
  HttpServer$WsRequest.prototype.sendSafe_61zpoe$ = function (msg) {
    try {
      this.send_61zpoe$(msg);
    } catch (e) {
      if (Kotlin.isType(e, Throwable)) {
        printStackTrace_0(e);
      } else
        throw e;
    }
  };
  HttpServer$WsRequest.prototype.sendSafe_fqrh44$ = function (msg) {
    try {
      this.send_fqrh44$(msg);
    } catch (e) {
      if (Kotlin.isType(e, Throwable)) {
        printStackTrace_0(e);
      } else
        throw e;
    }
  };
  function Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda(this$_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$it = it_0;
  }
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda.prototype.constructor = Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda;
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$.send_11rb$(this.local$it, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$stringMessageStream$lambda$lambda(this$_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda(this$_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0(this$_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
  }
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0.prototype.constructor = Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0;
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$.close_dbl4no$();
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$stringMessageStream$lambda$lambda_0(this$_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$stringMessageStream$lambda$lambda_0(this$_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$stringMessageStream$lambda(this$WsRequest_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$WsRequest = this$WsRequest_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda.prototype.constructor = Coroutine$HttpServer$WsRequest$stringMessageStream$lambda;
  Coroutine$HttpServer$WsRequest$stringMessageStream$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$this$WsRequest.onStringMessage_2errf5$(HttpServer$WsRequest$stringMessageStream$lambda$lambda(this.local$$receiver));
            return this.local$this$WsRequest.onClose_g2bo5h$(HttpServer$WsRequest$stringMessageStream$lambda$lambda_0(this.local$$receiver)), Unit;
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$stringMessageStream$lambda(this$WsRequest_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$stringMessageStream$lambda(this$WsRequest_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  HttpServer$WsRequest.prototype.stringMessageStream = function () {
    return produce(this.scope, void 0, void 0, HttpServer$WsRequest$stringMessageStream$lambda(this));
  };
  function Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda(this$_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$it = it_0;
  }
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda.prototype.constructor = Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda;
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$.send_11rb$(this.local$it, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$binaryMessageStream$lambda$lambda(this$_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda(this$_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0(this$_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
  }
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0.prototype.constructor = Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0;
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$.close_dbl4no$();
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0(this$_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0(this$_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda(this$WsRequest_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$WsRequest = this$WsRequest_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda.prototype.constructor = Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda;
  Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$this$WsRequest.onBinaryMessage_e05lat$(HttpServer$WsRequest$binaryMessageStream$lambda$lambda(this.local$$receiver));
            return this.local$this$WsRequest.onClose_g2bo5h$(HttpServer$WsRequest$binaryMessageStream$lambda$lambda_0(this.local$$receiver)), Unit;
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$binaryMessageStream$lambda(this$WsRequest_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$binaryMessageStream$lambda(this$WsRequest_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  HttpServer$WsRequest.prototype.binaryMessageStream = function () {
    return produce(this.scope, void 0, void 0, HttpServer$WsRequest$binaryMessageStream$lambda(this));
  };
  function Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda(this$_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$it = it_0;
  }
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda.prototype.constructor = Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda;
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$.send_11rb$(this.local$it, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$anyMessageStream$lambda$lambda(this$_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda(this$_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0(this$_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
    this.local$it = it_0;
  }
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0.prototype.constructor = Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0;
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$.send_11rb$(this.local$it, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$anyMessageStream$lambda$lambda_0(this$_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_0(this$_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1(this$_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$ = this$_0;
  }
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1.prototype.constructor = Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1;
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return this.local$this$.close_dbl4no$();
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$anyMessageStream$lambda$lambda_1(this$_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$anyMessageStream$lambda$lambda_1(this$_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$WsRequest$anyMessageStream$lambda(this$WsRequest_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$this$WsRequest = this$WsRequest_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda.prototype.constructor = Coroutine$HttpServer$WsRequest$anyMessageStream$lambda;
  Coroutine$HttpServer$WsRequest$anyMessageStream$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$this$WsRequest.onStringMessage_2errf5$(HttpServer$WsRequest$anyMessageStream$lambda$lambda(this.local$$receiver));
            this.local$this$WsRequest.onBinaryMessage_e05lat$(HttpServer$WsRequest$anyMessageStream$lambda$lambda_0(this.local$$receiver));
            return this.local$this$WsRequest.onClose_g2bo5h$(HttpServer$WsRequest$anyMessageStream$lambda$lambda_1(this.local$$receiver)), Unit;
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$WsRequest$anyMessageStream$lambda(this$WsRequest_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$WsRequest$anyMessageStream$lambda(this$WsRequest_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  HttpServer$WsRequest.prototype.anyMessageStream = function () {
    return produce(this.scope, void 0, void 0, HttpServer$WsRequest$anyMessageStream$lambda(this));
  };
  HttpServer$WsRequest.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'WsRequest',
    interfaces: [HttpServer$BaseRequest]
  };
  function HttpServer$RequestConfig(beforeSendHeadersInterceptors) {
    if (beforeSendHeadersInterceptors === void 0)
      beforeSendHeadersInterceptors = LinkedHashMap_init();
    this.beforeSendHeadersInterceptors = beforeSendHeadersInterceptors;
    this.$delegate_kjpl2l$_0 = new Extra$Mixin();
  }
  HttpServer$RequestConfig.prototype.registerComponent_xs5mav$ = function (component, dependsOn) {
    throw new NotImplementedError_init();
  };
  Object.defineProperty(HttpServer$RequestConfig.prototype, 'extra', {
    get: function () {
      return this.$delegate_kjpl2l$_0.extra;
    },
    set: function (tmp$) {
      this.$delegate_kjpl2l$_0.extra = tmp$;
    }
  });
  HttpServer$RequestConfig.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RequestConfig',
    interfaces: [Extra]
  };
  HttpServer$RequestConfig.prototype.component1 = function () {
    return this.beforeSendHeadersInterceptors;
  };
  HttpServer$RequestConfig.prototype.copy_cbjoms$ = function (beforeSendHeadersInterceptors) {
    return new HttpServer$RequestConfig(beforeSendHeadersInterceptors === void 0 ? this.beforeSendHeadersInterceptors : beforeSendHeadersInterceptors);
  };
  HttpServer$RequestConfig.prototype.toString = function () {
    return 'RequestConfig(beforeSendHeadersInterceptors=' + Kotlin.toString(this.beforeSendHeadersInterceptors) + ')';
  };
  HttpServer$RequestConfig.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.beforeSendHeadersInterceptors) | 0;
    return result;
  };
  HttpServer$RequestConfig.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.beforeSendHeadersInterceptors, other.beforeSendHeadersInterceptors))));
  };
  function HttpServer$Request(method, uri, headers, requestConfig) {
    if (requestConfig === void 0)
      requestConfig = new HttpServer$RequestConfig();
    HttpServer$BaseRequest.call(this, uri, headers);
    this.method = method;
    this.requestConfig = requestConfig;
    this.finalizers = ArrayList_init();
    this.headersSent_5ao1rb$_0 = false;
    this.finalizingHeaders_ex4gi4$_0 = false;
    this.resHeaders_f2i43b$_0 = ArrayList_init();
    this.code_uo8l3k$_0 = 200;
    this.message_vb0f00$_0 = 'OK';
  }
  HttpServer$Request.prototype.getHeader_61zpoe$ = function (key) {
    return this.headers.get_61zpoe$(key);
  };
  HttpServer$Request.prototype.getHeaderList_61zpoe$ = function (key) {
    return this.headers.getAll_61zpoe$(key);
  };
  HttpServer$Request.prototype.ensureHeadersNotSent_smyc0q$_0 = function () {
    if (this.headersSent_5ao1rb$_0) {
      println('Sent headers: ' + this.resHeaders_f2i43b$_0);
      throw new IOException('Headers already sent');
    }};
  function HttpServer$Request$removeHeader$lambda(closure$key) {
    return function (it) {
      return equals_0(it.first, closure$key, true);
    };
  }
  HttpServer$Request.prototype.removeHeader_61zpoe$ = function (key) {
    this.ensureHeadersNotSent_smyc0q$_0();
    removeAll(this.resHeaders_f2i43b$_0, HttpServer$Request$removeHeader$lambda(key));
  };
  HttpServer$Request.prototype.addHeader_puj7f4$ = function (key, value) {
    this.ensureHeadersNotSent_smyc0q$_0();
    var $receiver = this.resHeaders_f2i43b$_0;
    var element = to(key, value);
    $receiver.add_11rb$(element);
  };
  HttpServer$Request.prototype.replaceHeader_puj7f4$ = function (key, value) {
    this.ensureHeadersNotSent_smyc0q$_0();
    this.removeHeader_61zpoe$(key);
    this.addHeader_puj7f4$(key, value);
  };
  HttpServer$Request.prototype._write_mj6st8$ = function (data, offset, size, continuation, callback$default) {
    if (offset === void 0)
      offset = 0;
    if (size === void 0)
      size = data.length - offset | 0;
    return callback$default ? callback$default(data, offset, size, continuation) : this._write_mj6st8$$default(data, offset, size, continuation);
  };
  function Coroutine$handler_949j03$($this, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$handler = handler_0;
  }
  Coroutine$handler_949j03$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$handler_949j03$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$handler_949j03$.prototype.constructor = Coroutine$handler_949j03$;
  Coroutine$handler_949j03$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this._handler_949j03$(this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.handler_949j03$ = function (handler_0, continuation_0, suspended) {
    var instance = new Coroutine$handler_949j03$(this, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$endHandler_o14v8n$($this, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$handler = handler_0;
  }
  Coroutine$endHandler_o14v8n$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$endHandler_o14v8n$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$endHandler_o14v8n$.prototype.constructor = Coroutine$endHandler_o14v8n$;
  Coroutine$endHandler_o14v8n$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this._endHandler_o14v8n$(this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.endHandler_o14v8n$ = function (handler_0, continuation_0, suspended) {
    var instance = new Coroutine$endHandler_o14v8n$(this, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function HttpServer$Request$readRawBody$lambda$lambda$lambda(closure$out, closure$maxSize) {
    return function (it) {
      if ((closure$out.size + it.length | 0) > closure$maxSize) {
        closure$out.clear();
      } else {
        closure$out.append_mj6st8$(it);
      }
      return Unit;
    };
  }
  function HttpServer$Request$readRawBody$lambda$lambda$lambda_0(closure$c, closure$out) {
    return function () {
      var $receiver = closure$c;
      var value = closure$out.toByteArray();
      $receiver.resumeWith_tl1gpc$(new Result(value));
      return Unit;
    };
  }
  function Coroutine$HttpServer$Request$readRawBody$lambda$lambda(closure$out_0, closure$maxSize_0, this$Request_0, closure$c_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$out = closure$out_0;
    this.local$closure$maxSize = closure$maxSize_0;
    this.local$this$Request = this$Request_0;
    this.local$closure$c = closure$c_0;
  }
  Coroutine$HttpServer$Request$readRawBody$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$Request$readRawBody$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$Request$readRawBody$lambda$lambda.prototype.constructor = Coroutine$HttpServer$Request$readRawBody$lambda$lambda;
  Coroutine$HttpServer$Request$readRawBody$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$Request.handler_949j03$(HttpServer$Request$readRawBody$lambda$lambda$lambda(this.local$closure$out, this.local$closure$maxSize), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$this$Request.endHandler_o14v8n$(HttpServer$Request$readRawBody$lambda$lambda$lambda_0(this.local$closure$c, this.local$closure$out), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$Request$readRawBody$lambda$lambda(closure$out_0, closure$maxSize_0, this$Request_0, closure$c_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$Request$readRawBody$lambda$lambda(closure$out_0, closure$maxSize_0, this$Request_0, closure$c_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function HttpServer$Request$readRawBody$lambda(closure$maxSize, this$Request) {
    return function (c) {
      var out = ByteArrayBuilder_init();
      launchImmediately_0(c.context, HttpServer$Request$readRawBody$lambda$lambda(out, closure$maxSize, this$Request, c));
      return Unit;
    };
  }
  function Coroutine$readRawBody_za3lpa$($this, maxSize_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$maxSize = maxSize_0;
  }
  Coroutine$readRawBody_za3lpa$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readRawBody_za3lpa$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readRawBody_za3lpa$.prototype.constructor = Coroutine$readRawBody_za3lpa$;
  Coroutine$readRawBody_za3lpa$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$maxSize === void 0)
              this.local$maxSize = 4096;
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_0(HttpServer$Request$readRawBody$lambda(this.local$maxSize, this.$this))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.readRawBody_za3lpa$ = function (maxSize_0, continuation_0, suspended) {
    var instance = new Coroutine$readRawBody_za3lpa$(this, maxSize_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  HttpServer$Request.prototype.setStatus_19mbxw$ = function (code, message) {
    if (message === void 0)
      message = HttpStatusMessage_getInstance().invoke_za3lpa$(code);
    this.ensureHeadersNotSent_smyc0q$_0();
    this.code_uo8l3k$_0 = code;
    this.message_vb0f00$_0 = message;
  };
  function Coroutine$flushHeaders_8s3zmt$_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
  }
  Coroutine$flushHeaders_8s3zmt$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$flushHeaders_8s3zmt$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$flushHeaders_8s3zmt$_0.prototype.constructor = Coroutine$flushHeaders_8s3zmt$_0;
  Coroutine$flushHeaders_8s3zmt$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.headersSent_5ao1rb$_0) {
              return;
            } else {
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            if (this.$this.finalizingHeaders_ex4gi4$_0)
              invalidOp("Can't write while finalizing headers");
            this.$this.finalizingHeaders_ex4gi4$_0 = true;
            this.local$tmp$ = this.$this.requestConfig.beforeSendHeadersInterceptors.entries.iterator();
            this.state_0 = 3;
            continue;
          case 3:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 5;
              continue;
            }
            var interceptor = this.local$tmp$.next();
            this.state_0 = 4;
            this.result_0 = interceptor.value(this.$this, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.state_0 = 3;
            continue;
          case 5:
            this.$this.headersSent_5ao1rb$_0 = true;
            this.state_0 = 6;
            this.result_0 = this.$this._sendHeader_j29v25$(this.$this.code_uo8l3k$_0, this.$this.message_vb0f00$_0, new Http$Headers(this.$this.resHeaders_f2i43b$_0), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.flushHeaders_8s3zmt$_0 = function (continuation_0, suspended) {
    var instance = new Coroutine$flushHeaders_8s3zmt$_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$write_mj6st8$$default_2($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_mj6st8$$default_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_mj6st8$$default_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_mj6st8$$default_2.prototype.constructor = Coroutine$write_mj6st8$$default_2;
  Coroutine$write_mj6st8$$default_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.flushHeaders_8s3zmt$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this._write_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.write_mj6st8$$default = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_mj6st8$$default_2(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$end($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
  }
  Coroutine$end.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$end.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$end.prototype.constructor = Coroutine$end;
  Coroutine$end.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.flushHeaders_8s3zmt$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this._end(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$tmp$ = this.$this.finalizers.iterator();
            this.state_0 = 4;
            continue;
          case 4:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 6;
              continue;
            }
            var finalizer = this.local$tmp$.next();
            this.state_0 = 5;
            this.result_0 = finalizer(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.state_0 = 4;
            continue;
          case 6:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.end = function (continuation_0, suspended) {
    var instance = new Coroutine$end(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$end_fqrh44$($this, data_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$data = data_0;
  }
  Coroutine$end_fqrh44$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$end_fqrh44$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$end_fqrh44$.prototype.constructor = Coroutine$end_fqrh44$;
  Coroutine$end_fqrh44$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.$this.replaceHeader_puj7f4$(Http$Headers$Companion_getInstance().ContentLength, this.local$data.length.toString());
            this.state_0 = 2;
            this.result_0 = this.$this.flushHeaders_8s3zmt$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this._write_mj6st8$(this.local$data, 0, this.local$data.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.$this.end(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.end_fqrh44$ = function (data_0, continuation_0, suspended) {
    var instance = new Coroutine$end_fqrh44$(this, data_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$write_6zdodq$($this, data_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$data = data_0;
    this.local$charset = charset_0;
  }
  Coroutine$write_6zdodq$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_6zdodq$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_6zdodq$.prototype.constructor = Coroutine$write_6zdodq$;
  Coroutine$write_6zdodq$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            this.state_0 = 2;
            this.result_0 = this.$this.flushHeaders_8s3zmt$_0(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this._write_mj6st8$(toByteArray(this.local$data, this.local$charset), void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.write_6zdodq$ = function (data_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$write_6zdodq$(this, data_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$end_6zdodq$($this, data_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$data = data_0;
    this.local$charset = charset_0;
  }
  Coroutine$end_6zdodq$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$end_6zdodq$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$end_6zdodq$.prototype.constructor = Coroutine$end_6zdodq$;
  Coroutine$end_6zdodq$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            this.state_0 = 2;
            this.result_0 = this.$this.end_fqrh44$(toByteArray(this.local$data, this.local$charset), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.end_6zdodq$ = function (data_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$end_6zdodq$(this, data_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$close_5($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close_5.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_5.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_5.prototype.constructor = Coroutine$close_5;
  Coroutine$close_5.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.end(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer$Request.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_5(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  HttpServer$Request.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Request',
    interfaces: [AsyncOutputStream, HttpServer$BaseRequest]
  };
  HttpServer.prototype.websocketHandlerInternal_d3ycxo$ = function (handler, continuation) {
  };
  HttpServer.prototype.httpHandlerInternal_b59mbs$ = function (handler, continuation) {
  };
  function Coroutine$HttpServer$allHandler$lambda$lambda(closure$handler_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$it = it_0;
  }
  Coroutine$HttpServer$allHandler$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$allHandler$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$allHandler$lambda$lambda.prototype.constructor = Coroutine$HttpServer$allHandler$lambda$lambda;
  Coroutine$HttpServer$allHandler$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler(this.local$it, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$allHandler$lambda$lambda(closure$handler_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$allHandler$lambda$lambda(closure$handler_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$HttpServer$allHandler$lambda$lambda_0(closure$handler_0, it_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$it = it_0;
  }
  Coroutine$HttpServer$allHandler$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpServer$allHandler$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpServer$allHandler$lambda$lambda_0.prototype.constructor = Coroutine$HttpServer$allHandler$lambda$lambda_0;
  Coroutine$HttpServer$allHandler$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler(this.local$it, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpServer$allHandler$lambda$lambda_0(closure$handler_0) {
    return function (it_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpServer$allHandler$lambda$lambda_0(closure$handler_0, it_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$allHandler_w09d7d$($this, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$handler = handler_0;
  }
  Coroutine$allHandler_w09d7d$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$allHandler_w09d7d$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$allHandler_w09d7d$.prototype.constructor = Coroutine$allHandler_w09d7d$;
  Coroutine$allHandler_w09d7d$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.websocketHandler_d3ycxo$(HttpServer$allHandler$lambda$lambda(this.local$handler), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.httpHandler_b59mbs$(HttpServer$allHandler$lambda$lambda_0(this.local$handler), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.$this;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.allHandler_w09d7d$ = function (handler_0, continuation_0, suspended) {
    var instance = new Coroutine$allHandler_w09d7d$(this, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$listenInternal_19mbxw$$default_0($this, port_0, host_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$listenInternal_19mbxw$$default_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listenInternal_19mbxw$$default_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listenInternal_19mbxw$$default_0.prototype.constructor = Coroutine$listenInternal_19mbxw$$default_0;
  Coroutine$listenInternal_19mbxw$$default_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var deferred = CompletableDeferred_0(Job());
            this.state_0 = 2;
            this.result_0 = deferred.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.listenInternal_19mbxw$$default = function (port_0, host_0, continuation_0, suspended) {
    var instance = new Coroutine$listenInternal_19mbxw$$default_0(this, port_0, host_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  HttpServer.prototype.listenInternal_19mbxw$ = function (port, host, continuation, callback$default) {
    if (host === void 0)
      host = '127.0.0.1';
    return callback$default ? callback$default(port, host, continuation) : this.listenInternal_19mbxw$$default(port, host, continuation);
  };
  Object.defineProperty(HttpServer.prototype, 'actualPort', {
    get: function () {
      return this.actualPort_dj4hyl$_0;
    }
  });
  HttpServer.prototype.closeInternal = function (continuation) {
  };
  function Coroutine$websocketHandler_d3ycxo$($this, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$handler = handler_0;
  }
  Coroutine$websocketHandler_d3ycxo$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$websocketHandler_d3ycxo$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$websocketHandler_d3ycxo$.prototype.constructor = Coroutine$websocketHandler_d3ycxo$;
  Coroutine$websocketHandler_d3ycxo$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.websocketHandlerInternal_d3ycxo$(this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.$this;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.websocketHandler_d3ycxo$ = function (handler_0, continuation_0, suspended) {
    var instance = new Coroutine$websocketHandler_d3ycxo$(this, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$httpHandler_b59mbs$($this, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$handler = handler_0;
  }
  Coroutine$httpHandler_b59mbs$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$httpHandler_b59mbs$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$httpHandler_b59mbs$.prototype.constructor = Coroutine$httpHandler_b59mbs$;
  Coroutine$httpHandler_b59mbs$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.httpHandlerInternal_b59mbs$(this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.$this;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.httpHandler_b59mbs$ = function (handler_0, continuation_0, suspended) {
    var instance = new Coroutine$httpHandler_b59mbs$(this, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$listen_19mbxw$($this, port_0, host_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$port = port_0;
    this.local$host = host_0;
  }
  Coroutine$listen_19mbxw$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listen_19mbxw$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listen_19mbxw$.prototype.constructor = Coroutine$listen_19mbxw$;
  Coroutine$listen_19mbxw$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$port === void 0)
              this.local$port = 0;
            if (this.local$host === void 0)
              this.local$host = '127.0.0.1';
            this.state_0 = 2;
            this.result_0 = this.$this.listenInternal_19mbxw$(this.local$port, this.local$host, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.$this;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.listen_19mbxw$ = function (port_0, host_0, continuation_0, suspended) {
    var instance = new Coroutine$listen_19mbxw$(this, port_0, host_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$listen_iq1xc0$($this, port_0, host_0, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$port = port_0;
    this.local$host = host_0;
    this.local$handler = handler_0;
  }
  Coroutine$listen_iq1xc0$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listen_iq1xc0$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listen_iq1xc0$.prototype.constructor = Coroutine$listen_iq1xc0$;
  Coroutine$listen_iq1xc0$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$port === void 0)
              this.local$port = 0;
            if (this.local$host === void 0)
              this.local$host = '127.0.0.1';
            this.state_0 = 2;
            this.result_0 = this.$this.httpHandler_b59mbs$(this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.listen_19mbxw$(this.local$port, this.local$host, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.$this;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.listen_iq1xc0$ = function (port_0, host_0, handler_0, continuation_0, suspended) {
    var instance = new Coroutine$listen_iq1xc0$(this, port_0, host_0, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$close_6($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close_6.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_6.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_6.prototype.constructor = Coroutine$close_6;
  Coroutine$close_6.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.closeInternal(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpServer.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_6(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  HttpServer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HttpServer',
    interfaces: [AsyncCloseable]
  };
  function FakeRequest(method, uri, headers, body, requestConfig) {
    if (headers === void 0)
      headers = Http$Http$Headers_init([]);
    if (body === void 0)
      body = EMPTY_BYTE_ARRAY;
    HttpServer$Request.call(this, method, uri, headers, requestConfig);
    this.body = body;
    this.buf_0 = ByteArrayBuilder_init();
    this.outputHeaders = Http$Http$Headers_init([]);
    this.outputStatusCode = 0;
    this.outputStatusMessage = '';
    this.output = '';
    this.log = ArrayList_init();
  }
  FakeRequest.prototype._handler_949j03$ = function (handler, continuation) {
    var $receiver = this.log;
    var element = '_handler()';
    $receiver.add_11rb$(element);
    handler(this.body);
  };
  FakeRequest.prototype._endHandler_o14v8n$ = function (handler, continuation) {
    var $receiver = this.log;
    var element = '_endHandler()';
    $receiver.add_11rb$(element);
    handler();
  };
  FakeRequest.prototype._sendHeader_j29v25$ = function (code, message, headers, continuation) {
    var $receiver = this.log;
    var element = '_setStatus(' + code + ', ' + message + ')';
    $receiver.add_11rb$(element);
    this.outputStatusCode = code;
    this.outputStatusMessage = message;
    var $receiver_0 = this.log;
    var element_0 = '_sendHeaders(' + headers + ')';
    $receiver_0.add_11rb$(element_0);
    this.outputHeaders = headers;
  };
  FakeRequest.prototype._write_mj6st8$$default = function (data, offset, size, continuation) {
    var $receiver = this.log;
    var element = '_write(' + toString_2(copyOfRange(data, offset, offset + size | 0), UTF8) + ')';
    $receiver.add_11rb$(element);
    this.buf_0.append_mj6st8$(data, offset, size);
  };
  FakeRequest.prototype._end = function (continuation) {
    this.log.add_11rb$('_end()');
    this.output = toString_2(this.buf_0.toByteArray(), UTF8);
  };
  FakeRequest.prototype.toString = function () {
    return this.outputStatusCode.toString() + ':' + this.outputStatusMessage + ':' + this.outputHeaders + ':' + this.output;
  };
  FakeRequest.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FakeRequest',
    interfaces: [HttpServer$Request]
  };
  function Coroutine$RawSocketWebSocketClient(url_0, protocols_0, origin_0, wskey_0, debug_0, connect_0, headers_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$uri = void 0;
    this.local$$receiver = void 0;
    this.local$url = url_0;
    this.local$protocols = protocols_0;
    this.local$origin = origin_0;
    this.local$wskey = wskey_0;
    this.local$debug = debug_0;
    this.local$connect = connect_0;
    this.local$headers = headers_0;
  }
  Coroutine$RawSocketWebSocketClient.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$RawSocketWebSocketClient.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$RawSocketWebSocketClient.prototype.constructor = Coroutine$RawSocketWebSocketClient;
  Coroutine$RawSocketWebSocketClient.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$protocols === void 0)
              this.local$protocols = null;
            if (this.local$origin === void 0)
              this.local$origin = null;
            if (this.local$wskey === void 0)
              this.local$wskey = 'wskey';
            if (this.local$debug === void 0)
              this.local$debug = false;
            if (this.local$connect === void 0)
              this.local$connect = true;
            if (this.local$headers === void 0)
              this.local$headers = Http$Http$Headers_init([]);
            if (OS_getInstance().isJsBrowserOrWorker) {
              throw IllegalStateException_init('RawSocketWebSocketClient is not supported on JS browser. Use WebSocketClient instead'.toString());
            }
            this.local$uri = URL$Companion_getInstance().invoke_61zpoe$(this.local$url);
            var secure = this.local$uri.isSecureScheme;
            this.local$tmp$ = this.context;
            this.state_0 = 2;
            this.result_0 = AsyncClient$Companion_getInstance().create_6taknv$(secure, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$$receiver = new RawSocketWebSocketClient_0(this.local$tmp$, this.result_0, this.local$uri, this.local$protocols, this.local$debug, this.local$origin, this.local$wskey != null ? this.local$wskey : 'mykey', this.local$headers);
            if (this.local$connect) {
              this.state_0 = 3;
              this.result_0 = this.local$$receiver.connect_8be2vx$(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            return this.local$$receiver;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function RawSocketWebSocketClient(url_0, protocols_0, origin_0, wskey_0, debug_0, connect_0, headers_0, continuation_0, suspended) {
    var instance = new Coroutine$RawSocketWebSocketClient(url_0, protocols_0, origin_0, wskey_0, debug_0, connect_0, headers_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function WsFrame(data, type, isFinal, frameIsBinary) {
    WsFrame$Companion_getInstance();
    if (isFinal === void 0)
      isFinal = true;
    if (frameIsBinary === void 0)
      frameIsBinary = true;
    this.data = data;
    this.type = type;
    this.isFinal = isFinal;
    this.frameIsBinary = frameIsBinary;
  }
  WsFrame.prototype.toByteArray = function () {
    var buffer = ByteArrayBuilder_init(4096);
    var s = MemorySyncStream_0(buffer);
    var isMasked = false;
    var mask = Random.Default.nextBytes_za3lpa$(4);
    var sizeMask = isMasked ? 128 : 0;
    write8_0(s, this.type.id | (this.isFinal ? 128 : 0));
    if (this.data.length < 126)
      write8_0(s, this.data.length | sizeMask);
    else if (this.data.length < 65536) {
      write8_0(s, 126 | sizeMask);
      write16BE_1(s, this.data.length);
    } else {
      write8_0(s, 127 | sizeMask);
      write32BE_3(s, 0);
      write32BE_3(s, this.data.length);
    }
    if (isMasked)
      writeBytes_1(s, mask);
    writeBytes_1(s, isMasked ? WsFrame$Companion_getInstance().applyMask_6z6k8d$(this.data, mask) : this.data);
    return buffer.toByteArray();
  };
  function WsFrame$Companion() {
    WsFrame$Companion_instance = this;
  }
  WsFrame$Companion.prototype.applyMask_6z6k8d$ = function (payload, mask) {
    if (mask == null)
      return payload;
    var maskedPayload = new Int8Array(payload.length);
    for (var n = 0; n < payload.length; n++)
      maskedPayload[n] = toByte(payload[n] ^ mask[n % mask.length]);
    return maskedPayload;
  };
  WsFrame$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var WsFrame$Companion_instance = null;
  function WsFrame$Companion_getInstance() {
    if (WsFrame$Companion_instance === null) {
      new WsFrame$Companion();
    }return WsFrame$Companion_instance;
  }
  WsFrame.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'WsFrame',
    interfaces: []
  };
  function RawSocketWebSocketClient_0(coroutineContext, client, urlUrl, protocols, debug, origin, key, headers) {
    if (headers === void 0)
      headers = Http$Http$Headers_init([]);
    WebSocketClient.call(this, urlUrl.fullUrl, protocols, debug);
    this.coroutineContext = coroutineContext;
    this.client = client;
    this.urlUrl = urlUrl;
    this.origin = origin;
    this.key = key;
    this.headers = headers;
    this.frameIsBinary_0 = false;
    var tmp$;
    this.host = (tmp$ = this.urlUrl.host) != null ? tmp$ : '127.0.0.1';
    this.port = this.urlUrl.port;
    this.lastPong_0 = null;
    this.closed = false;
  }
  function RawSocketWebSocketClient$buildHeader$lambda(this$RawSocketWebSocketClient) {
    return function ($receiver) {
      $receiver.put_puj7f4$('Host', this$RawSocketWebSocketClient.host + ':' + this$RawSocketWebSocketClient.port);
      $receiver.put_puj7f4$('Pragma', 'no-cache');
      $receiver.put_puj7f4$('Cache-Control', 'no-cache');
      $receiver.put_puj7f4$('Upgrade', 'websocket');
      if (this$RawSocketWebSocketClient.protocols != null) {
        $receiver.put_puj7f4$('Sec-WebSocket-Protocol', joinToString(this$RawSocketWebSocketClient.protocols, ', '));
      }$receiver.put_puj7f4$('Sec-WebSocket-Version', '13');
      $receiver.put_puj7f4$('Connection', 'Upgrade');
      $receiver.put_puj7f4$('Sec-WebSocket-Key', toBase64(toByteArray(this$RawSocketWebSocketClient.key)));
      if (this$RawSocketWebSocketClient.origin != null) {
        $receiver.put_puj7f4$('Origin', this$RawSocketWebSocketClient.origin);
      }$receiver.put_puj7f4$('User-Agent', HttpClient$Companion_getInstance().DEFAULT_USER_AGENT);
      return Unit;
    };
  }
  RawSocketWebSocketClient_0.prototype.buildHeader_8be2vx$ = function () {
    var baseHeaders = Http$Headers$Companion_getInstance().build_amwc05$(RawSocketWebSocketClient$buildHeader$lambda(this));
    var computedHeaders = baseHeaders.withReplaceHeaders_5dayij$(this.headers);
    var $receiver = ArrayList_init();
    var tmp$;
    $receiver.add_11rb$('GET ' + this.urlUrl.pathWithQuery + ' HTTP/1.1');
    tmp$ = computedHeaders.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      $receiver.add_11rb$(item.first + ': ' + item.second);
    }
    return joinToString($receiver, '\r\n') + '\r\n\r\n';
  };
  function Coroutine$RawSocketWebSocketClient$connect$lambda(this$RawSocketWebSocketClient_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 9;
    this.local$this$RawSocketWebSocketClient = this$RawSocketWebSocketClient_0;
  }
  Coroutine$RawSocketWebSocketClient$connect$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$RawSocketWebSocketClient$connect$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$RawSocketWebSocketClient$connect$lambda.prototype.constructor = Coroutine$RawSocketWebSocketClient$connect$lambda;
  Coroutine$RawSocketWebSocketClient$connect$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.local$this$RawSocketWebSocketClient.onOpen.invoke_11rb$(Unit);
            this.exceptionState_0 = 7;
            this.state_0 = 1;
            continue;
          case 1:
            if (this.local$this$RawSocketWebSocketClient.closed) {
              this.state_0 = 6;
              continue;
            }
            this.state_0 = 2;
            this.result_0 = this.local$this$RawSocketWebSocketClient.readWsFrame(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            var frame = this.result_0;
            var payload = frame.frameIsBinary ? frame.data : toString_2(frame.data, UTF8);
            tmp$ = frame.type;
            if (equals(tmp$, WsOpcode$Companion_getInstance().Close)) {
              this.state_0 = 6;
              continue;
            } else {
              if (equals(tmp$, WsOpcode$Companion_getInstance().Ping)) {
                this.state_0 = 3;
                this.result_0 = this.local$this$RawSocketWebSocketClient.sendWsFrame_hc2kww$(new WsFrame(frame.data, WsOpcode$Companion_getInstance().Pong), this);
                if (this.result_0 === COROUTINE_SUSPENDED)
                  return COROUTINE_SUSPENDED;
                continue;
              } else {
                if (equals(tmp$, WsOpcode$Companion_getInstance().Pong))
                  this.local$this$RawSocketWebSocketClient.lastPong_0 = DateTime.Companion.now();
                else {
                  if (typeof payload === 'string')
                    this.local$this$RawSocketWebSocketClient.onStringMessage.invoke_11rb$(payload);
                  else if (Kotlin.isByteArray(payload))
                    this.local$this$RawSocketWebSocketClient.onBinaryMessage.invoke_11rb$(payload);
                  this.local$this$RawSocketWebSocketClient.onAnyMessage.invoke_11rb$(payload);
                }
                this.state_0 = 4;
                continue;
              }
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            this.state_0 = 5;
            continue;
          case 5:
            this.state_0 = 1;
            continue;
          case 6:
            this.exceptionState_0 = 9;
            this.state_0 = 8;
            continue;
          case 7:
            this.exceptionState_0 = 9;
            var e = this.exception_0;
            if (Kotlin.isType(e, Throwable)) {
              this.local$this$RawSocketWebSocketClient.onError.invoke_11rb$(e);
            } else
              throw e;
            this.state_0 = 8;
            continue;
          case 8:
            return this.local$this$RawSocketWebSocketClient.onClose.invoke_11rb$(Unit), Unit;
          case 9:
            throw this.exception_0;
          default:this.state_0 = 9;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 9) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function RawSocketWebSocketClient$connect$lambda(this$RawSocketWebSocketClient_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$RawSocketWebSocketClient$connect$lambda(this$RawSocketWebSocketClient_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function Coroutine$connect_8be2vx$($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$headers = void 0;
  }
  Coroutine$connect_8be2vx$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$connect_8be2vx$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$connect_8be2vx$.prototype.constructor = Coroutine$connect_8be2vx$;
  Coroutine$connect_8be2vx$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (OS_getInstance().isJsBrowserOrWorker) {
              throw IllegalStateException_init('RawSocketWebSocketClient is not supported on JS browser. Use WebSocketClient instead'.toString());
            }
            this.state_0 = 2;
            this.result_0 = this.$this.client.connect_bm4lxs$(this.$this.host, this.$this.port, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = writeBytes(this.$this.client, toByteArray(this.$this.buildHeader_8be2vx$()), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$headers = ArrayList_init();
            this.state_0 = 4;
            continue;
          case 4:
            this.state_0 = 5;
            this.result_0 = readLine(this.$this.client, void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            var $receiver = this.result_0;
            var tmp$;
            var line = trimEnd_0(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE()).toString();
            if (line.length === 0) {
              this.local$headers.add_11rb$(line);
              this.state_0 = 7;
              continue;
            } else {
              this.state_0 = 6;
              continue;
            }

          case 6:
            this.state_0 = 4;
            continue;
          case 7:
            launchImmediately_0(this.$this.coroutineContext, RawSocketWebSocketClient$connect$lambda(this.$this));
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  RawSocketWebSocketClient_0.prototype.connect_8be2vx$ = function (continuation_0, suspended) {
    var instance = new Coroutine$connect_8be2vx$(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$RawSocketWebSocketClient$close$lambda(this$RawSocketWebSocketClient_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$RawSocketWebSocketClient = this$RawSocketWebSocketClient_0;
  }
  Coroutine$RawSocketWebSocketClient$close$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$RawSocketWebSocketClient$close$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$RawSocketWebSocketClient$close$lambda.prototype.constructor = Coroutine$RawSocketWebSocketClient$close$lambda;
  Coroutine$RawSocketWebSocketClient$close$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$RawSocketWebSocketClient.sendWsFrame_hc2kww$(new WsFrame(new Int8Array([]), WsOpcode$Companion_getInstance().Close), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function RawSocketWebSocketClient$close$lambda(this$RawSocketWebSocketClient_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$RawSocketWebSocketClient$close$lambda(this$RawSocketWebSocketClient_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  RawSocketWebSocketClient_0.prototype.close_19mbxw$$default = function (code, reason) {
    this.closed = true;
    launchImmediately_0(this.coroutineContext, RawSocketWebSocketClient$close$lambda(this));
  };
  function Coroutine$send_61zpoe$($this, message_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$message = message_0;
  }
  Coroutine$send_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$send_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$send_61zpoe$.prototype.constructor = Coroutine$send_61zpoe$;
  Coroutine$send_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.sendWsFrame_hc2kww$(new WsFrame(toByteArray(this.local$message, UTF8), WsOpcode$Companion_getInstance().Text), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  RawSocketWebSocketClient_0.prototype.send_61zpoe$ = function (message_0, continuation_0, suspended) {
    var instance = new Coroutine$send_61zpoe$(this, message_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$send_fqrh44$($this, message_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$message = message_0;
  }
  Coroutine$send_fqrh44$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$send_fqrh44$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$send_fqrh44$.prototype.constructor = Coroutine$send_fqrh44$;
  Coroutine$send_fqrh44$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.sendWsFrame_hc2kww$(new WsFrame(this.local$message, WsOpcode$Companion_getInstance().Binary), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  RawSocketWebSocketClient_0.prototype.send_fqrh44$ = function (message_0, continuation_0, suspended) {
    var instance = new Coroutine$send_fqrh44$(this, message_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readWsFrame($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$_0 = void 0;
    this.local$tmp$_1 = void 0;
    this.local$b0 = void 0;
    this.local$isFinal = void 0;
    this.local$opcode = void 0;
    this.local$frameIsBinary = void 0;
    this.local$isMasked = void 0;
    this.local$length = void 0;
    this.local$mask = void 0;
  }
  Coroutine$readWsFrame.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readWsFrame.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readWsFrame.prototype.constructor = Coroutine$readWsFrame;
  Coroutine$readWsFrame.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.state_0 = 2;
            this.result_0 = readU8_0(this.$this.client, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$b0 = this.result_0;
            this.state_0 = 3;
            this.result_0 = readU8_0(this.$this.client, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var b1 = this.result_0;
            this.local$isFinal = extract_0(this.local$b0, 7);
            this.local$opcode = new WsOpcode(extract(this.local$b0, 0, 4));
            if (equals(this.local$opcode, WsOpcode$Companion_getInstance().Text))
              tmp$ = false;
            else if (equals(this.local$opcode, WsOpcode$Companion_getInstance().Binary))
              tmp$ = true;
            else
              tmp$ = this.$this.frameIsBinary_0;
            this.local$frameIsBinary = tmp$;
            var partialLength = extract(b1, 0, 7);
            this.local$isMasked = extract_0(b1, 7);
            switch (partialLength) {
              case 126:
                this.state_0 = 6;
                this.result_0 = readU16BE_0(this.$this.client, this);
                if (this.result_0 === COROUTINE_SUSPENDED)
                  return COROUTINE_SUSPENDED;
                continue;
              case 127:
                this.state_0 = 4;
                this.result_0 = readS32BE_0(this.$this.client, this);
                if (this.result_0 === COROUTINE_SUSPENDED)
                  return COROUTINE_SUSPENDED;
                continue;
              default:this.local$tmp$_0 = partialLength;
                this.state_0 = 7;
                continue;
            }

          case 4:
            var tmp = this.result_0;
            if (tmp !== 0) {
              throw IllegalStateException_init('message too long'.toString());
            }
            this.state_0 = 5;
            this.result_0 = readS32BE_0(this.$this.client, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.local$tmp$_0 = this.result_0;
            this.state_0 = 7;
            continue;
          case 6:
            this.local$tmp$_0 = this.result_0;
            this.state_0 = 7;
            continue;
          case 7:
            this.local$length = this.local$tmp$_0;
            if (this.local$isMasked) {
              this.state_0 = 8;
              this.result_0 = readBytesExact(this.$this.client, 4, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.local$tmp$_1 = null;
              this.state_0 = 9;
              continue;
            }

          case 8:
            this.local$tmp$_1 = this.result_0;
            this.state_0 = 9;
            continue;
          case 9:
            this.local$mask = this.local$tmp$_1;
            this.state_0 = 10;
            this.result_0 = readBytesExact(this.$this.client, this.local$length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 10:
            var unmaskedData = this.result_0;
            var finalData = WsFrame$Companion_getInstance().applyMask_6z6k8d$(unmaskedData, this.local$mask);
            return new WsFrame(finalData, this.local$opcode, this.local$isFinal, this.local$frameIsBinary);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  RawSocketWebSocketClient_0.prototype.readWsFrame = function (continuation_0, suspended) {
    var instance = new Coroutine$readWsFrame(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$sendWsFrame_hc2kww$($this, frame_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$frame = frame_0;
  }
  Coroutine$sendWsFrame_hc2kww$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$sendWsFrame_hc2kww$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$sendWsFrame_hc2kww$.prototype.constructor = Coroutine$sendWsFrame_hc2kww$;
  Coroutine$sendWsFrame_hc2kww$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = writeBytes(this.$this.client, this.local$frame.toByteArray(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  RawSocketWebSocketClient_0.prototype.sendWsFrame_hc2kww$ = function (frame_0, continuation_0, suspended) {
    var instance = new Coroutine$sendWsFrame_hc2kww$(this, frame_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  RawSocketWebSocketClient_0.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RawSocketWebSocketClient',
    interfaces: [WebSocketClient]
  };
  function WsOpcode(id) {
    WsOpcode$Companion_getInstance();
    this.id = id;
  }
  function WsOpcode$Companion() {
    WsOpcode$Companion_instance = this;
    this.Continuation = new WsOpcode(0);
    this.Text = new WsOpcode(1);
    this.Binary = new WsOpcode(2);
    this.Close = new WsOpcode(8);
    this.Ping = new WsOpcode(9);
    this.Pong = new WsOpcode(10);
  }
  WsOpcode$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var WsOpcode$Companion_instance = null;
  function WsOpcode$Companion_getInstance() {
    if (WsOpcode$Companion_instance === null) {
      new WsOpcode$Companion();
    }return WsOpcode$Companion_instance;
  }
  WsOpcode.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'WsOpcode',
    interfaces: []
  };
  WsOpcode.prototype.unbox = function () {
    return this.id;
  };
  WsOpcode.prototype.toString = function () {
    return 'WsOpcode(id=' + Kotlin.toString(this.id) + ')';
  };
  WsOpcode.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.id) | 0;
    return result;
  };
  WsOpcode.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.id, other.id))));
  };
  function WebSocketClient(url, protocols, DEBUG) {
    this.url = url;
    this.protocols = protocols;
    this.onOpen = new Signal();
    this.onError = new Signal();
    this.onClose = new Signal();
    this.onBinaryMessage = new Signal();
    this.onStringMessage = new Signal();
    this.onAnyMessage = new Signal();
  }
  WebSocketClient.prototype.close_19mbxw$$default = function (code, reason) {
  };
  WebSocketClient.prototype.close_19mbxw$ = function (code, reason, callback$default) {
    if (code === void 0)
      code = 0;
    if (reason === void 0)
      reason = '';
    callback$default ? callback$default(code, reason) : this.close_19mbxw$$default(code, reason);
  };
  WebSocketClient.prototype.send_61zpoe$ = function (message, continuation) {
    return Unit;
  };
  WebSocketClient.prototype.send_fqrh44$ = function (message, continuation) {
    return Unit;
  };
  WebSocketClient.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'WebSocketClient',
    interfaces: []
  };
  function readString_0($receiver, continuation) {
    return $receiver.onStringMessage.waitOneBase(continuation);
  }
  function readBinary($receiver, continuation) {
    return $receiver.onBinaryMessage.waitOneBase(continuation);
  }
  function WebSocketException(message) {
    IOException.call(this, message);
    this.name = 'WebSocketException';
  }
  WebSocketException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'WebSocketException',
    interfaces: [IOException]
  };
  function Json() {
    Json_instance = this;
  }
  Json.prototype.parse_61zpoe$ = function (s) {
    return this.parse_f6s5ko$(new StrReader(s));
  };
  Json.prototype.stringify_oud20p$ = function (obj, pretty) {
    if (pretty === void 0)
      pretty = false;
    if (pretty) {
      var $receiver = new Indenter();
      this.stringifyPretty_snnzj3$(obj, $receiver);
      return $receiver.toString_8kj6y5$(true, '\t');
    } else {
      var $receiver_0 = StringBuilder_init();
      this.stringify_dx15ti$(obj, $receiver_0);
      return $receiver_0.toString();
    }
  };
  function Json$CustomSerializer() {
  }
  Json$CustomSerializer.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'CustomSerializer',
    interfaces: []
  };
  Json.prototype.parse_f6s5ko$ = function (s) {
    var ic = unboxChar(s.skipSpaces().read());
    switch (ic) {
      case 123:
        var $receiver = LinkedHashMap_init();
        var tmp$;
        obj: while (true) {
          switch (unboxChar(s.skipSpaces().read())) {
            case 125:
              break obj;
            case 44:
              continue obj;
            default:s.unread_za3lpa$();
              break;
          }
          var key = typeof (tmp$ = this.parse_f6s5ko$(s)) === 'string' ? tmp$ : throwCCE();
          s.skipSpaces().expect_s8itvh$(58);
          var value = this.parse_f6s5ko$(s);
          $receiver.put_xwzc9p$(key, value);
        }

        return $receiver;
      case 91:
        var $receiver_0 = ArrayList_init();
        array: while (true) {
          switch (unboxChar(s.skipSpaces().read())) {
            case 93:
              break array;
            case 44:
              continue array;
            default:s.unread_za3lpa$();
              break;
          }
          var item = this.parse_f6s5ko$(s);
          $receiver_0.add_11rb$(item);
        }

        return $receiver_0;
      case 45:
      case 43:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        s.unread_za3lpa$();
        var dres = this.parseNumber_0(s);
        return numberToInt(dres) === dres ? numberToInt(dres) : dres;
      case 116:
      case 102:
      case 110:
        s.unread_za3lpa$();
        if (s.tryRead_61zpoe$('true'))
          return true;
        else if (s.tryRead_61zpoe$('false'))
          return false;
        else if (s.tryRead_61zpoe$('null'))
          return null;
        else
          return this.invalidJson_0();
      case 34:
        s.unread_za3lpa$();
        return s.readStringLit_6taknv$();
      default:return this.invalidJson_0("Not expected '" + String.fromCharCode(ic) + "'");
    }
  };
  Json.prototype.isNumberStart_0 = function ($receiver) {
    switch ($receiver) {
      case 45:
      case 43:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        return true;
      default:return false;
    }
  };
  Json.prototype.parseNumber_0 = function (s) {
    var start = s.pos;
    while (true) {
      var tmp$ = s.hasMore;
      if (tmp$) {
        var it = s.peekChar();
        tmp$ = unboxChar(it) >= 48 && unboxChar(it) <= 57 || unboxChar(it) === 46 || unboxChar(it) === 101 || unboxChar(it) === 69 || unboxChar(it) === 45 || unboxChar(it) === 43;
      }if (!tmp$)
        break;
      s.readChar();
    }
    var end = s.pos;
    return NumberParser_getInstance().parseDouble_3m52m6$(s.str, start, end);
  };
  Json.prototype.stringify_dx15ti$ = function (obj, b) {
    if (obj == null)
      b.append_61zpoe$('null');
    else if (typeof obj === 'boolean')
      b.append_61zpoe$(obj ? 'true' : 'false');
    else if (Kotlin.isType(obj, Map)) {
      b.append_s8itvh$(123);
      var i = 0;
      for (var tmp$ = obj.entries.iterator(); tmp$.hasNext(); ++i) {
        var v = tmp$.next();
        if (i !== 0)
          b.append_s8itvh$(44);
        this.stringify_dx15ti$(v.key, b);
        b.append_s8itvh$(58);
        this.stringify_dx15ti$(v.value, b);
      }
      b.append_s8itvh$(125);
    } else if (Kotlin.isType(obj, Iterable)) {
      b.append_s8itvh$(91);
      var i_0 = 0;
      for (var tmp$_0 = obj.iterator(); tmp$_0.hasNext(); ++i_0) {
        var v_0 = tmp$_0.next();
        if (i_0 !== 0)
          b.append_s8itvh$(44);
        this.stringify_dx15ti$(v_0, b);
      }
      b.append_s8itvh$(93);
    } else if (Kotlin.isType(obj, Enum))
      this.encodeString_0(obj.name, b);
    else if (typeof obj === 'string')
      this.encodeString_0(obj, b);
    else if (Kotlin.isNumber(obj))
      b.append_61zpoe$(toString(obj));
    else if (Kotlin.isType(obj, Json$CustomSerializer))
      obj.encodeToJson_irqrwq$(b);
    else
      invalidOp("Don't know how to serialize " + toString(obj));
  };
  Json.prototype.stringifyPretty_snnzj3$ = function (obj, b) {
    if (obj == null)
      b.inline_61zpoe$('null');
    else if (typeof obj === 'boolean')
      b.inline_61zpoe$(obj ? 'true' : 'false');
    else if (Kotlin.isType(obj, Map)) {
      b.line_61zpoe$('{');
      b._indent();
      try {
        var entries = obj.entries;
        var i = 0;
        for (var tmp$ = entries.iterator(); tmp$.hasNext(); ++i) {
          var v = tmp$.next();
          if (i !== 0)
            b.line_61zpoe$(',');
          b.inline_61zpoe$(this.encodeString_1('' + toString(v.key)));
          b.inline_61zpoe$(': ');
          this.stringifyPretty_snnzj3$(v.value, b);
          if (i === (entries.size - 1 | 0))
            b.line_61zpoe$('');
        }
      }finally {
        b._unindent();
      }
      b.inline_61zpoe$('}');
    } else if (Kotlin.isType(obj, Iterable)) {
      b.line_61zpoe$('[');
      b._indent();
      try {
        var entries_0 = toList(obj);
        var i_0 = 0;
        for (var tmp$_0 = entries_0.iterator(); tmp$_0.hasNext(); ++i_0) {
          var v_0 = tmp$_0.next();
          if (i_0 !== 0)
            b.line_61zpoe$(',');
          this.stringifyPretty_snnzj3$(v_0, b);
          if (i_0 === (entries_0.size - 1 | 0))
            b.line_61zpoe$('');
        }
      }finally {
        b._unindent();
      }
      b.inline_61zpoe$(']');
    } else if (typeof obj === 'string')
      b.inline_61zpoe$(this.encodeString_1(obj));
    else if (Kotlin.isNumber(obj))
      b.inline_61zpoe$(toString(obj));
    else if (Kotlin.isType(obj, Json$CustomSerializer)) {
      var $receiver = StringBuilder_init();
      obj.encodeToJson_irqrwq$($receiver);
      b.inline_61zpoe$($receiver.toString());
    } else {
      invalidOp("Don't know how to serialize " + toString(obj));
    }
  };
  Json.prototype.encodeString_1 = function (str) {
    var $receiver = StringBuilder_init();
    this.encodeString_0(str, $receiver);
    return $receiver.toString();
  };
  Json.prototype.encodeString_0 = function (str, b) {
    var tmp$;
    b.append_s8itvh$(34);
    tmp$ = iterator(str);
    while (tmp$.hasNext()) {
      var c = unboxChar(tmp$.next());
      switch (c) {
        case 92:
          b.append_61zpoe$('\\\\');
          break;
        case 47:
          b.append_61zpoe$('\\/');
          break;
        case 39:
          b.append_61zpoe$("\\'");
          break;
        case 34:
          b.append_61zpoe$('\\"');
          break;
        case 8:
          b.append_61zpoe$('\\b');
          break;
        case 12:
          b.append_61zpoe$('\\f');
          break;
        case 10:
          b.append_61zpoe$('\\n');
          break;
        case 13:
          b.append_61zpoe$('\\r');
          break;
        case 9:
          b.append_61zpoe$('\\t');
          break;
        default:b.append_s8itvh$(c);
          break;
      }
    }
    b.append_s8itvh$(34);
  };
  Json.prototype.invalidJson_0 = function (msg) {
    if (msg === void 0)
      msg = 'Invalid JSON';
    throw new IOException(msg);
  };
  Json.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Json',
    interfaces: []
  };
  var Json_instance = null;
  function Json_getInstance() {
    if (Json_instance === null) {
      new Json();
    }return Json_instance;
  }
  function fromJson($receiver) {
    return Json_getInstance().parse_61zpoe$($receiver);
  }
  function toJson($receiver, pretty) {
    if (pretty === void 0)
      pretty = false;
    return Json_getInstance().stringify_oud20p$($receiver, pretty);
  }
  function Xml(type, name, attributes, allChildren, content) {
    Xml$Companion_getInstance();
    this.type = type;
    this.name = name;
    this.attributes = attributes;
    this.allChildren = allChildren;
    this.content = content;
    this.attributesLC = toCaseInsensitiveMap(this.attributes);
    var $receiver = this.name.toLowerCase();
    var tmp$;
    this.nameLC = trim_0(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE()).toString();
  }
  Object.defineProperty(Xml.prototype, 'descendants', {
    get: function () {
      var $receiver = this.allChildren;
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        var list = plus_2(element.descendants, element);
        addAll(destination, list);
      }
      return destination;
    }
  });
  Object.defineProperty(Xml.prototype, 'allChildrenNoComments', {
    get: function () {
      var $receiver = this.allChildren;
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (!get_isComment(element))
          destination.add_11rb$(element);
      }
      return destination;
    }
  });
  Object.defineProperty(Xml.prototype, 'allNodeChildren', {
    get: function () {
      var $receiver = this.allChildren;
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        if (get_isNode(element))
          destination.add_11rb$(element);
      }
      return destination;
    }
  });
  function Xml$Companion() {
    Xml$Companion_instance = this;
    this.NAME_RAW_0 = '_raw_';
    this.NAME_TEXT_0 = '_text_';
    this.NAME_CDATA_0 = '_cdata_';
    this.NAME_COMMENT_0 = '_comment_';
  }
  Xml$Companion.prototype.Tag_imnfz6$ = function (tagName, attributes, children) {
    var tmp$ = Xml$Type$NODE_getInstance();
    var destination = LinkedHashMap_init();
    var tmp$_0;
    tmp$_0 = attributes.entries.iterator();
    while (tmp$_0.hasNext()) {
      var element = tmp$_0.next();
      if (element.value != null) {
        destination.put_xwzc9p$(element.key, element.value);
      }}
    var destination_0 = ArrayList_init_0(destination.size);
    var tmp$_1;
    tmp$_1 = destination.entries.iterator();
    while (tmp$_1.hasNext()) {
      var item = tmp$_1.next();
      destination_0.add_11rb$(to(item.key, toString(item.value)));
    }
    return new Xml(tmp$, tagName, toMap(destination_0), children, '');
  };
  Xml$Companion.prototype.Raw_61zpoe$ = function (text) {
    return new Xml(Xml$Type$TEXT_getInstance(), this.NAME_RAW_0, LinkedHashMap_init(), emptyList(), text);
  };
  Xml$Companion.prototype.Text_61zpoe$ = function (text) {
    return new Xml(Xml$Type$TEXT_getInstance(), this.NAME_TEXT_0, LinkedHashMap_init(), emptyList(), text);
  };
  Xml$Companion.prototype.CData_61zpoe$ = function (text) {
    return new Xml(Xml$Type$TEXT_getInstance(), this.NAME_CDATA_0, LinkedHashMap_init(), emptyList(), text);
  };
  Xml$Companion.prototype.Comment_61zpoe$ = function (text) {
    return new Xml(Xml$Type$COMMENT_getInstance(), this.NAME_COMMENT_0, LinkedHashMap_init(), emptyList(), text);
  };
  function Xml$Companion$parse$Level(children, close) {
    this.children = children;
    this.close = close;
  }
  Xml$Companion$parse$Level.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Level',
    interfaces: []
  };
  Xml$Companion$parse$Level.prototype.component1 = function () {
    return this.children;
  };
  Xml$Companion$parse$Level.prototype.component2 = function () {
    return this.close;
  };
  Xml$Companion$parse$Level.prototype.copy_kr1u4m$ = function (children, close) {
    return new Xml$Companion$parse$Level(children === void 0 ? this.children : children, close === void 0 ? this.close : close);
  };
  Xml$Companion$parse$Level.prototype.toString = function () {
    return 'Level(children=' + Kotlin.toString(this.children) + (', close=' + Kotlin.toString(this.close)) + ')';
  };
  Xml$Companion$parse$Level.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.children) | 0;
    result = result * 31 + Kotlin.hashCode(this.close) | 0;
    return result;
  };
  Xml$Companion$parse$Level.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.children, other.children) && Kotlin.equals(this.close, other.close)))));
  };
  function Xml$Companion$parse$level(closure$stream) {
    return function closure$level() {
      var tmp$, tmp$_0;
      var children = ArrayList_init();
      while (closure$stream.hasNext()) {
        var tag = closure$stream.next();
        if (!Kotlin.isType(tag, Xml$Stream$Element$ProcessingInstructionTag))
          if (Kotlin.isType(tag, Xml$Stream$Element$CommentTag))
            children.add_11rb$(Xml$Companion_getInstance().Comment_61zpoe$(tag.text));
          else if (Kotlin.isType(tag, Xml$Stream$Element$Text))
            children.add_11rb$(tag.cdata ? Xml$Companion_getInstance().CData_61zpoe$(tag.text) : Xml$Companion_getInstance().Text_61zpoe$(tag.text));
          else if (Kotlin.isType(tag, Xml$Stream$Element$OpenCloseTag)) {
            children.add_11rb$(Xml$Companion_getInstance().Tag_imnfz6$(tag.name, tag.attributes, emptyList()));
          } else if (Kotlin.isType(tag, Xml$Stream$Element$OpenTag)) {
            var out = closure$level();
            if (!equals((tmp$ = out.close) != null ? tmp$.name : null, tag.name)) {
              throw IllegalArgumentException_init('Expected ' + tag.name + ' but was ' + toString((tmp$_0 = out.close) != null ? tmp$_0.name : null));
            }children.add_11rb$(new Xml(Xml$Type$NODE_getInstance(), tag.name, tag.attributes, out.children, ''));
          } else if (Kotlin.isType(tag, Xml$Stream$Element$CloseTag))
            return new Xml$Companion$parse$Level(children, tag);
          else
            throw IllegalArgumentException_init('Unhandled ' + tag);
      }
      return new Xml$Companion$parse$Level(children, null);
    };
  }
  Xml$Companion.prototype.parse_61zpoe$ = function (str) {
    var tmp$, tmp$_0;
    try {
      var stream = Xml$Stream_getInstance().parse_61zpoe$(str).iterator();
      var level = Xml$Companion$parse$level(stream);
      var children = level().children;
      var firstOrNull$result;
      firstOrNull$break: do {
        var tmp$_1;
        tmp$_1 = children.iterator();
        while (tmp$_1.hasNext()) {
          var element = tmp$_1.next();
          if (element.type === Xml$Type$NODE_getInstance()) {
            firstOrNull$result = element;
            break firstOrNull$break;
          }}
        firstOrNull$result = null;
      }
       while (false);
      return (tmp$_0 = (tmp$ = firstOrNull$result) != null ? tmp$ : firstOrNull(children)) != null ? tmp$_0 : Xml$Companion_getInstance().Text_61zpoe$('');
    } catch (t) {
      if (Kotlin.isType(t, NoSuchElementException)) {
        println('ERROR: XML: ' + str + ' thrown a NoSuchElementException');
        return Xml$Companion_getInstance().Text_61zpoe$('!!ERRORED!!');
      } else
        throw t;
    }
  };
  Xml$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Xml$Companion_instance = null;
  function Xml$Companion_getInstance() {
    if (Xml$Companion_instance === null) {
      new Xml$Companion();
    }return Xml$Companion_instance;
  }
  function Xml$get_Xml$text$lambda(it) {
    return it.text;
  }
  Object.defineProperty(Xml.prototype, 'text', {
    get: function () {
      switch (this.type.name) {
        case 'NODE':
          return joinToString(this.allChildren, '', void 0, void 0, void 0, void 0, Xml$get_Xml$text$lambda);
        case 'TEXT':
          return this.content;
        case 'COMMENT':
          return '';
        default:return Kotlin.noWhenBranchMatched();
      }
    }
  });
  Xml.prototype.toOuterXmlIndented_2swh6d$ = function (indenter) {
    if (indenter === void 0)
      indenter = new Indenter();
    if (equals(this.type, Xml$Type$NODE_getInstance()))
      if (this.allChildren.isEmpty()) {
        indenter.line_61zpoe$('<' + this.name + this.attributesStr + '/>');
      } else if (this.allChildren.size === 1 && this.allChildren.get_za3lpa$(0).type === Xml$Type$TEXT_getInstance()) {
        indenter.inline_61zpoe$('<' + this.name + this.attributesStr + '>');
        indenter.inline_61zpoe$(this.allChildren.get_za3lpa$(0).content);
        indenter.line_61zpoe$('<\/' + this.name + '>');
      } else {
        indenter.line_61zpoe$('<' + this.name + this.attributesStr + '>');
        indenter._indent();
        try {
          var $receiver = this.allChildren;
          var tmp$;
          var n = 0;
          while (n < $receiver.size) {
            $receiver.get_za3lpa$((tmp$ = n, n = tmp$ + 1 | 0, tmp$)).toOuterXmlIndented_2swh6d$(indenter);
          }
        }finally {
          indenter._unindent();
        }
        indenter.line_61zpoe$('<\/' + this.name + '>');
      }
     else
      indenter.line_61zpoe$(this.outerXml);
    return indenter;
  };
  Object.defineProperty(Xml.prototype, 'attributesStr', {
    get: function () {
      var $receiver = toList_2(this.attributes);
      var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var item = tmp$.next();
        destination.add_11rb$(' ' + item.first + '=' + '"' + item.second + '"');
      }
      return joinToString(destination, '');
    }
  });
  Object.defineProperty(Xml.prototype, 'outerXml', {
    get: function () {
      switch (this.type.name) {
        case 'NODE':
          if (this.allChildren.isEmpty()) {
            return '<' + this.name + this.attributesStr + '/>';
          } else {
            var $receiver = this.allChildren;
            var transform = getPropertyCallableRef('outerXml', 1, function ($receiver) {
              return $receiver.outerXml;
            });
            var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
            var tmp$;
            tmp$ = $receiver.iterator();
            while (tmp$.hasNext()) {
              var item = tmp$.next();
              destination.add_11rb$(transform(item));
            }
            var children = joinToString(destination, '');
            return '<' + this.name + this.attributesStr + '>' + children + '<\/' + this.name + '>';
          }

        case 'TEXT':
          switch (this.name) {
            case '_text_':
              return Xml$Entities_getInstance().encode_61zpoe$(this.content);
            case '_cdata_':
              return '<![CDATA[' + this.content + ']]>';
            case '_raw_':
              return this.content;
            default:return this.content;
          }

        case 'COMMENT':
          return '<!--' + this.content + '-->';
        default:return Kotlin.noWhenBranchMatched();
      }
    }
  });
  Object.defineProperty(Xml.prototype, 'innerXml', {
    get: function () {
      if (equals(this.type, Xml$Type$NODE_getInstance())) {
        var $receiver = this.allChildren;
        var transform = getPropertyCallableRef('outerXml', 1, function ($receiver) {
          return $receiver.outerXml;
        });
        var destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
        var tmp$;
        tmp$ = $receiver.iterator();
        while (tmp$.hasNext()) {
          var item = tmp$.next();
          destination.add_11rb$(transform(item));
        }
        return joinToString(destination, '');
      } else
        return this.outerXml;
    }
  });
  Xml.prototype.get_61zpoe$ = function (name) {
    return this.children_61zpoe$(name);
  };
  Xml.prototype.children_61zpoe$ = function (name) {
    var $receiver = this.allChildren;
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      if (equals_0(element.name, name, true))
        destination.add_11rb$(element);
    }
    return destination;
  };
  Xml.prototype.child_61zpoe$ = function (name) {
    return firstOrNull_0(this.children_61zpoe$(name));
  };
  Xml.prototype.childText_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.child_61zpoe$(name)) != null ? tmp$.text : null;
  };
  Xml.prototype.hasAttribute_61zpoe$ = function (key) {
    return this.attributesLC.containsKey_11rb$(key);
  };
  Xml.prototype.attribute_61zpoe$ = function (name) {
    return this.attributesLC.get_11rb$(name);
  };
  Xml.prototype.getString_61zpoe$ = function (name) {
    return this.attributesLC.get_11rb$(name);
  };
  Xml.prototype.getInt_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toInt(tmp$) : null;
  };
  Xml.prototype.getLong_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toLong_0(tmp$) : null;
  };
  Xml.prototype.getDouble_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toDouble(tmp$) : null;
  };
  Xml.prototype.getFloat_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toDouble(tmp$) : null;
  };
  Xml.prototype.double_io5o9c$ = function (name, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = 0.0;
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toDoubleOrNull(tmp$) : null) != null ? tmp$_0 : defaultValue;
  };
  Xml.prototype.float_9sobi5$ = function (name, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = 0.0;
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toDoubleOrNull(tmp$) : null) != null ? tmp$_0 : defaultValue;
  };
  Xml.prototype.int_bm4lxs$ = function (name, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = 0;
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toIntOrNull_0(tmp$) : null) != null ? tmp$_0 : defaultValue;
  };
  Xml.prototype.long_4wgjuj$ = function (name, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = L0;
    var tmp$, tmp$_0;
    return (tmp$_0 = (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toLongOrNull_0(tmp$) : null) != null ? tmp$_0 : defaultValue;
  };
  Xml.prototype.str_puj7f4$ = function (name, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = '';
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? tmp$ : defaultValue;
  };
  Xml.prototype.doubleNull_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toDoubleOrNull(tmp$) : null;
  };
  Xml.prototype.floatNull_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toDoubleOrNull(tmp$) : null;
  };
  Xml.prototype.intNull_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toIntOrNull_0(tmp$) : null;
  };
  Xml.prototype.longNull_61zpoe$ = function (name) {
    var tmp$;
    return (tmp$ = this.attributesLC.get_11rb$(name)) != null ? toLongOrNull_0(tmp$) : null;
  };
  Xml.prototype.strNull_61zpoe$ = function (name) {
    return this.attributesLC.get_11rb$(name);
  };
  Xml.prototype.toString = function () {
    return this.outerXml;
  };
  function Xml$Type(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Xml$Type_initFields() {
    Xml$Type_initFields = function () {
    };
    Xml$Type$NODE_instance = new Xml$Type('NODE', 0);
    Xml$Type$TEXT_instance = new Xml$Type('TEXT', 1);
    Xml$Type$COMMENT_instance = new Xml$Type('COMMENT', 2);
  }
  var Xml$Type$NODE_instance;
  function Xml$Type$NODE_getInstance() {
    Xml$Type_initFields();
    return Xml$Type$NODE_instance;
  }
  var Xml$Type$TEXT_instance;
  function Xml$Type$TEXT_getInstance() {
    Xml$Type_initFields();
    return Xml$Type$TEXT_instance;
  }
  var Xml$Type$COMMENT_instance;
  function Xml$Type$COMMENT_getInstance() {
    Xml$Type_initFields();
    return Xml$Type$COMMENT_instance;
  }
  Xml$Type.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Type',
    interfaces: [Enum]
  };
  function Xml$Type$values() {
    return [Xml$Type$NODE_getInstance(), Xml$Type$TEXT_getInstance(), Xml$Type$COMMENT_getInstance()];
  }
  Xml$Type.values = Xml$Type$values;
  function Xml$Type$valueOf(name) {
    switch (name) {
      case 'NODE':
        return Xml$Type$NODE_getInstance();
      case 'TEXT':
        return Xml$Type$TEXT_getInstance();
      case 'COMMENT':
        return Xml$Type$COMMENT_getInstance();
      default:throwISE('No enum constant com.soywiz.korio.serialization.xml.Xml.Type.' + name);
    }
  }
  Xml$Type.valueOf_61zpoe$ = Xml$Type$valueOf;
  function Xml$Entities() {
    Xml$Entities_instance = this;
    this.charToEntity_0 = linkedMapOf([to(toBoxedChar(34), '&quot;'), to(toBoxedChar(39), '&apos;'), to(toBoxedChar(60), '&lt;'), to(toBoxedChar(62), '&gt;'), to(toBoxedChar(38), '&amp;')]);
    this.entities_0 = StrReader$Literals$Companion_getInstance().fromList_kand9s$(copyToArray(this.charToEntity_0.values));
    this.entityToChar_0 = flip(this.charToEntity_0);
  }
  Xml$Entities.prototype.encode_61zpoe$ = function (str) {
    var $receiver = StringBuilder_init();
    var tmp$;
    tmp$ = str.length;
    for (var n = 0; n < tmp$; n++) {
      var it = toBoxedChar(str.charCodeAt(n));
      var entry = this.charToEntity_0.get_11rb$(it);
      if (entry != null)
        $receiver.append_61zpoe$(entry);
      else
        $receiver.append_s8itvh$(unboxChar(it));
    }
    return $receiver.toString();
  };
  Xml$Entities.prototype.decode_61zpoe$ = function (str) {
    return this.decode_f6s5ko$(new StrReader(str));
  };
  Xml$Entities.prototype.decode_f6s5ko$ = function (r) {
    var $receiver = StringBuilder_init();
    var tmp$;
    while (!r.eof) {
      var plain = r.readUntil_s8itvh$(38);
      if (plain != null) {
        $receiver.append_61zpoe$(plain);
      }if (r.eof)
        break;
      r.skipExpect_s8itvh$(38);
      var value = (tmp$ = r.readUntilIncluded_s8itvh$(59)) != null ? tmp$ : '';
      var full = '&' + value;
      if (startsWith_0(value, 35)) {
        var endIndex = value.length - 1 | 0;
        $receiver.append_s8itvh$(toChar(toInt(value.substring(1, endIndex))));
      } else {
        var $receiver_0 = this.entityToChar_0;
        var tmp$_0;
        if ((Kotlin.isType(tmp$_0 = $receiver_0, Map) ? tmp$_0 : throwCCE()).containsKey_11rb$(full))
          $receiver.append_s8jyv4$(this.entityToChar_0.get_11rb$(full));
        else
          $receiver.append_61zpoe$(full);
      }
    }
    return $receiver.toString();
  };
  Xml$Entities.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Entities',
    interfaces: []
  };
  var Xml$Entities_instance = null;
  function Xml$Entities_getInstance() {
    if (Xml$Entities_instance === null) {
      new Xml$Entities();
    }return Xml$Entities_instance;
  }
  function Xml$Stream() {
    Xml$Stream_instance = this;
  }
  Xml$Stream.prototype.parse_61zpoe$ = function (str) {
    return this.parse_f6s5ko$(new StrReader(str));
  };
  Xml$Stream.prototype.parse_f6s5ko$ = function (r) {
    return new Xml$Stream$Xml2Iterable(r);
  };
  Xml$Stream.prototype.matchStringOrId_0 = function ($receiver) {
    var tmp$;
    return (tmp$ = $receiver.matchSingleOrDoubleQuoteString()) != null ? tmp$ : $receiver.matchIdentifier();
  };
  function Coroutine$Xml$Stream$xmlSequence$lambda(closure$r_0, this$Stream_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$r = closure$r_0;
    this.local$this$Stream = this$Stream_0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$Xml$Stream$xmlSequence$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$Xml$Stream$xmlSequence$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$Xml$Stream$xmlSequence$lambda.prototype.constructor = Coroutine$Xml$Stream$xmlSequence$lambda;
  Coroutine$Xml$Stream$xmlSequence$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$closure$r.eof) {
              this.state_0 = 8;
              continue;
            }
            var str = (tmp$ = this.local$closure$r.readUntil_s8itvh$(60)) != null ? tmp$ : '';
            if (str.length > 0) {
              this.state_0 = 3;
              this.result_0 = this.local$$receiver.yield_11rb$(new Xml$Stream$Element$Text(Xml$Entities_getInstance().decode_61zpoe$(str)), this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            if (this.local$closure$r.eof) {
              this.state_0 = 8;
              continue;
            } else {
              this.state_0 = 5;
              continue;
            }

          case 5:
            this.local$closure$r.skipExpect_s8itvh$(60);
            var res = null;
            if (this.local$closure$r.tryExpect_61zpoe$('![CDATA[')) {
              var start = this.local$closure$r.pos;
              while (!this.local$closure$r.eof) {
                var end = this.local$closure$r.pos;
                if (this.local$closure$r.tryExpect_61zpoe$(']]>')) {
                  var $receiver = new Xml$Stream$Element$Text(this.local$closure$r.createRange_vux9f0$(start, end).text);
                  $receiver.cdata = true;
                  res = $receiver;
                  break;
                }this.local$closure$r.readChar();
              }
            } else if (this.local$closure$r.tryExpect_61zpoe$('!--')) {
              var start_0 = this.local$closure$r.pos;
              while (!this.local$closure$r.eof) {
                var end_0 = this.local$closure$r.pos;
                if (this.local$closure$r.tryExpect_61zpoe$('-->')) {
                  res = new Xml$Stream$Element$CommentTag(this.local$closure$r.createRange_vux9f0$(start_0, end_0).text);
                  break;
                }this.local$closure$r.readChar();
              }
            } else {
              this.local$closure$r.skipSpaces();
              var processingInstruction = this.local$closure$r.tryExpect_s8itvh$(63);
              var processingEntityOrDocType = this.local$closure$r.tryExpect_s8itvh$(33);
              var close = this.local$closure$r.tryExpect_s8itvh$(47) || processingEntityOrDocType;
              this.local$closure$r.skipSpaces();
              var tmp$_4;
              if ((tmp$_0 = this.local$closure$r.matchIdentifier()) != null)
                tmp$_4 = tmp$_0;
              else {
                throw IllegalStateException_init(("Couldn't match identifier after '<', offset=" + this.local$closure$r.pos + ", around='" + this.local$closure$r.peek_za3lpa$(10) + "'").toString());
              }
              var name = tmp$_4;
              this.local$closure$r.skipSpaces();
              var attributes = LinkedHashMap_init();
              while (unboxChar(this.local$closure$r.peekChar()) !== 63 && unboxChar(this.local$closure$r.peekChar()) !== 47 && unboxChar(this.local$closure$r.peekChar()) !== 62) {
                tmp$_1 = this.local$this$Stream.matchStringOrId_0(this.local$closure$r);
                if (tmp$_1 == null) {
                  throw IllegalArgumentException_init('Malformed document or unsupported xml construct around ~' + this.local$closure$r.peek_za3lpa$(10) + "~ for name '" + name + "'");
                }var key = tmp$_1;
                this.local$closure$r.skipSpaces();
                if (this.local$closure$r.tryExpect_61zpoe$('=')) {
                  this.local$closure$r.skipSpaces();
                  var argsQuote = this.local$this$Stream.matchStringOrId_0(this.local$closure$r);
                  if (argsQuote != null) {
                    var tmp$_5 = Xml$Entities_getInstance();
                    var endIndex = argsQuote.length - 1 | 0;
                    tmp$_2 = tmp$_5.decode_61zpoe$(argsQuote.substring(1, endIndex));
                  } else
                    tmp$_2 = Xml$Entities_getInstance().decode_61zpoe$(ensureNotNull(this.local$closure$r.matchIdentifier()));
                  var value = tmp$_2;
                  attributes.put_xwzc9p$(key, value);
                } else {
                  attributes.put_xwzc9p$(key, key);
                }
                this.local$closure$r.skipSpaces();
              }
              var openclose = this.local$closure$r.tryExpect_s8itvh$(47);
              var processingInstructionEnd = this.local$closure$r.tryExpect_s8itvh$(63);
              this.local$closure$r.skipExpect_s8itvh$(62);
              if (processingInstruction || processingEntityOrDocType)
                tmp$_3 = new Xml$Stream$Element$ProcessingInstructionTag(name, attributes);
              else if (openclose)
                tmp$_3 = new Xml$Stream$Element$OpenCloseTag(name, attributes);
              else if (close)
                tmp$_3 = new Xml$Stream$Element$CloseTag(name);
              else
                tmp$_3 = new Xml$Stream$Element$OpenTag(name, attributes);
              res = tmp$_3;
            }

            if (res != null) {
              this.state_0 = 6;
              this.result_0 = this.local$$receiver.yield_11rb$(res, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 7;
              continue;
            }

          case 6:
            this.state_0 = 7;
            continue;
          case 7:
            this.state_0 = 2;
            continue;
          case 8:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function Xml$Stream$xmlSequence$lambda(closure$r_0, this$Stream_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$Xml$Stream$xmlSequence$lambda(closure$r_0, this$Stream_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  Xml$Stream.prototype.xmlSequence_0 = function (r) {
    return sequence(Xml$Stream$xmlSequence$lambda(r, this));
  };
  function Xml$Stream$Xml2Iterable(reader2) {
    this.reader2 = reader2;
    this.reader = this.reader2.clone();
  }
  Xml$Stream$Xml2Iterable.prototype.iterator = function () {
    return Xml$Stream_getInstance().xmlSequence_0(this.reader).iterator();
  };
  Xml$Stream$Xml2Iterable.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Xml2Iterable',
    interfaces: [Iterable]
  };
  function Xml$Stream$Element() {
  }
  function Xml$Stream$Element$ProcessingInstructionTag(name, attributes) {
    Xml$Stream$Element.call(this);
    this.name = name;
    this.attributes = attributes;
  }
  Xml$Stream$Element$ProcessingInstructionTag.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ProcessingInstructionTag',
    interfaces: [Xml$Stream$Element]
  };
  function Xml$Stream$Element$OpenCloseTag(name, attributes) {
    Xml$Stream$Element.call(this);
    this.name = name;
    this.attributes = attributes;
  }
  Xml$Stream$Element$OpenCloseTag.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OpenCloseTag',
    interfaces: [Xml$Stream$Element]
  };
  function Xml$Stream$Element$OpenTag(name, attributes) {
    Xml$Stream$Element.call(this);
    this.name = name;
    this.attributes = attributes;
  }
  Xml$Stream$Element$OpenTag.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'OpenTag',
    interfaces: [Xml$Stream$Element]
  };
  function Xml$Stream$Element$CommentTag(text) {
    Xml$Stream$Element.call(this);
    this.text = text;
  }
  Xml$Stream$Element$CommentTag.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CommentTag',
    interfaces: [Xml$Stream$Element]
  };
  function Xml$Stream$Element$CloseTag(name) {
    Xml$Stream$Element.call(this);
    this.name = name;
  }
  Xml$Stream$Element$CloseTag.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'CloseTag',
    interfaces: [Xml$Stream$Element]
  };
  function Xml$Stream$Element$Text(text) {
    Xml$Stream$Element.call(this);
    this.text = text;
    this.cdata = false;
  }
  Xml$Stream$Element$Text.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Text',
    interfaces: [Xml$Stream$Element]
  };
  Xml$Stream$Element.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Element',
    interfaces: []
  };
  Xml$Stream.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Stream',
    interfaces: []
  };
  var Xml$Stream_instance = null;
  function Xml$Stream_getInstance() {
    if (Xml$Stream_instance === null) {
      new Xml$Stream();
    }return Xml$Stream_instance;
  }
  Xml.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Xml',
    interfaces: []
  };
  Xml.prototype.component1 = function () {
    return this.type;
  };
  Xml.prototype.component2 = function () {
    return this.name;
  };
  Xml.prototype.component3 = function () {
    return this.attributes;
  };
  Xml.prototype.component4 = function () {
    return this.allChildren;
  };
  Xml.prototype.component5 = function () {
    return this.content;
  };
  Xml.prototype.copy_73d6zo$ = function (type, name, attributes, allChildren, content) {
    return new Xml(type === void 0 ? this.type : type, name === void 0 ? this.name : name, attributes === void 0 ? this.attributes : attributes, allChildren === void 0 ? this.allChildren : allChildren, content === void 0 ? this.content : content);
  };
  Xml.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.type) | 0;
    result = result * 31 + Kotlin.hashCode(this.name) | 0;
    result = result * 31 + Kotlin.hashCode(this.attributes) | 0;
    result = result * 31 + Kotlin.hashCode(this.allChildren) | 0;
    result = result * 31 + Kotlin.hashCode(this.content) | 0;
    return result;
  };
  Xml.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.type, other.type) && Kotlin.equals(this.name, other.name) && Kotlin.equals(this.attributes, other.attributes) && Kotlin.equals(this.allChildren, other.allChildren) && Kotlin.equals(this.content, other.content)))));
  };
  function get_isText($receiver) {
    return $receiver.type === Xml$Type$TEXT_getInstance();
  }
  function get_isComment($receiver) {
    return $receiver.type === Xml$Type$COMMENT_getInstance();
  }
  function get_isNode($receiver) {
    return $receiver.type === Xml$Type$NODE_getInstance();
  }
  function str($receiver, name, defaultValue) {
    if (defaultValue === void 0)
      defaultValue = '';
    var tmp$;
    return (tmp$ = first_1($receiver).attributes.get_11rb$(name)) != null ? tmp$ : defaultValue;
  }
  function children($receiver, name) {
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var list = element.children_61zpoe$(name);
      addAll(destination, list);
    }
    return destination;
  }
  function get_allChildren($receiver) {
    var transform = getPropertyCallableRef('allChildren', 1, function ($receiver) {
      return $receiver.allChildren;
    });
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var list = transform(element);
      addAll(destination, list);
    }
    return destination;
  }
  function get_allNodeChildren($receiver) {
    var transform = getPropertyCallableRef('allNodeChildren', 1, function ($receiver) {
      return $receiver.allNodeChildren;
    });
    var destination = ArrayList_init();
    var tmp$;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var list = transform(element);
      addAll(destination, list);
    }
    return destination;
  }
  function get_firstText($receiver) {
    var tmp$;
    return (tmp$ = firstOrNull_0($receiver)) != null ? tmp$.text : null;
  }
  function get_text$lambda(it) {
    return it.text;
  }
  function get_text($receiver) {
    return joinToString($receiver, '', void 0, void 0, void 0, void 0, get_text$lambda);
  }
  function get_0($receiver, name) {
    return children($receiver, name);
  }
  function toXml($receiver) {
    return Xml$Companion_getInstance().parse_61zpoe$($receiver);
  }
  function Xml_0(str) {
    return Xml$Companion_getInstance().parse_61zpoe$(str);
  }
  function Coroutine$readXml($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readXml.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readXml.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readXml.prototype.constructor = Coroutine$readXml;
  Coroutine$readXml.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.readString_qa9gbo$(void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return Xml_0(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readXml($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readXml($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function XmlBuilder() {
    this.nodes_0 = ArrayList_init();
  }
  XmlBuilder.prototype.node_473e7m$ = function (node) {
    this.nodes_0.add_11rb$(node);
    return node;
  };
  function XmlBuilder$node$lambda($receiver) {
    return Unit;
  }
  XmlBuilder.prototype.node_iro68i$ = function (tag, props, block) {
    if (block === void 0)
      block = XmlBuilder$node$lambda;
    var tmp$ = Xml$Companion_getInstance();
    var destination = ArrayList_init();
    var tmp$_0;
    for (tmp$_0 = 0; tmp$_0 !== props.length; ++tmp$_0) {
      var element = props[tmp$_0];
      if (element.second != null)
        destination.add_11rb$(element);
    }
    var tmp$_1 = toMap(destination);
    var $receiver = new XmlBuilder();
    block($receiver);
    var $receiver_0 = tmp$.Tag_imnfz6$(tag, tmp$_1, $receiver.nodes_0);
    this.nodes_0.add_11rb$($receiver_0);
    return $receiver_0;
  };
  XmlBuilder.prototype.comment_61zpoe$ = function (comment) {
    var $receiver = Xml$Companion_getInstance().Comment_61zpoe$(comment);
    this.nodes_0.add_11rb$($receiver);
    return $receiver;
  };
  XmlBuilder.prototype.text_61zpoe$ = function (text) {
    var $receiver = Xml$Companion_getInstance().Text_61zpoe$(text);
    this.nodes_0.add_11rb$($receiver);
    return $receiver;
  };
  XmlBuilder.prototype.cdata_61zpoe$ = function (text) {
    var $receiver = Xml$Companion_getInstance().CData_61zpoe$(text);
    this.nodes_0.add_11rb$($receiver);
    if (contains_1(text, ']]>')) {
      throw IllegalStateException_init('A cdata node cannot contain the ]]> literal'.toString());
    }return $receiver;
  };
  XmlBuilder.prototype.raw_61zpoe$ = function (text) {
    var $receiver = Xml$Companion_getInstance().Raw_61zpoe$(text);
    this.nodes_0.add_11rb$($receiver);
    return $receiver;
  };
  XmlBuilder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'XmlBuilder',
    interfaces: []
  };
  function buildXml(rootTag, props, block) {
    return (new XmlBuilder()).node_iro68i$(rootTag, props.slice(), block);
  }
  function Yaml() {
    Yaml_instance = this;
    this.TRACE = false;
  }
  Yaml.prototype.decode_61zpoe$ = function (str) {
    return this.read_0(new ListReader(this.tokenize_qdjkzt$(new StrReader(str))), 0);
  };
  Yaml.prototype.read_61zpoe$ = function (str) {
    return this.read_0(new ListReader(this.tokenize_qdjkzt$(new StrReader(str))), 0);
  };
  Yaml.prototype.parseStr_1 = function (tok) {
    if (Kotlin.isType(tok, Yaml$Token$STR))
      return tok.ustr;
    else
      return this.parseStr_0(tok.str);
  };
  Yaml.prototype.parseStr_0 = function (str) {
    var tmp$, tmp$_0;
    switch (str) {
      case 'null':
        return null;
      case 'true':
        return true;
      case 'false':
        return false;
      default:return (tmp$_0 = (tmp$ = toIntOrNull_0(str)) != null ? tmp$ : toDoubleOrNull(str)) != null ? tmp$_0 : str;
    }
  };
  Yaml.prototype.read_0 = function (s, level) {
    var tmp$;
    var list = null;
    var map = null;
    var levelStr = this.TRACE ? repeat('  ', level) : '';
    linehandle: while (s.hasMore) {
      var token = s.peek();
      var line = Kotlin.isType(tmp$ = token, Yaml$Token$LINE) ? tmp$ : null;
      var lineLevel = line != null ? line.level : null;
      if (this.TRACE && line != null)
        println(levelStr + 'LINE(' + toString(lineLevel) + ')');
      if (lineLevel != null && lineLevel > level) {
        var res = this.read_0(s, lineLevel);
        if (list != null) {
          if (this.TRACE)
            println(levelStr + 'CHILD.list.add: ' + toString(res));
          list.add_11rb$(res);
        } else {
          if (this.TRACE)
            println(levelStr + 'CHILD.return: ' + toString(res));
          return res;
        }
      } else if (lineLevel != null && lineLevel < level) {
        if (this.TRACE)
          println(levelStr + 'PARENT: level < line.level');
        break;
      } else {
        if (line != null)
          s.read();
        if (s.eof)
          break;
        var item = s.peek();
        switch (item.str) {
          case '-':
            if (!equals(s.read().str, '-'))
              get_invalidOp();
            if (list == null) {
              list = ArrayList_init();
            }
            if (this.TRACE)
              println(levelStr + 'LIST_ITEM...');
            var res_0 = this.read_0(s, level + 1 | 0);
            if (this.TRACE)
              println(levelStr + 'LIST_ITEM: ' + toString(res_0));
            list.add_11rb$(res_0);
            break;
          case '[':
            if (!equals(s.read().str, '['))
              get_invalidOp();
            var olist = ArrayList_init();
            array: while (!equals(s.peek().str, ']')) {
              var element = this.read_0(s, level + 1 | 0);
              olist.add_11rb$(element);
              var p = s.peek().str;
              switch (p) {
                case ',':
                  s.read();
                  continue array;
                case ']':
                  break array;
                default:invalidOp("Unexpected '" + p + "'");
                  break;
              }
            }

            if (!equals(s.read().str, ']'))
              get_invalidOp();
            return olist;
          default:var kkey = s.read();
            var key = kkey.str;
            if (s.eof || !equals(s.peek().str, ':')) {
              if (this.TRACE)
                println(levelStr + 'LIT: ' + key);
              return this.parseStr_1(kkey);
            } else {
              if (map == null)
                map = LinkedHashMap_init();
              if (!equals(s.read().str, ':'))
                get_invalidOp();
              if (this.TRACE)
                println(levelStr + 'MAP[' + key + ']...');
              var value = this.read_0(s, level + 1 | 0);
              map.put_xwzc9p$(key, value);
              if (this.TRACE)
                println(levelStr + 'MAP[' + key + ']: ' + toString(value));
            }

            break;
        }
      }
    }
    if (this.TRACE)
      println(levelStr + 'RETURN: list=' + toString(list) + ', map=' + toString(map));
    return list != null ? list : map;
  };
  function Yaml$tokenize$flush(closure$str, closure$out) {
    return function () {
      var tmp$ = !isBlank(closure$str.v);
      if (tmp$) {
        tmp$ = closure$str.v.length > 0;
      }if (tmp$) {
        var tmp$_0 = closure$out;
        var $receiver = closure$str.v;
        var tmp$_1;
        var element = new Yaml$Token$ID(trim_0(Kotlin.isCharSequence(tmp$_1 = $receiver) ? tmp$_1 : throwCCE()).toString());
        tmp$_0.add_11rb$(element);
        closure$str.v = '';
      }};
  }
  Yaml.prototype.tokenize_qdjkzt$ = function ($receiver) {
    var out = ArrayList_init();
    var s = $receiver;
    var str = {v: ''};
    var flush = Yaml$tokenize$flush(str, out);
    var indents = TGenDeque_init();
    linestart: while ($receiver.hasMore) {
      flush();
      var tmp$;
      var start = $receiver.pos;
      while (true) {
        var tmp$_0 = $receiver.hasMore;
        if (tmp$_0) {
          tmp$_0 = isWhitespace(unboxChar($receiver.peekChar()));
        }if (!tmp$_0)
          break;
        $receiver.readChar();
      }
      var end = $receiver.pos;
      var indentStr = replace_0((tmp$ = end > start ? $receiver.slice_vux9f0$(start, end) : null) != null ? tmp$ : '', '\t', '     ');
      var indent = indentStr.length;
      if (indents.isEmpty() || indent > ensureNotNull(indents.last)) {
        indents.add_11rb$(indent);
      } else {
        while (!indents.isEmpty() && indent < ensureNotNull(indents.last)) {
          indents.removeLast();
        }
        if (indents.isEmpty())
          get_invalidOp();
      }
      var indentLevel = indents.size - 1 | 0;
      while (!out.isEmpty() && Kotlin.isType(last(out), Yaml$Token$LINE)) {
        out.removeAt_za3lpa$(out.size - 1 | 0);
      }
      var element = new Yaml$Token$LINE(indentStr, indentLevel);
      out.add_11rb$(element);
      while ($receiver.hasMore) {
        var c = unboxChar($receiver.read());
        switch (c) {
          case 58:
          case 45:
          case 91:
          case 93:
          case 44:
            flush();
            var element_0 = new Yaml$Token$SYMBOL(String.fromCharCode(c));
            out.add_11rb$(element_0);
            break;
          case 35:
            flush();
            this.readUntilLineEnd_qdjkzt$($receiver);
            $receiver.skip_za3lpa$();
            continue linestart;
          case 10:
            flush();
            continue linestart;
          case 34:
          case 39:
            flush();
            s.unread_za3lpa$();
            var element_1 = new Yaml$Token$STR(s.readStringLit_6taknv$());
            out.add_11rb$(element_1);
            break;
          default:str.v += String.fromCharCode(c);
            break;
        }
      }
    }
    flush();
    return out;
  };
  function Yaml$Token() {
  }
  function Yaml$Token$LINE(str, level) {
    this.str_bmiag0$_0 = str;
    this.level = level;
  }
  Object.defineProperty(Yaml$Token$LINE.prototype, 'str', {
    get: function () {
      return this.str_bmiag0$_0;
    }
  });
  Yaml$Token$LINE.prototype.toString = function () {
    return 'LINE(' + this.level + ')';
  };
  Yaml$Token$LINE.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LINE',
    interfaces: [Yaml$Token]
  };
  Yaml$Token$LINE.prototype.component1 = function () {
    return this.str;
  };
  Yaml$Token$LINE.prototype.component2 = function () {
    return this.level;
  };
  Yaml$Token$LINE.prototype.copy_bm4lxs$ = function (str, level) {
    return new Yaml$Token$LINE(str === void 0 ? this.str : str, level === void 0 ? this.level : level);
  };
  Yaml$Token$LINE.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.str) | 0;
    result = result * 31 + Kotlin.hashCode(this.level) | 0;
    return result;
  };
  Yaml$Token$LINE.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.str, other.str) && Kotlin.equals(this.level, other.level)))));
  };
  function Yaml$Token$ID(str) {
    this.str_z6v5y1$_0 = str;
  }
  Object.defineProperty(Yaml$Token$ID.prototype, 'str', {
    get: function () {
      return this.str_z6v5y1$_0;
    }
  });
  Yaml$Token$ID.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ID',
    interfaces: [Yaml$Token]
  };
  Yaml$Token$ID.prototype.component1 = function () {
    return this.str;
  };
  Yaml$Token$ID.prototype.copy_61zpoe$ = function (str) {
    return new Yaml$Token$ID(str === void 0 ? this.str : str);
  };
  Yaml$Token$ID.prototype.toString = function () {
    return 'ID(str=' + Kotlin.toString(this.str) + ')';
  };
  Yaml$Token$ID.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.str) | 0;
    return result;
  };
  Yaml$Token$ID.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.str, other.str))));
  };
  function Yaml$Token$STR(str) {
    this.str_3qhttj$_0 = str;
    this.ustr = unquote(this.str);
  }
  Object.defineProperty(Yaml$Token$STR.prototype, 'str', {
    get: function () {
      return this.str_3qhttj$_0;
    }
  });
  Yaml$Token$STR.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'STR',
    interfaces: [Yaml$Token]
  };
  Yaml$Token$STR.prototype.component1 = function () {
    return this.str;
  };
  Yaml$Token$STR.prototype.copy_61zpoe$ = function (str) {
    return new Yaml$Token$STR(str === void 0 ? this.str : str);
  };
  Yaml$Token$STR.prototype.toString = function () {
    return 'STR(str=' + Kotlin.toString(this.str) + ')';
  };
  Yaml$Token$STR.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.str) | 0;
    return result;
  };
  Yaml$Token$STR.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.str, other.str))));
  };
  function Yaml$Token$SYMBOL(str) {
    this.str_q5hbek$_0 = str;
  }
  Object.defineProperty(Yaml$Token$SYMBOL.prototype, 'str', {
    get: function () {
      return this.str_q5hbek$_0;
    }
  });
  Yaml$Token$SYMBOL.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SYMBOL',
    interfaces: [Yaml$Token]
  };
  Yaml$Token$SYMBOL.prototype.component1 = function () {
    return this.str;
  };
  Yaml$Token$SYMBOL.prototype.copy_61zpoe$ = function (str) {
    return new Yaml$Token$SYMBOL(str === void 0 ? this.str : str);
  };
  Yaml$Token$SYMBOL.prototype.toString = function () {
    return 'SYMBOL(str=' + Kotlin.toString(this.str) + ')';
  };
  Yaml$Token$SYMBOL.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.str) | 0;
    return result;
  };
  Yaml$Token$SYMBOL.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.str, other.str))));
  };
  Yaml$Token.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Token',
    interfaces: []
  };
  Yaml.prototype.readUntilLineEnd_qdjkzt$ = function ($receiver) {
    var tmp$;
    var start = $receiver.pos;
    while (true) {
      var tmp$_0 = $receiver.hasMore;
      if (tmp$_0) {
        tmp$_0 = !(unboxChar($receiver.peekChar()) === 10);
      }if (!tmp$_0)
        break;
      $receiver.readChar();
    }
    var end = $receiver.pos;
    return (tmp$ = end > start ? $receiver.slice_vux9f0$(start, end) : null) != null ? tmp$ : '';
  };
  Yaml.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Yaml',
    interfaces: []
  };
  var Yaml_instance = null;
  function Yaml_getInstance() {
    if (Yaml_instance === null) {
      new Yaml();
    }return Yaml_instance;
  }
  var arraycopy$lambda_1 = wrapFunction(function () {
    var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
    return function (closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$size) {
      return function () {
        arrayCopy(closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$srcPos + closure$size | 0);
        return Unit;
      };
    };
  });
  var readSmallTempExact$lambda = wrapFunction(function () {
    var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
    return function (closure$size, closure$continuation, this$readSmallTempExact, closure$callback) {
      return function ($receiver) {
        this$readSmallTempExact.read_mj6st8$($receiver, 0, closure$size, closure$continuation);
        var read = closure$continuation.$$coroutineResult$$;
        if (read !== closure$size) {
          throw IllegalStateException_init(("Couldn't read exact size=" + closure$size + ' but read=' + read).toString());
        }return closure$callback($receiver);
      };
    };
  });
  function AsyncBaseStream() {
  }
  AsyncBaseStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncBaseStream',
    interfaces: [AsyncCloseable]
  };
  function AsyncInputOpenable() {
  }
  AsyncInputOpenable.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncInputOpenable',
    interfaces: []
  };
  function AsyncInputStream() {
  }
  function Coroutine$read_1($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$alloc2$result = void 0;
    this.local$temp = void 0;
  }
  Coroutine$read_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_1.prototype.constructor = Coroutine$read_1;
  Coroutine$read_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.$this.read_mj6st8$(this.local$temp, 0, 1, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.local$alloc2$result = this.result_0 > 0 ? this.local$temp[0] & 255 : -1;
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return this.local$alloc2$result;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncInputStream.prototype.read = function (continuation_0, suspended) {
    var instance = new Coroutine$read_1(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AsyncInputStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncInputStream',
    interfaces: [AsyncBaseStream]
  };
  function AsyncOutputStream() {
  }
  AsyncOutputStream.prototype.write_mj6st8$ = function (buffer, offset, len, continuation, callback$default) {
    if (offset === void 0)
      offset = 0;
    if (len === void 0)
      len = buffer.length - offset | 0;
    return callback$default ? callback$default(buffer, offset, len, continuation) : this.write_mj6st8$$default(buffer, offset, len, continuation);
  };
  function Coroutine$write_za3lpa$($this, byte_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$byte = byte_0;
  }
  Coroutine$write_za3lpa$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_za3lpa$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_za3lpa$.prototype.constructor = Coroutine$write_za3lpa$;
  Coroutine$write_za3lpa$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.local$temp[0] = toByte(this.local$byte);
            this.state_0 = 1;
            this.result_0 = this.$this.write_mj6st8$(this.local$temp, 0, 1, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncOutputStream.prototype.write_za3lpa$ = function (byte_0, continuation_0, suspended) {
    var instance = new Coroutine$write_za3lpa$(this, byte_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AsyncOutputStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncOutputStream',
    interfaces: [AsyncBaseStream]
  };
  function AsyncGetPositionStream() {
  }
  AsyncGetPositionStream.prototype.getPosition = function (continuation) {
    throw UnsupportedOperationException_init();
  };
  AsyncGetPositionStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncGetPositionStream',
    interfaces: [AsyncBaseStream]
  };
  function AsyncPositionStream() {
  }
  AsyncPositionStream.prototype.setPosition_s8cxhz$ = function (value, continuation) {
    throw UnsupportedOperationException_init();
  };
  AsyncPositionStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncPositionStream',
    interfaces: [AsyncGetPositionStream]
  };
  function AsyncGetLengthStream() {
  }
  AsyncGetLengthStream.prototype.getLength = function (continuation) {
    throw UnsupportedOperationException_init();
  };
  AsyncGetLengthStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncGetLengthStream',
    interfaces: [AsyncBaseStream]
  };
  function AsyncLengthStream() {
  }
  AsyncLengthStream.prototype.setLength_s8cxhz$ = function (value, continuation) {
    throw UnsupportedOperationException_init();
  };
  AsyncLengthStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncLengthStream',
    interfaces: [AsyncGetLengthStream]
  };
  function AsyncPositionLengthStream() {
  }
  AsyncPositionLengthStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncPositionLengthStream',
    interfaces: [AsyncLengthStream, AsyncPositionStream]
  };
  function AsyncInputStreamWithLength() {
  }
  AsyncInputStreamWithLength.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncInputStreamWithLength',
    interfaces: [AsyncGetLengthStream, AsyncGetPositionStream, AsyncInputStream]
  };
  function combine$ObjectLiteral(closure$list) {
    this.closure$list = closure$list;
  }
  function Coroutine$getPosition($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$destination = void 0;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
  }
  Coroutine$getPosition.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getPosition.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getPosition.prototype.constructor = Coroutine$getPosition;
  Coroutine$getPosition.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var $receiver = this.$this.closure$list;
            this.local$destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
            this.local$tmp$ = $receiver.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 4;
              continue;
            }
            var item = this.local$tmp$.next();
            this.local$tmp$_0 = this.local$destination.add_11rb$;
            this.state_0 = 3;
            this.result_0 = item.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$tmp$_0.call(this.local$destination, this.result_0);
            this.state_0 = 2;
            continue;
          case 4:
            return sum(this.local$destination);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  combine$ObjectLiteral.prototype.getPosition = function (continuation_0, suspended) {
    var instance = new Coroutine$getPosition(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$getLength($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$destination = void 0;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
  }
  Coroutine$getLength.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getLength.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getLength.prototype.constructor = Coroutine$getLength;
  Coroutine$getLength.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var $receiver = this.$this.closure$list;
            this.local$destination = ArrayList_init_0(collectionSizeOrDefault($receiver, 10));
            this.local$tmp$ = $receiver.iterator();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (!this.local$tmp$.hasNext()) {
              this.state_0 = 4;
              continue;
            }
            var item = this.local$tmp$.next();
            this.local$tmp$_0 = this.local$destination.add_11rb$;
            this.state_0 = 3;
            this.result_0 = item.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$tmp$_0.call(this.local$destination, this.result_0);
            this.state_0 = 2;
            continue;
          case 4:
            return sum(this.local$destination);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  combine$ObjectLiteral.prototype.getLength = function (continuation_0, suspended) {
    var instance = new Coroutine$getLength(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_mj6st8$_4($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$n = void 0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$_4.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$_4.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$_4.prototype.constructor = Coroutine$read_mj6st8$_4;
  Coroutine$read_mj6st8$_4.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = this.$this.closure$list;
            var tmp$;
            this.local$n = 0;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$n >= this.local$$receiver.size) {
              this.state_0 = 5;
              continue;
            }
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.get_za3lpa$((tmp$ = this.local$n, this.local$n = tmp$ + 1 | 0, tmp$)).read_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var read = this.result_0;
            if (read > 0) {
              return read;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 2;
            continue;
          case 5:
            return -1;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  combine$ObjectLiteral.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$_4(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$close_7($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$$receiver = void 0;
    this.local$n = void 0;
  }
  Coroutine$close_7.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_7.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_7.prototype.constructor = Coroutine$close_7;
  Coroutine$close_7.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = this.$this.closure$list;
            var tmp$;
            this.local$n = 0;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$n >= this.local$$receiver.size) {
              this.state_0 = 4;
              continue;
            }
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.get_za3lpa$((tmp$ = this.local$n, this.local$n = tmp$ + 1 | 0, tmp$)).close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.state_0 = 2;
            continue;
          case 4:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  combine$ObjectLiteral.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_7(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  combine$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncInputStreamWithLength]
  };
  function combine_0($receiver) {
    var list = $receiver;
    return new combine$ObjectLiteral(list);
  }
  function plus_5($receiver, other) {
    return combine_0(listOf([$receiver, other]));
  }
  function Coroutine$getAvailable($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$getAvailable.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getAvailable.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getAvailable.prototype.constructor = Coroutine$getAvailable;
  Coroutine$getAvailable.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.local$tmp$.subtract(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function getAvailable($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$getAvailable($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$hasAvailable($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$hasAvailable.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$hasAvailable.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$hasAvailable.prototype.constructor = Coroutine$hasAvailable;
  Coroutine$hasAvailable.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = getAvailable(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.toNumber() > 0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function hasAvailable($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$hasAvailable($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function AsyncRAInputStream() {
  }
  AsyncRAInputStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncRAInputStream',
    interfaces: []
  };
  function AsyncRAOutputStream() {
  }
  AsyncRAOutputStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'AsyncRAOutputStream',
    interfaces: []
  };
  function toAsyncStream$ObjectLiteral(closure$input, closure$output, closure$rlen, closure$closeable) {
    this.closure$input = closure$input;
    this.closure$output = closure$output;
    this.closure$rlen = closure$rlen;
    this.closure$closeable = closure$closeable;
    AsyncStreamBase.call(this);
    this.expectedPosition = L0;
  }
  function Coroutine$read_4m9kcn$_0($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_4m9kcn$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_4m9kcn$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_4m9kcn$_0.prototype.constructor = Coroutine$read_4m9kcn$_0;
  Coroutine$read_4m9kcn$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.closure$input == null)
              throw UnsupportedOperationException_init();
            this.$this.checkPosition_0(this.local$position);
            this.state_0 = 2;
            this.result_0 = this.$this.closure$input.read_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var read = this.result_0;
            if (read > 0)
              this.$this.expectedPosition = this.$this.expectedPosition.add(Kotlin.Long.fromInt(read));
            return read;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  toAsyncStream$ObjectLiteral.prototype.read_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_4m9kcn$_0(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$write_4m9kcn$_1($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_4m9kcn$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_4m9kcn$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_4m9kcn$_1.prototype.constructor = Coroutine$write_4m9kcn$_1;
  Coroutine$write_4m9kcn$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.closure$output == null)
              throw UnsupportedOperationException_init();
            this.$this.checkPosition_0(this.local$position);
            this.state_0 = 2;
            this.result_0 = this.$this.closure$output.write_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.$this.expectedPosition = this.$this.expectedPosition.add(Kotlin.Long.fromInt(this.local$len));
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  toAsyncStream$ObjectLiteral.prototype.write_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_4m9kcn$_1(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  toAsyncStream$ObjectLiteral.prototype.checkPosition_0 = function (position) {
    if (!equals(position, this.expectedPosition)) {
      throw UnsupportedOperationException_init_0('Seeking not supported!');
    }};
  function Coroutine$setLength_s8cxhz$_1($this, value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$value = value_0;
  }
  Coroutine$setLength_s8cxhz$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setLength_s8cxhz$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setLength_s8cxhz$_1.prototype.constructor = Coroutine$setLength_s8cxhz$_1;
  Coroutine$setLength_s8cxhz$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            if ((tmp$ = this.$this.closure$rlen) != null) {
              this.state_0 = 2;
              this.result_0 = tmp$.setLength_s8cxhz$(this.local$value, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.result_0 = null;
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.result_0 = Unit;
            this.state_0 = 3;
            continue;
          case 3:
            tmp$_0 = this.result_0;
            if (tmp$_0 == null) {
              throw UnsupportedOperationException_init();
            }
            return tmp$_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  toAsyncStream$ObjectLiteral.prototype.setLength_s8cxhz$ = function (value_0, continuation_0, suspended) {
    var instance = new Coroutine$setLength_s8cxhz$_1(this, value_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$getLength_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$getLength_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getLength_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getLength_0.prototype.constructor = Coroutine$getLength_0;
  Coroutine$getLength_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            if ((tmp$ = this.$this.closure$rlen) != null) {
              this.state_0 = 2;
              this.result_0 = tmp$.getLength(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.result_0 = null;
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            tmp$_0 = this.result_0;
            if (tmp$_0 == null) {
              throw UnsupportedOperationException_init();
            }
            return tmp$_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  toAsyncStream$ObjectLiteral.prototype.getLength = function (continuation_0, suspended) {
    var instance = new Coroutine$getLength_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  toAsyncStream$ObjectLiteral.prototype.close = function (continuation) {
    return this.closure$closeable.close(continuation);
  };
  toAsyncStream$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncStreamBase]
  };
  function toAsyncStream($receiver) {
    var tmp$, tmp$_0, tmp$_1;
    var input = Kotlin.isType(tmp$ = $receiver, AsyncInputStream) ? tmp$ : null;
    var output = Kotlin.isType(tmp$_0 = $receiver, AsyncOutputStream) ? tmp$_0 : null;
    var rlen = Kotlin.isType(tmp$_1 = $receiver, AsyncLengthStream) ? tmp$_1 : null;
    var closeable = $receiver;
    return toAsyncStream_0(new toAsyncStream$ObjectLiteral(input, output, rlen, closeable));
  }
  function AsyncStreamBase() {
  }
  AsyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    throw UnsupportedOperationException_init();
  };
  AsyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    throw UnsupportedOperationException_init();
  };
  AsyncStreamBase.prototype.setLength_s8cxhz$ = function (value, continuation) {
    throw UnsupportedOperationException_init();
  };
  AsyncStreamBase.prototype.getLength = function (continuation) {
    throw UnsupportedOperationException_init();
  };
  AsyncStreamBase.prototype.close = function (continuation) {
    return Unit;
  };
  AsyncStreamBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncStreamBase',
    interfaces: [AsyncLengthStream, AsyncRAOutputStream, AsyncRAInputStream, AsyncCloseable]
  };
  function Coroutine$readBytes($receiver_0, position_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$out = void 0;
    this.local$$receiver = $receiver_0;
    this.local$position = position_0;
    this.local$count = count_0;
  }
  Coroutine$readBytes.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readBytes.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readBytes.prototype.constructor = Coroutine$readBytes;
  Coroutine$readBytes.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$out = new Int8Array(this.local$count);
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.read_4m9kcn$(this.local$position, this.local$out, 0, this.local$out.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var readLen = this.result_0;
            return copyOf(this.local$out, readLen);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readBytes($receiver_0, position_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readBytes($receiver_0, position_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function toAsyncStream_0($receiver, position) {
    if (position === void 0)
      position = L0;
    return new AsyncStream($receiver, position);
  }
  function AsyncStream(base, position) {
    if (position === void 0)
      position = L0;
    this.base = base;
    this.position = position;
    this.$delegate_axnxby$_0 = new Extra$Mixin();
    this.readQueue_0 = new AsyncThread();
    this.writeQueue_0 = new AsyncThread();
  }
  function Coroutine$AsyncStream$read$lambda(this$AsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$AsyncStream = this$AsyncStream_0;
    this.local$closure$buffer = closure$buffer_0;
    this.local$closure$offset = closure$offset_0;
    this.local$closure$len = closure$len_0;
  }
  Coroutine$AsyncStream$read$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncStream$read$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncStream$read$lambda.prototype.constructor = Coroutine$AsyncStream$read$lambda;
  Coroutine$AsyncStream$read$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$AsyncStream.base.read_4m9kcn$(this.local$this$AsyncStream.position, this.local$closure$buffer, this.local$closure$offset, this.local$closure$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var read = this.result_0;
            if (read >= 0)
              this.local$this$AsyncStream.position = this.local$this$AsyncStream.position.add(Kotlin.Long.fromInt(read));
            return read;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncStream$read$lambda(this$AsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncStream$read$lambda(this$AsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AsyncStream.prototype.read_mj6st8$ = function (buffer, offset, len, continuation) {
    return this.readQueue_0.invoke_lnyleu$(AsyncStream$read$lambda(this, buffer, offset, len), continuation);
  };
  function Coroutine$AsyncStream$write$lambda(this$AsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$AsyncStream = this$AsyncStream_0;
    this.local$closure$buffer = closure$buffer_0;
    this.local$closure$offset = closure$offset_0;
    this.local$closure$len = closure$len_0;
  }
  Coroutine$AsyncStream$write$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncStream$write$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncStream$write$lambda.prototype.constructor = Coroutine$AsyncStream$write$lambda;
  Coroutine$AsyncStream$write$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$AsyncStream.base.write_4m9kcn$(this.local$this$AsyncStream.position, this.local$closure$buffer, this.local$closure$offset, this.local$closure$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$this$AsyncStream.position = this.local$this$AsyncStream.position.add(Kotlin.Long.fromInt(this.local$closure$len)), Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncStream$write$lambda(this$AsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncStream$write$lambda(this$AsyncStream_0, closure$buffer_0, closure$offset_0, closure$len_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AsyncStream.prototype.write_mj6st8$$default = function (buffer, offset, len, continuation) {
    return this.writeQueue_0.invoke_lnyleu$(AsyncStream$write$lambda(this, buffer, offset, len), continuation);
  };
  AsyncStream.prototype.setPosition_s8cxhz$ = function (value, continuation) {
    this.position = value;
    return Unit;
  };
  AsyncStream.prototype.getPosition = function (continuation) {
    return this.position;
  };
  AsyncStream.prototype.setLength_s8cxhz$ = function (value, continuation) {
    return this.base.setLength_s8cxhz$(value, continuation);
  };
  AsyncStream.prototype.getLength = function (continuation) {
    return this.base.getLength(continuation);
  };
  AsyncStream.prototype.size = function (continuation) {
    return this.base.getLength(continuation);
  };
  function Coroutine$getAvailable_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
  }
  Coroutine$getAvailable_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getAvailable_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getAvailable_0.prototype.constructor = Coroutine$getAvailable_0;
  Coroutine$getAvailable_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.$this.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.local$tmp$.subtract(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncStream.prototype.getAvailable = function (continuation_0, suspended) {
    var instance = new Coroutine$getAvailable_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$eof($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$eof.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$eof.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$eof.prototype.constructor = Coroutine$eof;
  Coroutine$eof.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.getAvailable(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.compareTo_11rb$(L0) <= 0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncStream.prototype.eof = function (continuation_0, suspended) {
    var instance = new Coroutine$eof(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AsyncStream.prototype.close = function (continuation) {
    return this.base.close(continuation);
  };
  AsyncStream.prototype.duplicate = function () {
    return new AsyncStream(this.base, this.position);
  };
  Object.defineProperty(AsyncStream.prototype, 'extra', {
    get: function () {
      return this.$delegate_axnxby$_0.extra;
    },
    set: function (tmp$) {
      this.$delegate_axnxby$_0.extra = tmp$;
    }
  });
  AsyncStream.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncStream',
    interfaces: [AsyncPositionLengthStream, AsyncOutputStream, AsyncInputStreamWithLength, AsyncInputStream, AsyncCloseable, Extra]
  };
  function Coroutine$hasLength($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$hasLength.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$hasLength.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$hasLength.prototype.constructor = Coroutine$hasLength;
  Coroutine$hasLength.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 2;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            return true;
          case 2:
            this.exceptionState_0 = 5;
            var t = this.exception_0;
            if (Kotlin.isType(t, Throwable)) {
              return false;
            } else {
              throw t;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            return;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function hasLength($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$hasLength($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$hasAvailable_0($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$hasAvailable_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$hasAvailable_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$hasAvailable_0.prototype.constructor = Coroutine$hasAvailable_0;
  Coroutine$hasAvailable_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 2;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver.getAvailable(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            return true;
          case 2:
            this.exceptionState_0 = 5;
            var t = this.exception_0;
            if (Kotlin.isType(t, Throwable)) {
              return false;
            } else {
              throw t;
            }

          case 3:
            this.state_0 = 4;
            continue;
          case 4:
            return;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function hasAvailable_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$hasAvailable_0($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  var keepPosition = defineInlineFunction('korio-root-korio.com.soywiz.korio.stream.keepPosition_iudb3h$', function ($receiver, callback) {
    var old = $receiver.position;
    try {
      return callback();
    }finally {
      $receiver.position = old;
    }
  });
  function Coroutine$getAvailable_1($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$getAvailable_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getAvailable_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getAvailable_1.prototype.constructor = Coroutine$getAvailable_1;
  Coroutine$getAvailable_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$ = this.result_0;
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.local$tmp$.subtract(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function getAvailable_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$getAvailable_1($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$eof_0($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$eof_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$eof_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$eof_0.prototype.constructor = Coroutine$eof_0;
  Coroutine$eof_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = getAvailable_0(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0.compareTo_11rb$(L0) <= 0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function eof($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$eof_0($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function SliceAsyncStreamBase(base, baseStart, baseEnd, closeParent) {
    AsyncStreamBase.call(this);
    this.base_8be2vx$ = base;
    this.baseStart_8be2vx$ = baseStart;
    this.baseEnd_8be2vx$ = baseEnd;
    this.closeParent_8be2vx$ = closeParent;
    this.baseLength_8be2vx$ = this.baseEnd_8be2vx$.subtract(this.baseStart_8be2vx$);
  }
  SliceAsyncStreamBase.prototype.clampPosition_0 = function (position) {
    return clamp_0(position, this.baseStart_8be2vx$, this.baseEnd_8be2vx$);
  };
  SliceAsyncStreamBase.prototype.clampPositionLen_0 = function (position, len) {
    if (position.compareTo_11rb$(L0) < 0)
      throw IllegalArgumentException_init('Invalid position');
    var targetStartPosition = this.clampPosition_0(this.baseStart_8be2vx$.add(position));
    var targetEndPosition = this.clampPosition_0(targetStartPosition.add(Kotlin.Long.fromInt(len)));
    var targetLen = targetEndPosition.subtract(targetStartPosition).toInt();
    return new Pair(targetStartPosition, targetLen);
  };
  SliceAsyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    var tmp$ = this.clampPositionLen_0(position, len);
    var targetStartPosition = tmp$.component1()
    , targetLen = tmp$.component2();
    return this.base_8be2vx$.read_4m9kcn$(targetStartPosition, buffer, offset, targetLen, continuation);
  };
  SliceAsyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    var tmp$ = this.clampPositionLen_0(position, len);
    var targetStartPosition = tmp$.component1()
    , targetLen = tmp$.component2();
    return this.base_8be2vx$.write_4m9kcn$(targetStartPosition, buffer, offset, targetLen, continuation);
  };
  SliceAsyncStreamBase.prototype.getLength = function (continuation) {
    return this.baseLength_8be2vx$;
  };
  function Coroutine$close_8($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close_8.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_8.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_8.prototype.constructor = Coroutine$close_8;
  Coroutine$close_8.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.closeParent_8be2vx$) {
              this.state_0 = 2;
              this.result_0 = this.$this.base_8be2vx$.close(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            continue;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  SliceAsyncStreamBase.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_8(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  SliceAsyncStreamBase.prototype.toString = function () {
    return 'SliceAsyncStreamBase(' + this.base_8be2vx$ + ', ' + this.baseStart_8be2vx$.toString() + ', ' + this.baseEnd_8be2vx$.toString() + ')';
  };
  SliceAsyncStreamBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SliceAsyncStreamBase',
    interfaces: [AsyncStreamBase]
  };
  function buffered($receiver, blockSize, blocksToRead) {
    if (blockSize === void 0)
      blockSize = 2048;
    if (blocksToRead === void 0)
      blocksToRead = 16;
    return toAsyncStream_0(new BufferedStreamBase($receiver.base, blockSize, blocksToRead), $receiver.position);
  }
  function BufferedStreamBase(base, blockSize, blocksToRead) {
    if (blockSize === void 0)
      blockSize = 2048;
    if (blocksToRead === void 0)
      blocksToRead = 16;
    AsyncStreamBase.call(this);
    this.base = base;
    this.blockSize = blockSize;
    this.blocksToRead = blocksToRead;
    this.bsize_0 = Kotlin.imul(this.blockSize, this.blocksToRead);
    this.cachedData = new Int8Array([]);
    this.cachedSector = L_1;
  }
  BufferedStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    return this._read_4m9kcn$(position, buffer, offset, len, continuation);
  };
  function Coroutine$_read_4m9kcn$($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$sector = void 0;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$_read_4m9kcn$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$_read_4m9kcn$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$_read_4m9kcn$.prototype.constructor = Coroutine$_read_4m9kcn$;
  Coroutine$_read_4m9kcn$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.base.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$position.compareTo_11rb$(this.result_0) >= 0) {
              return -1;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            this.local$sector = this.local$position.div(Kotlin.Long.fromInt(this.$this.bsize_0));
            if (!equals(this.$this.cachedSector, this.local$sector)) {
              this.state_0 = 4;
              this.result_0 = readBytes(this.$this.base, this.local$sector.multiply(Kotlin.Long.fromInt(this.$this.bsize_0)), this.$this.bsize_0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 5;
              continue;
            }

          case 4:
            this.$this.cachedData = this.result_0;
            this.$this.cachedSector = this.local$sector;
            this.state_0 = 5;
            continue;
          case 5:
            var soffset = this.local$position.modulo(Kotlin.Long.fromInt(this.$this.bsize_0)).toInt();
            var available = this.$this.cachedData.length - soffset | 0;
            var toRead = Math_0.min(available, this.local$len);
            arrayCopy(this.$this.cachedData, this.local$buffer, this.local$offset, soffset, soffset + toRead | 0);
            return toRead;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BufferedStreamBase.prototype._read_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$_read_4m9kcn$(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$write_4m9kcn$_2($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_4m9kcn$_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_4m9kcn$_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_4m9kcn$_2.prototype.constructor = Coroutine$write_4m9kcn$_2;
  Coroutine$write_4m9kcn$_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.base.write_4m9kcn$(this.local$position, this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  BufferedStreamBase.prototype.write_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_4m9kcn$_2(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  BufferedStreamBase.prototype.setLength_s8cxhz$ = function (value, continuation) {
    return this.base.setLength_s8cxhz$(value, continuation);
  };
  BufferedStreamBase.prototype.getLength = function (continuation) {
    return this.base.getLength(continuation);
  };
  BufferedStreamBase.prototype.close = function (continuation) {
    return this.base.close(continuation);
  };
  BufferedStreamBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BufferedStreamBase',
    interfaces: [AsyncStreamBase]
  };
  function Coroutine$readBufferedLine($receiver_0, limit_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$limit = limit_0;
    this.local$charset = charset_0;
  }
  Coroutine$readBufferedLine.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readBufferedLine.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readBufferedLine.prototype.constructor = Coroutine$readBufferedLine;
  Coroutine$readBufferedLine.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$limit === void 0)
              this.local$limit = 4096;
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.readUntil_vlsdy4$(toByte(10 | 0), false, this.local$limit, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return toString_2(this.result_0, this.local$charset);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readBufferedLine($receiver_0, limit_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readBufferedLine($receiver_0, limit_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function bufferedInput($receiver, bufferSize) {
    if (bufferSize === void 0)
      bufferSize = 8192;
    return new AsyncBufferedInputStream($receiver, bufferSize);
  }
  function AsyncBufferedInputStream(base, bufferSize) {
    if (bufferSize === void 0)
      bufferSize = 8192;
    this.base = base;
    this.bufferSize = bufferSize;
    this.buf_0 = new ByteArrayDeque(this.bufferSize);
    this.queue_0 = new AsyncThread();
    this.temp_0 = new Int8Array(this.bufferSize);
  }
  function Coroutine$AsyncBufferedInputStream$require$lambda(this$AsyncBufferedInputStream_0, closure$len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$AsyncBufferedInputStream = this$AsyncBufferedInputStream_0;
    this.local$closure$len = closure$len_0;
    this.local$read = void 0;
  }
  Coroutine$AsyncBufferedInputStream$require$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncBufferedInputStream$require$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncBufferedInputStream$require$lambda.prototype.constructor = Coroutine$AsyncBufferedInputStream$require$lambda;
  Coroutine$AsyncBufferedInputStream$require$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$this$AsyncBufferedInputStream.buf_0.availableRead >= this.local$closure$len) {
              this.state_0 = 5;
              continue;
            }
            this.state_0 = 3;
            this.result_0 = this.local$this$AsyncBufferedInputStream.base.read_mj6st8$(this.local$this$AsyncBufferedInputStream.temp_0, 0, this.local$this$AsyncBufferedInputStream.temp_0.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$read = this.result_0;
            if (this.local$read <= 0) {
              this.state_0 = 5;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.local$this$AsyncBufferedInputStream.buf_0.write_mj6st8$(this.local$this$AsyncBufferedInputStream.temp_0, 0, this.local$read);
            this.state_0 = 2;
            continue;
          case 5:
            return Unit;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncBufferedInputStream$require$lambda(this$AsyncBufferedInputStream_0, closure$len_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncBufferedInputStream$require$lambda(this$AsyncBufferedInputStream_0, closure$len_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AsyncBufferedInputStream.prototype.require_za3lpa$ = function (len, continuation) {
    if (len === void 0)
      len = 1;
    return this.queue_0.invoke_lnyleu$(AsyncBufferedInputStream$require$lambda(this, len), continuation);
  };
  function Coroutine$read_mj6st8$_5($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$_5.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$_5.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$_5.prototype.constructor = Coroutine$read_mj6st8$_5;
  Coroutine$read_mj6st8$_5.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.require_za3lpa$(void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.$this.buf_0.read_mj6st8$(this.local$buffer, this.local$offset, this.local$len);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncBufferedInputStream.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$_5(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_2($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$read_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_2.prototype.constructor = Coroutine$read_2;
  Coroutine$read_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.require_za3lpa$(void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.$this.buf_0.readByte();
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncBufferedInputStream.prototype.read = function (continuation_0, suspended) {
    var instance = new Coroutine$read_2(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$readUntil_vlsdy4$($this, end_0, including_0, limit_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$out = void 0;
    this.local$byteInt = void 0;
    this.local$end = end_0;
    this.local$including = including_0;
    this.local$limit = limit_0;
  }
  Coroutine$readUntil_vlsdy4$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readUntil_vlsdy4$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readUntil_vlsdy4$.prototype.constructor = Coroutine$readUntil_vlsdy4$;
  Coroutine$readUntil_vlsdy4$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$including === void 0)
              this.local$including = true;
            if (this.local$limit === void 0)
              this.local$limit = 4096;
            this.local$out = ByteArrayBuilder_init();
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.$this.require_za3lpa$(void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$byteInt = this.$this.buf_0.readByte();
            if (this.local$byteInt < 0) {
              this.state_0 = 6;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            var byte = toByte(this.local$byteInt);
            if (this.local$including || byte !== this.local$end) {
              this.local$out.append_s8j3t7$(byte);
            }
            if (byte === this.local$end || this.local$out.size >= this.local$limit) {
              this.state_0 = 6;
              continue;
            } else {
              this.state_0 = 5;
              continue;
            }

          case 5:
            this.state_0 = 2;
            continue;
          case 6:
            return this.local$out.toByteArray();
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncBufferedInputStream.prototype.readUntil_vlsdy4$ = function (end_0, including_0, limit_0, continuation_0, suspended) {
    var instance = new Coroutine$readUntil_vlsdy4$(this, end_0, including_0, limit_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$close_9($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close_9.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_9.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_9.prototype.constructor = Coroutine$close_9;
  Coroutine$close_9.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.base.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  AsyncBufferedInputStream.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_9(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  AsyncBufferedInputStream.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncBufferedInputStream',
    interfaces: [AsyncInputStream]
  };
  function sliceWithSize($receiver, start, length, closeParent, continuation) {
    if (closeParent === void 0)
      closeParent = false;
    return sliceWithBounds($receiver, start, start.add(length), closeParent, continuation);
  }
  function sliceWithSize_0($receiver, start, length, closeParent, continuation) {
    if (closeParent === void 0)
      closeParent = false;
    return sliceWithBounds($receiver, Kotlin.Long.fromInt(start), Kotlin.Long.fromInt(start + length | 0), closeParent, continuation);
  }
  function slice_0($receiver, range, closeParent, continuation) {
    if (closeParent === void 0)
      closeParent = false;
    return sliceWithBounds($receiver, Kotlin.Long.fromInt(range.start), Kotlin.Long.fromInt(range.endInclusive).add(Kotlin.Long.fromInt(1)), closeParent, continuation);
  }
  function slice_1($receiver, range, closeParent, continuation) {
    if (closeParent === void 0)
      closeParent = false;
    return sliceWithBounds($receiver, range.start, range.endInclusive.add(Kotlin.Long.fromInt(1)), closeParent, continuation);
  }
  function Coroutine$sliceWithBounds($receiver_0, start_0, end_0, closeParent_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$start = start_0;
    this.local$end = end_0;
    this.local$closeParent = closeParent_0;
  }
  Coroutine$sliceWithBounds.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$sliceWithBounds.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$sliceWithBounds.prototype.constructor = Coroutine$sliceWithBounds;
  Coroutine$sliceWithBounds.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$closeParent === void 0)
              this.local$closeParent = false;
            var tmp$;
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var len = this.result_0;
            var clampedStart = clamp_0(this.local$start, L0, len);
            var clampedEnd = clamp_0(this.local$end, L0, len);
            if (Kotlin.isType(this.local$$receiver.base, SliceAsyncStreamBase)) {
              tmp$ = toAsyncStream_0(new SliceAsyncStreamBase(this.local$$receiver.base.base_8be2vx$, this.local$$receiver.base.baseStart_8be2vx$.add(clampedStart), this.local$$receiver.base.baseStart_8be2vx$.add(clampedEnd), this.local$closeParent));
            } else {
              tmp$ = toAsyncStream_0(new SliceAsyncStreamBase(this.local$$receiver.base, clampedStart, clampedEnd, this.local$closeParent));
            }

            return tmp$;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function sliceWithBounds($receiver_0, start_0, end_0, closeParent_0, continuation_0, suspended) {
    var instance = new Coroutine$sliceWithBounds($receiver_0, start_0, end_0, closeParent_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$sliceStart($receiver_0, start_0, closeParent_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$start = start_0;
    this.local$closeParent = closeParent_0;
  }
  Coroutine$sliceStart.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$sliceStart.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$sliceStart.prototype.constructor = Coroutine$sliceStart;
  Coroutine$sliceStart.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$start === void 0)
              this.local$start = L0;
            if (this.local$closeParent === void 0)
              this.local$closeParent = false;
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = sliceWithBounds(this.local$$receiver, this.local$start, this.result_0, this.local$closeParent, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function sliceStart($receiver_0, start_0, closeParent_0, continuation_0, suspended) {
    var instance = new Coroutine$sliceStart($receiver_0, start_0, closeParent_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$sliceHere($receiver_0, closeParent_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$$receiver = $receiver_0;
    this.local$closeParent = closeParent_0;
  }
  Coroutine$sliceHere.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$sliceHere.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$sliceHere.prototype.constructor = Coroutine$sliceHere;
  Coroutine$sliceHere.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$closeParent === void 0)
              this.local$closeParent = false;
            this.local$tmp$ = this.local$$receiver.position;
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getLength(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = sliceWithSize(this.local$$receiver, this.local$tmp$, this.result_0, this.local$closeParent, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function sliceHere($receiver_0, closeParent_0, continuation_0, suspended) {
    var instance = new Coroutine$sliceHere($receiver_0, closeParent_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readSlice($receiver_0, length_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$start = void 0;
    this.local$out = void 0;
    this.local$$receiver = $receiver_0;
    this.local$length = length_0;
  }
  Coroutine$readSlice.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readSlice.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readSlice.prototype.constructor = Coroutine$readSlice;
  Coroutine$readSlice.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$start = this.result_0;
            this.state_0 = 3;
            this.result_0 = sliceWithSize(this.local$$receiver, this.local$start, this.local$length, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$out = this.result_0;
            this.state_0 = 4;
            this.result_0 = this.local$$receiver.setPosition_s8cxhz$(this.local$start.add(this.local$length), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.local$out;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readSlice($receiver_0, length_0, continuation_0, suspended) {
    var instance = new Coroutine$readSlice($receiver_0, length_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function readStream($receiver, length, continuation) {
    return readSlice($receiver, Kotlin.Long.fromInt(length), continuation);
  }
  function readStream_0($receiver, length, continuation) {
    return readSlice($receiver, length, continuation);
  }
  function Coroutine$readStringz($receiver_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$buf = void 0;
    this.local$temp = void 0;
    this.local$$receiver = $receiver_0;
    this.local$charset = charset_0;
  }
  Coroutine$readStringz.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readStringz.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readStringz.prototype.constructor = Coroutine$readStringz;
  Coroutine$readStringz.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            this.local$buf = ByteArrayBuilder_init();
            this.local$temp = new Int8Array(1);
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.read_mj6st8$(this.local$temp, 0, 1, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            var read = this.result_0;
            if (read <= 0) {
              this.state_0 = 6;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            if (this.local$temp[0] === toByte(0)) {
              this.state_0 = 6;
              continue;
            } else {
              this.state_0 = 5;
              continue;
            }

          case 5:
            this.local$buf.append_s8j3t7$(this.local$temp[0]);
            this.state_0 = 2;
            continue;
          case 6:
            return toString_2(this.local$buf.toByteArray(), this.local$charset);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readStringz_1($receiver_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readStringz($receiver_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readStringz_0($receiver_0, len_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$len = len_0;
    this.local$charset = charset_0;
  }
  Coroutine$readStringz_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readStringz_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readStringz_0.prototype.constructor = Coroutine$readStringz_0;
  Coroutine$readStringz_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var res = this.result_0;
            var index = indexOf_4(res, toByte(0));
            return toString_2(copyOf(res, index < 0 ? this.local$len : index), this.local$charset);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readStringz_2($receiver_0, len_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readStringz_0($receiver_0, len_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readString($receiver_0, len_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$len = len_0;
    this.local$charset = charset_0;
  }
  Coroutine$readString.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readString.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readString.prototype.constructor = Coroutine$readString;
  Coroutine$readString.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return toString_2(this.result_0, this.local$charset);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readString_1($receiver_0, len_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readString($receiver_0, len_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function writeStringz($receiver, str, charset, continuation) {
    if (charset === void 0)
      charset = UTF8;
    return writeBytes($receiver, toBytez_0(str, charset), continuation);
  }
  function writeStringz_0($receiver, str, len, charset, continuation) {
    if (charset === void 0)
      charset = UTF8;
    return writeBytes($receiver, toBytez(str, len, charset), continuation);
  }
  function writeString($receiver, string, charset, continuation) {
    if (charset === void 0)
      charset = UTF8;
    return writeBytes($receiver, toByteArray(string, charset), continuation);
  }
  function Coroutine$readExact($receiver_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$remaining = void 0;
    this.local$coffset = void 0;
    this.local$reader = void 0;
    this.local$read = void 0;
    this.local$$receiver = $receiver_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$readExact.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readExact.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readExact.prototype.constructor = Coroutine$readExact;
  Coroutine$readExact.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$remaining = this.local$len;
            this.local$coffset = this.local$offset;
            this.local$reader = this.local$$receiver;
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$remaining <= 0) {
              this.state_0 = 5;
              continue;
            }
            this.state_0 = 3;
            this.result_0 = this.local$reader.read_mj6st8$(this.local$buffer, this.local$coffset, this.local$remaining, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$read = this.result_0;
            if (this.local$read < 0) {
              this.state_0 = 5;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            if (this.local$read === 0)
              throw new EOFException('Not enough data. Expected=' + this.local$len + ', Read=' + (this.local$len - this.local$remaining | 0) + ', Remaining=' + this.local$remaining);
            this.local$coffset = this.local$coffset + this.local$read | 0;
            this.local$remaining = this.local$remaining - this.local$read | 0;
            this.state_0 = 2;
            continue;
          case 5:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readExact($receiver_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$readExact($receiver_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readSmallTempExact($receiver_0, size_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$size = size_0;
    this.local$callback = callback_0;
  }
  Coroutine$readSmallTempExact.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readSmallTempExact.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readSmallTempExact.prototype.constructor = Coroutine$readSmallTempExact;
  Coroutine$readSmallTempExact.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, this.local$size, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read_0 = this.result_0;
            if (read_0 !== this.local$size) {
              throw IllegalStateException_init(("Couldn't read exact size=" + this.local$size + ' but read=' + read_0).toString());
            }
            this.local$allocThis$result = this.local$callback(this.local$temp);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return this.local$allocThis$result;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readSmallTempExact($receiver_0, size_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$readSmallTempExact($receiver_0, size_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  defineInlineFunction('korio-root-korio.com.soywiz.korio.stream.readSmallTempExact_z17v49$', wrapFunction(function () {
    var get_smallBytesPool = _.com.soywiz.korio.internal.get_smallBytesPool;
    var wrapFunction = Kotlin.wrapFunction;
    var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
    var readSmallTempExact$lambda = wrapFunction(function () {
      var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
      return function (closure$size, closure$continuation, this$readSmallTempExact, closure$callback) {
        return function ($receiver) {
          this$readSmallTempExact.read_mj6st8$($receiver, 0, closure$size, closure$continuation);
          var read = closure$continuation.$$coroutineResult$$;
          if (read !== closure$size) {
            throw IllegalStateException_init(("Couldn't read exact size=" + closure$size + ' but read=' + read).toString());
          }return closure$callback($receiver);
        };
      };
    });
    return function ($receiver, size, callback, continuation) {
      var $receiver_0 = get_smallBytesPool();
      var allocThis$result;
      var temp = $receiver_0.alloc();
      try {
        Kotlin.suspendCall($receiver.read_mj6st8$(temp, 0, size, Kotlin.coroutineReceiver()));
        var read_0 = Kotlin.coroutineResult(Kotlin.coroutineReceiver());
        if (read_0 !== size) {
          throw IllegalStateException_init(("Couldn't read exact size=" + size + ' but read=' + read_0).toString());
        }allocThis$result = callback(temp);
      }finally {
        $receiver_0.free_11rb$(temp);
      }
      return allocThis$result;
    };
  }));
  function Coroutine$readTempExact($receiver_0, len_0, temp_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$len = len_0;
    this.local$temp = temp_0;
  }
  Coroutine$readTempExact.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readTempExact.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readTempExact.prototype.constructor = Coroutine$readTempExact;
  Coroutine$readTempExact.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readExact(this.local$$receiver, this.local$temp, 0, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$temp;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readTempExact($receiver_0, len_0, temp_0, continuation_0, suspended) {
    var instance = new Coroutine$readTempExact($receiver_0, len_0, temp_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function read($receiver, data, continuation) {
    return $receiver.read_mj6st8$(data, 0, data.length, continuation);
  }
  function read_0($receiver, data, continuation) {
    return $receiver.read_mj6st8$(data.storage, 0, data.size, continuation);
  }
  var EMPTY_BYTE_ARRAY;
  function Coroutine$readBytesUpToFirst($receiver_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$out = void 0;
    this.local$read = void 0;
    this.local$$receiver = $receiver_0;
    this.local$len = len_0;
  }
  Coroutine$readBytesUpToFirst.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readBytesUpToFirst.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readBytesUpToFirst.prototype.constructor = Coroutine$readBytesUpToFirst;
  Coroutine$readBytesUpToFirst.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$out = new Int8Array(this.local$len);
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.read_mj6st8$(this.local$out, 0, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$read = this.result_0;
            if (this.local$read <= 0) {
              return EMPTY_BYTE_ARRAY;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            return copyOf(this.local$out, this.local$read);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readBytesUpToFirst($receiver_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$readBytesUpToFirst($receiver_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readBytesUpTo($receiver_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$ba_0 = void 0;
    this.local$available_0 = void 0;
    this.local$pos_0 = void 0;
    this.local$alen = void 0;
    this.local$pending = void 0;
    this.local$temp = void 0;
    this.local$bout = void 0;
    this.local$read = void 0;
    this.local$ba = void 0;
    this.local$available = void 0;
    this.local$pos = void 0;
    this.local$rlen = void 0;
    this.local$$receiver = $receiver_0;
    this.local$len = len_0;
  }
  Coroutine$readBytesUpTo.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readBytesUpTo.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readBytesUpTo.prototype.constructor = Coroutine$readBytesUpTo;
  Coroutine$readBytesUpTo.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            var BYTES_TEMP_SIZE = 4096;
            if (this.local$len > BYTES_TEMP_SIZE) {
              if (Kotlin.isType(this.local$$receiver, AsyncPositionLengthStream)) {
                this.state_0 = 10;
                this.result_0 = getAvailable_0(this.local$$receiver, this);
                if (this.result_0 === COROUTINE_SUSPENDED)
                  return COROUTINE_SUSPENDED;
                continue;
              } else {
                this.local$pending = this.local$len;
                this.local$temp = new Int8Array(BYTES_TEMP_SIZE);
                this.local$bout = ByteArrayBuilder_init();
                this.state_0 = 6;
                continue;
              }
            } else {
              this.local$ba = new Int8Array(this.local$len);
              this.local$available = this.local$len;
              this.local$pos = 0;
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.read_mj6st8$(this.local$ba, this.local$pos, this.local$available, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$rlen = this.result_0;
            if (this.local$rlen <= 0) {
              this.state_0 = 5;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.local$pos = this.local$pos + this.local$rlen | 0;
            this.local$available = this.local$available - this.local$rlen | 0;
            this.state_0 = 2;
            continue;
          case 5:
            return this.local$ba.length === this.local$pos ? this.local$ba : copyOf(this.local$ba, this.local$pos);
          case 6:
            if (this.local$pending <= 0) {
              this.state_0 = 9;
              continue;
            }
            var b = this.local$pending;
            this.state_0 = 7;
            this.result_0 = this.local$$receiver.read_mj6st8$(this.local$temp, 0, Math_0.min(this.local$temp.length, b), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 7:
            this.local$read = this.result_0;
            if (this.local$read <= 0) {
              this.state_0 = 9;
              continue;
            } else {
              this.state_0 = 8;
              continue;
            }

          case 8:
            this.local$bout.append_mj6st8$(this.local$temp, 0, this.local$read);
            this.local$pending = this.local$pending - this.local$read | 0;
            this.state_0 = 6;
            continue;
          case 9:
            return this.local$bout.toByteArray();
          case 10:
            var b_0 = toIntClamp(this.result_0);
            tmp$ = Math_0.min(this.local$len, b_0);
            this.local$ba_0 = new Int8Array(tmp$);
            this.local$available_0 = this.local$ba_0.length;
            this.local$pos_0 = 0;
            this.state_0 = 11;
            continue;
          case 11:
            this.state_0 = 12;
            this.result_0 = this.local$$receiver.read_mj6st8$(this.local$ba_0, this.local$pos_0, this.local$available_0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 12:
            this.local$alen = this.result_0;
            if (this.local$alen <= 0) {
              this.state_0 = 14;
              continue;
            } else {
              this.state_0 = 13;
              continue;
            }

          case 13:
            this.local$pos_0 = this.local$pos_0 + this.local$alen | 0;
            this.local$available_0 = this.local$available_0 - this.local$alen | 0;
            this.state_0 = 11;
            continue;
          case 14:
            return this.local$ba_0.length === this.local$pos_0 ? this.local$ba_0 : copyOf(this.local$ba_0, this.local$pos_0);
          case 15:
            this.state_0 = 16;
            continue;
          case 16:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readBytesUpTo($receiver_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$readBytesUpTo($receiver_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readBytesExact($receiver_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$len = len_0;
  }
  Coroutine$readBytesExact.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readBytesExact.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readBytesExact.prototype.constructor = Coroutine$readBytesExact;
  Coroutine$readBytesExact.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = new Int8Array(this.local$len);
            this.state_0 = 2;
            this.result_0 = readExact(this.local$$receiver_0, this.local$$receiver, 0, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$$receiver;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readBytesExact($receiver_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$readBytesExact($receiver_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function readU8_0($receiver, continuation) {
    return $receiver.read(continuation);
  }
  function Coroutine$readS8($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readS8.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS8.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS8.prototype.constructor = Coroutine$readS8;
  Coroutine$readS8.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.read(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return toByte(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS8_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS8($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU16LE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readU16LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU16LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU16LE.prototype.constructor = Coroutine$readU16LE;
  Coroutine$readU16LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 2, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 2) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 2 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readU16LE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU16LE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU16LE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU24LE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readU24LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU24LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU24LE.prototype.constructor = Coroutine$readU24LE;
  Coroutine$readU24LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 3, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 3) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 3 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readU24LE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU24LE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU24LE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU32LE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readU32LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU32LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU32LE.prototype.constructor = Coroutine$readU32LE;
  Coroutine$readU32LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 4) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 4 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readU32LE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU32LE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU32LE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS16LE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readS16LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS16LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS16LE.prototype.constructor = Coroutine$readS16LE;
  Coroutine$readS16LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 2, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 2) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 2 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readS16LE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS16LE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS16LE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS24LE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readS24LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS24LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS24LE.prototype.constructor = Coroutine$readS24LE;
  Coroutine$readS24LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 3, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 3) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 3 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readS24LE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS24LE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS24LE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS32LE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readS32LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS32LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS32LE.prototype.constructor = Coroutine$readS32LE;
  Coroutine$readS32LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 4) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 4 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readS32LE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS32LE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS32LE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS64LE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readS64LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS64LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS64LE.prototype.constructor = Coroutine$readS64LE;
  Coroutine$readS64LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 8) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 8 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readS64LE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS64LE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS64LE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readF32LE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readF32LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readF32LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readF32LE.prototype.constructor = Coroutine$readF32LE;
  Coroutine$readF32LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 4) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 4 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readF32LE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readF32LE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readF32LE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readF64LE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readF64LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readF64LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readF64LE.prototype.constructor = Coroutine$readF64LE;
  Coroutine$readF64LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 8) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 8 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readF64LE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readF64LE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readF64LE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU16BE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readU16BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU16BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU16BE.prototype.constructor = Coroutine$readU16BE;
  Coroutine$readU16BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 2, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 2) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 2 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readU16BE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU16BE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU16BE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU24BE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readU24BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU24BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU24BE.prototype.constructor = Coroutine$readU24BE;
  Coroutine$readU24BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 3, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 3) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 3 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readU24BE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU24BE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU24BE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readU32BE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readU32BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readU32BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readU32BE.prototype.constructor = Coroutine$readU32BE;
  Coroutine$readU32BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 4) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 4 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readU32BE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readU32BE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readU32BE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS16BE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readS16BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS16BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS16BE.prototype.constructor = Coroutine$readS16BE;
  Coroutine$readS16BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 2, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 2) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 2 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readS16BE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS16BE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS16BE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS24BE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readS24BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS24BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS24BE.prototype.constructor = Coroutine$readS24BE;
  Coroutine$readS24BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 3, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 3) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 3 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readS24BE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS24BE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS24BE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS32BE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readS32BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS32BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS32BE.prototype.constructor = Coroutine$readS32BE;
  Coroutine$readS32BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 4) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 4 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readS32BE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS32BE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS32BE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readS64BE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readS64BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readS64BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readS64BE.prototype.constructor = Coroutine$readS64BE;
  Coroutine$readS64BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 8) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 8 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readS64BE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readS64BE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readS64BE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readF32BE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readF32BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readF32BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readF32BE.prototype.constructor = Coroutine$readF32BE;
  Coroutine$readF32BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 4) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 4 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readF32BE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readF32BE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readF32BE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readF64BE($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$allocThis$result = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
  }
  Coroutine$readF64BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readF64BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readF64BE.prototype.constructor = Coroutine$readF64BE;
  Coroutine$readF64BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.read_mj6st8$(this.local$temp, 0, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            var read = this.result_0;
            if (read !== 8) {
              throw IllegalStateException_init(("Couldn't read exact size=" + 8 + ' but read=' + read).toString());
            }
            this.local$allocThis$result = readF64BE(this.local$temp, 0);
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            this.result_0 = this.local$allocThis$result;
            return this.result_0;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readF64BE_0($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readF64BE($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readAll($receiver_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 18;
    this.local$tmp$ = void 0;
    this.local$tmp$_0 = void 0;
    this.local$out = void 0;
    this.local$temp = void 0;
    this.local$r = void 0;
    this.local$$receiver = $receiver_0;
  }
  Coroutine$readAll.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readAll.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readAll.prototype.constructor = Coroutine$readAll;
  Coroutine$readAll.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 15;
            if (Kotlin.isType(this.local$$receiver, AsyncGetPositionStream) && Kotlin.isType(this.local$$receiver, AsyncGetLengthStream)) {
              this.state_0 = 10;
              this.result_0 = this.local$$receiver.getLength(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              if (Kotlin.isType(this.local$$receiver, AsyncStream)) {
                this.state_0 = 1;
                this.result_0 = hasAvailable_0(this.local$$receiver, this);
                if (this.result_0 === COROUTINE_SUSPENDED)
                  return COROUTINE_SUSPENDED;
                continue;
              } else {
                this.result_0 = false;
                this.state_0 = 2;
                continue;
              }
            }

          case 1:
            this.state_0 = 2;
            continue;
          case 2:
            if (this.result_0) {
              this.state_0 = 7;
              this.result_0 = this.local$$receiver.getAvailable(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.local$out = ByteArrayBuilder_init();
              this.local$temp = new Int8Array(4096);
              this.state_0 = 3;
              continue;
            }

          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$$receiver.read_mj6st8$(this.local$temp, 0, this.local$temp.length, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            this.local$r = this.result_0;
            if (this.local$r <= 0) {
              this.state_0 = 6;
              continue;
            } else {
              this.state_0 = 5;
              continue;
            }

          case 5:
            this.local$out.append_mj6st8$(this.local$temp, 0, this.local$r);
            this.state_0 = 3;
            continue;
          case 6:
            this.local$tmp$_0 = this.local$out.toByteArray();
            this.state_0 = 9;
            continue;
          case 7:
            var available = this.result_0.toInt();
            this.state_0 = 8;
            this.result_0 = readBytesExact(this.local$$receiver, available, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 8:
            this.local$tmp$_0 = this.result_0;
            this.state_0 = 9;
            continue;
          case 9:
            this.state_0 = 13;
            continue;
          case 10:
            this.local$tmp$ = this.result_0;
            this.state_0 = 11;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 11:
            var available_0 = this.local$tmp$.subtract(this.result_0);
            this.state_0 = 12;
            this.result_0 = readBytesExact(this.local$$receiver, available_0.toInt(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 12:
            this.local$tmp$_0 = this.result_0;
            this.state_0 = 13;
            continue;
          case 13:
            this.exceptionState_0 = 18;
            this.finallyPath_0 = [14];
            this.state_0 = 16;
            continue;
          case 14:
            return this.local$tmp$_0;
          case 15:
            this.finallyPath_0 = [18];
            this.state_0 = 16;
            continue;
          case 16:
            this.exceptionState_0 = 18;
            this.state_0 = 17;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 17:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 18:
            throw this.exception_0;
          default:this.state_0 = 18;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 18) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readAll($receiver_0, continuation_0, suspended) {
    var instance = new Coroutine$readAll($receiver_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function readAvailable($receiver, continuation) {
    return readAll($receiver, continuation);
  }
  function Coroutine$skip($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$temp = void 0;
    this.local$remaining = void 0;
    this.local$toRead = void 0;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$skip.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$skip.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$skip.prototype.constructor = Coroutine$skip;
  Coroutine$skip.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (Kotlin.isType(this.local$$receiver, AsyncPositionLengthStream)) {
              this.state_0 = 5;
              this.result_0 = this.local$$receiver.getPosition(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.local$temp = new Int8Array(4096);
              this.local$remaining = this.local$count;
              this.state_0 = 2;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            if (this.local$remaining <= 0) {
              this.state_0 = 4;
              continue;
            }
            var a = this.local$remaining;
            this.local$toRead = Math_0.min(a, this.local$count);
            this.state_0 = 3;
            this.result_0 = readTempExact(this.local$$receiver, this.local$toRead, this.local$temp, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$remaining = this.local$remaining - this.local$toRead | 0;
            this.state_0 = 2;
            continue;
          case 4:
            this.state_0 = 7;
            continue;
          case 5:
            this.state_0 = 6;
            this.result_0 = this.local$$receiver.setPosition_s8cxhz$(this.result_0.add(Kotlin.Long.fromInt(this.local$count)), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            this.state_0 = 7;
            continue;
          case 7:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function skip($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$skip($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readUByteArray($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readUByteArray.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readUByteArray.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readUByteArray.prototype.constructor = Coroutine$readUByteArray;
  Coroutine$readUByteArray.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return new UByteArray_init(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readUByteArray($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readUByteArray($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readShortArrayLE($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readShortArrayLE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readShortArrayLE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readShortArrayLE.prototype.constructor = Coroutine$readShortArrayLE;
  Coroutine$readShortArrayLE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 2 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return readShortArrayLE(this.result_0, 0, this.local$count);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readShortArrayLE_0($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readShortArrayLE($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readShortArrayBE($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readShortArrayBE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readShortArrayBE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readShortArrayBE.prototype.constructor = Coroutine$readShortArrayBE;
  Coroutine$readShortArrayBE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 2 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return readShortArrayBE(this.result_0, 0, this.local$count);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readShortArrayBE_0($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readShortArrayBE($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readCharArrayLE($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readCharArrayLE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readCharArrayLE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readCharArrayLE.prototype.constructor = Coroutine$readCharArrayLE;
  Coroutine$readCharArrayLE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 2 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return readCharArrayLE(this.result_0, 0, this.local$count);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readCharArrayLE_0($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readCharArrayLE($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readCharArrayBE($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readCharArrayBE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readCharArrayBE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readCharArrayBE.prototype.constructor = Coroutine$readCharArrayBE;
  Coroutine$readCharArrayBE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 2 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return readCharArrayBE(this.result_0, 0, this.local$count);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readCharArrayBE_0($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readCharArrayBE($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readIntArrayLE($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readIntArrayLE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readIntArrayLE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readIntArrayLE.prototype.constructor = Coroutine$readIntArrayLE;
  Coroutine$readIntArrayLE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 4 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return readIntArrayLE(this.result_0, 0, this.local$count);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readIntArrayLE_0($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readIntArrayLE($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readIntArrayBE($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readIntArrayBE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readIntArrayBE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readIntArrayBE.prototype.constructor = Coroutine$readIntArrayBE;
  Coroutine$readIntArrayBE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 4 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return readIntArrayBE(this.result_0, 0, this.local$count);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readIntArrayBE_0($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readIntArrayBE($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readLongArrayLE($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readLongArrayLE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readLongArrayLE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readLongArrayLE.prototype.constructor = Coroutine$readLongArrayLE;
  Coroutine$readLongArrayLE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 8 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return readLongArrayLE(this.result_0, 0, this.local$count);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readLongArrayLE_0($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readLongArrayLE($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readLongArrayBE($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readLongArrayBE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readLongArrayBE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readLongArrayBE.prototype.constructor = Coroutine$readLongArrayBE;
  Coroutine$readLongArrayBE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 8 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return readLongArrayLE(this.result_0, 0, this.local$count);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readLongArrayBE_0($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readLongArrayBE($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readFloatArrayLE($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readFloatArrayLE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readFloatArrayLE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readFloatArrayLE.prototype.constructor = Coroutine$readFloatArrayLE;
  Coroutine$readFloatArrayLE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 4 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return readFloatArrayLE(this.result_0, 0, this.local$count);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readFloatArrayLE_0($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readFloatArrayLE($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readFloatArrayBE($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readFloatArrayBE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readFloatArrayBE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readFloatArrayBE.prototype.constructor = Coroutine$readFloatArrayBE;
  Coroutine$readFloatArrayBE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 4 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return readFloatArrayBE(this.result_0, 0, this.local$count);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readFloatArrayBE_0($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readFloatArrayBE($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readDoubleArrayLE($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readDoubleArrayLE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readDoubleArrayLE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readDoubleArrayLE.prototype.constructor = Coroutine$readDoubleArrayLE;
  Coroutine$readDoubleArrayLE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 8 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return readDoubleArrayLE(this.result_0, 0, this.local$count);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readDoubleArrayLE_0($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readDoubleArrayLE($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readDoubleArrayBE($receiver_0, count_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$count = count_0;
  }
  Coroutine$readDoubleArrayBE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readDoubleArrayBE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readDoubleArrayBE.prototype.constructor = Coroutine$readDoubleArrayBE;
  Coroutine$readDoubleArrayBE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = readBytesExact(this.local$$receiver, this.local$count * 8 | 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return readDoubleArrayBE(this.result_0, 0, this.local$count);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readDoubleArrayBE_0($receiver_0, count_0, continuation_0, suspended) {
    var instance = new Coroutine$readDoubleArrayBE($receiver_0, count_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function writeBytes($receiver, data, continuation) {
    return $receiver.write_mj6st8$(data, 0, data.length, continuation);
  }
  function writeBytes_0($receiver, data, position, length, continuation) {
    return $receiver.write_mj6st8$(data, position, length, continuation);
  }
  function write8($receiver, v, continuation) {
    return $receiver.write_za3lpa$(v, continuation);
  }
  function Coroutine$write16LE($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$write16LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write16LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write16LE.prototype.constructor = Coroutine$write16LE;
  Coroutine$write16LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            write16LE(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 2, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function write16LE_0($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$write16LE($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$write24LE($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$write24LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write24LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write24LE.prototype.constructor = Coroutine$write24LE;
  Coroutine$write24LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            write24LE(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 3, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function write24LE_0($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$write24LE($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$write32LE($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$write32LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write32LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write32LE.prototype.constructor = Coroutine$write32LE;
  Coroutine$write32LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            write32LE(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function write32LE_1($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$write32LE($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$write32LE_0($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$write32LE_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write32LE_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write32LE_0.prototype.constructor = Coroutine$write32LE_0;
  Coroutine$write32LE_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            write32LE_0(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function write32LE_2($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$write32LE_0($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$write64LE($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$write64LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write64LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write64LE.prototype.constructor = Coroutine$write64LE;
  Coroutine$write64LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            write64LE(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function write64LE_0($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$write64LE($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$writeF32LE($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$writeF32LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeF32LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeF32LE.prototype.constructor = Coroutine$writeF32LE;
  Coroutine$writeF32LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            writeF32LE(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeF32LE_0($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$writeF32LE($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$writeF64LE($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$writeF64LE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeF64LE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeF64LE.prototype.constructor = Coroutine$writeF64LE;
  Coroutine$writeF64LE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            writeF64LE(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeF64LE_0($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$writeF64LE($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$write16BE($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$write16BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write16BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write16BE.prototype.constructor = Coroutine$write16BE;
  Coroutine$write16BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            write16BE(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 2, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function write16BE_0($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$write16BE($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$write24BE($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$write24BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write24BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write24BE.prototype.constructor = Coroutine$write24BE;
  Coroutine$write24BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            write24BE(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 3, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function write24BE_0($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$write24BE($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$write32BE($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$write32BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write32BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write32BE.prototype.constructor = Coroutine$write32BE;
  Coroutine$write32BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            write32BE(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function write32BE_1($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$write32BE($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$write32BE_0($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$write32BE_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write32BE_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write32BE_0.prototype.constructor = Coroutine$write32BE_0;
  Coroutine$write32BE_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            write32BE_0(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function write32BE_2($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$write32BE_0($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$write64BE($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$write64BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write64BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write64BE.prototype.constructor = Coroutine$write64BE;
  Coroutine$write64BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            write64BE(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function write64BE_0($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$write64BE($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$writeF32BE($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$writeF32BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeF32BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeF32BE.prototype.constructor = Coroutine$writeF32BE;
  Coroutine$writeF32BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            writeF32BE(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 4, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeF32BE_0($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$writeF32BE($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$writeF64BE($receiver_0, v_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 5;
    this.local$$receiver = void 0;
    this.local$temp = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$v = v_0;
  }
  Coroutine$writeF64BE.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeF64BE.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeF64BE.prototype.constructor = Coroutine$writeF64BE;
  Coroutine$writeF64BE.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$$receiver = get_smallBytesPool();
            this.local$temp = this.local$$receiver.alloc();
            this.exceptionState_0 = 3;
            writeF64BE(this.local$temp, 0, this.local$v);
            this.state_0 = 1;
            this.result_0 = this.local$$receiver_0.write_mj6st8$(this.local$temp, 0, 8, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 5;
            this.finallyPath_0 = [2];
            this.state_0 = 4;
            continue;
          case 2:
            return Unit;
          case 3:
            this.finallyPath_0 = [5];
            this.state_0 = 4;
            continue;
          case 4:
            this.exceptionState_0 = 5;
            this.local$$receiver.free_11rb$(this.local$temp);
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 5:
            throw this.exception_0;
          default:this.state_0 = 5;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 5) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeF64BE_0($receiver_0, v_0, continuation_0, suspended) {
    var instance = new Coroutine$writeF64BE($receiver_0, v_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function toAsync($receiver) {
    return toAsyncStream_0(toAsync_0($receiver.base), $receiver.position);
  }
  function toAsync_0($receiver) {
    if (Kotlin.isType($receiver, MemorySyncStreamBase))
      return new MemoryAsyncStreamBase($receiver.data);
    else
      return new SyncAsyncStreamBase($receiver);
  }
  function toAsyncInWorker($receiver) {
    return toAsyncStream_0(toAsyncInWorker_0($receiver.base), $receiver.position);
  }
  function toAsyncInWorker_0($receiver) {
    return new SyncAsyncStreamBaseInWorker($receiver);
  }
  function SyncAsyncStreamBase(sync) {
    AsyncStreamBase.call(this);
    this.sync = sync;
  }
  SyncAsyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    return this.sync.read_4m9kcn$(position, buffer, offset, len);
  };
  SyncAsyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    return this.sync.write_4m9kcn$(position, buffer, offset, len);
  };
  SyncAsyncStreamBase.prototype.setLength_s8cxhz$ = function (value, continuation) {
    this.sync.length = value;
    return Unit;
  };
  SyncAsyncStreamBase.prototype.getLength = function (continuation) {
    return this.sync.length;
  };
  SyncAsyncStreamBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SyncAsyncStreamBase',
    interfaces: [AsyncStreamBase]
  };
  function SyncAsyncStreamBaseInWorker(sync) {
    AsyncStreamBase.call(this);
    this.sync = sync;
  }
  SyncAsyncStreamBaseInWorker.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    return this.sync.read_4m9kcn$(position, buffer, offset, len);
  };
  SyncAsyncStreamBaseInWorker.prototype.write_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    return this.sync.write_4m9kcn$(position, buffer, offset, len);
  };
  SyncAsyncStreamBaseInWorker.prototype.setLength_s8cxhz$ = function (value, continuation) {
    this.sync.length = value;
    return Unit;
  };
  SyncAsyncStreamBaseInWorker.prototype.getLength = function (continuation) {
    return this.sync.length;
  };
  SyncAsyncStreamBaseInWorker.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SyncAsyncStreamBaseInWorker',
    interfaces: [AsyncStreamBase]
  };
  function writeStream($receiver, source, continuation) {
    return copyTo(source, $receiver, void 0, continuation);
  }
  function Coroutine$writeFile($receiver_0, source_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.local$$receiver = void 0;
    this.local$tmp$ = void 0;
    this.local$error = void 0;
    this.local$result = void 0;
    this.local$$receiver_0 = $receiver_0;
    this.local$source = source_0;
  }
  Coroutine$writeFile.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeFile.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeFile.prototype.constructor = Coroutine$writeFile;
  Coroutine$writeFile.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.local$source.open_tiaunm$(VfsOpenMode$READ_getInstance(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.local$$receiver = this.result_0;
            var tmp$;
            this.local$error = null;
            this.exceptionState_0 = 3;
            this.state_0 = 2;
            this.result_0 = writeStream(this.local$$receiver_0, this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            this.local$tmp$ = this.result_0;
            this.exceptionState_0 = 6;
            this.state_0 = 4;
            continue;
          case 3:
            this.exceptionState_0 = 6;
            var e_0 = this.exception_0;
            if (Kotlin.isType(e_0, Throwable)) {
              this.local$error = e_0;
              this.local$tmp$ = null;
            } else
              throw e_0;
            this.state_0 = 4;
            continue;
          case 4:
            this.local$result = this.local$tmp$;
            this.state_0 = 5;
            this.result_0 = this.local$$receiver.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            if (this.local$error != null)
              throw this.local$error;
            this.result_0 = (tmp$ = this.local$result) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
            return this.result_0;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeFile($receiver_0, source_0, continuation_0, suspended) {
    var instance = new Coroutine$writeFile($receiver_0, source_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$copyTo($receiver_0, target_0, chunkSize_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$chunk = void 0;
    this.local$totalCount = void 0;
    this.local$count = void 0;
    this.local$$receiver = $receiver_0;
    this.local$target = target_0;
    this.local$chunkSize = chunkSize_0;
  }
  Coroutine$copyTo.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$copyTo.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$copyTo.prototype.constructor = Coroutine$copyTo;
  Coroutine$copyTo.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$chunkSize === void 0)
              this.local$chunkSize = 65536;
            if (Kotlin.isType(this.local$$receiver, AsyncStream) && Kotlin.isType(this.local$$receiver.base, MemoryAsyncStreamBase)) {
              this.state_0 = 2;
              this.result_0 = this.local$target.write_mj6st8$(this.local$$receiver.base.data.data, this.local$$receiver.position.toInt(), this.local$$receiver.base.ilength - this.local$$receiver.position.toInt() | 0, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            return Kotlin.Long.fromInt(this.local$$receiver.base.ilength);
          case 3:
            this.local$chunk = new Int8Array(this.local$chunkSize);
            this.local$totalCount = L0;
            this.state_0 = 4;
            continue;
          case 4:
            this.state_0 = 5;
            this.result_0 = read(this.local$$receiver, this.local$chunk, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            this.local$count = this.result_0;
            if (this.local$count <= 0) {
              this.state_0 = 8;
              continue;
            } else {
              this.state_0 = 6;
              continue;
            }

          case 6:
            this.state_0 = 7;
            this.result_0 = this.local$target.write_mj6st8$(this.local$chunk, 0, this.local$count, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 7:
            this.local$totalCount = this.local$totalCount.add(Kotlin.Long.fromInt(this.local$count));
            this.state_0 = 4;
            continue;
          case 8:
            return this.local$totalCount;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function copyTo($receiver_0, target_0, chunkSize_0, continuation_0, suspended) {
    var instance = new Coroutine$copyTo($receiver_0, target_0, chunkSize_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$writeToAlign($receiver_0, alignment_0, value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$nextPosition = void 0;
    this.local$$receiver = $receiver_0;
    this.local$alignment = alignment_0;
    this.local$value = value_0;
  }
  Coroutine$writeToAlign.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeToAlign.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeToAlign.prototype.constructor = Coroutine$writeToAlign;
  Coroutine$writeToAlign.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$value === void 0)
              this.local$value = 0;
            var tmp$;
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.local$nextPosition = nextAlignedTo(this.result_0, Kotlin.Long.fromInt(this.local$alignment));
            this.state_0 = 3;
            this.result_0 = this.local$$receiver.getPosition(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            tmp$ = this.local$nextPosition.subtract(this.result_0).toInt();
            var data = new Int8Array(tmp$);
            arrayfill_0(data, toByte(this.local$value), 0, data.length);
            this.state_0 = 4;
            this.result_0 = writeBytes(this.local$$receiver, data, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeToAlign($receiver_0, alignment_0, value_0, continuation_0, suspended) {
    var instance = new Coroutine$writeToAlign($receiver_0, alignment_0, value_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function skip_0($receiver, count, continuation) {
    $receiver.position = $receiver.position.add(Kotlin.Long.fromInt(count));
    return $receiver;
  }
  function skipToAlign($receiver, alignment, continuation) {
    $receiver.position = nextAlignedTo($receiver.position, Kotlin.Long.fromInt(alignment));
    return Unit;
  }
  function truncate($receiver, continuation) {
    return $receiver.setLength_s8cxhz$($receiver.position, continuation);
  }
  function writeCharArrayLE($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArrayLE($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeShortArrayLE($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArrayLE_0($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeIntArrayLE($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArrayLE_1($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeLongArrayLE($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArrayLE_2($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeFloatArrayLE($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArrayLE_3($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeDoubleArrayLE($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArrayLE_4($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeCharArrayBE($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArrayBE($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeShortArrayBE($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArrayBE_0($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeIntArrayBE($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArrayBE_1($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeLongArrayBE($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArrayBE_2($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeFloatArrayBE($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArrayBE_3($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function writeDoubleArrayBE($receiver, array, continuation) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArrayBE_4($receiver_0, 0, array);
    return writeBytes($receiver, $receiver_0, continuation);
  }
  function Coroutine$readUntil($receiver_0, endByte_0, limit_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 8;
    this.local$temp = void 0;
    this.local$out = void 0;
    this.local$c = void 0;
    this.local$$receiver = $receiver_0;
    this.local$endByte = endByte_0;
    this.local$limit = limit_0;
  }
  Coroutine$readUntil.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readUntil.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readUntil.prototype.constructor = Coroutine$readUntil;
  Coroutine$readUntil.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$limit === void 0)
              this.local$limit = 4096;
            this.local$temp = new Int8Array(1);
            this.local$out = ByteArrayBuilder_init();
            this.exceptionState_0 = 6;
            this.state_0 = 1;
            continue;
          case 1:
            this.state_0 = 2;
            this.result_0 = readExact(this.local$$receiver, this.local$temp, 0, 1, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            this.local$c = this.local$temp[0];
            if (this.local$c === this.local$endByte) {
              this.state_0 = 5;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            this.local$out.append_s8j3t7$(this.local$c);
            if (this.local$out.size >= this.local$limit) {
              this.state_0 = 5;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.state_0 = 1;
            continue;
          case 5:
            this.exceptionState_0 = 8;
            this.state_0 = 7;
            continue;
          case 6:
            this.exceptionState_0 = 8;
            var e = this.exception_0;
            if (!Kotlin.isType(e, EOFException))
              throw e;
            this.state_0 = 7;
            continue;
          case 7:
            return this.local$out.toByteArray();
          case 8:
            throw this.exception_0;
          default:this.state_0 = 8;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 8) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readUntil($receiver_0, endByte_0, limit_0, continuation_0, suspended) {
    var instance = new Coroutine$readUntil($receiver_0, endByte_0, limit_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$readLine($receiver_0, eol_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.local$temp = void 0;
    this.local$out = void 0;
    this.local$c = void 0;
    this.local$$receiver = $receiver_0;
    this.local$eol = eol_0;
    this.local$charset = charset_0;
  }
  Coroutine$readLine.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readLine.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readLine.prototype.constructor = Coroutine$readLine;
  Coroutine$readLine.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$eol === void 0)
              this.local$eol = 10;
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            this.local$temp = new Int8Array(1);
            this.local$out = ByteArrayBuilder_init();
            this.exceptionState_0 = 5;
            this.state_0 = 1;
            continue;
          case 1:
            this.state_0 = 2;
            this.result_0 = readExact(this.local$$receiver, this.local$temp, 0, 1, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            this.local$c = this.local$temp[0];
            if (toChar(this.local$c) === this.local$eol) {
              this.state_0 = 4;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 3:
            this.local$out.append_s8j3t7$(this.local$c);
            this.state_0 = 1;
            continue;
          case 4:
            this.exceptionState_0 = 7;
            this.state_0 = 6;
            continue;
          case 5:
            this.exceptionState_0 = 7;
            var e = this.exception_0;
            if (!Kotlin.isType(e, EOFException))
              throw e;
            this.state_0 = 6;
            continue;
          case 6:
            return toString_2(this.local$out.toByteArray(), this.local$charset);
          case 7:
            throw this.exception_0;
          default:this.state_0 = 7;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 7) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readLine($receiver_0, eol_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$readLine($receiver_0, eol_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function toAsyncInputStream$ObjectLiteral_0(this$toAsyncInputStream) {
    this.sync = this$toAsyncInputStream;
  }
  toAsyncInputStream$ObjectLiteral_0.prototype.read_mj6st8$ = function (buffer, offset, len, continuation) {
    return this.sync.read_mj6st8$(buffer, offset, len);
  };
  toAsyncInputStream$ObjectLiteral_0.prototype.close = function (continuation) {
    var tmp$, tmp$_0;
    (tmp$_0 = Kotlin.isType(tmp$ = this.sync, Closeable) ? tmp$ : null) != null ? (tmp$_0.close(), Unit) : null;
    return Unit;
  };
  function Coroutine$getPosition_0($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$_1 = void 0;
  }
  Coroutine$getPosition_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getPosition_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getPosition_0.prototype.constructor = Coroutine$getPosition_0;
  Coroutine$getPosition_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            this.local$tmp$_1 = (tmp$_0 = Kotlin.isType(tmp$ = this.$this.sync, SyncPositionStream) ? tmp$ : null) != null ? tmp$_0.position : null;
            if (this.local$tmp$_1 == null) {
              this.state_0 = 2;
              this.result_0 = AsyncInputStreamWithLength.prototype.getPosition.call(this.$this, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$_1 = this.result_0;
            this.state_0 = 3;
            continue;
          case 3:
            return this.local$tmp$_1;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  toAsyncInputStream$ObjectLiteral_0.prototype.getPosition = function (continuation_0, suspended) {
    var instance = new Coroutine$getPosition_0(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$getLength_1($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$_1 = void 0;
  }
  Coroutine$getLength_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getLength_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getLength_1.prototype.constructor = Coroutine$getLength_1;
  Coroutine$getLength_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            this.local$tmp$_1 = (tmp$_0 = Kotlin.isType(tmp$ = this.$this.sync, SyncLengthStream) ? tmp$ : null) != null ? tmp$_0.length : null;
            if (this.local$tmp$_1 == null) {
              this.state_0 = 2;
              this.result_0 = AsyncInputStreamWithLength.prototype.getLength.call(this.$this, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$tmp$_1 = this.result_0;
            this.state_0 = 3;
            continue;
          case 3:
            return this.local$tmp$_1;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  toAsyncInputStream$ObjectLiteral_0.prototype.getLength = function (continuation_0, suspended) {
    var instance = new Coroutine$getLength_1(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  toAsyncInputStream$ObjectLiteral_0.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncInputStreamWithLength]
  };
  function toAsyncInputStream_0($receiver) {
    return new toAsyncInputStream$ObjectLiteral_0($receiver);
  }
  function toAsyncOutputStream$ObjectLiteral(this$toAsyncOutputStream) {
    this.this$toAsyncOutputStream = this$toAsyncOutputStream;
  }
  toAsyncOutputStream$ObjectLiteral.prototype.write_mj6st8$$default = function (buffer, offset, len, continuation) {
    return this.this$toAsyncOutputStream.write_mj6st8$(buffer, offset, len);
  };
  toAsyncOutputStream$ObjectLiteral.prototype.close = function (continuation) {
    this.this$toAsyncOutputStream;
    var tmp$, tmp$_0;
    (tmp$_0 = Kotlin.isType(tmp$ = this.this$toAsyncOutputStream, Closeable) ? tmp$ : null) != null ? (tmp$_0.close(), Unit) : null;
    return Unit;
  };
  toAsyncOutputStream$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncOutputStream]
  };
  function toAsyncOutputStream($receiver) {
    return new toAsyncOutputStream$ObjectLiteral($receiver);
  }
  function asVfsFile($receiver, name) {
    if (name === void 0)
      name = 'unknown.bin';
    return MemoryVfs(mapOf(to(name, $receiver))).get_61zpoe$(name);
  }
  function Coroutine$readAllAsFastStream($receiver_0, offset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$offset = offset_0;
  }
  Coroutine$readAllAsFastStream.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$readAllAsFastStream.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$readAllAsFastStream.prototype.constructor = Coroutine$readAllAsFastStream;
  Coroutine$readAllAsFastStream.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$offset === void 0)
              this.local$offset = 0;
            this.state_0 = 2;
            this.result_0 = readAll(this.local$$receiver, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return openFastStream(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function readAllAsFastStream($receiver_0, offset_0, continuation_0, suspended) {
    var instance = new Coroutine$readAllAsFastStream($receiver_0, offset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  var getWrittenRange = defineInlineFunction('korio-root-korio.com.soywiz.korio.stream.getWrittenRange_rj0k6g$', wrapFunction(function () {
    var until = Kotlin.kotlin.ranges.until_2p08ub$;
    return function ($receiver, callback) {
      var start = $receiver.position;
      callback();
      var end = $receiver.position;
      return until(start, end);
    };
  }));
  function Coroutine$writeU_VL($receiver_0, value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$value = value_0;
  }
  Coroutine$writeU_VL.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeU_VL.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeU_VL.prototype.constructor = Coroutine$writeU_VL;
  Coroutine$writeU_VL.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var buffer = ByteArrayBuilder_init(4096);
            var s = MemorySyncStream_0(buffer);
            writeU_VL_0(s, this.local$value);
            this.state_0 = 2;
            this.result_0 = writeBytes(this.local$$receiver, buffer.toByteArray(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$$receiver;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeU_VL($receiver_0, value_0, continuation_0, suspended) {
    var instance = new Coroutine$writeU_VL($receiver_0, value_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$writeStringVL($receiver_0, str_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$str = str_0;
    this.local$charset = charset_0;
  }
  Coroutine$writeStringVL.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeStringVL.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeStringVL.prototype.constructor = Coroutine$writeStringVL;
  Coroutine$writeStringVL.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            var buffer = ByteArrayBuilder_init(4096);
            var s = MemorySyncStream_0(buffer);
            writeStringVL_0(s, this.local$str, this.local$charset);
            this.state_0 = 2;
            this.result_0 = writeBytes(this.local$$receiver, buffer.toByteArray(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$$receiver;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeStringVL($receiver_0, str_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$writeStringVL($receiver_0, str_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function withLength$ObjectLiteral(closure$base, closure$currentPos, closure$length) {
    this.closure$base = closure$base;
    this.closure$currentPos = closure$currentPos;
    this.closure$length = closure$length;
    this.$delegate_88yo8j$_0 = closure$base;
  }
  function Coroutine$read_mj6st8$_6($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$_6.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$_6.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$_6.prototype.constructor = Coroutine$read_mj6st8$_6;
  Coroutine$read_mj6st8$_6.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.$this.closure$base.read_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            var read = this.result_0;
            if (read >= 0)
              this.$this.closure$currentPos.v = this.$this.closure$currentPos.v.add(Kotlin.Long.fromInt(read));
            return read;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  withLength$ObjectLiteral.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$_6(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  withLength$ObjectLiteral.prototype.getPosition = function (continuation) {
    return this.closure$currentPos.v;
  };
  withLength$ObjectLiteral.prototype.getLength = function (continuation) {
    return this.closure$length;
  };
  withLength$ObjectLiteral.prototype.close = function (continuation) {
    return this.$delegate_88yo8j$_0.close(continuation);
  };
  withLength$ObjectLiteral.prototype.read = function (continuation) {
    return this.$delegate_88yo8j$_0.read(continuation);
  };
  withLength$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncGetPositionStream, AsyncGetLengthStream, AsyncInputStream]
  };
  function withLength($receiver, length) {
    var base = $receiver;
    var currentPos = {v: L0};
    return new withLength$ObjectLiteral(base, currentPos, length);
  }
  function MemoryAsyncStreamBase(data) {
    AsyncStreamBase.call(this);
    this.data = data;
  }
  Object.defineProperty(MemoryAsyncStreamBase.prototype, 'ilength', {
    get: function () {
      return this.data.size;
    },
    set: function (value) {
      this.data.size = value;
    }
  });
  MemoryAsyncStreamBase.prototype.setLength_s8cxhz$ = function (value, continuation) {
    this.ilength = value.toInt();
    return Unit;
  };
  MemoryAsyncStreamBase.prototype.getLength = function (continuation) {
    return Kotlin.Long.fromInt(this.ilength);
  };
  MemoryAsyncStreamBase.prototype.checkPosition_s8cxhz$ = function (position) {
    if (position.toNumber() < 0)
      invalidOp('Invalid position ' + position.toString());
  };
  MemoryAsyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    this.checkPosition_s8cxhz$(position);
    if (!contains_2(until(0, this.ilength), position))
      return 0;
    var a = Kotlin.Long.fromInt(this.ilength);
    var b = position.add(Kotlin.Long.fromInt(len));
    var end = a.compareTo_11rb$(b) <= 0 ? a : b;
    var a_0 = end.subtract(position).toInt();
    var actualLen = Math_0.max(a_0, 0);
    var src = this.data.data;
    var srcPos = position.toInt();
    arrayCopy(src, buffer, offset, srcPos, srcPos + actualLen | 0);
    return actualLen;
  };
  MemoryAsyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len, continuation) {
    this.checkPosition_s8cxhz$(position);
    var tmp$ = this.data;
    var a = this.data.size;
    var b = position.add(Kotlin.Long.fromInt(len)).toInt();
    tmp$.size = Math_0.max(a, b);
    arrayCopy(buffer, this.data.data, position.toInt(), offset, offset + len | 0);
  };
  MemoryAsyncStreamBase.prototype.close = function (continuation) {
    return Unit;
  };
  MemoryAsyncStreamBase.prototype.toString = function () {
    return 'MemoryAsyncStreamBase(' + this.data.size + ')';
  };
  MemoryAsyncStreamBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MemoryAsyncStreamBase',
    interfaces: [AsyncStreamBase]
  };
  function MemoryAsyncStreamBase_init(initialCapacity, $this) {
    if (initialCapacity === void 0)
      initialCapacity = 4096;
    $this = $this || Object.create(MemoryAsyncStreamBase.prototype);
    MemoryAsyncStreamBase.call($this, ByteArrayBuilder_init(initialCapacity));
    return $this;
  }
  function asyncStreamWriter$lambda$ObjectLiteral(closure$deque) {
    this.closure$deque = closure$deque;
  }
  asyncStreamWriter$lambda$ObjectLiteral.prototype.write_mj6st8$$default = function (buffer, offset, len, continuation) {
    return this.closure$deque.write_mj6st8$(buffer, offset, len, continuation);
  };
  asyncStreamWriter$lambda$ObjectLiteral.prototype.write_za3lpa$ = function (byte, continuation) {
    return this.closure$deque.write_za3lpa$(byte, continuation);
  };
  asyncStreamWriter$lambda$ObjectLiteral.prototype.close = function (continuation) {
    return this.closure$deque.close(continuation);
  };
  asyncStreamWriter$lambda$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncOutputStream]
  };
  function Coroutine$asyncStreamWriter$lambda(closure$process_0, closure$deque_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 7;
    this.local$closure$process = closure$process_0;
    this.local$closure$deque = closure$deque_0;
  }
  Coroutine$asyncStreamWriter$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$asyncStreamWriter$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$asyncStreamWriter$lambda.prototype.constructor = Coroutine$asyncStreamWriter$lambda;
  Coroutine$asyncStreamWriter$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.exceptionState_0 = 4;
            this.state_0 = 1;
            this.result_0 = this.local$closure$process(new asyncStreamWriter$lambda$ObjectLiteral(this.local$closure$deque), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 7;
            this.finallyPath_0 = [2];
            this.state_0 = 5;
            this.$returnValue = this.result_0;
            continue;
          case 2:
            return this.$returnValue;
          case 3:
            return;
          case 4:
            this.finallyPath_0 = [7];
            this.state_0 = 5;
            continue;
          case 5:
            this.exceptionState_0 = 7;
            this.state_0 = 6;
            this.result_0 = this.local$closure$deque.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 6:
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 7:
            throw this.exception_0;
          default:this.state_0 = 7;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 7) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function asyncStreamWriter$lambda(closure$process_0, closure$deque_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$asyncStreamWriter$lambda(closure$process_0, closure$deque_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function asyncStreamWriter$ObjectLiteral(closure$deque, closure$job) {
    this.closure$deque = closure$deque;
    this.closure$job = closure$job;
  }
  asyncStreamWriter$ObjectLiteral.prototype.read_mj6st8$ = function (buffer, offset, len, continuation) {
    return this.closure$deque.read_mj6st8$(buffer, offset, len, continuation);
  };
  asyncStreamWriter$ObjectLiteral.prototype.read = function (continuation) {
    return this.closure$deque.read(continuation);
  };
  asyncStreamWriter$ObjectLiteral.prototype.close = function (continuation) {
    return this.closure$job.cancel_m4sck1$();
  };
  asyncStreamWriter$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncInputStream]
  };
  function asyncStreamWriter(bufferSize, process, continuation) {
    if (bufferSize === void 0)
      bufferSize = 1024;
    var deque = new AsyncByteArrayDeque(bufferSize);
    var job = launchImmediately_0(continuation.context, asyncStreamWriter$lambda(process, deque));
    return new asyncStreamWriter$ObjectLiteral(deque, job);
  }
  function Coroutine$writeSync($receiver_0, hintSize_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = $receiver_0;
    this.local$hintSize = hintSize_0;
    this.local$callback = callback_0;
  }
  Coroutine$writeSync.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$writeSync.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$writeSync.prototype.constructor = Coroutine$writeSync;
  Coroutine$writeSync.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$hintSize === void 0)
              this.local$hintSize = 4096;
            var buffer_0 = ByteArrayBuilder_init(this.local$hintSize);
            var s_0 = MemorySyncStream_0(buffer_0);
            this.local$callback(s_0);
            this.state_0 = 2;
            this.result_0 = writeBytes(this.local$$receiver, buffer_0.toByteArray(), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function writeSync($receiver_0, hintSize_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$writeSync($receiver_0, hintSize_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  defineInlineFunction('korio-root-korio.com.soywiz.korio.stream.writeSync_jbc10$', wrapFunction(function () {
    var writeBytes = _.com.soywiz.korio.stream.writeBytes_rz40do$;
    var ByteArrayBuilder_init = _.$$importsForInline$$['kmem-root-kmem'].com.soywiz.kmem.ByteArrayBuilder_init_za3lpa$;
    var MemorySyncStream = _.com.soywiz.korio.stream.MemorySyncStream_i9anm0$;
    return function ($receiver, hintSize, callback, continuation) {
      if (hintSize === void 0)
        hintSize = 4096;
      var buffer_0 = ByteArrayBuilder_init(hintSize);
      var s_0 = MemorySyncStream(buffer_0);
      callback(s_0);
      Kotlin.suspendCall(writeBytes($receiver, buffer_0.toByteArray(), Kotlin.coroutineReceiver()));
    };
  }));
  function FastByteArrayInputStream(ba, offset) {
    if (offset === void 0)
      offset = 0;
    this.ba = ba;
    this.offset = offset;
  }
  Object.defineProperty(FastByteArrayInputStream.prototype, 'length', {
    get: function () {
      return this.ba.length;
    }
  });
  Object.defineProperty(FastByteArrayInputStream.prototype, 'available', {
    get: function () {
      return this.ba.length - this.offset | 0;
    }
  });
  Object.defineProperty(FastByteArrayInputStream.prototype, 'hasMore', {
    get: function () {
      return this.available > 0;
    }
  });
  Object.defineProperty(FastByteArrayInputStream.prototype, 'eof', {
    get: function () {
      return !this.hasMore;
    }
  });
  FastByteArrayInputStream.prototype.skip_za3lpa$ = function (count) {
    this.offset = this.offset + count | 0;
  };
  FastByteArrayInputStream.prototype.skipToAlign_za3lpa$ = function (count) {
    var nextPosition = nextAlignedTo_0(this.offset, this.offset);
    this.readBytes_za3lpa$(nextPosition - this.offset | 0);
  };
  FastByteArrayInputStream.prototype.readS8 = function () {
    var out = readS8(this.ba, this.offset);
    this.offset = this.offset + 1 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU8 = function () {
    var out = readU8(this.ba, this.offset);
    this.offset = this.offset + 1 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readS16LE = function () {
    var out = readS16LE(this.ba, this.offset);
    this.offset = this.offset + 2 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readS16BE = function () {
    var out = readS16BE(this.ba, this.offset);
    this.offset = this.offset + 2 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU16LE = function () {
    var out = readU16LE(this.ba, this.offset);
    this.offset = this.offset + 2 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU16BE = function () {
    var out = readU16BE(this.ba, this.offset);
    this.offset = this.offset + 2 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readS24LE = function () {
    var out = readS24LE(this.ba, this.offset);
    this.offset = this.offset + 3 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readS24BE = function () {
    var out = readS24BE(this.ba, this.offset);
    this.offset = this.offset + 3 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU24LE = function () {
    var out = readU24LE(this.ba, this.offset);
    this.offset = this.offset + 3 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU24BE = function () {
    var out = readU24BE(this.ba, this.offset);
    this.offset = this.offset + 3 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readS32LE = function () {
    var out = readS32LE(this.ba, this.offset);
    this.offset = this.offset + 4 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readS32BE = function () {
    var out = readS32BE(this.ba, this.offset);
    this.offset = this.offset + 4 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU32LE = function () {
    var out = readU32LE(this.ba, this.offset);
    this.offset = this.offset + 4 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU32BE = function () {
    var out = readU32BE(this.ba, this.offset);
    this.offset = this.offset + 4 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readF32LE = function () {
    var out = readF32LE(this.ba, this.offset);
    this.offset = this.offset + 4 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readF32BE = function () {
    var out = readF32BE(this.ba, this.offset);
    this.offset = this.offset + 4 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readF64LE = function () {
    var out = readF64LE(this.ba, this.offset);
    this.offset = this.offset + 8 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readF64BE = function () {
    var out = readF64BE(this.ba, this.offset);
    this.offset = this.offset + 8 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readBytes_za3lpa$ = function (count) {
    var out = readByteArray(this.ba, this.offset, count);
    this.offset = this.offset + count | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readShortArrayLE_za3lpa$ = function (count) {
    var count_0 = count * 2 | 0;
    var out = readShortArrayLE(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readShortArrayBE_za3lpa$ = function (count) {
    var count_0 = count * 2 | 0;
    var out = readShortArrayBE(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readCharArrayLE_za3lpa$ = function (count) {
    var count_0 = count * 2 | 0;
    var out = readCharArrayLE(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readCharArrayBE_za3lpa$ = function (count) {
    var count_0 = count * 2 | 0;
    var out = readCharArrayBE(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readIntArrayLE_za3lpa$ = function (count) {
    var count_0 = count * 4 | 0;
    var out = readIntArrayLE(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readIntArrayBE_za3lpa$ = function (count) {
    var count_0 = count * 4 | 0;
    var out = readIntArrayBE(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readLongArrayLE_za3lpa$ = function (count) {
    var count_0 = count * 8 | 0;
    var out = readLongArrayLE(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readLongArrayBE_za3lpa$ = function (count) {
    var count_0 = count * 8 | 0;
    var out = readLongArrayBE(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readFloatArrayLE_za3lpa$ = function (count) {
    var count_0 = count * 4 | 0;
    var out = readFloatArrayLE(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readFloatArrayBE_za3lpa$ = function (count) {
    var count_0 = count * 4 | 0;
    var out = readFloatArrayBE(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readDoubleArrayLE_za3lpa$ = function (count) {
    var count_0 = count * 8 | 0;
    var out = readDoubleArrayLE(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readDoubleArrayBE_za3lpa$ = function (count) {
    var count_0 = count * 8 | 0;
    var out = readDoubleArrayBE(this.ba, this.offset, count);
    this.offset = this.offset + count_0 | 0;
    return out;
  };
  FastByteArrayInputStream.prototype.readU_VL = function () {
    var result = this.readU8();
    if ((result & 128) === 0)
      return result;
    result = result & 127 | this.readU8() << 7;
    if ((result & 16384) === 0)
      return result;
    result = result & 16383 | this.readU8() << 14;
    if ((result & 2097152) === 0)
      return result;
    result = result & 2097151 | this.readU8() << 21;
    if ((result & 268435456) === 0)
      return result;
    result = result & 268435455 | this.readU8() << 28;
    return result;
  };
  FastByteArrayInputStream.prototype.readS_VL = function () {
    var v = this.readU_VL();
    var sign = (v & 1) !== 0;
    var uvalue = v >>> 1;
    return sign ? (-uvalue | 0) - 1 | 0 : uvalue;
  };
  FastByteArrayInputStream.prototype.readString_uyw3ma$ = function (len, charset) {
    if (charset === void 0)
      charset = UTF8;
    return toString_2(this.readBytes_za3lpa$(len), charset);
  };
  FastByteArrayInputStream.prototype.readStringz_uyw3ma$ = function (len, charset) {
    if (charset === void 0)
      charset = UTF8;
    var res = this.readBytes_za3lpa$(len);
    var index = indexOf_4(res, toByte(0));
    return toString_2(copyOf(res, index < 0 ? len : index), charset);
  };
  FastByteArrayInputStream.prototype.readStringz_qa9gbo$ = function (charset) {
    if (charset === void 0)
      charset = UTF8;
    var startOffset = this.offset;
    var index = indexOf_4(this.ba, toByte(0), this.offset);
    var end = index >= 0 ? index : this.ba.length;
    var str = toString_2(copyOfRange(this.ba, startOffset, end - startOffset | 0), charset);
    this.offset = index >= 0 ? end + 1 | 0 : end;
    return str;
  };
  FastByteArrayInputStream.prototype.readStringVL_qa9gbo$ = function (charset) {
    if (charset === void 0)
      charset = UTF8;
    return this.readString_uyw3ma$(this.readU_VL(), charset);
  };
  FastByteArrayInputStream.prototype.increment_0 = function (count, callback) {
    var out = callback();
    this.offset = this.offset + count | 0;
    return out;
  };
  FastByteArrayInputStream.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FastByteArrayInputStream',
    interfaces: []
  };
  function openFastStream($receiver, offset) {
    if (offset === void 0)
      offset = 0;
    return new FastByteArrayInputStream($receiver, offset);
  }
  var arraycopy$lambda_2 = wrapFunction(function () {
    var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
    return function (closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$size) {
      return function () {
        arrayCopy(closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$srcPos + closure$size | 0);
        return Unit;
      };
    };
  });
  function SyncInputStream() {
  }
  SyncInputStream.prototype.read_mj6st8$ = function (buffer, offset, len, callback$default) {
    if (offset === void 0)
      offset = 0;
    if (len === void 0)
      len = buffer.length - offset | 0;
    return callback$default ? callback$default(buffer, offset, len) : this.read_mj6st8$$default(buffer, offset, len);
  };
  SyncInputStream.prototype.read = function () {
    var $receiver = get_smallBytesPool();
    var alloc2$result;
    var temp = $receiver.alloc();
    try {
      alloc2$result = this.read_mj6st8$(temp, 0, 1) > 0 ? temp[0] & 255 : -1;
    }finally {
      $receiver.free_11rb$(temp);
    }
    return alloc2$result;
  };
  SyncInputStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'SyncInputStream',
    interfaces: [OptionalCloseable]
  };
  function SyncOutputStream() {
  }
  SyncOutputStream.prototype.write_mj6st8$ = function (buffer, offset, len, callback$default) {
    if (offset === void 0)
      offset = 0;
    if (len === void 0)
      len = buffer.length - offset | 0;
    callback$default ? callback$default(buffer, offset, len) : this.write_mj6st8$$default(buffer, offset, len);
  };
  SyncOutputStream.prototype.write_za3lpa$ = function (byte) {
    var $receiver = get_smallBytesPool();
    var temp = $receiver.alloc();
    try {
      temp[0] = toByte(byte);
      this.write_mj6st8$(temp, 0, 1);
    }finally {
      $receiver.free_11rb$(temp);
    }
  };
  SyncOutputStream.prototype.flush = function () {
  };
  SyncOutputStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'SyncOutputStream',
    interfaces: [OptionalCloseable]
  };
  function SyncPositionStream() {
  }
  SyncPositionStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'SyncPositionStream',
    interfaces: []
  };
  function SyncLengthStream() {
  }
  SyncLengthStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'SyncLengthStream',
    interfaces: []
  };
  function SyncRAInputStream() {
  }
  SyncRAInputStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'SyncRAInputStream',
    interfaces: []
  };
  function SyncRAOutputStream() {
  }
  SyncRAOutputStream.prototype.flush = function () {
  };
  SyncRAOutputStream.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'SyncRAOutputStream',
    interfaces: []
  };
  function SyncStreamBase() {
    this.smallTemp = new Int8Array(16);
  }
  SyncStreamBase.prototype.read_s8cxhz$ = function (position) {
    return this.read_4m9kcn$(position, this.smallTemp, 0, 1) >= 1 ? this.smallTemp[0] & 255 : -1;
  };
  SyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len) {
    return unsupported_0();
  };
  SyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len) {
    unsupported_0();
  };
  Object.defineProperty(SyncStreamBase.prototype, 'length', {
    get: function () {
      return unsupported_0();
    },
    set: function (f) {
      unsupported_0();
    }
  });
  SyncStreamBase.prototype.close = function () {
  };
  SyncStreamBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SyncStreamBase',
    interfaces: [SyncLengthStream, SyncRAOutputStream, SyncRAInputStream, Closeable]
  };
  function SyncStream(base, position) {
    if (position === void 0)
      position = L0;
    this.base = base;
    this.position_p67izg$_0 = position;
    this.$delegate_39qel5$_0 = new Extra$Mixin();
    this.smallTemp_0 = this.base.smallTemp;
  }
  Object.defineProperty(SyncStream.prototype, 'position', {
    get: function () {
      return this.position_p67izg$_0;
    },
    set: function (position) {
      this.position_p67izg$_0 = position;
    }
  });
  SyncStream.prototype.read_mj6st8$$default = function (buffer, offset, len) {
    var read = this.base.read_4m9kcn$(this.position, buffer, offset, len);
    this.position = this.position.add(Kotlin.Long.fromInt(read));
    return read;
  };
  SyncStream.prototype.read = function () {
    var size = this.read_mj6st8$(this.smallTemp_0, 0, 1);
    if (size <= 0)
      return -1;
    return this.smallTemp_0[0] & 255;
  };
  SyncStream.prototype.write_mj6st8$$default = function (buffer, offset, len) {
    this.base.write_4m9kcn$(this.position, buffer, offset, len);
    this.position = this.position.add(Kotlin.Long.fromInt(len));
  };
  SyncStream.prototype.write_za3lpa$ = function (byte) {
    this.smallTemp_0[0] = toByte(byte);
    this.write_mj6st8$(this.smallTemp_0, 0, 1);
  };
  Object.defineProperty(SyncStream.prototype, 'length', {
    get: function () {
      return this.base.length;
    },
    set: function (value) {
      this.base.length = value;
    }
  });
  Object.defineProperty(SyncStream.prototype, 'available', {
    get: function () {
      return this.length.subtract(this.position);
    }
  });
  SyncStream.prototype.flush = function () {
    this.base.flush();
  };
  SyncStream.prototype.close = function () {
    this.base.close();
  };
  SyncStream.prototype.clone = function () {
    return new SyncStream(this.base, this.position);
  };
  SyncStream.prototype.toString = function () {
    return 'SyncStream(' + this.base + ', ' + this.position.toString() + ')';
  };
  Object.defineProperty(SyncStream.prototype, 'extra', {
    get: function () {
      return this.$delegate_39qel5$_0.extra;
    },
    set: function (tmp$) {
      this.$delegate_39qel5$_0.extra = tmp$;
    }
  });
  SyncStream.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SyncStream',
    interfaces: [SyncLengthStream, SyncOutputStream, SyncPositionStream, SyncInputStream, Closeable, Extra]
  };
  var keepPosition_0 = defineInlineFunction('korio-root-korio.com.soywiz.korio.stream.keepPosition_1v0ofm$', function ($receiver, callback) {
    var old = $receiver.position;
    try {
      return callback();
    }finally {
      $receiver.position = old;
    }
  });
  function SliceSyncStreamBase(base, baseStart, baseEnd) {
    SyncStreamBase.call(this);
    this.base_8be2vx$ = base;
    this.baseStart_8be2vx$ = baseStart;
    this.baseEnd_8be2vx$ = baseEnd;
    this.baseLength_8be2vx$ = this.baseEnd_8be2vx$.subtract(this.baseStart_8be2vx$);
  }
  Object.defineProperty(SliceSyncStreamBase.prototype, 'length', {
    get: function () {
      return this.baseLength_8be2vx$;
    },
    set: function (value) {
      throw UnsupportedOperationException_init();
    }
  });
  SliceSyncStreamBase.prototype.clampPosition_0 = function (position) {
    return clamp_0(position, this.baseStart_8be2vx$, this.baseEnd_8be2vx$);
  };
  SliceSyncStreamBase.prototype.clampPositionLen_0 = function (position, len) {
    if (position.compareTo_11rb$(L0) < 0)
      throw IllegalArgumentException_init('Invalid position');
    var targetStartPosition = this.clampPosition_0(this.baseStart_8be2vx$.add(position));
    var targetEndPosition = this.clampPosition_0(targetStartPosition.add(Kotlin.Long.fromInt(len)));
    var targetLen = targetEndPosition.subtract(targetStartPosition).toInt();
    return new Pair(targetStartPosition, targetLen);
  };
  SliceSyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len) {
    var tmp$ = this.clampPositionLen_0(position, len);
    var targetStartPosition = tmp$.component1()
    , targetLen = tmp$.component2();
    return this.base_8be2vx$.read_4m9kcn$(targetStartPosition, buffer, offset, targetLen);
  };
  SliceSyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len) {
    var tmp$ = this.clampPositionLen_0(position, len);
    var targetStartPosition = tmp$.component1()
    , targetLen = tmp$.component2();
    return this.base_8be2vx$.write_4m9kcn$(targetStartPosition, buffer, offset, targetLen);
  };
  SliceSyncStreamBase.prototype.close = function () {
  };
  SliceSyncStreamBase.prototype.toString = function () {
    return 'SliceAsyncStreamBase(' + this.base_8be2vx$ + ', ' + this.baseStart_8be2vx$.toString() + ', ' + this.baseEnd_8be2vx$.toString() + ')';
  };
  SliceSyncStreamBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SliceSyncStreamBase',
    interfaces: [SyncStreamBase]
  };
  function FillSyncStreamBase(fill, length) {
    SyncStreamBase.call(this);
    this.fill = fill;
    this.length_9bjrn1$_0 = length;
  }
  Object.defineProperty(FillSyncStreamBase.prototype, 'length', {
    get: function () {
      return this.length_9bjrn1$_0;
    },
    set: function (length) {
      this.length_9bjrn1$_0 = length;
    }
  });
  FillSyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len) {
    var a = this.length;
    var b = position.add(Kotlin.Long.fromInt(len));
    var end = a.compareTo_11rb$(b) <= 0 ? a : b;
    var actualLen = toIntSafe(end.subtract(position));
    arrayfill_0(buffer, this.fill, offset, offset + actualLen | 0);
    return actualLen;
  };
  FillSyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len) {
  };
  FillSyncStreamBase.prototype.close = function () {
  };
  FillSyncStreamBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FillSyncStreamBase',
    interfaces: [SyncStreamBase]
  };
  function FillSyncStream(fillByte, length) {
    if (fillByte === void 0)
      fillByte = 0;
    if (length === void 0)
      length = Long$Companion$MAX_VALUE;
    return toSyncStream(new FillSyncStreamBase(toByte(fillByte), length));
  }
  function MemorySyncStream(data) {
    if (data === void 0)
      data = EMPTY_BYTE_ARRAY;
    return toSyncStream(new MemorySyncStreamBase(new ByteArrayBuilder(data)));
  }
  function MemorySyncStream_0(data) {
    return toSyncStream(new MemorySyncStreamBase(data));
  }
  var MemorySyncStreamToByteArray = defineInlineFunction('korio-root-korio.com.soywiz.korio.stream.MemorySyncStreamToByteArray_l6bp58$', wrapFunction(function () {
    var ByteArrayBuilder_init = _.$$importsForInline$$['kmem-root-kmem'].com.soywiz.kmem.ByteArrayBuilder_init_za3lpa$;
    var MemorySyncStream = _.com.soywiz.korio.stream.MemorySyncStream_i9anm0$;
    return function (initialCapacity, callback) {
      if (initialCapacity === void 0)
        initialCapacity = 4096;
      var buffer = ByteArrayBuilder_init(initialCapacity);
      var s = MemorySyncStream(buffer);
      callback(s);
      return buffer.toByteArray();
    };
  }));
  function get_hasLength($receiver) {
    try {
      $receiver.length;
      return true;
    } catch (e) {
      if (Kotlin.isType(e, Throwable)) {
        return false;
      } else
        throw e;
    }
  }
  function get_hasAvailable($receiver) {
    try {
      $receiver.available;
      return true;
    } catch (e) {
      if (Kotlin.isType(e, Throwable)) {
        return false;
      } else
        throw e;
    }
  }
  function toByteArray_0($receiver) {
    if (get_hasLength($receiver)) {
      return readAll_0(sliceWithBounds_0($receiver, L0, $receiver.length));
    } else {
      return readAll_0($receiver.clone());
    }
  }
  function MemorySyncStreamBase(data) {
    SyncStreamBase.call(this);
    this.data = data;
  }
  Object.defineProperty(MemorySyncStreamBase.prototype, 'ilength', {
    get: function () {
      return this.data.size;
    },
    set: function (value) {
      this.data.size = value;
    }
  });
  Object.defineProperty(MemorySyncStreamBase.prototype, 'length', {
    get: function () {
      return Kotlin.Long.fromInt(this.data.size);
    },
    set: function (value) {
      this.data.size = value.toInt();
    }
  });
  MemorySyncStreamBase.prototype.checkPosition_s8cxhz$ = function (position) {
    if (position.toNumber() < 0)
      invalidOp('Invalid position ' + position.toString());
  };
  MemorySyncStreamBase.prototype.read_4m9kcn$ = function (position, buffer, offset, len) {
    this.checkPosition_s8cxhz$(position);
    var ipos = position.toInt();
    if (!contains_2(until(0, this.ilength), position))
      return 0;
    var a = this.ilength;
    var b = ipos + len | 0;
    var end = Math_0.min(a, b);
    var a_0 = end - ipos | 0;
    var actualLen = Math_0.max(a_0, 0);
    arrayCopy(this.data.data, buffer, offset, ipos, ipos + actualLen | 0);
    return actualLen;
  };
  MemorySyncStreamBase.prototype.write_4m9kcn$ = function (position, buffer, offset, len) {
    this.checkPosition_s8cxhz$(position);
    var tmp$ = this.data;
    var a = this.data.size;
    var b = position.add(Kotlin.Long.fromInt(len)).toInt();
    tmp$.size = Math_0.max(a, b);
    arrayCopy(buffer, this.data.data, position.toInt(), offset, offset + len | 0);
  };
  MemorySyncStreamBase.prototype.close = function () {
  };
  MemorySyncStreamBase.prototype.toString = function () {
    return 'MemorySyncStreamBase(' + this.data.size + ')';
  };
  MemorySyncStreamBase.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'MemorySyncStreamBase',
    interfaces: [SyncStreamBase]
  };
  function MemorySyncStreamBase_init(initialCapacity, $this) {
    if (initialCapacity === void 0)
      initialCapacity = 4096;
    $this = $this || Object.create(MemorySyncStreamBase.prototype);
    MemorySyncStreamBase.call($this, ByteArrayBuilder_init(initialCapacity));
    return $this;
  }
  function sliceStart_0($receiver, start) {
    if (start === void 0)
      start = L0;
    return sliceWithBounds_0($receiver, start, $receiver.length);
  }
  function sliceHere_0($receiver) {
    return new SyncStream(new SliceSyncStreamBase($receiver.base, $receiver.position, $receiver.length));
  }
  function slice_2($receiver, range) {
    return sliceWithBounds_0($receiver, Kotlin.Long.fromInt(range.start), Kotlin.Long.fromInt(range.endInclusive).add(Kotlin.Long.fromInt(1)));
  }
  function slice_3($receiver, range) {
    return sliceWithBounds_0($receiver, range.start, range.endInclusive.add(Kotlin.Long.fromInt(1)));
  }
  function sliceWithBounds_0($receiver, start, end) {
    var len = $receiver.length;
    var clampedStart = clamp_0(start, L0, len);
    var clampedEnd = clamp_0(end, L0, len);
    if (Kotlin.isType($receiver.base, SliceSyncStreamBase)) {
      return toSyncStream(new SliceSyncStreamBase($receiver.base.base_8be2vx$, $receiver.base.baseStart_8be2vx$.add(clampedStart), $receiver.base.baseStart_8be2vx$.add(clampedEnd)));
    } else {
      return toSyncStream(new SliceSyncStreamBase($receiver.base, clampedStart, clampedEnd));
    }
  }
  function sliceWithSize_1($receiver, position, length) {
    return sliceWithBounds_0($receiver, position, position.add(length));
  }
  function sliceWithSize_2($receiver, position, length) {
    return sliceWithBounds_0($receiver, Kotlin.Long.fromInt(position), Kotlin.Long.fromInt(position + length | 0));
  }
  function readSlice_0($receiver, length) {
    var $receiver_0 = sliceWithSize_1($receiver, $receiver.position, length);
    $receiver.position = $receiver.position.add(length);
    return $receiver_0;
  }
  function readStream_1($receiver, length) {
    return readSlice_0($receiver, Kotlin.Long.fromInt(length));
  }
  function readStream_2($receiver, length) {
    return readSlice_0($receiver, length);
  }
  function readStringz_3($receiver, charset) {
    if (charset === void 0)
      charset = UTF8;
    var buf = ByteArrayBuilder_init();
    var $receiver_0 = get_bytesTempPool();
    var alloc2$result;
    var temp = $receiver_0.alloc();
    try {
      while (true) {
        var read = $receiver.read_mj6st8$(temp, 0, 1);
        if (read <= 0)
          break;
        if (temp[0] === toByte(0))
          break;
        buf.append_s8j3t7$(temp[0]);
      }
      alloc2$result = toString_2(buf.toByteArray(), charset);
    }finally {
      $receiver_0.free_11rb$(temp);
    }
    return alloc2$result;
  }
  function readStringz_4($receiver, len, charset) {
    if (charset === void 0)
      charset = UTF8;
    var res = readBytes_0($receiver, len);
    var index = indexOf_1(res, toByte(0));
    return toString_2(copyOf(res, index < 0 ? len : index), charset);
  }
  function readString_2($receiver, len, charset) {
    if (charset === void 0)
      charset = UTF8;
    return toString_2(readBytes_0($receiver, len), charset);
  }
  function writeString_0($receiver, string, charset) {
    if (charset === void 0)
      charset = UTF8;
    writeBytes_1($receiver, toByteArray(string, charset));
  }
  function readExact_0($receiver, out, offset, len) {
    var ooffset = offset;
    var remaining = len;
    while (remaining > 0) {
      var read = $receiver.read_mj6st8$(out, ooffset, remaining);
      if (read <= 0) {
        throw RuntimeException_init('EOF');
      }remaining = remaining - read | 0;
      ooffset = ooffset + read | 0;
    }
  }
  function read_1($receiver, data) {
    return $receiver.read_mj6st8$(data, 0, data.length);
  }
  function read_2($receiver, data) {
    return $receiver.read_mj6st8$(data.storage, 0, data.size);
  }
  function readBytesExact_0($receiver, len) {
    var $receiver_0 = new Int8Array(len);
    readExact_0($receiver, $receiver_0, 0, len);
    return $receiver_0;
  }
  function writeStringz_1($receiver, str, charset) {
    if (charset === void 0)
      charset = UTF8;
    writeBytes_1($receiver, toBytez_0(str, charset));
  }
  function writeStringz_2($receiver, str, len, charset) {
    if (charset === void 0)
      charset = UTF8;
    writeBytes_1($receiver, toBytez(str, len, charset));
  }
  function readBytes_0($receiver, len) {
    var bytes = new Int8Array(len);
    return copyOf(bytes, $receiver.read_mj6st8$(bytes, 0, len));
  }
  function writeBytes_1($receiver, data) {
    $receiver.write_mj6st8$(data, 0, data.length);
  }
  function writeBytes_2($receiver, data, position, length) {
    $receiver.write_mj6st8$(data, position, length);
  }
  function get_eof($receiver) {
    return $receiver.available.compareTo_11rb$(L0) <= 0;
  }
  function readU8_1($receiver) {
    return $receiver.read();
  }
  function readS8_1($receiver) {
    return toByte($receiver.read());
  }
  function readU16LE_1($receiver) {
    return readU8_1($receiver) | readU8_1($receiver) << 8;
  }
  function readU24LE_1($receiver) {
    return readU8_1($receiver) | readU8_1($receiver) << 8 | readU8_1($receiver) << 16;
  }
  function readU32LE_1($receiver) {
    return Kotlin.Long.fromInt(readU8_1($receiver) | readU8_1($receiver) << 8 | readU8_1($receiver) << 16 | readU8_1($receiver) << 24).and(L4294967295);
  }
  function readS16LE_1($receiver) {
    return signExtend(readU16LE_1($receiver), 16);
  }
  function readS24LE_1($receiver) {
    return signExtend(readU24LE_1($receiver), 24);
  }
  function readS32LE_1($receiver) {
    return readU8_1($receiver) | readU8_1($receiver) << 8 | readU8_1($receiver) << 16 | readU8_1($receiver) << 24;
  }
  function readS64LE_1($receiver) {
    return readU32LE_1($receiver).or(readU32LE_1($receiver).shiftLeft(32));
  }
  function readF32LE_1($receiver) {
    var $receiver_0 = readS32LE_1($receiver);
    return Kotlin.floatFromBits($receiver_0);
  }
  function readF64LE_1($receiver) {
    var $receiver_0 = readS64LE_1($receiver);
    return Kotlin.doubleFromBits($receiver_0);
  }
  function readU16BE_1($receiver) {
    return readU8_1($receiver) << 8 | readU8_1($receiver);
  }
  function readU24BE_1($receiver) {
    return readU8_1($receiver) << 16 | readU8_1($receiver) << 8 | readU8_1($receiver);
  }
  function readU32BE_1($receiver) {
    return Kotlin.Long.fromInt(readU8_1($receiver) << 24 | readU8_1($receiver) << 16 | readU8_1($receiver) << 8 | readU8_1($receiver)).and(L4294967295);
  }
  function readS16BE_1($receiver) {
    return signExtend(readU16BE_1($receiver), 16);
  }
  function readS24BE_1($receiver) {
    return signExtend(readU24BE_1($receiver), 24);
  }
  function readS32BE_1($receiver) {
    return readU8_1($receiver) << 24 | readU8_1($receiver) << 16 | readU8_1($receiver) << 8 | readU8_1($receiver);
  }
  function readS64BE_1($receiver) {
    return readU32BE_1($receiver).shiftLeft(32).or(readU32BE_1($receiver));
  }
  function readF32BE_1($receiver) {
    var $receiver_0 = readS32BE_1($receiver);
    return Kotlin.floatFromBits($receiver_0);
  }
  function readF64BE_1($receiver) {
    var $receiver_0 = readS64BE_1($receiver);
    return Kotlin.doubleFromBits($receiver_0);
  }
  function readAvailable_0($receiver) {
    return readBytes_0($receiver, $receiver.available.toInt());
  }
  function readAll_0($receiver) {
    return readBytes_0($receiver, $receiver.available.toInt());
  }
  function readUByteArray_0($receiver, count) {
    return new UByteArray_init(readBytesExact_0($receiver, count));
  }
  function readShortArrayLE_1($receiver, count) {
    return readShortArrayLE(readBytesExact_0($receiver, count * 2 | 0), 0, count);
  }
  function readShortArrayBE_1($receiver, count) {
    return readShortArrayBE(readBytesExact_0($receiver, count * 2 | 0), 0, count);
  }
  function readCharArrayLE_1($receiver, count) {
    return readCharArrayLE(readBytesExact_0($receiver, count * 2 | 0), 0, count);
  }
  function readCharArrayBE_1($receiver, count) {
    return readCharArrayBE(readBytesExact_0($receiver, count * 2 | 0), 0, count);
  }
  function readIntArrayLE_1($receiver, count) {
    return readIntArrayLE(readBytesExact_0($receiver, count * 4 | 0), 0, count);
  }
  function readIntArrayBE_1($receiver, count) {
    return readIntArrayBE(readBytesExact_0($receiver, count * 4 | 0), 0, count);
  }
  function readLongArrayLE_1($receiver, count) {
    return readLongArrayLE(readBytesExact_0($receiver, count * 8 | 0), 0, count);
  }
  function readLongArrayBE_1($receiver, count) {
    return readLongArrayBE(readBytesExact_0($receiver, count * 8 | 0), 0, count);
  }
  function readFloatArrayLE_1($receiver, count) {
    return readFloatArrayLE(readBytesExact_0($receiver, count * 4 | 0), 0, count);
  }
  function readFloatArrayBE_1($receiver, count) {
    return readFloatArrayBE(readBytesExact_0($receiver, count * 4 | 0), 0, count);
  }
  function readDoubleArrayLE_1($receiver, count) {
    return readDoubleArrayLE(readBytesExact_0($receiver, count * 8 | 0), 0, count);
  }
  function readDoubleArrayBE_1($receiver, count) {
    return readDoubleArrayBE(readBytesExact_0($receiver, count * 8 | 0), 0, count);
  }
  function write8_0($receiver, v) {
    $receiver.write_za3lpa$(v);
  }
  function write16LE_1($receiver, v) {
    write8_0($receiver, v & 255);
    write8_0($receiver, v >>> 8 & 255);
  }
  function write24LE_1($receiver, v) {
    write8_0($receiver, v & 255);
    write8_0($receiver, v >>> 8 & 255);
    write8_0($receiver, v >>> 16 & 255);
  }
  function write32LE_3($receiver, v) {
    write8_0($receiver, v & 255);
    write8_0($receiver, v >>> 8 & 255);
    write8_0($receiver, v >>> 16 & 255);
    write8_0($receiver, v >>> 24 & 255);
  }
  function write32LE_4($receiver, v) {
    write32LE_3($receiver, v.toInt());
  }
  function write64LE_1($receiver, v) {
    write32LE_3($receiver, v.toInt());
    write32LE_3($receiver, v.shiftRightUnsigned(32).toInt());
  }
  function writeF32LE_1($receiver, v) {
    write32LE_3($receiver, toBits(v));
  }
  function writeF64LE_1($receiver, v) {
    write64LE_1($receiver, toBits_0(v));
  }
  function write16BE_1($receiver, v) {
    write8_0($receiver, v >>> 8 & 255);
    write8_0($receiver, v & 255);
  }
  function write24BE_1($receiver, v) {
    write8_0($receiver, v >>> 16 & 255);
    write8_0($receiver, v >>> 8 & 255);
    write8_0($receiver, v & 255);
  }
  function write32BE_3($receiver, v) {
    write8_0($receiver, v >>> 24 & 255);
    write8_0($receiver, v >>> 16 & 255);
    write8_0($receiver, v >>> 8 & 255);
    write8_0($receiver, v & 255);
  }
  function write32BE_4($receiver, v) {
    write32BE_3($receiver, v.toInt());
  }
  function write64BE_1($receiver, v) {
    write32BE_3($receiver, v.shiftRightUnsigned(32).toInt());
    write32BE_3($receiver, v.toInt());
  }
  function writeF32BE_1($receiver, v) {
    write32BE_3($receiver, toBits(v));
  }
  function writeF64BE_1($receiver, v) {
    write64BE_1($receiver, toBits_0(v));
  }
  function toSyncStream($receiver, position) {
    if (position === void 0)
      position = L0;
    return new SyncStream($receiver, position);
  }
  function openSync($receiver, mode) {
    if (mode === void 0)
      mode = 'r';
    return toSyncStream(new MemorySyncStreamBase(new ByteArrayBuilder($receiver)), L0);
  }
  function openAsync($receiver, mode) {
    if (mode === void 0)
      mode = 'r';
    return toAsyncStream_0(new MemoryAsyncStreamBase(new ByteArrayBuilder($receiver, void 0, true)), L0);
  }
  function openSync_0($receiver, charset) {
    if (charset === void 0)
      charset = UTF8;
    return openSync(toByteArray($receiver, charset), 'r');
  }
  function openAsync_0($receiver, charset) {
    if (charset === void 0)
      charset = UTF8;
    return toAsync(openSync(toByteArray($receiver, charset), 'r'));
  }
  function writeStream_0($receiver, source) {
    copyTo_0(source, $receiver);
  }
  function copyTo_0($receiver, target) {
    var $receiver_0 = get_bytesTempPool();
    var temp = $receiver_0.alloc();
    try {
      while (true) {
        var count = $receiver.read_mj6st8$(temp);
        if (count <= 0)
          break;
        target.write_mj6st8$(temp, 0, count);
      }
    }finally {
      $receiver_0.free_11rb$(temp);
    }
  }
  function writeToAlign_0($receiver, alignment, value) {
    if (value === void 0)
      value = 0;
    var nextPosition = nextAlignedTo($receiver.position, Kotlin.Long.fromInt(alignment));
    var data = new Int8Array(nextPosition.subtract($receiver.position).toInt());
    arrayfill_0(data, toByte(value), 0, data.length);
    writeBytes_1($receiver, data);
  }
  function skip_1($receiver, count) {
    $receiver.position = $receiver.position.add(Kotlin.Long.fromInt(count));
    return $receiver;
  }
  function skipToAlign_0($receiver, alignment) {
    var nextPosition = nextAlignedTo($receiver.position, Kotlin.Long.fromInt(alignment));
    readBytes_0($receiver, nextPosition.subtract($receiver.position).toInt());
  }
  function truncate_0($receiver) {
    $receiver.length = $receiver.position;
  }
  function writeCharArrayLE_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArrayLE($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeShortArrayLE_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArrayLE_0($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeIntArrayLE_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArrayLE_1($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeLongArrayLE_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArrayLE_2($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeFloatArrayLE_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArrayLE_3($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeDoubleArrayLE_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArrayLE_4($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeCharArrayBE_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArrayBE($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeShortArrayBE_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 2 | 0);
    writeArrayBE_0($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeIntArrayBE_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArrayBE_1($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeLongArrayBE_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArrayBE_2($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeFloatArrayBE_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 4 | 0);
    writeArrayBE_3($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function writeDoubleArrayBE_0($receiver, array) {
    var $receiver_0 = new Int8Array(array.length * 8 | 0);
    writeArrayBE_4($receiver_0, 0, array);
    writeBytes_1($receiver, $receiver_0);
  }
  function readU_VL($receiver) {
    var result = readU8_1($receiver);
    if ((result & 128) === 0)
      return result;
    result = result & 127 | readU8_1($receiver) << 7;
    if ((result & 16384) === 0)
      return result;
    result = result & 16383 | readU8_1($receiver) << 14;
    if ((result & 2097152) === 0)
      return result;
    result = result & 2097151 | readU8_1($receiver) << 21;
    if ((result & 268435456) === 0)
      return result;
    result = result & 268435455 | readU8_1($receiver) << 28;
    return result;
  }
  function readS_VL($receiver) {
    var v = readU_VL($receiver);
    var sign = (v & 1) !== 0;
    var uvalue = v >>> 1;
    return sign ? (-uvalue | 0) - 1 | 0 : uvalue;
  }
  function writeU_VL_0($receiver, v) {
    var value = v;
    while (true) {
      var c = value & 127;
      value = value >>> 7;
      if (value === 0) {
        write8_0($receiver, c);
        break;
      }write8_0($receiver, c | 128);
    }
  }
  function writeS_VL($receiver, v) {
    var sign = v < 0 ? 1 : 0;
    writeU_VL_0($receiver, sign | (v < 0 ? (-v | 0) - 1 | 0 : v) << 1);
  }
  function writeStringVL_0($receiver, str, charset) {
    if (charset === void 0)
      charset = UTF8;
    var bytes = toByteArray(str, charset);
    writeU_VL_0($receiver, bytes.length);
    writeBytes_1($receiver, bytes);
  }
  function readStringVL($receiver, charset) {
    if (charset === void 0)
      charset = UTF8;
    var bytes = new Int8Array(readU_VL($receiver));
    readExact_0($receiver, bytes, 0, bytes.length);
    return toString_2(bytes, charset);
  }
  function readExactTo($receiver, buffer, offset, length) {
    if (offset === void 0)
      offset = 0;
    if (length === void 0)
      length = buffer.length - offset | 0;
    var end = offset + length | 0;
    var pos = offset;
    while (true) {
      var read = $receiver.read_mj6st8$(buffer, pos, end - pos | 0);
      if (read <= 0)
        break;
      pos = pos + read | 0;
    }
    return pos - offset | 0;
  }
  var buildList = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.buildList_d20xj0$', wrapFunction(function () {
    var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_287e2$;
    return function (callback) {
      var $receiver = ArrayList_init();
      callback($receiver);
      return $receiver;
    };
  }));
  var arraycopy$lambda_3 = wrapFunction(function () {
    var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
    return function (closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$size) {
      return function () {
        arrayCopy(closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$srcPos + closure$size | 0);
        return Unit;
      };
    };
  });
  var arraycopy$lambda_4 = wrapFunction(function () {
    var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
    return function (closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$size) {
      return function () {
        arrayCopy(closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$srcPos + closure$size | 0);
        return Unit;
      };
    };
  });
  var arraycopy$lambda_5 = wrapFunction(function () {
    var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
    return function (closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$size) {
      return function () {
        arrayCopy(closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$srcPos + closure$size | 0);
        return Unit;
      };
    };
  });
  var arraycopy$lambda_6 = wrapFunction(function () {
    var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
    return function (closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$size) {
      return function () {
        arrayCopy(closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$srcPos + closure$size | 0);
        return Unit;
      };
    };
  });
  var arraycopy$lambda_7 = wrapFunction(function () {
    var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
    return function (closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$size) {
      return function () {
        arrayCopy(closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$srcPos + closure$size | 0);
        return Unit;
      };
    };
  });
  var arraycopy$lambda_8 = wrapFunction(function () {
    var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
    return function (closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$size) {
      return function () {
        arrayCopy(closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$srcPos + closure$size | 0);
        return Unit;
      };
    };
  });
  var arraycopy$lambda_9 = wrapFunction(function () {
    var arrayCopy = Kotlin.kotlin.collections.arrayCopy;
    return function (closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$size) {
      return function () {
        arrayCopy(closure$src, closure$dst, closure$dstPos, closure$srcPos, closure$srcPos + closure$size | 0);
        return Unit;
      };
    };
  });
  var set_0 = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.set_ietg8x$', wrapFunction(function () {
    var toByte = Kotlin.toByte;
    return function ($receiver, o, v) {
      $receiver[o] = toByte(v);
    };
  }));
  var set_1 = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.set_2iihii$', wrapFunction(function () {
    var toByte = Kotlin.toByte;
    return function ($receiver, o, v) {
      $receiver[o] = toByte(v.toInt());
    };
  }));
  function _join(items, build, size, arraycopy) {
    var tmp$;
    var sum = 0;
    tmp$ = items.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum = sum + size(element) | 0;
    }
    var out = build(sum);
    var pos = {v: 0};
    var tmp$_0;
    var n = 0;
    while (n < items.size) {
      var c = items.get_za3lpa$((tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0));
      arraycopy(c, 0, out, pos.v, size(c));
      pos.v = pos.v + size(c) | 0;
    }
    return out;
  }
  function join($receiver) {
    var tmp$;
    var sum = 0;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum = sum + element.length | 0;
    }
    var out = Kotlin.booleanArray(sum);
    var pos = {v: 0};
    var tmp$_0;
    var n = 0;
    while (n < $receiver.size) {
      var c = $receiver.get_za3lpa$((tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0));
      arrayCopy(c, out, pos.v, 0, 0 + c.length | 0);
      pos.v = pos.v + c.length | 0;
    }
    return out;
  }
  function join_0($receiver) {
    var tmp$;
    var sum = 0;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum = sum + element.length | 0;
    }
    var it = sum;
    var out = new Int8Array(it);
    var pos = {v: 0};
    var tmp$_0;
    var n = 0;
    while (n < $receiver.size) {
      var c = $receiver.get_za3lpa$((tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0));
      arrayCopy(c, out, pos.v, 0, 0 + c.length | 0);
      pos.v = pos.v + c.length | 0;
    }
    return out;
  }
  function join_1($receiver) {
    var tmp$;
    var sum = 0;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum = sum + element.length | 0;
    }
    var it = sum;
    var out = new Int16Array(it);
    var pos = {v: 0};
    var tmp$_0;
    var n = 0;
    while (n < $receiver.size) {
      var c = $receiver.get_za3lpa$((tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0));
      arrayCopy(c, out, pos.v, 0, 0 + c.length | 0);
      pos.v = pos.v + c.length | 0;
    }
    return out;
  }
  function join_2($receiver) {
    var tmp$;
    var sum = 0;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum = sum + element.length | 0;
    }
    var it = sum;
    var out = new Int32Array(it);
    var pos = {v: 0};
    var tmp$_0;
    var n = 0;
    while (n < $receiver.size) {
      var c = $receiver.get_za3lpa$((tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0));
      arrayCopy(c, out, pos.v, 0, 0 + c.length | 0);
      pos.v = pos.v + c.length | 0;
    }
    return out;
  }
  function join_3($receiver) {
    var tmp$;
    var sum = 0;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum = sum + element.length | 0;
    }
    var out = Kotlin.longArray(sum);
    var pos = {v: 0};
    var tmp$_0;
    var n = 0;
    while (n < $receiver.size) {
      var c = $receiver.get_za3lpa$((tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0));
      arrayCopy(c, out, pos.v, 0, 0 + c.length | 0);
      pos.v = pos.v + c.length | 0;
    }
    return out;
  }
  function join_4($receiver) {
    var tmp$;
    var sum = 0;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum = sum + element.length | 0;
    }
    var it = sum;
    var out = new Float32Array(it);
    var pos = {v: 0};
    var tmp$_0;
    var n = 0;
    while (n < $receiver.size) {
      var c = $receiver.get_za3lpa$((tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0));
      arrayCopy(c, out, pos.v, 0, 0 + c.length | 0);
      pos.v = pos.v + c.length | 0;
    }
    return out;
  }
  function join_5($receiver) {
    var tmp$;
    var sum = 0;
    tmp$ = $receiver.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      sum = sum + element.length | 0;
    }
    var it = sum;
    var out = new Float64Array(it);
    var pos = {v: 0};
    var tmp$_0;
    var n = 0;
    while (n < $receiver.size) {
      var c = $receiver.get_za3lpa$((tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0));
      arrayCopy(c, out, pos.v, 0, 0 + c.length | 0);
      pos.v = pos.v + c.length | 0;
    }
    return out;
  }
  function _indexOf(array, access, v, startOffset, endOffset, default_0) {
    for (var n = startOffset; n < endOffset; n++)
      if (equals(access(array, n), v))
        return n;
    return default_0;
  }
  function indexOf_3($receiver, v, startOffset, endOffset, default_0) {
    if (startOffset === void 0)
      startOffset = 0;
    if (endOffset === void 0)
      endOffset = $receiver.length;
    if (default_0 === void 0)
      default_0 = -1;
    var _indexOf$result;
    _indexOf$break: do {
      for (var n = startOffset; n < endOffset; n++) {
        if (equals($receiver[n], v)) {
          _indexOf$result = n;
          break _indexOf$break;
        }}
      _indexOf$result = default_0;
    }
     while (false);
    return _indexOf$result;
  }
  function indexOf_4($receiver, v, startOffset, endOffset, default_0) {
    if (startOffset === void 0)
      startOffset = 0;
    if (endOffset === void 0)
      endOffset = $receiver.length;
    if (default_0 === void 0)
      default_0 = -1;
    var _indexOf$result;
    _indexOf$break: do {
      for (var n = startOffset; n < endOffset; n++) {
        if (equals($receiver[n], v)) {
          _indexOf$result = n;
          break _indexOf$break;
        }}
      _indexOf$result = default_0;
    }
     while (false);
    return _indexOf$result;
  }
  function indexOf_5($receiver, v, startOffset, endOffset, default_0) {
    if (startOffset === void 0)
      startOffset = 0;
    if (endOffset === void 0)
      endOffset = $receiver.length;
    if (default_0 === void 0)
      default_0 = -1;
    var _indexOf$result;
    _indexOf$break: do {
      for (var n = startOffset; n < endOffset; n++) {
        if (equals($receiver[n], v)) {
          _indexOf$result = n;
          break _indexOf$break;
        }}
      _indexOf$result = default_0;
    }
     while (false);
    return _indexOf$result;
  }
  function indexOf_6($receiver, v, startOffset, endOffset, default_0) {
    if (startOffset === void 0)
      startOffset = 0;
    if (endOffset === void 0)
      endOffset = $receiver.length;
    if (default_0 === void 0)
      default_0 = -1;
    var _indexOf$result;
    _indexOf$break: do {
      for (var n = startOffset; n < endOffset; n++) {
        if (equals($receiver[n], v)) {
          _indexOf$result = n;
          break _indexOf$break;
        }}
      _indexOf$result = default_0;
    }
     while (false);
    return _indexOf$result;
  }
  function indexOf_7($receiver, v, startOffset, endOffset, default_0) {
    if (startOffset === void 0)
      startOffset = 0;
    if (endOffset === void 0)
      endOffset = $receiver.length;
    if (default_0 === void 0)
      default_0 = -1;
    var _indexOf$result;
    _indexOf$break: do {
      for (var n = startOffset; n < endOffset; n++) {
        if (equals($receiver[n], v)) {
          _indexOf$result = n;
          break _indexOf$break;
        }}
      _indexOf$result = default_0;
    }
     while (false);
    return _indexOf$result;
  }
  function indexOf_8($receiver, v, startOffset, endOffset, default_0) {
    if (startOffset === void 0)
      startOffset = 0;
    if (endOffset === void 0)
      endOffset = $receiver.length;
    if (default_0 === void 0)
      default_0 = -1;
    var _indexOf$result;
    _indexOf$break: do {
      for (var n = startOffset; n < endOffset; n++) {
        if (equals($receiver[n], v)) {
          _indexOf$result = n;
          break _indexOf$break;
        }}
      _indexOf$result = default_0;
    }
     while (false);
    return _indexOf$result;
  }
  function indexOf_9($receiver, v, startOffset, endOffset, default_0) {
    if (startOffset === void 0)
      startOffset = 0;
    if (endOffset === void 0)
      endOffset = $receiver.length;
    if (default_0 === void 0)
      default_0 = -1;
    var _indexOf$result;
    _indexOf$break: do {
      for (var n = startOffset; n < endOffset; n++) {
        if (equals($receiver[n], v)) {
          _indexOf$result = n;
          break _indexOf$break;
        }}
      _indexOf$result = default_0;
    }
     while (false);
    return _indexOf$result;
  }
  function isWhitespaceFast($receiver) {
    return $receiver === 32 || $receiver === 9 || $receiver === 13 || $receiver === 10;
  }
  function isDigit($receiver) {
    return (new CharRange(48, 57)).contains_mef7kx$($receiver);
  }
  function isLetter($receiver) {
    return (new CharRange(97, 122)).contains_mef7kx$($receiver) || (new CharRange(65, 90)).contains_mef7kx$($receiver);
  }
  function isLetterOrDigit($receiver) {
    return isLetter($receiver) || isDigit($receiver);
  }
  function isLetterOrUnderscore($receiver) {
    return isLetter($receiver) || $receiver === 95 || $receiver === 36;
  }
  function isLetterDigitOrUnderscore($receiver) {
    return isLetterOrDigit($receiver) || $receiver === 95 || $receiver === 36;
  }
  function isLetterOrDigitOrDollar($receiver) {
    return isLetterOrDigit($receiver) || $receiver === 36;
  }
  function get_isNumeric($receiver) {
    return isDigit($receiver) || $receiver === 46 || $receiver === 101 || $receiver === 45;
  }
  function isPrintable($receiver) {
    return (new CharRange(32, 126)).contains_mef7kx$($receiver) || (new CharRange(161, 255)).contains_mef7kx$($receiver);
  }
  function get_isPossibleFloatChar($receiver) {
    return $receiver >= 48 && $receiver <= 57 || $receiver === 43 || $receiver === 45 || $receiver === 101 || $receiver === 69 || $receiver === 46;
  }
  var compareToChain = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.compareToChain_ssq1th$', function ($receiver, callback) {
    return $receiver !== 0 ? $receiver : callback();
  });
  function Coroutine$expectException(clazz_0, callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 4;
    this.local$thrown = void 0;
    this.local$clazz = clazz_0;
    this.local$callback = callback_0;
  }
  Coroutine$expectException.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$expectException.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$expectException.prototype.constructor = Coroutine$expectException;
  Coroutine$expectException.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.local$thrown = null;
            this.exceptionState_0 = 2;
            this.state_0 = 1;
            this.result_0 = this.local$callback(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 4;
            this.state_0 = 3;
            continue;
          case 2:
            this.exceptionState_0 = 4;
            var e = this.exception_0;
            if (Kotlin.isType(e, Throwable)) {
              this.local$thrown = e;
            } else
              throw e;
            this.state_0 = 3;
            continue;
          case 3:
            if (this.local$thrown == null || !((tmp$ = Kotlin.getKClassFromExpression(this.local$thrown)) != null ? tmp$.equals(this.local$clazz) : null)) {
              throw new ExpectedException(this.local$clazz, this.local$thrown);
            }
            return;
          case 4:
            throw this.exception_0;
          default:this.state_0 = 4;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 4) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function expectException(clazz_0, callback_0, continuation_0, suspended) {
    var instance = new Coroutine$expectException(clazz_0, callback_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function expectException_0(T_0, isT, callback, continuation) {
    return expectException(getKClass(T_0), callback, continuation);
  }
  defineInlineFunction('korio-root-korio.com.soywiz.korio.util.expectException_c9orfk$', wrapFunction(function () {
    var getKClass = Kotlin.getKClass;
    var expectException = _.com.soywiz.korio.util.expectException_3psp43$;
    return function (T_0, isT, callback, continuation) {
      Kotlin.suspendCall(expectException(getKClass(T_0), callback, Kotlin.coroutineReceiver()));
      return Kotlin.coroutineResult(Kotlin.coroutineReceiver());
    };
  }));
  function ExpectedException(expectedClass, found) {
    Exception_init(found != null ? 'Expected ' + get_portableSimpleName(expectedClass) + ' but found ' + toString(found) : 'Expected ' + get_portableSimpleName(expectedClass) + ' no exception was thrown', this);
    this.expectedClass = expectedClass;
    this.found = found;
    this.name = 'ExpectedException';
  }
  ExpectedException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ExpectedException',
    interfaces: [Exception]
  };
  function htmlspecialchars($receiver) {
    return Xml$Entities_getInstance().encode_61zpoe$($receiver);
  }
  function Indenter(actions) {
    Indenter$Companion_getInstance();
    if (actions === void 0) {
      actions = ArrayList_init();
    }this.actions_8be2vx$ = actions;
    this.indentEmptyLines = true;
    this.out = '';
  }
  function Indenter$INDENTS() {
    Indenter$INDENTS_instance = this;
    var array = Array_0(1024);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = '';
    }
    var indent = StringBuilder_init();
    for (var n = 0; n < array.length; n++) {
      array[n] = indent.toString();
      indent.append_61zpoe$('\t');
    }
    this.INDENTS_0 = array;
  }
  Indenter$INDENTS.prototype.get_za3lpa$ = function (index) {
    if (index >= this.INDENTS_0.length) {
      throw new NotImplementedError_init('An operation is not implemented: ' + ('Too much indentation ' + index));
    }return index <= 0 ? '' : this.INDENTS_0[index];
  };
  Indenter$INDENTS.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'INDENTS',
    interfaces: []
  };
  var Indenter$INDENTS_instance = null;
  function Indenter$INDENTS_getInstance() {
    if (Indenter$INDENTS_instance === null) {
      new Indenter$INDENTS();
    }return Indenter$INDENTS_instance;
  }
  function Indenter$Action() {
  }
  function Indenter$Action$Text() {
  }
  Indenter$Action$Text.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Text',
    interfaces: [Indenter$Action]
  };
  function Indenter$Action$Marker(data) {
    this.data = data;
  }
  Indenter$Action$Marker.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Marker',
    interfaces: [Indenter$Action]
  };
  Indenter$Action$Marker.prototype.component1 = function () {
    return this.data;
  };
  Indenter$Action$Marker.prototype.copy_za3rmp$ = function (data) {
    return new Indenter$Action$Marker(data === void 0 ? this.data : data);
  };
  Indenter$Action$Marker.prototype.toString = function () {
    return 'Marker(data=' + Kotlin.toString(this.data) + ')';
  };
  Indenter$Action$Marker.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.data) | 0;
    return result;
  };
  Indenter$Action$Marker.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.data, other.data))));
  };
  function Indenter$Action$Inline(str) {
    this.str_ozhef3$_0 = str;
  }
  Object.defineProperty(Indenter$Action$Inline.prototype, 'str', {
    get: function () {
      return this.str_ozhef3$_0;
    }
  });
  Indenter$Action$Inline.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Inline',
    interfaces: [Indenter$Action$Text]
  };
  Indenter$Action$Inline.prototype.component1 = function () {
    return this.str;
  };
  Indenter$Action$Inline.prototype.copy_61zpoe$ = function (str) {
    return new Indenter$Action$Inline(str === void 0 ? this.str : str);
  };
  Indenter$Action$Inline.prototype.toString = function () {
    return 'Inline(str=' + Kotlin.toString(this.str) + ')';
  };
  Indenter$Action$Inline.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.str) | 0;
    return result;
  };
  Indenter$Action$Inline.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.str, other.str))));
  };
  function Indenter$Action$Line(str) {
    this.str_qqk64k$_0 = str;
  }
  Object.defineProperty(Indenter$Action$Line.prototype, 'str', {
    get: function () {
      return this.str_qqk64k$_0;
    }
  });
  Indenter$Action$Line.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Line',
    interfaces: [Indenter$Action$Text]
  };
  Indenter$Action$Line.prototype.component1 = function () {
    return this.str;
  };
  Indenter$Action$Line.prototype.copy_61zpoe$ = function (str) {
    return new Indenter$Action$Line(str === void 0 ? this.str : str);
  };
  Indenter$Action$Line.prototype.toString = function () {
    return 'Line(str=' + Kotlin.toString(this.str) + ')';
  };
  Indenter$Action$Line.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.str) | 0;
    return result;
  };
  Indenter$Action$Line.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.str, other.str))));
  };
  function Indenter$Action$LineDeferred(callback) {
    this.callback = callback;
  }
  Indenter$Action$LineDeferred.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'LineDeferred',
    interfaces: [Indenter$Action]
  };
  Indenter$Action$LineDeferred.prototype.component1 = function () {
    return this.callback;
  };
  Indenter$Action$LineDeferred.prototype.copy_1ckakx$ = function (callback) {
    return new Indenter$Action$LineDeferred(callback === void 0 ? this.callback : callback);
  };
  Indenter$Action$LineDeferred.prototype.toString = function () {
    return 'LineDeferred(callback=' + Kotlin.toString(this.callback) + ')';
  };
  Indenter$Action$LineDeferred.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.callback) | 0;
    return result;
  };
  Indenter$Action$LineDeferred.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && Kotlin.equals(this.callback, other.callback))));
  };
  function Indenter$Action$EmptyLineOnce() {
    Indenter$Action$EmptyLineOnce_instance = this;
  }
  Indenter$Action$EmptyLineOnce.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'EmptyLineOnce',
    interfaces: [Indenter$Action]
  };
  var Indenter$Action$EmptyLineOnce_instance = null;
  function Indenter$Action$EmptyLineOnce_getInstance() {
    if (Indenter$Action$EmptyLineOnce_instance === null) {
      new Indenter$Action$EmptyLineOnce();
    }return Indenter$Action$EmptyLineOnce_instance;
  }
  function Indenter$Action$Indent() {
    Indenter$Action$Indent_instance = this;
  }
  Indenter$Action$Indent.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Indent',
    interfaces: [Indenter$Action]
  };
  var Indenter$Action$Indent_instance = null;
  function Indenter$Action$Indent_getInstance() {
    if (Indenter$Action$Indent_instance === null) {
      new Indenter$Action$Indent();
    }return Indenter$Action$Indent_instance;
  }
  function Indenter$Action$Unindent() {
    Indenter$Action$Unindent_instance = this;
  }
  Indenter$Action$Unindent.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Unindent',
    interfaces: [Indenter$Action]
  };
  var Indenter$Action$Unindent_instance = null;
  function Indenter$Action$Unindent_getInstance() {
    if (Indenter$Action$Unindent_instance === null) {
      new Indenter$Action$Unindent();
    }return Indenter$Action$Unindent_instance;
  }
  Indenter$Action.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'Action',
    interfaces: []
  };
  function Indenter$Companion() {
    Indenter$Companion_instance = this;
    var indenter = new Indenter();
    this.EMPTY = indenter;
  }
  Indenter$Companion.prototype.genString_z3r7a6$ = function (init) {
    var indenter = new Indenter();
    init(indenter);
    return indenter.toString();
  };
  Indenter$Companion.prototype.gen_z3r7a6$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.Indenter.Companion.gen_z3r7a6$', wrapFunction(function () {
    var Indenter_init = _.com.soywiz.korio.util.Indenter;
    return function (init) {
      var indenter = new Indenter_init();
      init(indenter);
      return indenter;
    };
  }));
  Indenter$Companion.prototype.single_61zpoe$ = function (str) {
    return new Indenter(arrayListOf([new Indenter$Action$Line(str)]));
  };
  Indenter$Companion.prototype.invoke_z3r7a6$ = function (init) {
    var indenter = new Indenter();
    init(indenter);
    return indenter;
  };
  Indenter$Companion.prototype.invoke_61zpoe$ = function (str) {
    return this.single_61zpoe$(str);
  };
  Indenter$Companion.prototype.replaceString_mvjluj$ = function (templateString, replacements) {
    var pattern = Regex_init('\\$(\\w+)');
    var replace_20wsma$result;
    replace_20wsma$break: do {
      var match = pattern.find_905azu$(templateString);
      if (match == null) {
        replace_20wsma$result = templateString.toString();
        break replace_20wsma$break;
      }var lastStart = 0;
      var length = templateString.length;
      var sb = StringBuilder_init_0(length);
      do {
        var foundMatch = ensureNotNull(match);
        sb.append_ezbsdh$(templateString, lastStart, foundMatch.range.start);
        var tmp$;
        sb.append_gw00v9$((tmp$ = replacements.get_11rb$(foundMatch.groupValues.get_za3lpa$(1))) != null ? tmp$ : '');
        lastStart = foundMatch.range.endInclusive + 1 | 0;
        match = foundMatch.next();
      }
       while (lastStart < length && match != null);
      if (lastStart < length) {
        sb.append_ezbsdh$(templateString, lastStart, length);
      }replace_20wsma$result = sb.toString();
    }
     while (false);
    return replace_20wsma$result;
  };
  Indenter$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Indenter$Companion_instance = null;
  function Indenter$Companion_getInstance() {
    if (Indenter$Companion_instance === null) {
      new Indenter$Companion();
    }return Indenter$Companion_instance;
  }
  Indenter.prototype.inline_61zpoe$ = function (str) {
    this.actions_8be2vx$.add_11rb$(new Indenter$Action$Inline(str));
    return this;
  };
  Indenter.prototype.line_2swh6d$ = function (indenter) {
    this.actions_8be2vx$.addAll_brywnq$(indenter.actions_8be2vx$);
    return this;
  };
  Indenter.prototype.line_61zpoe$ = function (str) {
    this.actions_8be2vx$.add_11rb$(new Indenter$Action$Line(str));
    return this;
  };
  Indenter.prototype.line_pdl1vj$ = function (str) {
    if (str != null)
      this.line_61zpoe$(str);
  };
  Indenter.prototype.mark_za3rmp$ = function (data) {
    this.actions_8be2vx$.add_11rb$(new Indenter$Action$Marker(data));
    return this;
  };
  function Indenter$linedeferred$lambda(closure$init) {
    return function () {
      var indenter = new Indenter();
      closure$init(indenter);
      return indenter;
    };
  }
  Indenter.prototype.linedeferred_z3r7a6$ = function (init) {
    this.actions_8be2vx$.add_11rb$(new Indenter$Action$LineDeferred(Indenter$linedeferred$lambda(init)));
    return this;
  };
  Indenter.prototype.line_a4mwiz$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.Indenter.line_a4mwiz$', function (str, callback) {
    this.line_61zpoe$(str.length === 0 ? '{' : str + ' {');
    this._indent();
    try {
      callback();
    }finally {
      this._unindent();
    }
    this;
    this.line_61zpoe$('}');
    return this;
  });
  Indenter.prototype.line_slzebz$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.Indenter.line_slzebz$', function (str, after, after2, callback) {
    if (after === void 0)
      after = '';
    if (after2 === void 0)
      after2 = '';
    var rafter = after.length === 0 ? '' : ' ' + after;
    this.line_61zpoe$(str.length === 0 ? '{' + rafter : str + ' {' + rafter);
    this._indent();
    try {
      callback();
    }finally {
      this._unindent();
    }
    this;
    this.line_61zpoe$('}' + after2);
    return this;
  });
  Indenter.prototype.indent_o14v8n$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.Indenter.indent_o14v8n$', function (callback) {
    this._indent();
    try {
      callback();
    }finally {
      this._unindent();
    }
    return this;
  });
  Indenter.prototype._indent = function () {
    this.actions_8be2vx$.add_11rb$(Indenter$Action$Indent_getInstance());
  };
  Indenter.prototype._unindent = function () {
    this.actions_8be2vx$.add_11rb$(Indenter$Action$Unindent_getInstance());
  };
  function Indenter$IndenterEvaluator(markHandler, indentEmptyLines, doIndent) {
    this.markHandler = markHandler;
    this.indentEmptyLines = indentEmptyLines;
    this.doIndent = doIndent;
    this.out = StringBuilder_init();
    this.line = 0;
    this.newLine = true;
    this.indentIndex = 0;
    this.allowEmptyLine = false;
  }
  Indenter$IndenterEvaluator.prototype.outAppend_61zpoe$ = function (str) {
    return this.out.append_61zpoe$(str);
  };
  Indenter$IndenterEvaluator.prototype.outAppend_s8itvh$ = function (str) {
    return this.out.append_s8itvh$(str);
  };
  Indenter$IndenterEvaluator.prototype.doLine = function () {
    if (this.doIndent)
      this.outAppend_s8itvh$(10);
    this.line = this.line + 1 | 0;
    this.newLine = true;
  };
  Indenter$IndenterEvaluator.prototype.eval_41l8yq$ = function (actions) {
    var tmp$;
    var n = 0;
    while (n < actions.size) {
      var action = actions.get_za3lpa$((tmp$ = n, n = tmp$ + 1 | 0, tmp$));
      var tmp$_0;
      if (Kotlin.isType(action, Indenter$Action$Text)) {
        if (this.newLine) {
          var tmp$_1 = !this.indentEmptyLines;
          if (tmp$_1) {
            tmp$_1 = action.str.length === 0;
          }if (tmp$_1) {
            this.doLine();
          } else {
            if (this.doIndent)
              this.outAppend_61zpoe$(Indenter$INDENTS_getInstance().get_za3lpa$(this.indentIndex));
            else
              this.outAppend_61zpoe$(' ');
          }
        }this.outAppend_61zpoe$(action.str);
        if (Kotlin.isType(action, Indenter$Action$Line)) {
          var tmp$_2 = this.line;
          var tmp$_3;
          var count = 0;
          tmp$_3 = iterator(action.str);
          while (tmp$_3.hasNext()) {
            var element = unboxChar(tmp$_3.next());
            if (unboxChar(toBoxedChar(element)) === 10)
              count = count + 1 | 0;
          }
          this.line = tmp$_2 + count | 0;
          this.doLine();
        } else {
          this.newLine = false;
        }
        this.allowEmptyLine = true;
      } else if (Kotlin.isType(action, Indenter$Action$LineDeferred))
        this.eval_41l8yq$(action.callback().actions_8be2vx$);
      else if (equals(action, Indenter$Action$Indent_getInstance()) || equals(action, Indenter$Action$Unindent_getInstance())) {
        this.allowEmptyLine = false;
        this.indentIndex = this.indentIndex + (equals(action, Indenter$Action$Indent_getInstance()) ? 1 : -1) | 0;
      } else if (equals(action, Indenter$Action$EmptyLineOnce_getInstance())) {
        if (this.allowEmptyLine) {
          this.doLine();
          this.allowEmptyLine = false;
        }} else if (Kotlin.isType(action, Indenter$Action$Marker))
        (tmp$_0 = this.markHandler) != null ? tmp$_0(this.out, this.line, action.data) : null;
    }
  };
  Indenter$IndenterEvaluator.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IndenterEvaluator',
    interfaces: []
  };
  Indenter.prototype.toString_l6l5ny$ = function (markHandler, doIndent) {
    var $receiver = new Indenter$IndenterEvaluator(markHandler, this.indentEmptyLines, doIndent);
    $receiver.eval_41l8yq$(this.actions_8be2vx$);
    return $receiver.out.toString();
  };
  Indenter.prototype.invoke_44doqu$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.Indenter.invoke_44doqu$', function ($receiver, suffix, callback) {
    if (suffix === void 0)
      suffix = '';
    var rafter = suffix.length === 0 ? '' : ' ' + suffix;
    this.line_61zpoe$($receiver.length === 0 ? '{' + rafter : $receiver + ' {' + rafter);
    this._indent();
    try {
      callback();
    }finally {
      this._unindent();
    }
    this;
    this.line_61zpoe$('}' + '');
    return this;
  });
  Indenter.prototype.unaryPlus_pdl1vz$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.Indenter.unaryPlus_pdl1vz$', function ($receiver) {
    return this.line_61zpoe$($receiver);
  });
  Indenter.prototype.xml_79xod4$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.Indenter.xml_79xod4$', wrapFunction(function () {
    var Regex_init = Kotlin.kotlin.text.Regex_init_61zpoe$;
    var getOrNull = Kotlin.kotlin.collections.getOrNull_yzln2o$;
    var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
    return function ($receiver, callback) {
      var tmp$, tmp$_0, tmp$_1;
      var tmp$_2;
      if ((tmp$_1 = (tmp$_0 = (tmp$ = Regex_init('<(\\w+)').find_905azu$($receiver)) != null ? tmp$.groupValues : null) != null ? getOrNull(tmp$_0, 1) : null) != null)
        tmp$_2 = tmp$_1;
      else {
        throw IllegalStateException_init('Invalid XML tag'.toString());
      }
      var tagName = tmp$_2;
      this.line_61zpoe$($receiver);
      this._indent();
      try {
        callback();
      }finally {
        this._unindent();
      }
      this;
      this.line_61zpoe$('<\/' + tagName + '>');
    };
  }));
  Indenter.prototype.toString_95lvll$ = function (markHandler) {
    return this.toString_l6l5ny$(markHandler, true);
  };
  Indenter.prototype.toString_8kj6y5$ = function (doIndent, indentChunk) {
    if (doIndent === void 0)
      doIndent = true;
    if (indentChunk === void 0)
      indentChunk = '\t';
    var out = this.toString_l6l5ny$(null, doIndent);
    return equals(indentChunk, '\t') ? out : replace_0(out, '\t', indentChunk);
  };
  Indenter.prototype.toString = function () {
    return this.toString_l6l5ny$(null, true);
  };
  Indenter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Indenter',
    interfaces: []
  };
  function get_SEPARATOR($receiver) {
    EMPTY_LINE_ONCE($receiver);
  }
  function EMPTY_LINE_ONCE($receiver) {
    $receiver.actions_8be2vx$.add_11rb$(Indenter$Action$EmptyLineOnce_getInstance());
  }
  function SEPARATOR($receiver, callback) {
    get_SEPARATOR($receiver);
    callback($receiver);
  }
  function XmlIndenter(indenter) {
    this.indenter = indenter;
  }
  XmlIndenter.prototype.invoke_79xod4$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.XmlIndenter.invoke_79xod4$', wrapFunction(function () {
    var Regex_init = Kotlin.kotlin.text.Regex_init_61zpoe$;
    var getOrNull = Kotlin.kotlin.collections.getOrNull_yzln2o$;
    var IllegalStateException_init = Kotlin.kotlin.IllegalStateException_init_pdl1vj$;
    return function ($receiver, callback) {
      var tmp$, tmp$_0, tmp$_1;
      var tmp$_2;
      if ((tmp$_1 = (tmp$_0 = (tmp$ = Regex_init('<(\\w+)').find_905azu$($receiver)) != null ? tmp$.groupValues : null) != null ? getOrNull(tmp$_0, 1) : null) != null)
        tmp$_2 = tmp$_1;
      else {
        throw IllegalStateException_init('Invalid XML tag'.toString());
      }
      var tagName = tmp$_2;
      this.indenter.line_61zpoe$($receiver);
      var $this = this.indenter;
      $this._indent();
      try {
        callback();
      }finally {
        $this._unindent();
      }
      this.indenter.line_61zpoe$('<\/' + tagName + '>');
    };
  }));
  XmlIndenter.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'XmlIndenter',
    interfaces: []
  };
  function xml($receiver, callback) {
    callback(new XmlIndenter($receiver));
  }
  function toStringUnsigned($receiver, radix) {
    return toString_0(new UInt_init($receiver), radix);
  }
  function toStringUnsigned_0($receiver, radix) {
    return toString_1(new ULong_init($receiver), radix);
  }
  function get_niceStr($receiver) {
    return round($receiver) === $receiver ? Kotlin.Long.fromNumber($receiver).toString() : $receiver.toString();
  }
  function get_niceStr_0($receiver) {
    return round($receiver) === $receiver ? Kotlin.Long.fromNumber($receiver).toString() : $receiver.toString();
  }
  function toStringDecimal($receiver, decimalPlaces, skipTrailingZeros) {
    if (skipTrailingZeros === void 0)
      skipTrailingZeros = false;
    var tmp$;
    var res = $receiver.toString();
    var containsEup = contains(res, 69);
    var containsElo = contains(res, 101);
    if (containsEup || containsElo) {
      var tmp$_0 = split(res, Kotlin.charArrayOf(containsEup ? 69 : 101), void 0, 2);
      var base = tmp$_0.get_za3lpa$(0);
      var exp = tmp$_0.get_za3lpa$(1);
      var rbase = contains_1(base, '.') ? base : base + '.0';
      var expInt = toInt(exp);
      var zeros = repeat('0', abs(expInt) + 2 | 0);
      var part = expInt > 0 ? rbase + zeros : zeros + rbase;
      var pointIndex = indexOf(part, '.');
      var outIndex = pointIndex + expInt | 0;
      var part2 = replace_0(part, '.', '');
      var $receiver_0 = substr_0(part2, 0, outIndex) + '.' + substr(part2, outIndex);
      tmp$ = Regex_init('^0+\\.').replace_x2uqeu$($receiver_0, '0.');
    } else {
      tmp$ = res;
    }
    var rez = tmp$;
    var parts = split(rez, Kotlin.charArrayOf(46), void 0, 2);
    var integral = 0 >= 0 && 0 <= get_lastIndex_0(parts) ? parts.get_za3lpa$(0) : '0';
    var decimal = 1 >= 0 && 1 <= get_lastIndex_0(parts) ? parts.get_za3lpa$(1) : '0';
    if (decimalPlaces === 0)
      return integral;
    var out = integral + '.' + substr_0(decimal + repeat('0', decimalPlaces), 0, decimalPlaces);
    if (skipTrailingZeros) {
      while (endsWith_0(out, 48)) {
        var $receiver_1 = out;
        var endIndex = out.length - 1 | 0;
        out = $receiver_1.substring(0, endIndex);
      }
      if (endsWith_0(out, 46)) {
        var $receiver_2 = out;
        var endIndex_0 = out.length - 1 | 0;
        out = $receiver_2.substring(0, endIndex_0);
      }}return out;
  }
  function toStringDecimal_0($receiver, decimalPlaces, skipTrailingZeros) {
    if (skipTrailingZeros === void 0)
      skipTrailingZeros = false;
    return toStringDecimal($receiver, decimalPlaces, skipTrailingZeros);
  }
  function NumberParser() {
    NumberParser_instance = this;
  }
  NumberParser.prototype.parseInt_wfrsr4$ = function (str, start, end, radix) {
    if (start === void 0)
      start = 0;
    if (end === void 0)
      end = str.length;
    if (radix === void 0)
      radix = 10;
    var positive = true;
    var out = 0;
    loop: for (var n = start; n < end; n++) {
      var c = str.charCodeAt(n);
      if (c === 45 || c === 43) {
        positive = c === 43;
      } else {
        var value = ctypeAsInt(c);
        if (value < 0)
          break loop;
        out = Kotlin.imul(out, radix);
        out = out + value | 0;
      }
    }
    return positive ? out : -out | 0;
  };
  NumberParser.prototype.parseDouble_3m52m6$ = function (str, start, end) {
    if (start === void 0)
      start = 0;
    if (end === void 0)
      end = str.length;
    var out = 0.0;
    var frac = 1.0;
    var pointSeen = false;
    var eSeen = false;
    var negate = false;
    var negateExponent = false;
    var exponent = 0;
    for (var n = start; n < end; n++) {
      var c = str.charCodeAt(n);
      switch (c) {
        case 101:
        case 69:
          eSeen = true;
          break;
        case 45:
          if (eSeen)
            negateExponent = true;
          else
            negate = true;
          break;
        case 46:
          pointSeen = true;
          break;
        default:if (eSeen) {
            exponent = exponent * 10 | 0;
            exponent = exponent + ctypeAsInt(c) | 0;
          } else {
            if (pointSeen)
              frac /= 10;
            out *= 10;
            out += ctypeAsInt(c);
          }

          break;
      }
    }
    var tmp$ = out * frac;
    var n_0 = negateExponent ? -exponent | 0 : exponent;
    var res = tmp$ * Math_0.pow(10.0, n_0);
    return negate ? -res : res;
  };
  NumberParser.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'NumberParser',
    interfaces: []
  };
  var NumberParser_instance = null;
  function NumberParser_getInstance() {
    if (NumberParser_instance === null) {
      new NumberParser();
    }return NumberParser_instance;
  }
  function ctypeAsInt($receiver) {
    if ($receiver >= 48 && $receiver <= 57)
      return $receiver - 48;
    else if ($receiver >= 97 && $receiver <= 122)
      return $receiver - 97 + 10 | 0;
    else if ($receiver >= 65 && $receiver <= 90)
      return $receiver - 65 + 10 | 0;
    else
      return -1;
  }
  function OS() {
    OS_instance = this;
    this.rawNameLC_8hq66a$_0 = lazy(OS$rawNameLC$lambda(this));
    this.platformNameLC_n471rr$_0 = lazy(OS$platformNameLC$lambda(this));
    this.isWindows_s5ip4f$_0 = lazy(OS$isWindows$lambda(this));
    this.isLinux_qoet0e$_0 = lazy(OS$isLinux$lambda(this));
    this.isMac_rm5qql$_0 = lazy(OS$isMac$lambda(this));
    this.isIos_rm7zx7$_0 = lazy(OS$isIos$lambda(this));
    this.isAndroid_v5wqbn$_0 = lazy(OS$isAndroid$lambda(this));
    this.isWatchos_fey7r5$_0 = lazy(OS$isWatchos$lambda(this));
    this.isTvos_3ld404$_0 = lazy(OS$isTvos$lambda(this));
  }
  Object.defineProperty(OS.prototype, 'rawName', {
    get: function () {
      return get_rawOsName();
    }
  });
  Object.defineProperty(OS.prototype, 'rawNameLC', {
    get: function () {
      return this.rawNameLC_8hq66a$_0.value;
    }
  });
  Object.defineProperty(OS.prototype, 'platformName', {
    get: function () {
      return rawPlatformName;
    }
  });
  Object.defineProperty(OS.prototype, 'platformNameLC', {
    get: function () {
      return this.platformNameLC_n471rr$_0.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isWindows', {
    get: function () {
      return this.isWindows_s5ip4f$_0.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isUnix', {
    get: function () {
      return !this.isWindows;
    }
  });
  Object.defineProperty(OS.prototype, 'isPosix', {
    get: function () {
      return !this.isWindows;
    }
  });
  Object.defineProperty(OS.prototype, 'isLinux', {
    get: function () {
      return this.isLinux_qoet0e$_0.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isMac', {
    get: function () {
      return this.isMac_rm5qql$_0.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isIos', {
    get: function () {
      return this.isIos_rm7zx7$_0.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isAndroid', {
    get: function () {
      return this.isAndroid_v5wqbn$_0.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isWatchos', {
    get: function () {
      return this.isWatchos_fey7r5$_0.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isTvos', {
    get: function () {
      return this.isTvos_3ld404$_0.value;
    }
  });
  Object.defineProperty(OS.prototype, 'isJs', {
    get: function () {
      return endsWith(rawPlatformName, 'js');
    }
  });
  Object.defineProperty(OS.prototype, 'isNative', {
    get: function () {
      return equals(rawPlatformName, 'native');
    }
  });
  Object.defineProperty(OS.prototype, 'isNativeDesktop', {
    get: function () {
      return this.isNative && !this.isAndroid && !this.isIos && !this.isWatchos && !this.isTvos;
    }
  });
  Object.defineProperty(OS.prototype, 'isJvm', {
    get: function () {
      return equals(rawPlatformName, 'jvm');
    }
  });
  Object.defineProperty(OS.prototype, 'isJsShell', {
    get: function () {
      return equals(this.platformNameLC, 'shell.js');
    }
  });
  Object.defineProperty(OS.prototype, 'isJsNodeJs', {
    get: function () {
      return equals(this.platformNameLC, 'node.js');
    }
  });
  Object.defineProperty(OS.prototype, 'isJsBrowser', {
    get: function () {
      return equals(this.platformNameLC, 'web.js');
    }
  });
  Object.defineProperty(OS.prototype, 'isJsWorker', {
    get: function () {
      return equals(this.platformNameLC, 'worker.js');
    }
  });
  Object.defineProperty(OS.prototype, 'isJsBrowserOrWorker', {
    get: function () {
      return this.isJsBrowser || this.isJsWorker;
    }
  });
  function OS$rawNameLC$lambda(this$OS) {
    return function () {
      return this$OS.rawName.toLowerCase();
    };
  }
  function OS$platformNameLC$lambda(this$OS) {
    return function () {
      return this$OS.platformName.toLowerCase();
    };
  }
  function OS$isWindows$lambda(this$OS) {
    return function () {
      return contains_1(this$OS.rawNameLC, 'win');
    };
  }
  function OS$isLinux$lambda(this$OS) {
    return function () {
      return contains_1(this$OS.rawNameLC, 'nix') || contains_1(this$OS.rawNameLC, 'nux') || contains_1(this$OS.rawNameLC, 'aix');
    };
  }
  function OS$isMac$lambda(this$OS) {
    return function () {
      return contains_1(this$OS.rawNameLC, 'mac');
    };
  }
  function OS$isIos$lambda(this$OS) {
    return function () {
      return contains_1(this$OS.rawNameLC, 'ios');
    };
  }
  function OS$isAndroid$lambda(this$OS) {
    return function () {
      return contains_1(this$OS.platformNameLC, 'android');
    };
  }
  function OS$isWatchos$lambda(this$OS) {
    return function () {
      return contains_1(this$OS.rawNameLC, 'watchos');
    };
  }
  function OS$isTvos$lambda(this$OS) {
    return function () {
      return contains_1(this$OS.rawNameLC, 'tvos');
    };
  }
  OS.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'OS',
    interfaces: []
  };
  var OS_instance = null;
  function OS_getInstance() {
    if (OS_instance === null) {
      new OS();
    }return OS_instance;
  }
  function Once() {
    this.completed = false;
  }
  Once.prototype.invoke_o14v8n$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.Once.invoke_o14v8n$', function (callback) {
    if (!this.completed) {
      this.completed = true;
      callback();
    }});
  Once.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Once',
    interfaces: []
  };
  function SyncOnce() {
    this.value = null;
  }
  SyncOnce.prototype.invoke_skz6lt$ = function (callback) {
    if (this.value == null) {
      this.value = callback();
    }return ensureNotNull(this.value);
  };
  SyncOnce.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'SyncOnce',
    interfaces: []
  };
  function AsyncOnce() {
    this.promise = null;
  }
  function Coroutine$AsyncOnce$invoke$lambda(closure$callback_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$callback = closure$callback_0;
  }
  Coroutine$AsyncOnce$invoke$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$AsyncOnce$invoke$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$AsyncOnce$invoke$lambda.prototype.constructor = Coroutine$AsyncOnce$invoke$lambda;
  Coroutine$AsyncOnce$invoke$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$callback(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function AsyncOnce$invoke$lambda(closure$callback_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$AsyncOnce$invoke$lambda(closure$callback_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  AsyncOnce.prototype.invoke_cbny1b$ = function (callback, continuation) {
    if (this.promise == null) {
      this.promise = asyncImmediately_0(continuation.context, AsyncOnce$invoke$lambda(callback));
    }return ensureNotNull(this.promise).await(continuation);
  };
  AsyncOnce.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'AsyncOnce',
    interfaces: []
  };
  function Props(props) {
    Props$Companion_getInstance();
    if (props === void 0)
      props = LinkedHashMap_init();
    this.props_0 = props;
  }
  function Props$Companion() {
    Props$Companion_instance = this;
  }
  Props$Companion.prototype.load_61zpoe$ = function (str) {
    var $receiver = new Props();
    $receiver.deserializeNew_61zpoe$(str);
    return $receiver;
  };
  Props$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Props$Companion_instance = null;
  function Props$Companion_getInstance() {
    if (Props$Companion_instance === null) {
      new Props$Companion();
    }return Props$Companion_instance;
  }
  Props.prototype.deserializeAdd_61zpoe$ = function (str) {
    var $receiver = split_0(str, ['\n']);
    var tmp$;
    var n = 0;
    loop_label: while (n < $receiver.size) {
      var line = $receiver.get_za3lpa$((tmp$ = n, n = tmp$ + 1 | 0, tmp$));
      callback$break: do {
        if (startsWith_0(line, 35))
          break callback$break;
        if (isBlank(line))
          break callback$break;
        var parts = split(line, Kotlin.charArrayOf(61), void 0, 2);
        var $receiver_0 = parts.get_za3lpa$(0);
        var tmp$_0;
        var key = trim_0(Kotlin.isCharSequence(tmp$_0 = $receiver_0) ? tmp$_0 : throwCCE()).toString();
        var $receiver_1 = 1 >= 0 && 1 <= get_lastIndex_0(parts) ? parts.get_za3lpa$(1) : ' ';
        var tmp$_1;
        var value = trim_0(Kotlin.isCharSequence(tmp$_1 = $receiver_1) ? tmp$_1 : throwCCE()).toString();
        this.props_0.put_xwzc9p$(key, value);
      }
       while (false);
    }
  };
  Props.prototype.deserializeNew_61zpoe$ = function (str) {
    this.clear();
    this.deserializeAdd_61zpoe$(str);
  };
  Props.prototype.serialize = function () {
    var $receiver = this.props_0;
    var destination = ArrayList_init_0($receiver.size);
    var tmp$;
    tmp$ = $receiver.entries.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(item.key + '=' + item.value);
    }
    return joinToString(destination, '\n');
  };
  Object.defineProperty(Props.prototype, 'entries', {
    get: function () {
      return this.props_0.entries;
    }
  });
  Object.defineProperty(Props.prototype, 'keys', {
    get: function () {
      return this.props_0.keys;
    }
  });
  Object.defineProperty(Props.prototype, 'size', {
    get: function () {
      return this.props_0.size;
    }
  });
  Object.defineProperty(Props.prototype, 'values', {
    get: function () {
      return this.props_0.values;
    }
  });
  Props.prototype.clear = function () {
    return this.props_0.clear();
  };
  Props.prototype.containsKey_11rb$ = function (key) {
    return this.props_0.containsKey_11rb$(key);
  };
  Props.prototype.containsValue_11rc$ = function (value) {
    return this.props_0.containsValue_11rc$(value);
  };
  Props.prototype.get_11rb$ = function (key) {
    return this.props_0.get_11rb$(key);
  };
  Props.prototype.isEmpty = function () {
    return this.props_0.isEmpty();
  };
  Props.prototype.put_xwzc9p$ = function (key, value) {
    return this.props_0.put_xwzc9p$(key, value);
  };
  Props.prototype.putAll_a2k3zr$ = function (from) {
    return this.props_0.putAll_a2k3zr$(from);
  };
  Props.prototype.remove_11rb$ = function (key) {
    return this.props_0.remove_11rb$(key);
  };
  Props.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Props',
    interfaces: [MutableMap]
  };
  function Coroutine$loadProperties($receiver_0, charset_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$tmp$ = void 0;
    this.local$$receiver = $receiver_0;
    this.local$charset = charset_0;
  }
  Coroutine$loadProperties.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$loadProperties.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$loadProperties.prototype.constructor = Coroutine$loadProperties;
  Coroutine$loadProperties.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$charset === void 0)
              this.local$charset = UTF8;
            this.local$tmp$ = Props$Companion_getInstance();
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.readString_qa9gbo$(this.local$charset, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$tmp$.load_61zpoe$(this.result_0);
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function loadProperties($receiver_0, charset_0, continuation_0, suspended) {
    var instance = new Coroutine$loadProperties($receiver_0, charset_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function saveProperties($receiver, props, charset, continuation) {
    if (charset === void 0)
      charset = UTF8;
    return $receiver.writeString_lp1jh2$(props.serialize(), [], charset, continuation);
  }
  var LONG_ZERO_TO_MAX_RANGE;
  function toLongRange($receiver) {
    return Kotlin.Long.fromInt($receiver.start).rangeTo(Kotlin.Long.fromInt($receiver.endInclusive));
  }
  function get_length($receiver) {
    return $receiver.endInclusive - $receiver.start + 1 | 0;
  }
  function get_length_0($receiver) {
    return $receiver.endInclusive.subtract($receiver.start).add(Kotlin.Long.fromInt(1));
  }
  function get_endExclusive($receiver) {
    return $receiver.endInclusive + 1 | 0;
  }
  function get_endExclusive_0($receiver) {
    return $receiver.endInclusive.add(Kotlin.Long.fromInt(1));
  }
  function get_endExclusiveClamped($receiver) {
    return equals($receiver.endInclusive, Long$Companion$MAX_VALUE) ? Long$Companion$MAX_VALUE : $receiver.endInclusive.add(Kotlin.Long.fromInt(1));
  }
  function RedirectField(redirect) {
    this.redirect = redirect;
  }
  RedirectField.prototype.getValue_n5byny$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.RedirectField.getValue_n5byny$', function (thisRef, property) {
    return this.redirect.get();
  });
  RedirectField.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RedirectField',
    interfaces: []
  };
  function RedirectMutableField(redirect) {
    this.redirect = redirect;
  }
  RedirectMutableField.prototype.getValue_n5byny$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.RedirectMutableField.getValue_n5byny$', function (thisRef, property) {
    return this.redirect.get();
  });
  RedirectMutableField.prototype.setValue_sq4zib$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.RedirectMutableField.setValue_sq4zib$', function (thisRef, property, value) {
    this.redirect.set(value);
  });
  RedirectMutableField.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RedirectMutableField',
    interfaces: []
  };
  function RedirectMutableFieldGen(redirect) {
    this.redirect = redirect;
  }
  RedirectMutableFieldGen.prototype.getValue_n5byny$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.RedirectMutableFieldGen.getValue_n5byny$', function (thisRef, property) {
    return this.redirect().get();
  });
  RedirectMutableFieldGen.prototype.setValue_sq4zib$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.RedirectMutableFieldGen.setValue_sq4zib$', function (thisRef, property, value) {
    this.redirect().set(value);
  });
  RedirectMutableFieldGen.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RedirectMutableFieldGen',
    interfaces: []
  };
  function RedirectFieldGen(redirect) {
    this.redirect = redirect;
  }
  RedirectFieldGen.prototype.getValue_n5byny$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.RedirectFieldGen.getValue_n5byny$', function (thisRef, property) {
    return this.redirect().get();
  });
  RedirectFieldGen.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'RedirectFieldGen',
    interfaces: []
  };
  var redirected = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.redirected_f59s52$', wrapFunction(function () {
    var RedirectFieldGen_init = _.com.soywiz.korio.util.RedirectFieldGen;
    return function ($receiver) {
      return new RedirectFieldGen_init($receiver);
    };
  }));
  var redirected_0 = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.redirected_bb9ril$', wrapFunction(function () {
    var RedirectMutableFieldGen_init = _.com.soywiz.korio.util.RedirectMutableFieldGen;
    return function ($receiver) {
      return new RedirectMutableFieldGen_init($receiver);
    };
  }));
  var redirected_1 = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.redirected_58ahrt$', wrapFunction(function () {
    var RedirectMutableField_init = _.com.soywiz.korio.util.RedirectMutableField;
    return function ($receiver) {
      return new RedirectMutableField_init($receiver);
    };
  }));
  var redirected_2 = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.redirected_myrrmk$', wrapFunction(function () {
    var RedirectField_init = _.com.soywiz.korio.util.RedirectField;
    return function ($receiver) {
      return new RedirectField_init($receiver);
    };
  }));
  function TransformedField(prop, transform) {
    this.prop = prop;
    this.transform = transform;
  }
  TransformedField.prototype.getValue_n5byny$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.TransformedField.getValue_n5byny$', function (thisRef, property) {
    return this.transform(this.prop.get());
  });
  TransformedField.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TransformedField',
    interfaces: []
  };
  function TransformedMutableField(prop, transform, reverseTransform) {
    this.prop = prop;
    this.transform = transform;
    this.reverseTransform = reverseTransform;
  }
  TransformedMutableField.prototype.getValue_n5byny$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.TransformedMutableField.getValue_n5byny$', function (thisRef, property) {
    return this.transform(this.prop.get());
  });
  TransformedMutableField.prototype.setValue_sq4zia$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.TransformedMutableField.setValue_sq4zia$', function (thisRef, property, value) {
    this.prop.set(this.reverseTransform(value));
  });
  TransformedMutableField.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TransformedMutableField',
    interfaces: []
  };
  function transformed($receiver, transform, reverseTransform) {
    return new TransformedMutableField($receiver, transform, reverseTransform);
  }
  function transformed_0($receiver, transform) {
    return new TransformedField($receiver, transform);
  }
  function quote($receiver, str) {
    var $receiver_0 = StringBuilder_init();
    var tmp$;
    tmp$ = str.length;
    for (var n = 0; n < tmp$; n++) {
      var c = toBoxedChar(str.charCodeAt(n));
      switch (unboxChar(c)) {
        case 46:
        case 63:
        case 42:
        case 43:
        case 94:
        case 92:
        case 36:
        case 91:
        case 93:
        case 40:
        case 41:
        case 123:
        case 125:
        case 124:
        case 45:
          $receiver_0.append_s8itvh$(92);
          break;
      }
      $receiver_0.append_s8itvh$(unboxChar(c));
    }
    return $receiver_0.toString();
  }
  function StrReader(str, file, pos) {
    StrReader$Companion_getInstance();
    if (file === void 0)
      file = 'file';
    if (pos === void 0)
      pos = 0;
    this.str = str;
    this.file = file;
    this.pos = pos;
    this.length = this.str.length;
  }
  function StrReader$Companion() {
    StrReader$Companion_instance = this;
  }
  StrReader$Companion.prototype.literals_vqirvp$ = function (lits) {
    return StrReader$Literals$Companion_getInstance().fromList_kand9s$(copyToArray(toList_0(lits)));
  };
  StrReader$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var StrReader$Companion_instance = null;
  function StrReader$Companion_getInstance() {
    if (StrReader$Companion_instance === null) {
      new StrReader$Companion();
    }return StrReader$Companion_instance;
  }
  Object.defineProperty(StrReader.prototype, 'available', {
    get: function () {
      return this.length - this.pos | 0;
    }
  });
  Object.defineProperty(StrReader.prototype, 'eof', {
    get: function () {
      return this.pos >= this.str.length;
    }
  });
  Object.defineProperty(StrReader.prototype, 'hasMore', {
    get: function () {
      return this.pos < this.str.length;
    }
  });
  StrReader.prototype.reset = function () {
    this.pos = 0;
  };
  StrReader.prototype.createRange_n8acyv$ = function (range) {
    return this.createRange_vux9f0$(range.start, range.endInclusive + 1 | 0);
  };
  StrReader.prototype.createRange_vux9f0$ = function (start, end) {
    if (start === void 0)
      start = this.pos;
    if (end === void 0)
      end = this.pos;
    return new StrReader$TRange(start, end, this);
  };
  StrReader.prototype.readRange_za3lpa$ = function (length) {
    var range = new StrReader$TRange(this.pos, this.pos + length | 0, this);
    this.pos = this.pos + length | 0;
    return range;
  };
  StrReader.prototype.slice_o14v8n$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.StrReader.slice_o14v8n$', function (action) {
    var start = this.pos;
    action();
    var end = this.pos;
    return end > start ? this.slice_vux9f0$(start, end) : null;
  });
  StrReader.prototype.slice_vux9f0$ = function (start, end) {
    return this.str.substring(start, end);
  };
  StrReader.prototype.peek_za3lpa$ = function (count) {
    return this.substr_0(this.pos, count);
  };
  StrReader.prototype.peek = function () {
    return this.hasMore ? this.str.charCodeAt(this.pos) : 0;
  };
  StrReader.prototype.peekChar = function () {
    return this.hasMore ? this.str.charCodeAt(this.pos) : 0;
  };
  StrReader.prototype.read_za3lpa$ = function (count) {
    var $receiver = this.peek_za3lpa$(count);
    this.skip_za3lpa$(count);
    return $receiver;
  };
  StrReader.prototype.skipUntil_s8itvh$ = function (char) {
    var skipPos = indexOf_0(this.str, char, this.pos);
    this.pos = skipPos >= 0 ? skipPos : this.length;
  };
  StrReader.prototype.skipUntilIncluded_s8itvh$ = function (char) {
    this.skipUntil_s8itvh$(char);
    if (this.hasMore && unboxChar(this.peekChar()) === char)
      this.skip_za3lpa$(1);
  };
  StrReader.prototype.skipWhile_akknk2$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.StrReader.skipWhile_akknk2$', function (filter) {
    while (this.hasMore && filter(this.peekChar())) {
      this.readChar();
    }
  });
  StrReader.prototype.skipUntil_akknk2$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.StrReader.skipUntil_akknk2$', function (filter) {
    while (this.hasMore && !filter(this.peekChar()))
      this.readChar();
  });
  StrReader.prototype.matchWhile_akknk2$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.StrReader.matchWhile_akknk2$', wrapFunction(function () {
    return function (check) {
      var start = this.pos;
      while (this.hasMore && check(this.peekChar())) {
        this.readChar();
      }
      var end = this.pos;
      return end > start ? this.slice_vux9f0$(start, end) : null;
    };
  }));
  StrReader.prototype.readUntil_s8itvh$ = function (char) {
    var start = this.pos;
    this.skipUntil_s8itvh$(char);
    var end = this.pos;
    return end > start ? this.slice_vux9f0$(start, end) : null;
  };
  StrReader.prototype.readUntilIncluded_s8itvh$ = function (char) {
    var start = this.pos;
    this.skipUntilIncluded_s8itvh$(char);
    var end = this.pos;
    return end > start ? this.slice_vux9f0$(start, end) : null;
  };
  StrReader.prototype.readWhile_akknk2$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.StrReader.readWhile_akknk2$', wrapFunction(function () {
    return function (filter) {
      var tmp$;
      var start = this.pos;
      while (this.hasMore && filter(this.peekChar())) {
        this.readChar();
      }
      var end = this.pos;
      return (tmp$ = end > start ? this.slice_vux9f0$(start, end) : null) != null ? tmp$ : '';
    };
  }));
  StrReader.prototype.readUntil_akknk2$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.util.StrReader.readUntil_akknk2$', wrapFunction(function () {
    return function (filter) {
      var tmp$;
      var start = this.pos;
      while (this.hasMore && !filter(this.peekChar()))
        this.readChar();
      var end = this.pos;
      return (tmp$ = end > start ? this.slice_vux9f0$(start, end) : null) != null ? tmp$ : '';
    };
  }));
  StrReader.prototype.unread_za3lpa$ = function (count) {
    if (count === void 0)
      count = 1;
    this.pos = this.pos - count | 0;
    return this;
  };
  StrReader.prototype.readChar = function () {
    return this.hasMore ? this.str.charCodeAt(this.posSkip_0(1)) : 0;
  };
  StrReader.prototype.read = function () {
    return this.hasMore ? this.str.charCodeAt(this.posSkip_0(1)) : 0;
  };
  StrReader.prototype.posSkip_0 = function (count) {
    var out = this.pos;
    this.pos = this.pos + count | 0;
    return out;
  };
  StrReader.prototype.readRemaining = function () {
    return this.read_za3lpa$(this.available);
  };
  StrReader.prototype.readExpect_61zpoe$ = function (expected) {
    var readed = this.read_za3lpa$(expected.length);
    if (!equals(readed, expected))
      throw IllegalArgumentException_init("Expected '" + expected + "' but found '" + readed + "' at " + this.pos);
    return readed;
  };
  StrReader.prototype.skipExpect_s8itvh$ = function (expected) {
    var readed = unboxChar(this.readChar());
    if (readed !== expected)
      throw IllegalArgumentException_init("Expected '" + String.fromCharCode(expected) + "' but found '" + String.fromCharCode(readed) + "' at " + this.pos);
  };
  StrReader.prototype.expect_s8itvh$ = function (expected) {
    return this.readExpect_61zpoe$(String.fromCharCode(expected));
  };
  StrReader.prototype.skip_za3lpa$ = function (count) {
    if (count === void 0)
      count = 1;
    this.pos = this.pos + count | 0;
    return this;
  };
  StrReader.prototype.substr_0 = function (pos, length) {
    var tmp$ = this.str;
    var b = this.length;
    var tmp$_0 = Math_0.min(pos, b);
    var a = pos + length | 0;
    var b_0 = this.length;
    var endIndex = Math_0.min(a, b_0);
    return tmp$.substring(tmp$_0, endIndex);
  };
  StrReader.prototype.tryLit_61zpoe$ = function (lit) {
    if (!equals(this.substr_0(this.pos, lit.length), lit))
      return null;
    this.pos = this.pos + lit.length | 0;
    return lit;
  };
  StrReader.prototype.tryLitRange_61zpoe$ = function (lit) {
    return equals(this.substr_0(this.pos, lit.length), lit) ? this.readRange_za3lpa$(lit.length) : null;
  };
  StrReader.prototype.matchLit_61zpoe$ = function (lit) {
    return this.tryLit_61zpoe$(lit);
  };
  StrReader.prototype.matchLitRange_61zpoe$ = function (lit) {
    return this.tryLitRange_61zpoe$(lit);
  };
  StrReader.prototype.matchLitListRange_ir5yrq$ = function (lits) {
    var $receiver = lits.lengths;
    var tmp$;
    var n = 0;
    while (n < $receiver.length) {
      var len = $receiver[tmp$ = n, n = tmp$ + 1 | 0, tmp$];
      if (lits.contains_61zpoe$(this.substr_0(this.pos, len)))
        return this.readRange_za3lpa$(len);
    }
    return null;
  };
  StrReader.prototype.skipSpaces = function () {
    while (true) {
      var tmp$ = this.hasMore;
      if (tmp$) {
        tmp$ = isWhitespaceFast(unboxChar(this.peekChar()));
      }if (!tmp$)
        break;
      this.readChar();
    }
    return this;
  };
  StrReader.prototype.matchIdentifier = function () {
    var start = this.pos;
    while (true) {
      var tmp$ = this.hasMore;
      if (tmp$) {
        var it = this.peekChar();
        tmp$ = isLetterDigitOrUnderscore(unboxChar(it)) || unboxChar(it) === 45 || unboxChar(it) === 126 || unboxChar(it) === 58;
      }if (!tmp$)
        break;
      this.readChar();
    }
    var end = this.pos;
    return end > start ? this.slice_vux9f0$(start, end) : null;
  };
  StrReader.prototype.matchSingleOrDoubleQuoteString = function () {
    var tmp$;
    switch (unboxChar(this.peekChar())) {
      case 39:
      case 34:
        var start = this.pos;
        var quoteType = unboxChar(this.readChar());
        this.readUntil_s8itvh$(quoteType);
        this.readChar();
        var end = this.pos;
        tmp$ = end > start ? this.slice_vux9f0$(start, end) : null;
        break;
      default:tmp$ = null;
        break;
    }
    return tmp$;
  };
  StrReader.prototype.tryRegex_t7befh$ = function (v) {
    var tmp$;
    var $receiver = this.str;
    var startIndex = this.pos;
    tmp$ = v.find_905azu$($receiver.substring(startIndex));
    if (tmp$ == null) {
      return null;
    }var result = tmp$;
    var m = ensureNotNull(result.groups.get_za3lpa$(0)).value;
    this.pos = this.pos + m.length | 0;
    return m;
  };
  StrReader.prototype.tryRegexRange_t7befh$ = function (v) {
    var tmp$;
    var $receiver = this.str;
    var startIndex = this.pos;
    tmp$ = v.find_905azu$($receiver.substring(startIndex));
    if (tmp$ == null) {
      return null;
    }var result = tmp$;
    return this.readRange_za3lpa$(ensureNotNull(result.groups.get_za3lpa$(0)).value.length);
  };
  StrReader.prototype.matchStartEnd_puj7f4$ = function (start, end) {
    if (!equals(this.substr_0(this.pos, start.length), start))
      return null;
    var startIndex = this.pos;
    var index = indexOf(this.str, end, this.pos);
    if (index < 0)
      return null;
    this.pos = index + end.length | 0;
    return this.slice_vux9f0$(startIndex, this.pos);
  };
  StrReader.prototype.clone = function () {
    return new StrReader(this.str, this.file, this.pos);
  };
  StrReader.prototype.tryRead_61zpoe$ = function (str) {
    if (equals(this.peek_za3lpa$(str.length), str)) {
      this.skip_za3lpa$(str.length);
      return true;
    }return false;
  };
  function StrReader$Literals(lits, map, lengths) {
    StrReader$Literals$Companion_getInstance();
    this.lits_0 = lits;
    this.map_0 = map;
    this.lengths = lengths;
  }
  function StrReader$Literals$Companion() {
    StrReader$Literals$Companion_instance = this;
  }
  StrReader$Literals$Companion.prototype.invoke_vqirvp$ = function (lits) {
    return this.fromList_kand9s$(copyToArray(toCollection(lits, ArrayList_init())));
  };
  StrReader$Literals$Companion.prototype.fromList_kand9s$ = function (lits) {
    var destination = ArrayList_init_0(lits.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== lits.length; ++tmp$) {
      var item = lits[tmp$];
      destination.add_11rb$(item.length);
    }
    var lengths = copyToArray(distinct(reversed(sorted(destination))));
    var map = LinkedHashMap_init();
    var tmp$_0;
    var n = 0;
    while (n < lits.length) {
      var lit = lits[tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0];
      map.put_xwzc9p$(lit, true);
    }
    return new StrReader$Literals(lits, map, lengths);
  };
  StrReader$Literals$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var StrReader$Literals$Companion_instance = null;
  function StrReader$Literals$Companion_getInstance() {
    if (StrReader$Literals$Companion_instance === null) {
      new StrReader$Literals$Companion();
    }return StrReader$Literals$Companion_instance;
  }
  StrReader$Literals.prototype.contains_61zpoe$ = function (lit) {
    return this.map_0.containsKey_11rb$(lit);
  };
  StrReader$Literals.prototype.matchAt_bm4lxs$ = function (str, offset) {
    var $receiver = this.lengths;
    var tmp$;
    var n = 0;
    while (n < $receiver.length) {
      var id = substr_0(str, offset, $receiver[tmp$ = n, n = tmp$ + 1 | 0, tmp$]);
      if (this.contains_61zpoe$(id))
        return id;
    }
    return null;
  };
  StrReader$Literals.prototype.toString = function () {
    return 'Literals(' + joinToString_0(this.lits_0, ' ') + ')';
  };
  StrReader$Literals.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Literals',
    interfaces: []
  };
  function StrReader$TRange(min, max, reader) {
    StrReader$TRange$Companion_getInstance();
    this.min = min;
    this.max = max;
    this.reader = reader;
  }
  function StrReader$TRange$Companion() {
    StrReader$TRange$Companion_instance = this;
  }
  StrReader$TRange$Companion.prototype.combine_vw4zp0$ = function (a, b) {
    var a_0 = a.min;
    var b_0 = b.min;
    var tmp$ = Math_0.min(a_0, b_0);
    var a_1 = a.max;
    var b_1 = b.max;
    return new StrReader$TRange(tmp$, Math_0.max(a_1, b_1), a.reader);
  };
  StrReader$TRange$Companion.prototype.combineList_hbyypg$ = function (list) {
    if (list.isEmpty())
      return null;
    var first = list.get_za3lpa$(0);
    var min = {v: first.min};
    var max = {v: first.max};
    var tmp$;
    var n = 0;
    while (n < list.size) {
      var i = list.get_za3lpa$((tmp$ = n, n = tmp$ + 1 | 0, tmp$));
      var a = min.v;
      var b = i.min;
      min.v = Math_0.min(a, b);
      var a_0 = max.v;
      var b_0 = i.max;
      max.v = Math_0.max(a_0, b_0);
    }
    return new StrReader$TRange(min.v, max.v, first.reader);
  };
  StrReader$TRange$Companion.prototype.createDummy = function () {
    return new StrReader$TRange(0, 0, new StrReader(''));
  };
  StrReader$TRange$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var StrReader$TRange$Companion_instance = null;
  function StrReader$TRange$Companion_getInstance() {
    if (StrReader$TRange$Companion_instance === null) {
      new StrReader$TRange$Companion();
    }return StrReader$TRange$Companion_instance;
  }
  StrReader$TRange.prototype.contains_za3lpa$ = function (index) {
    return index >= this.min && index <= this.max;
  };
  StrReader$TRange.prototype.toString = function () {
    return this.min.toString() + ':' + this.max;
  };
  Object.defineProperty(StrReader$TRange.prototype, 'file', {
    get: function () {
      return this.reader.file;
    }
  });
  Object.defineProperty(StrReader$TRange.prototype, 'text', {
    get: function () {
      return this.reader.slice_vux9f0$(this.min, this.max);
    }
  });
  StrReader$TRange.prototype.startEmptyRange = function () {
    return new StrReader$TRange(this.min, this.min, this.reader);
  };
  StrReader$TRange.prototype.endEmptyRange = function () {
    return new StrReader$TRange(this.max, this.max, this.reader);
  };
  StrReader$TRange.prototype.displace_za3lpa$ = function (offset) {
    return new StrReader$TRange(this.min + offset | 0, this.max + offset | 0, this.reader);
  };
  StrReader$TRange.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'TRange',
    interfaces: []
  };
  StrReader.prototype.readStringLit_6taknv$ = function (reportErrors) {
    if (reportErrors === void 0)
      reportErrors = true;
    var tmp$;
    var out = StringBuilder_init();
    var quotec = unboxChar(this.read());
    switch (quotec) {
      case 34:
      case 39:
        break;
      default:invalidOp('Invalid string literal');
        break;
    }
    var closed = false;
    while (this.hasMore) {
      var c = unboxChar(this.read());
      if (c === 92) {
        var cc = unboxChar(this.read());
        switch (cc) {
          case 92:
            tmp$ = 92;
            break;
          case 47:
            tmp$ = 47;
            break;
          case 39:
            tmp$ = 39;
            break;
          case 34:
            tmp$ = 34;
            break;
          case 98:
            tmp$ = 8;
            break;
          case 102:
            tmp$ = 12;
            break;
          case 110:
            tmp$ = 10;
            break;
          case 114:
            tmp$ = 13;
            break;
          case 116:
            tmp$ = 9;
            break;
          case 117:
            tmp$ = toChar(toInt_0(this.read_za3lpa$(4), 16));
            break;
          default:throw new IOException("Invalid char '" + String.fromCharCode(cc) + "'");
        }
        out.append_s8itvh$(tmp$);
      } else if (c === quotec) {
        closed = true;
        break;
      } else {
        out.append_s8itvh$(c);
      }
    }
    if (!closed && reportErrors) {
      throw RuntimeException_init("String literal not closed! '" + this.str + "'");
    }return out.toString();
  };
  StrReader.prototype.tryReadInt_za3lpa$ = function (default_0) {
    var digitCount = 0;
    var integral = 0;
    var mult = 1;
    loop: while (!this.eof) {
      var c = unboxChar(this.peek());
      if (c === 45) {
        this.skip_za3lpa$(1);
        mult = mult * -1 | 0;
      } else if ((new CharRange(48, 57)).contains_mef7kx$(c)) {
        var digit = c - 48;
        this.skip_za3lpa$(1);
        digitCount = digitCount + 1 | 0;
        integral = integral * 10 | 0;
        integral = integral + digit | 0;
      } else {
        break loop;
      }
    }
    return digitCount === 0 ? default_0 : integral;
  };
  StrReader.prototype.tryReadNumber_14dthe$ = function (default_0) {
    if (default_0 === void 0)
      default_0 = kotlin_js_internal_DoubleCompanionObject.NaN;
    var start = this.pos;
    while (true) {
      var tmp$ = this.hasMore;
      if (tmp$) {
        var it = this.peekChar();
        tmp$ = unboxChar(it) >= 48 && unboxChar(it) <= 57 || unboxChar(it) === 43 || unboxChar(it) === 45 || unboxChar(it) === 101 || unboxChar(it) === 69 || unboxChar(it) === 46;
      }if (!tmp$)
        break;
      this.readChar();
    }
    var end = this.pos;
    if (end === start)
      return default_0;
    return NumberParser_getInstance().parseDouble_3m52m6$(this.str, start, end);
  };
  StrReader.prototype.tryExpect_61zpoe$ = function (str) {
    var tmp$;
    tmp$ = str.length;
    for (var n = 0; n < tmp$; n++) {
      if (unboxChar(this.peekOffset_za3lpa$(n)) !== str.charCodeAt(n))
        return false;
    }
    this.skip_za3lpa$(str.length);
    return true;
  };
  StrReader.prototype.tryExpect_s8itvh$ = function (str) {
    if (unboxChar(this.peekChar()) !== str)
      return false;
    this.skip_za3lpa$(1);
    return true;
  };
  StrReader.prototype.peekOffset_za3lpa$ = function (offset) {
    if (offset === void 0)
      offset = 0;
    var $receiver = this.str;
    var index = this.pos + offset | 0;
    return toBoxedChar(index >= 0 && index <= get_lastIndex($receiver) ? $receiver.charCodeAt(index) : unboxChar(toBoxedChar(0)));
  };
  StrReader.prototype.readFloats_7u0t7$ = function (list) {
    if (list === void 0)
      list = new FloatArrayList(7);
    while (!this.eof) {
      var pos0 = this.pos;
      var float = this.skipSpaces().tryReadNumber_14dthe$();
      this.skipSpaces();
      var pos1 = this.pos;
      if (pos1 === pos0) {
        throw IllegalStateException_init(('Invalid number at ' + pos0 + " in '" + this.str + "'").toString());
      }list.add_mx4ult$(float);
    }
    return list;
  };
  StrReader.prototype.readIds_un5gdn$ = function (list) {
    if (list === void 0)
      list = ArrayList_init_0(7);
    var tmp$;
    while (!this.eof) {
      var pos0 = this.pos;
      var id = (tmp$ = this.skipSpaces().tryReadId()) != null ? tmp$ : '';
      this.skipSpaces();
      var pos1 = this.pos;
      if (pos1 === pos0) {
        throw IllegalStateException_init(('Invalid identifier at ' + pos0 + " in '" + this.str + "'").toString());
      }list.add_11rb$(id);
    }
    return list;
  };
  StrReader.prototype.readInts_38vc8i$ = function (list) {
    if (list === void 0)
      list = new IntArrayList(7);
    while (!this.eof) {
      var pos0 = this.pos;
      var v = this.skipSpaces().tryReadInt_za3lpa$(0);
      this.skipSpaces();
      var pos1 = this.pos;
      if (pos1 === pos0) {
        throw IllegalStateException_init(('Invalid int at ' + pos0 + " in '" + this.str + "'").toString());
      }list.add_za3lpa$(v);
    }
    return list;
  };
  StrReader.prototype.tryReadId = function () {
    var start = this.pos;
    while (true) {
      var tmp$ = this.hasMore;
      if (tmp$) {
        var it = this.peekChar();
        tmp$ = unboxChar(it) >= 48 && unboxChar(it) <= 57 || (unboxChar(it) >= 97 && unboxChar(it) <= 122) || (unboxChar(it) >= 65 && unboxChar(it) <= 90) || unboxChar(it) === 95 || unboxChar(it) === 46;
      }if (!tmp$)
        break;
      this.readChar();
    }
    var end = this.pos;
    if (end === start)
      return null;
    return this.str.substring(start, end);
  };
  StrReader.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'StrReader',
    interfaces: []
  };
  function reader($receiver, file, pos) {
    if (file === void 0)
      file = 'file';
    if (pos === void 0)
      pos = 0;
    return new StrReader($receiver, file, pos);
  }
  function escape($receiver) {
    var tmp$;
    var out = StringBuilder_init();
    tmp$ = $receiver.length;
    for (var n = 0; n < tmp$; n++) {
      var c = $receiver.charCodeAt(n);
      switch (c) {
        case 92:
          out.append_61zpoe$('\\\\');
          break;
        case 34:
          out.append_61zpoe$('\\"');
          break;
        case 10:
          out.append_61zpoe$('\\n');
          break;
        case 13:
          out.append_61zpoe$('\\r');
          break;
        case 9:
          out.append_61zpoe$('\\t');
          break;
        default:if ((new CharRange(0, 31)).contains_mef7kx$(c)) {
            out.append_61zpoe$('\\x');
            out.append_s8itvh$(unboxChar(Hex_getInstance().encodeCharLower_za3lpa$(extract(c | 0, 4, 4))));
            out.append_s8itvh$(unboxChar(Hex_getInstance().encodeCharLower_za3lpa$(extract(c | 0, 0, 4))));
          } else
            out.append_s8itvh$(c);
          break;
      }
    }
    return out.toString();
  }
  function uescape($receiver) {
    var tmp$;
    var out = StringBuilder_init();
    tmp$ = $receiver.length;
    for (var n = 0; n < tmp$; n++) {
      var c = $receiver.charCodeAt(n);
      switch (c) {
        case 92:
          out.append_61zpoe$('\\\\');
          break;
        case 34:
          out.append_61zpoe$('\\"');
          break;
        case 10:
          out.append_61zpoe$('\\n');
          break;
        case 13:
          out.append_61zpoe$('\\r');
          break;
        case 9:
          out.append_61zpoe$('\\t');
          break;
        default:if (isPrintable(c)) {
            out.append_s8itvh$(c);
          } else {
            out.append_61zpoe$('\\u');
            out.append_s8itvh$(unboxChar(Hex_getInstance().encodeCharLower_za3lpa$(extract(c | 0, 12, 4))));
            out.append_s8itvh$(unboxChar(Hex_getInstance().encodeCharLower_za3lpa$(extract(c | 0, 8, 4))));
            out.append_s8itvh$(unboxChar(Hex_getInstance().encodeCharLower_za3lpa$(extract(c | 0, 4, 4))));
            out.append_s8itvh$(unboxChar(Hex_getInstance().encodeCharLower_za3lpa$(extract(c | 0, 0, 4))));
          }

          break;
      }
    }
    return out.toString();
  }
  function unescape($receiver) {
    var tmp$, tmp$_0;
    var out = StringBuilder_init();
    var n = 0;
    while (n < $receiver.length) {
      var c = $receiver.charCodeAt((tmp$ = n, n = tmp$ + 1 | 0, tmp$));
      if (c === 92) {
        var c2 = $receiver.charCodeAt((tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0));
        switch (c2) {
          case 92:
            out.append_s8itvh$(92);
            break;
          case 34:
            out.append_s8itvh$(34);
            break;
          case 110:
            out.append_s8itvh$(10);
            break;
          case 114:
            out.append_s8itvh$(13);
            break;
          case 116:
            out.append_s8itvh$(9);
            break;
          case 117:
            var startIndex = n;
            var endIndex = n + 4 | 0;
            var chars = $receiver.substring(startIndex, endIndex);
            n = n + 4 | 0;
            out.append_s8itvh$(toChar(toInt_0(chars, 16)));
            break;
          default:out.append_61zpoe$('\\' + String.fromCharCode(c2));
            break;
        }
      } else
        out.append_s8itvh$(c);
    }
    return out.toString();
  }
  function uquote($receiver) {
    return $receiver != null ? '"' + uescape($receiver) + '"' : 'null';
  }
  function quote_0($receiver) {
    return $receiver != null ? '"' + escape($receiver) + '"' : 'null';
  }
  function isQuoted($receiver) {
    return startsWith_0($receiver, 34) && endsWith_0($receiver, 34);
  }
  function unquote($receiver) {
    var tmp$;
    if (isQuoted($receiver)) {
      var endIndex = $receiver.length - 1 | 0;
      tmp$ = unescape($receiver.substring(1, endIndex));
    } else
      tmp$ = $receiver;
    return tmp$;
  }
  function get_quoted_0($receiver) {
    return quote_0($receiver);
  }
  function get_unquoted($receiver) {
    return unquote($receiver);
  }
  function substringAfterOrNull($receiver, delimiter) {
    return contains($receiver, delimiter) ? substringAfter($receiver, delimiter) : null;
  }
  function substringBeforeOrNull($receiver, delimiter) {
    return contains($receiver, delimiter) ? substringBefore($receiver, delimiter) : null;
  }
  function substringAfterLastOrNull($receiver, delimiter) {
    return contains($receiver, delimiter) ? substringAfterLast($receiver, delimiter) : null;
  }
  function substringBeforeLastOrNull($receiver, delimiter) {
    return contains($receiver, delimiter) ? substringBeforeLast($receiver, delimiter) : null;
  }
  function substringAfterOrNull_0($receiver, delimiter) {
    return contains_1($receiver, delimiter) ? substringAfter_0($receiver, delimiter) : null;
  }
  function substringBeforeOrNull_0($receiver, delimiter) {
    return contains_1($receiver, delimiter) ? substringBefore_0($receiver, delimiter) : null;
  }
  function substringAfterLastOrNull_0($receiver, delimiter) {
    return contains_1($receiver, delimiter) ? substringAfterLast_0($receiver, delimiter) : null;
  }
  function substringBeforeLastOrNull_0($receiver, delimiter) {
    return contains_1($receiver, delimiter) ? substringBeforeLast_0($receiver, delimiter) : null;
  }
  function UUID(data) {
    UUID$Companion_getInstance();
    this.data = data;
  }
  function UUID$Companion() {
    UUID$Companion_instance = this;
    this.regex_0 = Regex_init_0('[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}', RegexOption.IGNORE_CASE);
  }
  UUID$Companion.prototype.fix_0 = function (data, version, variant) {
    data.set_vux9f0$(6, data.get_za3lpa$(6) & 15 | version << 4);
    data.set_vux9f0$(8, data.get_za3lpa$(8) & 1118481 | variant << 6);
    return data;
  };
  UUID$Companion.prototype.randomUUID_57bg73$ = function (random) {
    if (random === void 0)
      random = Random.Default;
    var $receiver = UByteArrayInt(16);
    random.nextBytes_fqrh44$(asByteArray($receiver));
    return new UUID(this.fix_0($receiver, 4, 1));
  };
  UUID$Companion.prototype.invoke_61zpoe$ = function (str) {
    if (this.regex_0.matchEntire_6bul2c$(str) == null)
      invalidArg('Invalid UUID');
    return new UUID(asUByteArrayInt(Hex_getInstance().decode_61zpoe$(replace_0(str, '-', ''))));
  };
  UUID$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var UUID$Companion_instance = null;
  function UUID$Companion_getInstance() {
    if (UUID$Companion_instance === null) {
      new UUID$Companion();
    }return UUID$Companion_instance;
  }
  Object.defineProperty(UUID.prototype, 'version', {
    get: function () {
      return this.data.get_za3lpa$(6) >>> 4 & 15;
    }
  });
  Object.defineProperty(UUID.prototype, 'variant', {
    get: function () {
      return this.data.get_za3lpa$(8) >>> 6 & 3;
    }
  });
  UUID.prototype.toString = function () {
    return format('%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x', [this.data.get_za3lpa$(0), this.data.get_za3lpa$(1), this.data.get_za3lpa$(2), this.data.get_za3lpa$(3), this.data.get_za3lpa$(4), this.data.get_za3lpa$(5), this.data.get_za3lpa$(6), this.data.get_za3lpa$(7), this.data.get_za3lpa$(8), this.data.get_za3lpa$(9), this.data.get_za3lpa$(10), this.data.get_za3lpa$(11), this.data.get_za3lpa$(12), this.data.get_za3lpa$(13), this.data.get_za3lpa$(14), this.data.get_za3lpa$(15)]);
  };
  UUID.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'UUID',
    interfaces: []
  };
  function Adler32() {
    Adler32_instance = this;
    this.BASE_0 = 65521;
    this.initialValue_5zxff$_0 = 1;
  }
  Object.defineProperty(Adler32.prototype, 'initialValue', {
    get: function () {
      return this.initialValue_5zxff$_0;
    }
  });
  Adler32.prototype.update_3fge6q$$default = function (old, data, offset, len) {
    var tmp$;
    var s1 = old >>> 0 & 65535;
    var s2 = old >>> 16 & 65535;
    tmp$ = offset + len | 0;
    for (var n = offset; n < tmp$; n++) {
      s1 = (s1 + (data[n] & 255) | 0) % 65521;
      s2 = (s2 + s1 | 0) % 65521;
    }
    return s2 << 16 | s1;
  };
  Adler32.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Adler32',
    interfaces: [SimpleChecksum]
  };
  var Adler32_instance = null;
  function Adler32_getInstance() {
    if (Adler32_instance === null) {
      new Adler32();
    }return Adler32_instance;
  }
  function CRC32() {
    CRC32_instance = this;
    this.initialValue_dlx7nh$_0 = 0;
    var array = new Int32Array(256);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      var c = i;
      for (var k = 0; k < 8; k++)
        c = (c & 1) !== 0 ? -306674912 ^ c >>> 1 : c >>> 1;
      array[i] = c;
    }
    this.TABLE_8be2vx$ = array;
  }
  Object.defineProperty(CRC32.prototype, 'initialValue', {
    get: function () {
      return this.initialValue_dlx7nh$_0;
    }
  });
  CRC32.prototype.update_3fge6q$$default = function (old, data, offset, len) {
    var tmp$;
    var c = ~old;
    var table = this.TABLE_8be2vx$;
    tmp$ = offset + len | 0;
    for (var n = offset; n < tmp$; n++)
      c = table[(c ^ data[n] & 255) & 255] ^ c >>> 8;
    return ~c;
  };
  CRC32.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'CRC32',
    interfaces: [SimpleChecksum]
  };
  var CRC32_instance = null;
  function CRC32_getInstance() {
    if (CRC32_instance === null) {
      new CRC32();
    }return CRC32_instance;
  }
  function SimpleChecksum() {
  }
  SimpleChecksum.prototype.update_3fge6q$ = function (old, data, offset, len, callback$default) {
    if (offset === void 0)
      offset = 0;
    if (len === void 0)
      len = data.length - offset | 0;
    return callback$default ? callback$default(old, data, offset, len) : this.update_3fge6q$$default(old, data, offset, len);
  };
  SimpleChecksum.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'SimpleChecksum',
    interfaces: []
  };
  function compute($receiver, data, offset, len) {
    if (offset === void 0)
      offset = 0;
    if (len === void 0)
      len = data.length - offset | 0;
    return $receiver.update_3fge6q$($receiver.initialValue, data, offset, len);
  }
  function checksum($receiver, checksum) {
    return compute(checksum, $receiver);
  }
  function checksum_0($receiver, checksum) {
    var value = checksum.initialValue;
    var temp = new Int8Array(1024);
    while (true) {
      var read = $receiver.read_mj6st8$(temp);
      if (read <= 0)
        break;
      value = checksum.update_3fge6q$(value, temp, 0, read);
    }
    return value;
  }
  function Coroutine$checksum($receiver_0, checksum_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$value = void 0;
    this.local$temp = void 0;
    this.local$read = void 0;
    this.local$$receiver = $receiver_0;
    this.local$checksum = checksum_0;
  }
  Coroutine$checksum.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$checksum.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$checksum.prototype.constructor = Coroutine$checksum;
  Coroutine$checksum.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.local$value = this.local$checksum.initialValue;
            this.local$temp = new Int8Array(1024);
            this.state_0 = 2;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.state_0 = 3;
            this.result_0 = read(this.local$$receiver, this.local$temp, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 3:
            this.local$read = this.result_0;
            if (this.local$read <= 0) {
              this.state_0 = 5;
              continue;
            } else {
              this.state_0 = 4;
              continue;
            }

          case 4:
            this.local$value = this.local$checksum.update_3fge6q$(this.local$value, this.local$temp, 0, this.local$read);
            this.state_0 = 2;
            continue;
          case 5:
            return this.local$value;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function checksum_1($receiver_0, checksum_0, continuation_0, suspended) {
    var instance = new Coroutine$checksum($receiver_0, checksum_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$checksum_0($receiver_0, checksum_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.local$$receiver_0 = void 0;
    this.local$tmp$ = void 0;
    this.local$error = void 0;
    this.local$result = void 0;
    this.local$$receiver = $receiver_0;
    this.local$checksum = checksum_0;
  }
  Coroutine$checksum_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$checksum_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$checksum_0.prototype.constructor = Coroutine$checksum_0;
  Coroutine$checksum_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 1;
            this.result_0 = this.local$$receiver.openRead(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.local$$receiver_0 = this.result_0;
            var tmp$;
            this.local$error = null;
            this.exceptionState_0 = 3;
            this.state_0 = 2;
            this.result_0 = checksum_1(this.local$$receiver_0, this.local$checksum, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 2:
            this.local$tmp$ = this.result_0;
            this.exceptionState_0 = 6;
            this.state_0 = 4;
            continue;
          case 3:
            this.exceptionState_0 = 6;
            var e_0 = this.exception_0;
            if (Kotlin.isType(e_0, Throwable)) {
              this.local$error = e_0;
              this.local$tmp$ = null;
            } else
              throw e_0;
            this.state_0 = 4;
            continue;
          case 4:
            this.local$result = this.local$tmp$;
            this.state_0 = 5;
            this.result_0 = this.local$$receiver_0.close(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 5:
            if (this.local$error != null)
              throw this.local$error;
            this.result_0 = (tmp$ = this.local$result) == null || Kotlin.isType(tmp$, Any) ? tmp$ : throwCCE();
            return this.result_0;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function checksum_2($receiver_0, checksum_0, continuation_0, suspended) {
    var instance = new Coroutine$checksum_0($receiver_0, checksum_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Base64() {
    Base64_instance = this;
    this.TABLE_0 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    var $receiver = new Int32Array(256);
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    for (var n = 0; n <= 255; n++)
      $receiver[n] = -1;
    tmp$ = get_indices_0(this.TABLE_0);
    tmp$_0 = tmp$.first;
    tmp$_1 = tmp$.last;
    tmp$_2 = tmp$.step;
    for (var n_0 = tmp$_0; n_0 <= tmp$_1; n_0 += tmp$_2)
      $receiver[this.TABLE_0.charCodeAt(n_0) | 0] = n_0;
    this.DECODE_0 = $receiver;
  }
  Base64.prototype.decode_61zpoe$ = function (str) {
    var dst = new Int8Array(((str.length * 4 | 0) / 3 | 0) + 4 | 0);
    var size = str.length;
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var m = 0;
    var n = 0;
    while (n < size) {
      var d = this.DECODE_0[(str.charCodeAt(n) | 0) & 255];
      if (d < 0) {
        n = n + 1 | 0;
        continue;
      }var b0 = this.DECODE_0[(str.charCodeAt((tmp$ = n, n = tmp$ + 1 | 0, tmp$)) | 0) & 255];
      var b1 = this.DECODE_0[(str.charCodeAt((tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0)) | 0) & 255];
      var b2 = this.DECODE_0[(str.charCodeAt((tmp$_1 = n, n = tmp$_1 + 1 | 0, tmp$_1)) | 0) & 255];
      var b3 = this.DECODE_0[(str.charCodeAt((tmp$_2 = n, n = tmp$_2 + 1 | 0, tmp$_2)) | 0) & 255];
      dst[tmp$_3 = m, m = tmp$_3 + 1 | 0, tmp$_3] = toByte(b0 << 2 | b1 >> 4);
      if (b2 < 64) {
        dst[tmp$_4 = m, m = tmp$_4 + 1 | 0, tmp$_4] = toByte(b1 << 4 | b2 >> 2);
        if (b3 < 64) {
          dst[tmp$_5 = m, m = tmp$_5 + 1 | 0, tmp$_5] = toByte(b2 << 6 | b3);
        }}}
    return copyOf(dst, m);
  };
  Base64.prototype.decode_r9qwmk$ = function (src, dst) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var m = 0;
    var n = 0;
    while (n < src.length) {
      var d = this.DECODE_0[src[n] & 255];
      if (d < 0) {
        n = n + 1 | 0;
        continue;
      }var b0 = this.DECODE_0[src[tmp$ = n, n = tmp$ + 1 | 0, tmp$] & 255];
      var b1 = this.DECODE_0[src[tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0] & 255];
      var b2 = this.DECODE_0[src[tmp$_1 = n, n = tmp$_1 + 1 | 0, tmp$_1] & 255];
      var b3 = this.DECODE_0[src[tmp$_2 = n, n = tmp$_2 + 1 | 0, tmp$_2] & 255];
      dst[tmp$_3 = m, m = tmp$_3 + 1 | 0, tmp$_3] = toByte(b0 << 2 | b1 >> 4);
      if (b2 < 64) {
        dst[tmp$_4 = m, m = tmp$_4 + 1 | 0, tmp$_4] = toByte(b1 << 4 | b2 >> 2);
        if (b3 < 64) {
          dst[tmp$_5 = m, m = tmp$_5 + 1 | 0, tmp$_5] = toByte(b2 << 6 | b3);
        }}}
    return m;
  };
  Base64.prototype.decodeInline_0 = function (dst, size, get) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    var m = 0;
    var n = 0;
    while (n < size) {
      var d = this.DECODE_0[get(n)];
      if (d < 0) {
        n = n + 1 | 0;
        continue;
      }var b0 = this.DECODE_0[get((tmp$ = n, n = tmp$ + 1 | 0, tmp$))];
      var b1 = this.DECODE_0[get((tmp$_0 = n, n = tmp$_0 + 1 | 0, tmp$_0))];
      var b2 = this.DECODE_0[get((tmp$_1 = n, n = tmp$_1 + 1 | 0, tmp$_1))];
      var b3 = this.DECODE_0[get((tmp$_2 = n, n = tmp$_2 + 1 | 0, tmp$_2))];
      dst[tmp$_3 = m, m = tmp$_3 + 1 | 0, tmp$_3] = toByte(b0 << 2 | b1 >> 4);
      if (b2 < 64) {
        dst[tmp$_4 = m, m = tmp$_4 + 1 | 0, tmp$_4] = toByte(b1 << 4 | b2 >> 2);
        if (b3 < 64) {
          dst[tmp$_5 = m, m = tmp$_5 + 1 | 0, tmp$_5] = toByte(b2 << 6 | b3);
        }}}
    return m;
  };
  Base64.prototype.encode_6zdodq$ = function (src, charset) {
    return this.encode_fqrh44$(toByteArray(src, charset));
  };
  Base64.prototype.encode_fqrh44$ = function (src) {
    return this.encode_mj6st8$(src, 0, src.length);
  };
  Base64.prototype.encode_mj6st8$ = function (src, start, size) {
    var tmp$, tmp$_0, tmp$_1;
    var out = StringBuilder_init_0(((size * 4 | 0) / 3 | 0) + 4 | 0);
    var ipos = start;
    var iend = start + size | 0;
    var extraBytes = size % 3;
    while (ipos < (iend - 2 | 0)) {
      var num = readU24BE(src, ipos);
      ipos = ipos + 3 | 0;
      out.append_s8itvh$(this.TABLE_0.charCodeAt(num >>> 18 & 63));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(num >>> 12 & 63));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(num >>> 6 & 63));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(num >>> 0 & 63));
    }
    if (extraBytes === 1) {
      var num_0 = readU8(src, (tmp$ = ipos, ipos = tmp$ + 1 | 0, tmp$));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(num_0 >>> 2));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(num_0 << 4 & 63));
      out.append_s8itvh$(61);
      out.append_s8itvh$(61);
    } else if (extraBytes === 2) {
      var tmp = readU8(src, (tmp$_0 = ipos, ipos = tmp$_0 + 1 | 0, tmp$_0)) << 8 | readU8(src, (tmp$_1 = ipos, ipos = tmp$_1 + 1 | 0, tmp$_1));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(tmp >>> 10));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(tmp >>> 4 & 63));
      out.append_s8itvh$(this.TABLE_0.charCodeAt(tmp << 2 & 63));
      out.append_s8itvh$(61);
    }return out.toString();
  };
  Base64.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Base64',
    interfaces: []
  };
  var Base64_instance = null;
  function Base64_getInstance() {
    if (Base64_instance === null) {
      new Base64();
    }return Base64_instance;
  }
  function fromBase64IgnoreSpaces($receiver) {
    return Base64_getInstance().decode_61zpoe$(replace_0(replace_0(replace_0($receiver, ' ', ''), '\n', ''), '\r', ''));
  }
  function fromBase64($receiver) {
    return Base64_getInstance().decode_61zpoe$($receiver);
  }
  function toBase64($receiver) {
    return Base64_getInstance().encode_fqrh44$($receiver);
  }
  function Hex() {
    Hex_instance = this;
    this.DIGITS_0 = '0123456789ABCDEF';
    this.DIGITS_UPPER = this.DIGITS_0.toUpperCase();
    this.DIGITS_LOWER = this.DIGITS_0.toLowerCase();
  }
  Hex.prototype.decodeChar_s8itvh$ = function (c) {
    if ((new CharRange(48, 57)).contains_mef7kx$(c))
      return c - 48;
    else if ((new CharRange(97, 102)).contains_mef7kx$(c))
      return c - 97 + 10 | 0;
    else if ((new CharRange(65, 70)).contains_mef7kx$(c))
      return c - 65 + 10 | 0;
    else
      return -1;
  };
  Hex.prototype.encodeCharLower_za3lpa$ = function (v) {
    return toBoxedChar(this.DIGITS_LOWER.charCodeAt(v));
  };
  Hex.prototype.encodeCharUpper_za3lpa$ = function (v) {
    return toBoxedChar(this.DIGITS_UPPER.charCodeAt(v));
  };
  Hex.prototype.isHexDigit_s8itvh$ = function (c) {
    return this.decodeChar_s8itvh$(c) >= 0;
  };
  Hex.prototype.decode_61zpoe$ = function (str) {
    var tmp$, tmp$_0;
    var out = new Int8Array((str.length + 1 | 0) / 2 | 0);
    var opos = 0;
    var nibbles = 0;
    var value = 0;
    tmp$ = str.length;
    for (var n = 0; n < tmp$; n++) {
      var c = str.charCodeAt(n);
      var vv = this.decodeChar_s8itvh$(c);
      if (vv >= 0) {
        value = value << 4 | vv;
        nibbles = nibbles + 1 | 0;
      }if (nibbles === 2) {
        out[tmp$_0 = opos, opos = tmp$_0 + 1 | 0, tmp$_0] = toByte(value);
        nibbles = 0;
        value = 0;
      }}
    return opos !== out.length ? copyOf(out, opos) : out;
  };
  Hex.prototype.encodeLower_fqrh44$ = function (src) {
    return this.encodeBase_0(src, this.DIGITS_LOWER);
  };
  Hex.prototype.encodeUpper_fqrh44$ = function (src) {
    return this.encodeBase_0(src, this.DIGITS_UPPER);
  };
  Hex.prototype.encodeBase_0 = function (data, digits) {
    if (digits === void 0)
      digits = this.DIGITS_0;
    var out = StringBuilder_init_0(data.length * 2 | 0);
    for (var n = 0; n < data.length; n++) {
      var v = data[n] & 255;
      out.append_s8itvh$(digits.charCodeAt(v >>> 4 & 15));
      out.append_s8itvh$(digits.charCodeAt(v >>> 0 & 15));
    }
    return out.toString();
  };
  Hex.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Hex',
    interfaces: []
  };
  var Hex_instance = null;
  function Hex_getInstance() {
    if (Hex_instance === null) {
      new Hex();
    }return Hex_instance;
  }
  function get_unhexIgnoreSpaces($receiver) {
    return get_unhexIgnoreSpaces_0(joinToString($receiver, ''));
  }
  function get_unhexIgnoreSpaces_0($receiver) {
    return get_unhex(replace_0(replace_0(replace_0($receiver, ' ', ''), '\n', ''), '\r', ''));
  }
  function get_unhex($receiver) {
    return Hex_getInstance().decode_61zpoe$($receiver);
  }
  function get_hex($receiver) {
    return Hex_getInstance().encodeLower_fqrh44$($receiver);
  }
  function get_hex_0($receiver) {
    return '0x' + get_shex($receiver);
  }
  function get_shex($receiver) {
    var out = '';
    for (var n = 0; n < 8; n++) {
      var v = $receiver >>> ((7 - n | 0) * 4 | 0) & 15;
      out += String.fromCharCode(unboxChar(Hex_getInstance().encodeCharUpper_za3lpa$(v)));
    }
    return out;
  }
  function Language(name, ordinal, iso6391, iso6392) {
    Enum.call(this);
    this.iso6391 = iso6391;
    this.iso6392 = iso6392;
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Language_initFields() {
    Language_initFields = function () {
    };
    Language$JAPANESE_instance = new Language('JAPANESE', 0, 'ja', 'jpn');
    Language$ENGLISH_instance = new Language('ENGLISH', 1, 'en', 'eng');
    Language$FRENCH_instance = new Language('FRENCH', 2, 'fr', 'fra');
    Language$SPANISH_instance = new Language('SPANISH', 3, 'es', 'spa');
    Language$GERMAN_instance = new Language('GERMAN', 4, 'de', 'deu');
    Language$ITALIAN_instance = new Language('ITALIAN', 5, 'it', 'ita');
    Language$DUTCH_instance = new Language('DUTCH', 6, 'nl', 'nld');
    Language$PORTUGUESE_instance = new Language('PORTUGUESE', 7, 'pt', 'por');
    Language$RUSSIAN_instance = new Language('RUSSIAN', 8, 'ru', 'rus');
    Language$KOREAN_instance = new Language('KOREAN', 9, 'ko', 'kor');
    Language$CHINESE_instance = new Language('CHINESE', 10, 'zh', 'zho');
    Language$Companion_getInstance();
  }
  var Language$JAPANESE_instance;
  function Language$JAPANESE_getInstance() {
    Language_initFields();
    return Language$JAPANESE_instance;
  }
  var Language$ENGLISH_instance;
  function Language$ENGLISH_getInstance() {
    Language_initFields();
    return Language$ENGLISH_instance;
  }
  var Language$FRENCH_instance;
  function Language$FRENCH_getInstance() {
    Language_initFields();
    return Language$FRENCH_instance;
  }
  var Language$SPANISH_instance;
  function Language$SPANISH_getInstance() {
    Language_initFields();
    return Language$SPANISH_instance;
  }
  var Language$GERMAN_instance;
  function Language$GERMAN_getInstance() {
    Language_initFields();
    return Language$GERMAN_instance;
  }
  var Language$ITALIAN_instance;
  function Language$ITALIAN_getInstance() {
    Language_initFields();
    return Language$ITALIAN_instance;
  }
  var Language$DUTCH_instance;
  function Language$DUTCH_getInstance() {
    Language_initFields();
    return Language$DUTCH_instance;
  }
  var Language$PORTUGUESE_instance;
  function Language$PORTUGUESE_getInstance() {
    Language_initFields();
    return Language$PORTUGUESE_instance;
  }
  var Language$RUSSIAN_instance;
  function Language$RUSSIAN_getInstance() {
    Language_initFields();
    return Language$RUSSIAN_instance;
  }
  var Language$KOREAN_instance;
  function Language$KOREAN_getInstance() {
    Language_initFields();
    return Language$KOREAN_instance;
  }
  var Language$CHINESE_instance;
  function Language$CHINESE_getInstance() {
    Language_initFields();
    return Language$CHINESE_instance;
  }
  function Language$Companion() {
    Language$Companion_instance = this;
    var $receiver = Language$values();
    var destination = ArrayList_init_0($receiver.length);
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var item = $receiver[tmp$];
      destination.add_11rb$(to(item.name.toLowerCase(), item));
    }
    var $receiver_0 = Language$values();
    var destination_0 = ArrayList_init_0($receiver_0.length);
    var tmp$_0;
    for (tmp$_0 = 0; tmp$_0 !== $receiver_0.length; ++tmp$_0) {
      var item_0 = $receiver_0[tmp$_0];
      destination_0.add_11rb$(to(item_0.iso6391, item_0));
    }
    var tmp$_1 = plus(destination, destination_0);
    var $receiver_1 = Language$values();
    var destination_1 = ArrayList_init_0($receiver_1.length);
    var tmp$_2;
    for (tmp$_2 = 0; tmp$_2 !== $receiver_1.length; ++tmp$_2) {
      var item_1 = $receiver_1[tmp$_2];
      destination_1.add_11rb$(to(item_1.iso6392, item_1));
    }
    this.BY_ID = toMap(plus(tmp$_1, destination_1));
    this.SYSTEM_LANGS_69i2sh$_0 = lazy(Language$Companion$SYSTEM_LANGS$lambda(this));
    this.SYSTEM_cafqvb$_0 = lazy(Language$Companion$SYSTEM$lambda(this));
  }
  Language$Companion.prototype.get_61zpoe$ = function (id) {
    return this.BY_ID.get_11rb$(id);
  };
  Object.defineProperty(Language$Companion.prototype, 'SYSTEM_LANGS', {
    get: function () {
      return this.SYSTEM_LANGS_69i2sh$_0.value;
    }
  });
  Object.defineProperty(Language$Companion.prototype, 'SYSTEM', {
    get: function () {
      return this.SYSTEM_cafqvb$_0.value;
    }
  });
  Object.defineProperty(Language$Companion.prototype, 'CURRENT', {
    get: function () {
      return get_Language_CURRENT().value;
    },
    set: function (value) {
      get_Language_CURRENT().value = value;
    }
  });
  function Language$Companion$SYSTEM_LANGS$lambda(this$Language$) {
    return function () {
      var $receiver = get_systemLanguageStrings();
      var destination = ArrayList_init();
      var tmp$;
      tmp$ = $receiver.iterator();
      while (tmp$.hasNext()) {
        var element = tmp$.next();
        var tmp$_0;
        if ((tmp$_0 = this$Language$.BY_ID.get_11rb$(substringBefore(element, 45))) != null) {
          destination.add_11rb$(tmp$_0);
        }}
      return destination;
    };
  }
  function Language$Companion$SYSTEM$lambda(this$Language$) {
    return function () {
      var tmp$;
      return (tmp$ = firstOrNull(this$Language$.SYSTEM_LANGS)) != null ? tmp$ : Language$ENGLISH_getInstance();
    };
  }
  Language$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var Language$Companion_instance = null;
  function Language$Companion_getInstance() {
    Language_initFields();
    if (Language$Companion_instance === null) {
      new Language$Companion();
    }return Language$Companion_instance;
  }
  Language.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Language',
    interfaces: [Enum]
  };
  function Language$values() {
    return [Language$JAPANESE_getInstance(), Language$ENGLISH_getInstance(), Language$FRENCH_getInstance(), Language$SPANISH_getInstance(), Language$GERMAN_getInstance(), Language$ITALIAN_getInstance(), Language$DUTCH_getInstance(), Language$PORTUGUESE_getInstance(), Language$RUSSIAN_getInstance(), Language$KOREAN_getInstance(), Language$CHINESE_getInstance()];
  }
  Language.values = Language$values;
  function Language$valueOf(name) {
    switch (name) {
      case 'JAPANESE':
        return Language$JAPANESE_getInstance();
      case 'ENGLISH':
        return Language$ENGLISH_getInstance();
      case 'FRENCH':
        return Language$FRENCH_getInstance();
      case 'SPANISH':
        return Language$SPANISH_getInstance();
      case 'GERMAN':
        return Language$GERMAN_getInstance();
      case 'ITALIAN':
        return Language$ITALIAN_getInstance();
      case 'DUTCH':
        return Language$DUTCH_getInstance();
      case 'PORTUGUESE':
        return Language$PORTUGUESE_getInstance();
      case 'RUSSIAN':
        return Language$RUSSIAN_getInstance();
      case 'KOREAN':
        return Language$KOREAN_getInstance();
      case 'CHINESE':
        return Language$CHINESE_getInstance();
      default:throwISE('No enum constant com.soywiz.korio.util.i18n.Language.' + name);
    }
  }
  Language.valueOf_61zpoe$ = Language$valueOf;
  function Language_CURRENT$lambda() {
    return new KorAtomicRef(Language$Companion_getInstance().SYSTEM);
  }
  var Language_CURRENT;
  function get_Language_CURRENT() {
    return Language_CURRENT.value;
  }
  function createURLForData(data, contentType) {
    var o = {};
    o['type'] = contentType;
    return URL.createObjectURL(new Blob([data], o));
  }
  function revokeRLForData(url) {
    URL.revokeObjectURL(url);
  }
  var createTemporalURLForData = defineInlineFunction('korio-root-korio.com.soywiz.korio.createTemporalURLForData_y2mrn0$', wrapFunction(function () {
    var createURLForData = _.com.soywiz.korio.createURLForData_nwlife$;
    var revokeRLForData = _.com.soywiz.korio.revokeRLForData_61zpoe$;
    return function (data, contentType, callback) {
      var blobURL = createURLForData(data, contentType);
      try {
        return callback(blobURL);
      }finally {
        revokeRLForData(blobURL);
      }
    };
  }));
  function jsLocalStorageVfs$lambda$ObjectLiteral() {
  }
  jsLocalStorageVfs$lambda$ObjectLiteral.prototype.get_61zpoe$ = function (key, continuation) {
    return localStorage[key];
  };
  jsLocalStorageVfs$lambda$ObjectLiteral.prototype.set_puj7f4$ = function (key, value, continuation) {
    localStorage[key] = value;
    return Unit;
  };
  jsLocalStorageVfs$lambda$ObjectLiteral.prototype.remove_61zpoe$ = function (key, continuation) {
    return localStorage.removeItem(key);
  };
  jsLocalStorageVfs$lambda$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [SimpleStorage]
  };
  function jsLocalStorageVfs$lambda() {
    return new MapLikeStorageVfs(new jsLocalStorageVfs$lambda$ObjectLiteral());
  }
  var jsLocalStorageVfs;
  function get_jsLocalStorageVfs() {
    return jsLocalStorageVfs.value;
  }
  function jsbaseUrl$lambda() {
    var tmp$, tmp$_0;
    var href = (tmp$_0 = (tmp$ = document.location) != null ? tmp$.href : null) != null ? tmp$_0 : '.';
    return endsWith(href, '/') ? href : substringBeforeLast(href, 47);
  }
  var jsbaseUrl;
  function get_jsbaseUrl() {
    return jsbaseUrl.value;
  }
  var globalDynamic;
  var global_0;
  function isWeb$lambda() {
    return typeof window === 'object';
  }
  var isWeb;
  function get_isWeb() {
    return isWeb.value;
  }
  function isWorker$lambda() {
    return typeof importScripts === 'function';
  }
  var isWorker;
  function get_isWorker() {
    return isWorker.value;
  }
  function isNodeJs$lambda() {
    return typeof process !== 'undefined' && process.release && process.release.name.search(/node|io.js/) !== -1;
  }
  var isNodeJs;
  function get_isNodeJs() {
    return isNodeJs.value;
  }
  function get_isShell() {
    return !get_isWeb() && !get_isNodeJs() && !get_isWorker();
  }
  function toList_4($receiver) {
    var $receiver_0 = until(0, $receiver.length);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$;
    tmp$ = $receiver_0.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$($receiver[item]);
    }
    return destination;
  }
  function toTypedList($receiver) {
    var $receiver_0 = until(0, $receiver.length);
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$;
    tmp$ = $receiver_0.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$($receiver[item]);
    }
    return destination;
  }
  function jsNew(clazz) {
    return (new clazz())();
  }
  function jsNew_0(clazz, a0) {
    return (new clazz())(a0);
  }
  function jsNew_1(clazz, a0, a1) {
    return (new clazz())(a0, a1);
  }
  function jsNew_2(clazz, a0, a1, a2) {
    return (new clazz())(a0, a1, a2);
  }
  function jsEnsureNumber(v) {
    return +v;
  }
  function jsEnsureInt(v) {
    return v | 0;
  }
  function jsEmptyObj() {
    return {};
  }
  function jsEmptyArray() {
    return [];
  }
  function jsObjectKeys(obj) {
    return Object.keys(obj);
  }
  function jsObjectKeysArray(obj) {
    var tmp$;
    return Kotlin.isArray(tmp$ = jsToArray(jsObjectKeys(obj))) ? tmp$ : throwCCE();
  }
  function jsObjectToMap(obj) {
    var $receiver = jsObjectKeysArray(obj);
    var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
    var destination = LinkedHashMap_init_0(capacity);
    var tmp$;
    for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
      var element = $receiver[tmp$];
      var pair = to(element, obj[element]);
      destination.put_xwzc9p$(pair.first, pair.second);
    }
    return destination;
  }
  function jsToArray(obj) {
    var array = Array_0(obj.length);
    var tmp$;
    tmp$ = array.length - 1 | 0;
    for (var i = 0; i <= tmp$; i++) {
      array[i] = obj[i];
    }
    return array;
  }
  function jsArray(elements) {
    var tmp$;
    var out = jsEmptyArray();
    for (tmp$ = 0; tmp$ !== elements.length; ++tmp$) {
      var e = elements[tmp$];
      out.push(e);
    }
    return out;
  }
  var jsToArrayT = defineInlineFunction('korio-root-korio.com.soywiz.korio.jsToArrayT_86eaif$', wrapFunction(function () {
    var Array_0 = Array;
    return function (T_0, isT, obj) {
      var array = Array_0(obj.length);
      var tmp$;
      tmp$ = array.length - 1 | 0;
      for (var i = 0; i <= tmp$; i++) {
        array[i] = obj[i];
      }
      return array;
    };
  }));
  function jsObject(pairs) {
    var tmp$;
    var out = jsEmptyObj();
    for (tmp$ = 0; tmp$ !== pairs.length; ++tmp$) {
      var pair = pairs[tmp$];
      out[pair.first] = pair.second;
    }
    return out;
  }
  function toJsObject($receiver) {
    var $receiver_0 = $receiver.entries;
    var destination = ArrayList_init_0(collectionSizeOrDefault($receiver_0, 10));
    var tmp$;
    tmp$ = $receiver_0.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      destination.add_11rb$(to(item.key, item.value));
    }
    return jsObject(copyToArray(destination).slice());
  }
  function jsToObjectMap(obj) {
    var tmp$;
    if (obj == null)
      return null;
    var out = LinkedHashMap_init();
    var keys = jsObjectKeys(obj);
    tmp$ = keys.length;
    for (var n = 0; n < tmp$; n++) {
      var key = keys[n];
      var key_0 = key.toString();
      var value = obj[key];
      out.put_xwzc9p$(key_0, value);
    }
    return out;
  }
  function suspendCoroutine$lambda_1(closure$block) {
    return function (c) {
      var safe = SafeContinuation_init(intercepted(c));
      closure$block(safe);
      return safe.getOrThrow();
    };
  }
  var require_req;
  function require_node(name) {
    return require_req(name);
  }
  function toByteArray_1($receiver) {
    return new Int8Array($receiver);
  }
  function asInt8Array($receiver) {
    return $receiver;
  }
  function asUint8Array($receiver) {
    var i = asInt8Array($receiver);
    return new Uint8Array(i.buffer, i.byteOffset, i.length);
  }
  function toNodeJsBuffer($receiver) {
    return asUint8Array($receiver);
  }
  function toNodeJsBuffer_0($receiver, offset, size) {
    return global_0.Buffer.from($receiver, offset, size);
  }
  function HttpClientNodeJs() {
    HttpClient.call(this);
  }
  function HttpClientNodeJs$requestInternal$lambda$lambda(closure$body) {
    return function (d) {
      return closure$body.push(d);
    };
  }
  function HttpClientNodeJs$requestInternal$lambda$lambda_0(closure$body, closure$statusCode, closure$statusMessage, closure$jsHeadersObj, closure$deferred) {
    return function () {
      var tmp$, tmp$_0;
      var r = global_0.Buffer.concat(closure$body);
      var u8array = new Int8Array(r);
      var out = new Int8Array(u8array.length);
      tmp$ = u8array.length;
      for (var n = 0; n < tmp$; n++) {
        out[n] = u8array[n];
      }
      var $receiver = (tmp$_0 = jsToObjectMap(closure$jsHeadersObj)) != null ? tmp$_0 : LinkedHashMap_init();
      var destination = LinkedHashMap_init_0(mapCapacity($receiver.size));
      var tmp$_1;
      tmp$_1 = $receiver.entries.iterator();
      while (tmp$_1.hasNext()) {
        var element = tmp$_1.next();
        destination.put_xwzc9p$(element.key, toString(element.value));
      }
      var response = new HttpClient$Response(closure$statusCode, closure$statusMessage, Http$Http$Headers_init_0(destination), openAsync(out));
      return closure$deferred.complete_11rb$(response);
    };
  }
  function HttpClientNodeJs$requestInternal$lambda(closure$deferred) {
    return function (res) {
      var tmp$;
      var statusCode = res.statusCode;
      var statusMessage = (tmp$ = res.statusMessage) != null ? tmp$ : '';
      var jsHeadersObj = res.headers;
      var body = jsEmptyArray();
      res.on('data', HttpClientNodeJs$requestInternal$lambda$lambda(body));
      return res.on('end', HttpClientNodeJs$requestInternal$lambda$lambda_0(body, statusCode, statusMessage, jsHeadersObj, closure$deferred));
    };
  }
  function HttpClientNodeJs$requestInternal$lambda_0(closure$deferred) {
    return function (e) {
      return closure$deferred.completeExceptionally_tcv7n7$(RuntimeException_init('Error: ' + e.toString()));
    };
  }
  function HttpClientNodeJs$requestInternal$lambda_1(closure$deferred, closure$r) {
    return function (it) {
      if (closure$deferred.isCancelled) {
        closure$r.abort();
      }return Unit;
    };
  }
  function Coroutine$requestInternal_wintjk$$default_1($this, method_0, url_0, headers_0, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$deferred = void 0;
    this.local$r = void 0;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
  }
  Coroutine$requestInternal_wintjk$$default_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$requestInternal_wintjk$$default_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$requestInternal_wintjk$$default_1.prototype.constructor = Coroutine$requestInternal_wintjk$$default_1;
  Coroutine$requestInternal_wintjk$$default_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.local$deferred = CompletableDeferred_0(Job());
            var http = require_node('http');
            var jsurl = require_node('url');
            var info = jsurl.parse(this.local$url);
            var reqHeaders = jsEmptyObj();
            tmp$ = this.local$headers.iterator();
            while (tmp$.hasNext()) {
              var header = tmp$.next();
              reqHeaders[header.first] = header.second;
            }

            var req = jsEmptyObj();
            req.method = this.local$method.name;
            req.host = info['hostname'];
            req.port = info['port'];
            req.path = info['path'];
            req.agent = false;
            req.encoding = null;
            req.headers = reqHeaders;
            this.local$r = http.request(req, HttpClientNodeJs$requestInternal$lambda(this.local$deferred)).on('error', HttpClientNodeJs$requestInternal$lambda_0(this.local$deferred));
            this.local$deferred.invokeOnCompletion_f05bi3$(HttpClientNodeJs$requestInternal$lambda_1(this.local$deferred, this.local$r));
            if (this.local$content != null) {
              this.state_0 = 2;
              this.result_0 = readAll(this.local$content, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.local$r.end();
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$r.end(toTypedArray(this.result_0));
            this.state_0 = 3;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$deferred.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClientNodeJs.prototype.requestInternal_wintjk$$default = function (method_0, url_0, headers_0, content_0, continuation_0, suspended) {
    var instance = new Coroutine$requestInternal_wintjk$$default_1(this, method_0, url_0, headers_0, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  HttpClientNodeJs.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HttpClientNodeJs',
    interfaces: [HttpClient]
  };
  function HttpSeverNodeJs() {
    HttpServer.call(this);
    this.context_0 = coroutines.EmptyCoroutineContext;
    this.handler_0 = HttpSeverNodeJs$handler$lambda;
    this.http = require_node('http');
    this.server = this.http.createServer(HttpSeverNodeJs$server$lambda(this));
  }
  function Coroutine$websocketHandlerInternal_d3ycxo$($this, handler_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$handler = handler_0;
  }
  Coroutine$websocketHandlerInternal_d3ycxo$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$websocketHandlerInternal_d3ycxo$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$websocketHandlerInternal_d3ycxo$.prototype.constructor = Coroutine$websocketHandlerInternal_d3ycxo$;
  Coroutine$websocketHandlerInternal_d3ycxo$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = HttpServer.prototype.websocketHandlerInternal_d3ycxo$.call(this.$this, this.local$handler, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpSeverNodeJs.prototype.websocketHandlerInternal_d3ycxo$ = function (handler_0, continuation_0, suspended) {
    var instance = new Coroutine$websocketHandlerInternal_d3ycxo$(this, handler_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral(closure$req, closure$res, method, uri, headers, requestConfig) {
    this.closure$req = closure$req;
    this.closure$res = closure$res;
    HttpServer$Request.call(this, method, uri, headers, requestConfig);
  }
  function HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_handler$lambda(closure$handler) {
    return function (chunk) {
      closure$handler(new Int8Array(chunk.buffer));
      return Unit;
    };
  }
  HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral.prototype._handler_949j03$ = function (handler, continuation) {
    this.closure$req.on('data', HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_handler$lambda(handler));
  };
  function HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_endHandler$lambda(closure$handler) {
    return function () {
      closure$handler();
      return Unit;
    };
  }
  function HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_endHandler$lambda_0(closure$handler) {
    return function () {
      closure$handler();
      return Unit;
    };
  }
  HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral.prototype._endHandler_o14v8n$ = function (handler, continuation) {
    this.closure$req.on('end', HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_endHandler$lambda(handler));
    this.closure$req.on('error', HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_endHandler$lambda_0(handler));
  };
  HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral.prototype._sendHeader_j29v25$ = function (code, message, headers, continuation) {
    var tmp$;
    this.closure$res.statusCode = code;
    this.closure$res.statusMessage = message;
    tmp$ = headers.iterator();
    while (tmp$.hasNext()) {
      var header = tmp$.next();
      this.closure$res.setHeader(header.first, header.second);
    }
  };
  function HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_write$lambda$lambda(closure$c) {
    return function () {
      closure$c.resumeWith_tl1gpc$(new Result(Unit));
      return Unit;
    };
  }
  function HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_write$lambda(closure$res, closure$data, closure$offset, closure$size) {
    return function (c) {
      closure$res.write(toNodeJsBuffer_0(closure$data, closure$offset, closure$size), HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_write$lambda$lambda(c));
      return Unit;
    };
  }
  function Coroutine$_write_mj6st8$$default_0($this, data_0, offset_0, size_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$data = data_0;
    this.local$offset = offset_0;
    this.local$size = size_0;
  }
  Coroutine$_write_mj6st8$$default_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$_write_mj6st8$$default_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$_write_mj6st8$$default_0.prototype.constructor = Coroutine$_write_mj6st8$$default_0;
  Coroutine$_write_mj6st8$$default_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_write$lambda(this.$this.closure$res, this.local$data, this.local$offset, this.local$size))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral.prototype._write_mj6st8$$default = function (data_0, offset_0, size_0, continuation_0, suspended) {
    var instance = new Coroutine$_write_mj6st8$$default_0(this, data_0, offset_0, size_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_end$lambda$lambda(closure$c) {
    return function () {
      closure$c.resumeWith_tl1gpc$(new Result(Unit));
      return Unit;
    };
  }
  function HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_end$lambda(closure$res) {
    return function (c) {
      closure$res.end(HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_end$lambda$lambda(c));
      return Unit;
    };
  }
  function Coroutine$_end($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$_end.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$_end.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$_end.prototype.constructor = Coroutine$_end;
  Coroutine$_end.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral$_end$lambda(this.$this.closure$res))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral.prototype._end = function (continuation_0, suspended) {
    var instance = new Coroutine$_end(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [HttpServer$Request]
  };
  function Coroutine$HttpSeverNodeJs$httpHandlerInternal$lambda(closure$handler_0, req_0, res_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$req = req_0;
    this.local$res = res_0;
  }
  Coroutine$HttpSeverNodeJs$httpHandlerInternal$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpSeverNodeJs$httpHandlerInternal$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpSeverNodeJs$httpHandlerInternal$lambda.prototype.constructor = Coroutine$HttpSeverNodeJs$httpHandlerInternal$lambda;
  Coroutine$HttpSeverNodeJs$httpHandlerInternal$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var method = Http$Method$Companion_getInstance().get_61zpoe$(this.local$req.method);
            var url = this.local$req.url;
            var $receiver = jsToArray(this.local$req.rawHeaders);
            var destination = ArrayList_init_0($receiver.length);
            var tmp$;
            for (tmp$ = 0; tmp$ !== $receiver.length; ++tmp$) {
              var item = $receiver[tmp$];
              destination.add_11rb$(toString(item));
            }

            var headers = new Http$Headers(zipWithNext(destination));
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler(new HttpSeverNodeJs$httpHandlerInternal$lambda$ObjectLiteral(this.local$req, this.local$res, method, url, headers, new HttpServer$RequestConfig()), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpSeverNodeJs$httpHandlerInternal$lambda(closure$handler_0) {
    return function (req_0, res_0, continuation_0, suspended) {
      var instance = new Coroutine$HttpSeverNodeJs$httpHandlerInternal$lambda(closure$handler_0, req_0, res_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  HttpSeverNodeJs.prototype.httpHandlerInternal_b59mbs$ = function (handler, continuation) {
    this.context_0 = continuation.context;
    this.handler_0 = HttpSeverNodeJs$httpHandlerInternal$lambda(handler);
  };
  function HttpSeverNodeJs$listenInternal$lambda$lambda(closure$c) {
    return function () {
      closure$c.resumeWith_tl1gpc$(new Result(Unit));
      return Unit;
    };
  }
  function HttpSeverNodeJs$listenInternal$lambda(this$HttpSeverNodeJs, closure$port, closure$host) {
    return function (c) {
      this$HttpSeverNodeJs.context_0 = c.context;
      this$HttpSeverNodeJs.server.listen(closure$port, closure$host, 511, HttpSeverNodeJs$listenInternal$lambda$lambda(c));
      return Unit;
    };
  }
  function Coroutine$listenInternal_19mbxw$$default_1($this, port_0, host_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$port = port_0;
    this.local$host = host_0;
  }
  Coroutine$listenInternal_19mbxw$$default_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$listenInternal_19mbxw$$default_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$listenInternal_19mbxw$$default_1.prototype.constructor = Coroutine$listenInternal_19mbxw$$default_1;
  Coroutine$listenInternal_19mbxw$$default_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(HttpSeverNodeJs$listenInternal$lambda(this.$this, this.local$port, this.local$host))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpSeverNodeJs.prototype.listenInternal_19mbxw$$default = function (port_0, host_0, continuation_0, suspended) {
    var instance = new Coroutine$listenInternal_19mbxw$$default_1(this, port_0, host_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  Object.defineProperty(HttpSeverNodeJs.prototype, 'actualPort', {
    get: function () {
      return jsEnsureInt(this.server.address().port);
    }
  });
  function HttpSeverNodeJs$closeInternal$lambda$lambda(closure$c) {
    return function () {
      closure$c.resumeWith_tl1gpc$(new Result(Unit));
      return Unit;
    };
  }
  function HttpSeverNodeJs$closeInternal$lambda(this$HttpSeverNodeJs) {
    return function (c) {
      this$HttpSeverNodeJs.context_0 = c.context;
      this$HttpSeverNodeJs.server.close(HttpSeverNodeJs$closeInternal$lambda$lambda(c));
      return Unit;
    };
  }
  function Coroutine$closeInternal($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$closeInternal.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$closeInternal.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$closeInternal.prototype.constructor = Coroutine$closeInternal;
  Coroutine$closeInternal.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(HttpSeverNodeJs$closeInternal$lambda(this.$this))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpSeverNodeJs.prototype.closeInternal = function (continuation_0, suspended) {
    var instance = new Coroutine$closeInternal(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$HttpSeverNodeJs$handler$lambda(req_0, res_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
  }
  Coroutine$HttpSeverNodeJs$handler$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpSeverNodeJs$handler$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpSeverNodeJs$handler$lambda.prototype.constructor = Coroutine$HttpSeverNodeJs$handler$lambda;
  Coroutine$HttpSeverNodeJs$handler$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            return Unit;
          case 1:
            throw this.exception_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpSeverNodeJs$handler$lambda(req_0, res_0, continuation_0, suspended) {
    var instance = new Coroutine$HttpSeverNodeJs$handler$lambda(req_0, res_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function Coroutine$HttpSeverNodeJs$server$lambda$lambda(this$HttpSeverNodeJs_0, closure$req_0, closure$res_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$HttpSeverNodeJs = this$HttpSeverNodeJs_0;
    this.local$closure$req = closure$req_0;
    this.local$closure$res = closure$res_0;
  }
  Coroutine$HttpSeverNodeJs$server$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$HttpSeverNodeJs$server$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$HttpSeverNodeJs$server$lambda$lambda.prototype.constructor = Coroutine$HttpSeverNodeJs$server$lambda$lambda;
  Coroutine$HttpSeverNodeJs$server$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$HttpSeverNodeJs.handler_0(this.local$closure$req, this.local$closure$res, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function HttpSeverNodeJs$server$lambda$lambda(this$HttpSeverNodeJs_0, closure$req_0, closure$res_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$HttpSeverNodeJs$server$lambda$lambda(this$HttpSeverNodeJs_0, closure$req_0, closure$res_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function HttpSeverNodeJs$server$lambda(this$HttpSeverNodeJs) {
    return function (req, res) {
      return launchImmediately_0(this$HttpSeverNodeJs.context_0, HttpSeverNodeJs$server$lambda$lambda(this$HttpSeverNodeJs, req, res));
    };
  }
  HttpSeverNodeJs.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HttpSeverNodeJs',
    interfaces: [HttpServer]
  };
  function NodeJsAsyncClient(coroutineContext) {
    this.coroutineContext = coroutineContext;
    this.net_0 = require_node('net');
    this.connection_0 = null;
    this.input_0 = new AsyncByteArrayDeque();
    this.connected_da9yc3$_0 = false;
    this.task_0 = withContext(new AsyncQueue(), this.coroutineContext);
  }
  Object.defineProperty(NodeJsAsyncClient.prototype, 'connected', {
    get: function () {
      return this.connected_da9yc3$_0;
    },
    set: function (connected) {
      this.connected_da9yc3$_0 = connected;
    }
  });
  function Coroutine$NodeJsAsyncClient$connect$lambda$lambda$lambda$lambda(this$NodeJsAsyncClient_0, closure$bytes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$this$NodeJsAsyncClient = this$NodeJsAsyncClient_0;
    this.local$closure$bytes = closure$bytes_0;
  }
  Coroutine$NodeJsAsyncClient$connect$lambda$lambda$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$NodeJsAsyncClient$connect$lambda$lambda$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$NodeJsAsyncClient$connect$lambda$lambda$lambda$lambda.prototype.constructor = Coroutine$NodeJsAsyncClient$connect$lambda$lambda$lambda$lambda;
  Coroutine$NodeJsAsyncClient$connect$lambda$lambda$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$this$NodeJsAsyncClient.input_0.write_mj6st8$(this.local$closure$bytes, void 0, void 0, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function NodeJsAsyncClient$connect$lambda$lambda$lambda$lambda(this$NodeJsAsyncClient_0, closure$bytes_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$NodeJsAsyncClient$connect$lambda$lambda$lambda$lambda(this$NodeJsAsyncClient_0, closure$bytes_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function NodeJsAsyncClient$connect$lambda$lambda$lambda(this$NodeJsAsyncClient) {
    return function (it) {
      var bytes = it.slice();
      return this$NodeJsAsyncClient.task_0.invoke_g2bo5h$(NodeJsAsyncClient$connect$lambda$lambda$lambda$lambda(this$NodeJsAsyncClient, bytes));
    };
  }
  function NodeJsAsyncClient$connect$lambda$lambda(this$NodeJsAsyncClient, closure$c) {
    return function () {
      var tmp$, tmp$_0;
      this$NodeJsAsyncClient.connected = true;
      (tmp$ = this$NodeJsAsyncClient.connection_0) != null ? tmp$.pause() : null;
      (tmp$_0 = this$NodeJsAsyncClient.connection_0) != null ? tmp$_0.on('data', NodeJsAsyncClient$connect$lambda$lambda$lambda(this$NodeJsAsyncClient)) : null;
      closure$c.resumeWith_tl1gpc$(new Result(Unit));
      return Unit;
    };
  }
  function NodeJsAsyncClient$connect$lambda(this$NodeJsAsyncClient, closure$port, closure$host) {
    return function (c) {
      this$NodeJsAsyncClient.connection_0 = this$NodeJsAsyncClient.net_0.createConnection(closure$port, closure$host, NodeJsAsyncClient$connect$lambda$lambda(this$NodeJsAsyncClient, c));
      return Unit;
    };
  }
  function Coroutine$connect_bm4lxs$($this, host_0, port_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$host = host_0;
    this.local$port = port_0;
  }
  Coroutine$connect_bm4lxs$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$connect_bm4lxs$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$connect_bm4lxs$.prototype.constructor = Coroutine$connect_bm4lxs$;
  Coroutine$connect_bm4lxs$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(NodeJsAsyncClient$connect$lambda(this.$this, this.local$port, this.local$host))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeJsAsyncClient.prototype.connect_bm4lxs$ = function (host_0, port_0, continuation_0, suspended) {
    var instance = new Coroutine$connect_bm4lxs$(this, host_0, port_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$read_mj6st8$_7($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 6;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_mj6st8$_7.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_mj6st8$_7.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_mj6st8$_7.prototype.constructor = Coroutine$read_mj6st8$_7;
  Coroutine$read_mj6st8$_7.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$, tmp$_0;
            (tmp$ = this.$this.connection_0) != null ? tmp$.resume() : null;
            this.exceptionState_0 = 4;
            this.state_0 = 1;
            this.result_0 = this.$this.input_0.read_mj6st8$(this.local$buffer, this.local$offset, this.local$len, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            this.exceptionState_0 = 6;
            this.finallyPath_0 = [2];
            this.state_0 = 5;
            this.$returnValue = this.result_0;
            continue;
          case 2:
            return this.$returnValue;
          case 3:
            return;
          case 4:
            this.finallyPath_0 = [6];
            this.state_0 = 5;
            continue;
          case 5:
            this.exceptionState_0 = 6;
            (tmp$_0 = this.$this.connection_0) != null ? tmp$_0.pause() : null;
            this.state_0 = this.finallyPath_0.shift();
            continue;
          case 6:
            throw this.exception_0;
          default:this.state_0 = 6;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 6) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeJsAsyncClient.prototype.read_mj6st8$ = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_mj6st8$_7(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function NodeJsAsyncClient$write$lambda$lambda(closure$c) {
    return function () {
      closure$c.resumeWith_tl1gpc$(new Result(Unit));
      return Unit;
    };
  }
  function NodeJsAsyncClient$write$lambda(this$NodeJsAsyncClient, closure$buffer, closure$offset, closure$len) {
    return function (c) {
      var tmp$;
      (tmp$ = this$NodeJsAsyncClient.connection_0) != null ? tmp$.write(toNodeJsBuffer_0(closure$buffer, closure$offset, closure$len), NodeJsAsyncClient$write$lambda$lambda(c)) : null;
      return Unit;
    };
  }
  function Coroutine$write_mj6st8$$default_3($this, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_mj6st8$$default_3.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_mj6st8$$default_3.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_mj6st8$$default_3.prototype.constructor = Coroutine$write_mj6st8$$default_3;
  Coroutine$write_mj6st8$$default_3.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(NodeJsAsyncClient$write$lambda(this.$this, this.local$buffer, this.local$offset, this.local$len))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeJsAsyncClient.prototype.write_mj6st8$$default = function (buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_mj6st8$$default_3(this, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  NodeJsAsyncClient.prototype.close = function (continuation) {
    var tmp$;
    (tmp$ = this.connection_0) != null ? tmp$.close() : null;
  };
  NodeJsAsyncClient.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeJsAsyncClient',
    interfaces: [AsyncClient]
  };
  function NodeJsAsyncServer() {
  }
  Object.defineProperty(NodeJsAsyncServer.prototype, 'requestPort', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
    }
  });
  Object.defineProperty(NodeJsAsyncServer.prototype, 'host', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
    }
  });
  Object.defineProperty(NodeJsAsyncServer.prototype, 'backlog', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
    }
  });
  Object.defineProperty(NodeJsAsyncServer.prototype, 'port', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
    }
  });
  NodeJsAsyncServer.prototype.accept = function (continuation) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented');
  };
  NodeJsAsyncServer.prototype.init_jl0c9m$ = function (port, host, backlog, continuation) {
    return this;
  };
  NodeJsAsyncServer.prototype.close = function (continuation) {
    return Unit;
  };
  NodeJsAsyncServer.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeJsAsyncServer',
    interfaces: [AsyncServer]
  };
  function NodeJsLocalVfs() {
    LocalVfs.call(this);
    this.fs = require_node('fs');
  }
  function NodeJsLocalVfs$FD() {
  }
  NodeJsLocalVfs$FD.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'FD',
    interfaces: []
  };
  NodeJsLocalVfs.prototype.getFullPath_0 = function (path) {
    return normalize(get_pathInfo(path));
  };
  function Coroutine$NodeJsLocalVfs$exec$lambda$lambda(closure$handler_0, closure$data_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$closure$data = closure$data_0;
  }
  Coroutine$NodeJsLocalVfs$exec$lambda$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$NodeJsLocalVfs$exec$lambda$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$NodeJsLocalVfs$exec$lambda$lambda.prototype.constructor = Coroutine$NodeJsLocalVfs$exec$lambda$lambda;
  Coroutine$NodeJsLocalVfs$exec$lambda$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler.onOut_fqrh44$(toByteArray_1(this.local$closure$data), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function NodeJsLocalVfs$exec$lambda$lambda(closure$handler_0, closure$data_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$NodeJsLocalVfs$exec$lambda$lambda(closure$handler_0, closure$data_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function NodeJsLocalVfs$exec$lambda(closure$queue, closure$handler) {
    return function (data) {
      return closure$queue.invoke_g2bo5h$(NodeJsLocalVfs$exec$lambda$lambda(closure$handler, data));
    };
  }
  function Coroutine$NodeJsLocalVfs$exec$lambda$lambda_0(closure$handler_0, closure$data_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$closure$handler = closure$handler_0;
    this.local$closure$data = closure$data_0;
  }
  Coroutine$NodeJsLocalVfs$exec$lambda$lambda_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$NodeJsLocalVfs$exec$lambda$lambda_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$NodeJsLocalVfs$exec$lambda$lambda_0.prototype.constructor = Coroutine$NodeJsLocalVfs$exec$lambda$lambda_0;
  Coroutine$NodeJsLocalVfs$exec$lambda$lambda_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$handler.onErr_fqrh44$(toByteArray_1(this.local$closure$data), this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function NodeJsLocalVfs$exec$lambda$lambda_0(closure$handler_0, closure$data_0) {
    return function (continuation_0, suspended) {
      var instance = new Coroutine$NodeJsLocalVfs$exec$lambda$lambda_0(closure$handler_0, closure$data_0, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function NodeJsLocalVfs$exec$lambda_0(closure$queue, closure$handler) {
    return function (data) {
      return closure$queue.invoke_g2bo5h$(NodeJsLocalVfs$exec$lambda$lambda_0(closure$handler, data));
    };
  }
  function NodeJsLocalVfs$exec$lambda_1(closure$exitCodeDeferred) {
    return function (code) {
      return closure$exitCodeDeferred.complete_11rb$(code);
    };
  }
  NodeJsLocalVfs.prototype.exec_z6qifm$$default = function (path, cmdAndArgs, env, handler, continuation) {
    var process = require_node('child_process').spawn(first_0(cmdAndArgs), copyToArray(drop(cmdAndArgs, 1)), jsObject([to('cwd', path), to('env', toJsObject(env)), to('encoding', 'buffer'), to('shell', true)]));
    var queue = withContext(new AsyncQueue(), continuation.context);
    var exitCodeDeferred = CompletableDeferred_0();
    process.stdout.on('data', NodeJsLocalVfs$exec$lambda(queue, handler));
    process.stderr.on('data', NodeJsLocalVfs$exec$lambda_0(queue, handler));
    process.on('close', NodeJsLocalVfs$exec$lambda_1(exitCodeDeferred));
    return exitCodeDeferred.await(continuation);
  };
  function NodeJsLocalVfs$mkdir$lambda$lambda(closure$c) {
    return function (err) {
      var $receiver = closure$c;
      var value = err == null;
      $receiver.resumeWith_tl1gpc$(new Result(value));
      return Unit;
    };
  }
  function NodeJsLocalVfs$mkdir$lambda(this$NodeJsLocalVfs, closure$path) {
    return function (c) {
      this$NodeJsLocalVfs.fs.mkdir(this$NodeJsLocalVfs.getFullPath_0(closure$path), toInt_0('777', 8), NodeJsLocalVfs$mkdir$lambda$lambda(c));
      return Unit;
    };
  }
  function Coroutine$mkdir_z6b3ik$_1($this, path_0, attributes_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$mkdir_z6b3ik$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$mkdir_z6b3ik$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$mkdir_z6b3ik$_1.prototype.constructor = Coroutine$mkdir_z6b3ik$_1;
  Coroutine$mkdir_z6b3ik$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(NodeJsLocalVfs$mkdir$lambda(this.$this, this.local$path))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeJsLocalVfs.prototype.mkdir_z6b3ik$ = function (path_0, attributes_0, continuation_0, suspended) {
    var instance = new Coroutine$mkdir_z6b3ik$_1(this, path_0, attributes_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function NodeJsLocalVfs$rename$lambda$lambda(closure$c) {
    return function (err) {
      var $receiver = closure$c;
      var value = err == null;
      $receiver.resumeWith_tl1gpc$(new Result(value));
      return Unit;
    };
  }
  function NodeJsLocalVfs$rename$lambda(this$NodeJsLocalVfs, closure$src, closure$dst) {
    return function (c) {
      this$NodeJsLocalVfs.fs.rename(this$NodeJsLocalVfs.getFullPath_0(closure$src), this$NodeJsLocalVfs.getFullPath_0(closure$dst), NodeJsLocalVfs$rename$lambda$lambda(c));
      return Unit;
    };
  }
  function Coroutine$rename_puj7f4$_1($this, src_0, dst_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$src = src_0;
    this.local$dst = dst_0;
  }
  Coroutine$rename_puj7f4$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$rename_puj7f4$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$rename_puj7f4$_1.prototype.constructor = Coroutine$rename_puj7f4$_1;
  Coroutine$rename_puj7f4$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(NodeJsLocalVfs$rename$lambda(this.$this, this.local$src, this.local$dst))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeJsLocalVfs.prototype.rename_puj7f4$ = function (src_0, dst_0, continuation_0, suspended) {
    var instance = new Coroutine$rename_puj7f4$_1(this, src_0, dst_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function NodeJsLocalVfs$delete$lambda$lambda(closure$c) {
    return function (err) {
      var $receiver = closure$c;
      var value = err == null;
      $receiver.resumeWith_tl1gpc$(new Result(value));
      return Unit;
    };
  }
  function NodeJsLocalVfs$delete$lambda(this$NodeJsLocalVfs, closure$path) {
    return function (c) {
      this$NodeJsLocalVfs.fs.unlink(this$NodeJsLocalVfs.getFullPath_0(closure$path), NodeJsLocalVfs$delete$lambda$lambda(c));
      return Unit;
    };
  }
  function Coroutine$delete_61zpoe$_0($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$delete_61zpoe$_0.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$delete_61zpoe$_0.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$delete_61zpoe$_0.prototype.constructor = Coroutine$delete_61zpoe$_0;
  Coroutine$delete_61zpoe$_0.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(NodeJsLocalVfs$delete$lambda(this.$this, this.local$path))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeJsLocalVfs.prototype.delete_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$delete_61zpoe$_0(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function NodeJsLocalVfs$rmdir$lambda$lambda(closure$c) {
    return function (err) {
      var $receiver = closure$c;
      var value = err == null;
      $receiver.resumeWith_tl1gpc$(new Result(value));
      return Unit;
    };
  }
  function NodeJsLocalVfs$rmdir$lambda(this$NodeJsLocalVfs, closure$path) {
    return function (c) {
      this$NodeJsLocalVfs.fs.rmdir(this$NodeJsLocalVfs.getFullPath_0(closure$path), NodeJsLocalVfs$rmdir$lambda$lambda(c));
      return Unit;
    };
  }
  function Coroutine$rmdir_61zpoe$($this, path_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
  }
  Coroutine$rmdir_61zpoe$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$rmdir_61zpoe$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$rmdir_61zpoe$.prototype.constructor = Coroutine$rmdir_61zpoe$;
  Coroutine$rmdir_61zpoe$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(NodeJsLocalVfs$rmdir$lambda(this.$this, this.local$path))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeJsLocalVfs.prototype.rmdir_61zpoe$ = function (path_0, continuation_0, suspended) {
    var instance = new Coroutine$rmdir_61zpoe$(this, path_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function Coroutine$open_vb0dls$_4($this, path_0, mode_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$tmp$ = void 0;
    this.local$path = path_0;
    this.local$mode = mode_0;
  }
  Coroutine$open_vb0dls$_4.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$open_vb0dls$_4.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$open_vb0dls$_4.prototype.constructor = Coroutine$open_vb0dls$_4;
  Coroutine$open_vb0dls$_4.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            switch (this.local$mode.name) {
              case 'READ':
                this.local$tmp$ = 'r';
                this.state_0 = 3;
                continue;
              case 'WRITE':
                this.local$tmp$ = 'r+';
                this.state_0 = 3;
                continue;
              case 'CREATE_OR_TRUNCATE':
                this.local$tmp$ = 'w+';
                this.state_0 = 3;
                continue;
              case 'CREATE_NEW':
                this.state_0 = 2;
                this.result_0 = this.$this.stat_61zpoe$(this.local$path, this);
                if (this.result_0 === COROUTINE_SUSPENDED)
                  return COROUTINE_SUSPENDED;
                continue;
              case 'CREATE':
                this.local$tmp$ = 'wx+';
                this.state_0 = 3;
                continue;
              case 'APPEND':
                this.local$tmp$ = 'a';
                this.state_0 = 3;
                continue;
              default:this.local$tmp$ = Kotlin.noWhenBranchMatched();
                this.state_0 = 3;
                continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            if (this.result_0.exists)
              throw new FileAlreadyExistsException(this.local$path);
            this.local$tmp$ = 'w+';
            this.state_0 = 3;
            continue;
          case 3:
            var cmode = this.local$tmp$;
            this.state_0 = 4;
            this.result_0 = this.$this._open_puj7f4$(this.local$path, cmode, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeJsLocalVfs.prototype.open_vb0dls$ = function (path_0, mode_0, continuation_0, suspended) {
    var instance = new Coroutine$open_vb0dls$_4(this, path_0, mode_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function NodeJsLocalVfs$_open$lambda$lambda(closure$cc, closure$path, closure$cmode, closure$file, this$NodeJsLocalVfs) {
    return function (err, fd) {
      if (err != null || fd == null) {
        var $receiver = closure$cc;
        var exception = new FileNotFoundException("Can't open '" + closure$path + "' with mode '" + closure$cmode + "': err=" + toString(err));
        $receiver.resumeWith_tl1gpc$(new Result(createFailure(exception)));
      } else {
        var $receiver_0 = closure$cc;
        var value = toAsyncStream_0(new NodeFDStream(closure$file, this$NodeJsLocalVfs.fs, fd));
        $receiver_0.resumeWith_tl1gpc$(new Result(value));
      }
      return Unit;
    };
  }
  function NodeJsLocalVfs$_open$lambda(this$NodeJsLocalVfs, closure$path, closure$cmode, closure$file) {
    return function (cc) {
      this$NodeJsLocalVfs.fs.open(this$NodeJsLocalVfs.getFullPath_0(closure$path), closure$cmode, NodeJsLocalVfs$_open$lambda$lambda(cc, closure$path, closure$cmode, closure$file, this$NodeJsLocalVfs));
      return Unit;
    };
  }
  function Coroutine$_open_puj7f4$($this, path_0, cmode_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$path = path_0;
    this.local$cmode = cmode_0;
  }
  Coroutine$_open_puj7f4$.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$_open_puj7f4$.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$_open_puj7f4$.prototype.constructor = Coroutine$_open_puj7f4$;
  Coroutine$_open_puj7f4$.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var file = this.$this.file_61zpoe$(this.local$path);
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(NodeJsLocalVfs$_open$lambda(this.$this, this.local$path, this.local$cmode, file))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeJsLocalVfs.prototype._open_puj7f4$ = function (path_0, cmode_0, continuation_0, suspended) {
    var instance = new Coroutine$_open_puj7f4$(this, path_0, cmode_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  NodeJsLocalVfs.prototype.toString = function () {
    return 'NodeJsLocalVfs';
  };
  NodeJsLocalVfs.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeJsLocalVfs',
    interfaces: [LocalVfs]
  };
  function NodeFDStream(file, fs, fd) {
    AsyncStreamBase.call(this);
    this.file = file;
    this.fs = fs;
    this.fd = fd;
  }
  NodeFDStream.prototype.checkFd_0 = function () {
    if (this.fd == null) {
      throw IllegalStateException_init(('File ' + this.file + ' already closed').toString());
    }};
  function NodeFDStream$read$lambda$lambda(closure$c, this$NodeFDStream) {
    return function (err, bytesRead, buf) {
      if (err != null) {
        var $receiver = closure$c;
        var exception = new IOException('Error reading from ' + this$NodeFDStream.file + ' :: err=' + err.toString());
        $receiver.resumeWith_tl1gpc$(new Result(createFailure(exception)));
      } else {
        closure$c.resumeWith_tl1gpc$(new Result(bytesRead));
      }
      return Unit;
    };
  }
  function NodeFDStream$read$lambda(this$NodeFDStream, closure$buffer, closure$offset, closure$len, closure$position) {
    return function (c) {
      this$NodeFDStream.checkFd_0();
      this$NodeFDStream.fs.read(this$NodeFDStream.fd, toNodeJsBuffer(closure$buffer), closure$offset, closure$len, closure$position.toNumber(), NodeFDStream$read$lambda$lambda(c, this$NodeFDStream));
      return Unit;
    };
  }
  function Coroutine$read_4m9kcn$_1($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$read_4m9kcn$_1.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$read_4m9kcn$_1.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$read_4m9kcn$_1.prototype.constructor = Coroutine$read_4m9kcn$_1;
  Coroutine$read_4m9kcn$_1.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(NodeFDStream$read$lambda(this.$this, this.local$buffer, this.local$offset, this.local$len, this.local$position))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeFDStream.prototype.read_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$read_4m9kcn$_1(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function NodeFDStream$write$lambda$lambda(closure$c, this$NodeFDStream) {
    return function (err, bytesWritten, buffer) {
      if (err != null) {
        var $receiver = closure$c;
        var exception = new IOException('Error writting to ' + this$NodeFDStream.file + ' :: err=' + err.toString());
        $receiver.resumeWith_tl1gpc$(new Result(createFailure(exception)));
      } else {
        closure$c.resumeWith_tl1gpc$(new Result(Unit));
      }
      return Unit;
    };
  }
  function NodeFDStream$write$lambda(this$NodeFDStream, closure$buffer, closure$offset, closure$len, closure$position) {
    return function (c) {
      this$NodeFDStream.checkFd_0();
      this$NodeFDStream.fs.write(this$NodeFDStream.fd, toNodeJsBuffer(closure$buffer), closure$offset, closure$len, closure$position.toNumber(), NodeFDStream$write$lambda$lambda(c, this$NodeFDStream));
      return Unit;
    };
  }
  function Coroutine$write_4m9kcn$_3($this, position_0, buffer_0, offset_0, len_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$position = position_0;
    this.local$buffer = buffer_0;
    this.local$offset = offset_0;
    this.local$len = len_0;
  }
  Coroutine$write_4m9kcn$_3.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$write_4m9kcn$_3.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$write_4m9kcn$_3.prototype.constructor = Coroutine$write_4m9kcn$_3;
  Coroutine$write_4m9kcn$_3.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(NodeFDStream$write$lambda(this.$this, this.local$buffer, this.local$offset, this.local$len, this.local$position))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeFDStream.prototype.write_4m9kcn$ = function (position_0, buffer_0, offset_0, len_0, continuation_0, suspended) {
    var instance = new Coroutine$write_4m9kcn$_3(this, position_0, buffer_0, offset_0, len_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function NodeFDStream$setLength$lambda$lambda(closure$c, this$NodeFDStream) {
    return function (err) {
      if (err != null) {
        var $receiver = closure$c;
        var exception = new IOException('Error setting length to ' + this$NodeFDStream.file + ' :: err=' + err.toString());
        $receiver.resumeWith_tl1gpc$(new Result(createFailure(exception)));
      } else {
        closure$c.resumeWith_tl1gpc$(new Result(Unit));
      }
      return Unit;
    };
  }
  function NodeFDStream$setLength$lambda(this$NodeFDStream, closure$value) {
    return function (c) {
      this$NodeFDStream.checkFd_0();
      this$NodeFDStream.fs.ftruncate(this$NodeFDStream.fd, closure$value.toNumber(), NodeFDStream$setLength$lambda$lambda(c, this$NodeFDStream));
      return Unit;
    };
  }
  function Coroutine$setLength_s8cxhz$_2($this, value_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$value = value_0;
  }
  Coroutine$setLength_s8cxhz$_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$setLength_s8cxhz$_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$setLength_s8cxhz$_2.prototype.constructor = Coroutine$setLength_s8cxhz$_2;
  Coroutine$setLength_s8cxhz$_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(NodeFDStream$setLength$lambda(this.$this, this.local$value))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeFDStream.prototype.setLength_s8cxhz$ = function (value_0, continuation_0, suspended) {
    var instance = new Coroutine$setLength_s8cxhz$_2(this, value_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function NodeFDStream$getLength$lambda$lambda(closure$c, this$NodeFDStream) {
    return function (err, stats) {
      var tmp$, tmp$_0;
      if (err != null) {
        var $receiver = closure$c;
        var exception = new IOException('Error getting length from ' + this$NodeFDStream.file + ' :: err=' + err.toString());
        $receiver.resumeWith_tl1gpc$(new Result(createFailure(exception)));
      } else {
        tmp$_0 = Kotlin.Long.fromNumber(typeof (tmp$ = stats.size) === 'number' ? tmp$ : throwCCE());
        closure$c.resumeWith_tl1gpc$(new Result(tmp$_0));
      }
      return Unit;
    };
  }
  function NodeFDStream$getLength$lambda(this$NodeFDStream) {
    return function (c) {
      this$NodeFDStream.checkFd_0();
      this$NodeFDStream.fs.fstat(this$NodeFDStream.fd, NodeFDStream$getLength$lambda$lambda(c, this$NodeFDStream));
      return Unit;
    };
  }
  function Coroutine$getLength_2($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$getLength_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$getLength_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$getLength_2.prototype.constructor = Coroutine$getLength_2;
  Coroutine$getLength_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = suspendCoroutine$lambda_1(NodeFDStream$getLength$lambda(this.$this))(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeFDStream.prototype.getLength = function (continuation_0, suspended) {
    var instance = new Coroutine$getLength_2(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  function NodeFDStream$close$lambda$lambda(this$NodeFDStream, closure$c) {
    return function (err) {
      this$NodeFDStream.fd = null;
      if (err != null) {
        closure$c.resumeWith_tl1gpc$(new Result(Unit));
      } else {
        closure$c.resumeWith_tl1gpc$(new Result(Unit));
      }
      return Unit;
    };
  }
  function NodeFDStream$close$lambda(this$NodeFDStream) {
    return function (c) {
      this$NodeFDStream.fs.close(this$NodeFDStream.fd, NodeFDStream$close$lambda$lambda(this$NodeFDStream, c));
      return Unit;
    };
  }
  function Coroutine$close_10($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$close_10.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$close_10.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$close_10.prototype.constructor = Coroutine$close_10;
  Coroutine$close_10.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.fd != null) {
              this.state_0 = 2;
              this.result_0 = suspendCoroutine$lambda_1(NodeFDStream$close$lambda(this.$this))(this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.result_0;
            return this.result_0;
          case 3:
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  NodeFDStream.prototype.close = function (continuation_0, suspended) {
    var instance = new Coroutine$close_10(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  NodeFDStream.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NodeFDStream',
    interfaces: [AsyncStreamBase]
  };
  function Coroutine$asyncEntryPoint$lambda(closure$callback_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$callback = closure$callback_0;
  }
  Coroutine$asyncEntryPoint$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$asyncEntryPoint$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$asyncEntryPoint$lambda.prototype.constructor = Coroutine$asyncEntryPoint$lambda;
  Coroutine$asyncEntryPoint$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$callback(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function asyncEntryPoint$lambda(closure$callback_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$asyncEntryPoint$lambda(closure$callback_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function asyncEntryPoint(callback) {
    return promise(coroutines_0.GlobalScope, void 0, void 0, asyncEntryPoint$lambda(callback));
  }
  function Promise_1(coroutineContext, executor) {
    if (coroutineContext === void 0)
      coroutineContext = coroutines.EmptyCoroutineContext;
    return new Promise(executor);
  }
  function Deflate_0(windowBits) {
    return new DeflatePortable(windowBits);
  }
  function korAtomic(initial) {
    return new KorAtomicRef(initial);
  }
  function korAtomic_0(initial) {
    return new KorAtomicBoolean(initial);
  }
  function korAtomic_1(initial) {
    return new KorAtomicInt(initial);
  }
  function korAtomic_2(initial) {
    return new KorAtomicLong(initial);
  }
  function Lock() {
  }
  Lock.prototype.invoke_klfg04$ = defineInlineFunction('korio-root-korio.com.soywiz.korio.concurrent.lock.Lock.invoke_klfg04$', function (callback) {
    return callback();
  });
  Lock.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Lock',
    interfaces: []
  };
  function DynamicInternal() {
    DynamicInternal_instance = this;
    this.global = typeof global !== 'undefined' ? global : window;
  }
  DynamicInternal.prototype.get_hvn9da$ = function (instance, key) {
    return instance[key];
  };
  DynamicInternal.prototype.set_9qz4km$ = function (instance, key, value) {
    instance[key] = value;
  };
  DynamicInternal.prototype.invoke_8e09lf$ = function (instance, key, args) {
    return instance[key].apply(instance, args);
  };
  DynamicInternal.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'DynamicInternal',
    interfaces: []
  };
  var DynamicInternal_instance = null;
  function DynamicInternal_getInstance() {
    if (DynamicInternal_instance === null) {
      new DynamicInternal();
    }return DynamicInternal_instance;
  }
  var File_separatorChar;
  function tmpdir$lambda() {
    if (get_isNodeJs()) {
      return require_node('os').tmpdir();
    } else
      return '/tmp';
  }
  var tmpdir;
  function get_tmpdir() {
    return tmpdir.value;
  }
  function absoluteCwd$lambda() {
    return get_isNodeJs() ? require_node('path').resolve('.') : '.';
  }
  var absoluteCwd;
  function get_absoluteCwd() {
    return absoluteCwd.value;
  }
  function resourcesVfs$lambda() {
    return get_applicationVfs().jail();
  }
  var resourcesVfs;
  function get_resourcesVfs() {
    return resourcesVfs.value;
  }
  function rootLocalVfs$lambda() {
    return localVfs(get_absoluteCwd());
  }
  var rootLocalVfs;
  function get_rootLocalVfs() {
    return rootLocalVfs.value;
  }
  function applicationVfs$lambda() {
    return localVfs(get_absoluteCwd());
  }
  var applicationVfs;
  function get_applicationVfs() {
    return applicationVfs.value;
  }
  function applicationDataVfs$lambda() {
    return get_jsLocalStorageVfs().root;
  }
  var applicationDataVfs;
  function get_applicationDataVfs() {
    return applicationDataVfs.value;
  }
  function cacheVfs$lambda() {
    return MemoryVfs();
  }
  var cacheVfs;
  function get_cacheVfs() {
    return cacheVfs.value;
  }
  function externalStorageVfs$lambda() {
    return localVfs(get_absoluteCwd());
  }
  var externalStorageVfs;
  function get_externalStorageVfs() {
    return externalStorageVfs.value;
  }
  function userHomeVfs$lambda() {
    return localVfs(get_absoluteCwd());
  }
  var userHomeVfs;
  function get_userHomeVfs() {
    return userHomeVfs.value;
  }
  function tempVfs$lambda() {
    if (get_isNodeJs()) {
      return localVfs(get_tmpdir());
    } else {
      return MemoryVfs();
    }
  }
  var tempVfs;
  function get_tempVfs() {
    return tempVfs.value;
  }
  function localVfs(path) {
    var tmp$;
    if (get_isNodeJs())
      tmp$ = (new NodeJsLocalVfs()).get_61zpoe$(path);
    else {
      tmp$ = UrlVfs(get_jsbaseUrl()).get_61zpoe$(path);
    }
    return tmp$;
  }
  function get_portableSimpleName($receiver) {
    var tmp$;
    return (tmp$ = $receiver.simpleName) != null ? tmp$ : 'unknown';
  }
  function Environment() {
    Environment_instance = this;
    var tmp$, tmp$_0, tmp$_1;
    if (OS_getInstance().isJsNodeJs) {
      var $receiver = jsObjectKeysArray(process.env);
      var capacity = coerceAtLeast(mapCapacity($receiver.length), 16);
      var destination = LinkedHashMap_init_0(capacity);
      var tmp$_2;
      for (tmp$_2 = 0; tmp$_2 !== $receiver.length; ++tmp$_2) {
        var element = $receiver[tmp$_2];
        var pair = to(element, process.env[element]);
        destination.put_xwzc9p$(pair.first, pair.second);
      }
      tmp$_1 = destination;
    } else {
      var $receiver_0 = QueryString_getInstance().decode_6bul2c$(trimStart((tmp$_0 = (tmp$ = document.location) != null ? tmp$.search : null) != null ? tmp$_0 : '', Kotlin.charArrayOf(63)));
      var destination_0 = ArrayList_init_0($receiver_0.size);
      var tmp$_3;
      tmp$_3 = $receiver_0.entries.iterator();
      while (tmp$_3.hasNext()) {
        var item = tmp$_3.next();
        var tmp$_4;
        destination_0.add_11rb$(to(item.key, (tmp$_4 = firstOrNull(item.value)) != null ? tmp$_4 : item.key));
      }
      tmp$_1 = toMap(destination_0);
    }
    this.allEnvs = tmp$_1;
    var $receiver_1 = this.allEnvs;
    var destination_1 = ArrayList_init_0($receiver_1.size);
    var tmp$_5;
    tmp$_5 = $receiver_1.entries.iterator();
    while (tmp$_5.hasNext()) {
      var item_0 = tmp$_5.next();
      destination_1.add_11rb$(to(item_0.key.toUpperCase(), item_0.value));
    }
    this.allEnvsUpperCase = toMap(destination_1);
  }
  Environment.prototype.get_61zpoe$ = function (key) {
    return this.allEnvsUpperCase.get_11rb$(key.toUpperCase());
  };
  Environment.prototype.getAll = function () {
    return this.allEnvs;
  };
  Environment.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Environment',
    interfaces: []
  };
  var Environment_instance = null;
  function Environment_getInstance() {
    if (Environment_instance === null) {
      new Environment();
    }return Environment_instance;
  }
  function IOException(msg) {
    Exception_init(msg, this);
    this.name = 'IOException';
  }
  IOException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'IOException',
    interfaces: [Exception]
  };
  function EOFException(msg) {
    IOException.call(this, msg);
    this.name = 'EOFException';
  }
  EOFException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'EOFException',
    interfaces: [IOException]
  };
  function FileNotFoundException(msg) {
    IOException.call(this, msg);
    this.name = 'FileNotFoundException';
  }
  FileNotFoundException.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'FileNotFoundException',
    interfaces: [IOException]
  };
  function printStackTrace_0($receiver) {
    var e = $receiver;
    console.error(e);
    console.error(e.stack);
  }
  function enterDebugger() {
    debugger;
  }
  function NativeThreadLocal() {
    this.value_7l0xnn$_0 = this.initialValue();
  }
  NativeThreadLocal.prototype.get = function () {
    return this.value_7l0xnn$_0;
  };
  NativeThreadLocal.prototype.set_11rb$ = function (value) {
    this.value_7l0xnn$_0 = value;
  };
  NativeThreadLocal.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'NativeThreadLocal',
    interfaces: []
  };
  function get_currentThreadId() {
    return L1;
  }
  function Thread_sleep(time) {
    var start = klock.PerformanceCounter.milliseconds;
    while (klock.PerformanceCounter.milliseconds - start < time.toNumber()) {
    }
  }
  function UTF8$ObjectLiteral(name) {
    UTC8CharsetBase.call(this, name);
    var tmp$, tmp$_0;
    try {
      tmp$ = new TextDecoder('utf-8');
    } catch (e) {
      tmp$ = null;
    }
    this.textDecoder = tmp$;
    try {
      tmp$_0 = new TextEncoder('utf-8');
    } catch (e) {
      tmp$_0 = null;
    }
    this.textEncoder = tmp$_0;
  }
  UTF8$ObjectLiteral.prototype.decode_9w11d2$$default = function (out, src, start, end) {
    if (this.textDecoder != null) {
      var srcBuffer = src;
      out.append_61zpoe$(this.textDecoder.decode(new Int8Array(srcBuffer.buffer, start, end - start | 0)));
    } else {
      this.decode_9w11d2$(out, src, start, end, UTC8CharsetBase.prototype.decode_9w11d2$$default.bind(this));
    }
  };
  UTF8$ObjectLiteral.prototype.encode_sa8v9s$$default = function (out, src, start, end) {
    if (this.textEncoder != null) {
      var ba = this.textEncoder.encode(Kotlin.subSequence(src, start, end).toString());
      out.append_mj6st8$(new Int8Array(ba.buffer));
    } else {
      this.encode_sa8v9s$(out, src, start, end, UTC8CharsetBase.prototype.encode_sa8v9s$$default.bind(this));
    }
  };
  UTF8$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [UTC8CharsetBase]
  };
  var UTF8;
  function asyncSocketFactory$lambda$ObjectLiteral() {
    AsyncSocketFactory.call(this);
  }
  asyncSocketFactory$lambda$ObjectLiteral.prototype.createClient_6taknv$$default = function (secure, continuation) {
    if (OS_getInstance().isJsBrowserOrWorker) {
      throw IllegalStateException_init('AsyncClient is not supported on JS browser'.toString());
    }return new NodeJsAsyncClient(continuation.context);
  };
  asyncSocketFactory$lambda$ObjectLiteral.prototype.createServer_kr8lbh$$default = function (port, host, backlog, secure, continuation) {
    if (OS_getInstance().isJsBrowserOrWorker) {
      throw IllegalStateException_init('AsyncServer is not supported on JS browser'.toString());
    }return (new NodeJsAsyncServer()).init_jl0c9m$(port, host, backlog, continuation);
  };
  asyncSocketFactory$lambda$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [AsyncSocketFactory]
  };
  function asyncSocketFactory$lambda() {
    return new asyncSocketFactory$lambda$ObjectLiteral();
  }
  var asyncSocketFactory;
  function get_asyncSocketFactory() {
    return asyncSocketFactory.value;
  }
  function httpFactory$lambda$ObjectLiteral() {
  }
  httpFactory$lambda$ObjectLiteral.prototype.createClient = function () {
    return OS_getInstance().isJsNodeJs ? new HttpClientNodeJs() : new HttpClientBrowserJs();
  };
  httpFactory$lambda$ObjectLiteral.prototype.createServer = function () {
    return new HttpSeverNodeJs();
  };
  httpFactory$lambda$ObjectLiteral.$metadata$ = {
    kind: Kind_CLASS,
    interfaces: [HttpFactory]
  };
  function httpFactory$lambda() {
    return new httpFactory$lambda$ObjectLiteral();
  }
  var httpFactory;
  function get_httpFactory() {
    return httpFactory.value;
  }
  function HttpClientBrowserJs() {
    HttpClient.call(this);
  }
  function HttpClientBrowserJs$requestInternal$lambda(closure$xhr, closure$deferred) {
    return function (e) {
      var out = new Int8Array(closure$xhr.response);
      return closure$deferred.complete_11rb$(new HttpClient$Response(closure$xhr.status, closure$xhr.statusText, Http$Http$Headers_init_1(closure$xhr.getAllResponseHeaders()), openAsync(out)));
    };
  }
  function HttpClientBrowserJs$requestInternal$lambda_0(closure$deferred, closure$xhr, closure$url) {
    return function (e) {
      return closure$deferred.completeExceptionally_tcv7n7$(RuntimeException_init('Error status=' + closure$xhr.status + ",'" + closure$xhr.statusText + "' opening " + closure$url));
    };
  }
  function HttpClientBrowserJs$requestInternal$lambda_1(closure$deferred, closure$xhr) {
    return function (it) {
      if (closure$deferred.isCancelled) {
        closure$xhr.abort();
      }return Unit;
    };
  }
  function Coroutine$requestInternal_wintjk$$default_2($this, method_0, url_0, headers_0, content_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
    this.local$deferred = void 0;
    this.local$xhr = void 0;
    this.local$method = method_0;
    this.local$url = url_0;
    this.local$headers = headers_0;
    this.local$content = content_0;
  }
  Coroutine$requestInternal_wintjk$$default_2.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$requestInternal_wintjk$$default_2.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$requestInternal_wintjk$$default_2.prototype.constructor = Coroutine$requestInternal_wintjk$$default_2;
  Coroutine$requestInternal_wintjk$$default_2.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            var tmp$;
            this.local$deferred = CompletableDeferred_0(Job());
            this.local$xhr = new XMLHttpRequest();
            this.local$xhr.open(this.local$method.name, this.local$url, true);
            this.local$xhr.responseType = 'arraybuffer';
            this.local$xhr.onload = HttpClientBrowserJs$requestInternal$lambda(this.local$xhr, this.local$deferred);
            this.local$xhr.onerror = HttpClientBrowserJs$requestInternal$lambda_0(this.local$deferred, this.local$xhr, this.local$url);
            tmp$ = this.local$headers.iterator();
            while (tmp$.hasNext()) {
              var header = tmp$.next();
              var $receiver = header.first.toLowerCase();
              var tmp$_0;
              var hnname = trim_0(Kotlin.isCharSequence(tmp$_0 = $receiver) ? tmp$_0 : throwCCE()).toString();
              switch (hnname) {
                case 'connection':
                case 'Content-Length':
                  break;
                default:this.local$xhr.setRequestHeader(header.first, header.second);
                  break;
              }
            }

            this.local$deferred.invokeOnCompletion_f05bi3$(HttpClientBrowserJs$requestInternal$lambda_1(this.local$deferred, this.local$xhr));
            if (this.local$content != null) {
              this.state_0 = 2;
              this.result_0 = readAll(this.local$content, this);
              if (this.result_0 === COROUTINE_SUSPENDED)
                return COROUTINE_SUSPENDED;
              continue;
            } else {
              this.local$xhr.send();
              this.state_0 = 3;
              continue;
            }

          case 1:
            throw this.exception_0;
          case 2:
            this.local$xhr.send(this.result_0);
            this.state_0 = 3;
            continue;
          case 3:
            this.state_0 = 4;
            this.result_0 = this.local$deferred.await(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 4:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  HttpClientBrowserJs.prototype.requestInternal_wintjk$$default = function (method_0, url_0, headers_0, content_0, continuation_0, suspended) {
    var instance = new Coroutine$requestInternal_wintjk$$default_2(this, method_0, url_0, headers_0, content_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  HttpClientBrowserJs.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'HttpClientBrowserJs',
    interfaces: [HttpClient]
  };
  function Coroutine$WebSocketClient(url_0, protocols_0, origin_0, wskey_0, debug_0, headers_0, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.local$$receiver = void 0;
    this.local$url = url_0;
    this.local$protocols = protocols_0;
    this.local$origin = origin_0;
    this.local$wskey = wskey_0;
    this.local$debug = debug_0;
    this.local$headers = headers_0;
  }
  Coroutine$WebSocketClient.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$WebSocketClient.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$WebSocketClient.prototype.constructor = Coroutine$WebSocketClient;
  Coroutine$WebSocketClient.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.local$protocols === void 0)
              this.local$protocols = null;
            if (this.local$origin === void 0)
              this.local$origin = null;
            if (this.local$wskey === void 0)
              this.local$wskey = 'wskey';
            if (this.local$debug === void 0)
              this.local$debug = false;
            if (this.local$headers === void 0)
              this.local$headers = Http$Http$Headers_init([]);
            this.local$$receiver = new JsWebSocketClient(this.local$url, this.local$protocols, this.local$debug, this.local$headers);
            this.state_0 = 2;
            this.result_0 = this.local$$receiver.init(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.local$$receiver;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function WebSocketClient_0(url_0, protocols_0, origin_0, wskey_0, debug_0, headers_0, continuation_0, suspended) {
    var instance = new Coroutine$WebSocketClient(url_0, protocols_0, origin_0, wskey_0, debug_0, headers_0, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  }
  function JsWebSocketClient(url, protocols, DEBUG, headers) {
    WebSocketClient.call(this, url, protocols, true);
    this.DEBUG = DEBUG;
    this.headers = headers;
    var tmp$;
    if (protocols != null) {
      tmp$ = new WebSocket(url, copyToArray(protocols).slice());
    } else {
      tmp$ = new WebSocket(url);
    }
    var $receiver = tmp$;
    $receiver.binaryType = 'arraybuffer';
    $receiver.addEventListener('open', JsWebSocketClient$jsws$lambda$lambda(this));
    $receiver.addEventListener('close', JsWebSocketClient$jsws$lambda$lambda_0(this));
    $receiver.addEventListener('message', JsWebSocketClient$jsws$lambda$lambda_1(this));
    this.jsws = $receiver;
  }
  function Coroutine$init($this, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.exceptionState_0 = 1;
    this.$this = $this;
  }
  Coroutine$init.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$init.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$init.prototype.constructor = Coroutine$init;
  Coroutine$init.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            if (this.$this.DEBUG)
              println('[WS] Wait connection (' + this.$this.url + ')...');
            this.state_0 = 2;
            this.result_0 = waitOne_0(this.$this.onOpen, this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            if (this.$this.DEBUG)
              println('[WS] Connected!');
            return;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      } catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        } else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  JsWebSocketClient.prototype.init = function (continuation_0, suspended) {
    var instance = new Coroutine$init(this, continuation_0);
    if (suspended)
      return instance;
    else
      return instance.doResume(null);
  };
  JsWebSocketClient.prototype.close_19mbxw$$default = function (code, reason) {
    this.jsws.close();
  };
  JsWebSocketClient.prototype.send_61zpoe$ = function (message, continuation) {
    if (this.DEBUG)
      println('[WS-SEND]: ' + message);
    this.jsws.send(message);
  };
  JsWebSocketClient.prototype.send_fqrh44$ = function (message, continuation) {
    if (this.DEBUG)
      println('[WS-SEND]: ' + toList_3(message));
    this.jsws.send(toInt8Array(message));
  };
  function JsWebSocketClient$jsws$lambda$lambda(this$JsWebSocketClient) {
    return function (it) {
      this$JsWebSocketClient.onOpen.invoke_11rb$(Unit);
      return Unit;
    };
  }
  function JsWebSocketClient$jsws$lambda$lambda_0(this$JsWebSocketClient) {
    return function (e) {
      var tmp$;
      var event = Kotlin.isType(tmp$ = e, CloseEvent) ? tmp$ : throwCCE();
      var code = event.code;
      var reason = event.reason;
      var wasClean = event.wasClean;
      this$JsWebSocketClient.onClose.invoke_11rb$(Unit);
      return Unit;
    };
  }
  function JsWebSocketClient$jsws$lambda$lambda_1(this$JsWebSocketClient) {
    return function (e) {
      var tmp$;
      var event = Kotlin.isType(tmp$ = e, MessageEvent) ? tmp$ : throwCCE();
      var data = event.data;
      if (this$JsWebSocketClient.DEBUG)
        println('[WS-RECV]: ' + toString(data) + ' :: stringListeners=' + this$JsWebSocketClient.onStringMessage.listenerCount + ', binaryListeners=' + this$JsWebSocketClient.onBinaryMessage.listenerCount + ', anyListeners=' + this$JsWebSocketClient.onAnyMessage.listenerCount);
      if (typeof data === 'string') {
        var js = data;
        this$JsWebSocketClient.onStringMessage.invoke_11rb$(js);
        this$JsWebSocketClient.onAnyMessage.invoke_11rb$(js);
      } else {
        var jb = data;
        var ba = toByteArray_2(jb);
        this$JsWebSocketClient.onBinaryMessage.invoke_11rb$(ba);
        this$JsWebSocketClient.onAnyMessage.invoke_11rb$(ba);
      }
      return Unit;
    };
  }
  JsWebSocketClient.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'JsWebSocketClient',
    interfaces: [WebSocketClient]
  };
  function toByteArray_2($receiver) {
    return toByteArray_3(new Int8Array($receiver));
  }
  function toByteArray_3($receiver) {
    var tmp$;
    var tout = $receiver;
    if (Kotlin.isByteArray(tout)) {
      tmp$ = tout;
    } else {
      var out = new Int8Array($receiver.length);
      for (var n = 0; n !== out.length; ++n) {
        out[n] = $receiver[n];
      }
      tmp$ = out;
    }
    return tmp$;
  }
  function toInt8Array($receiver) {
    var tmp$, tmp$_0;
    var tout = $receiver;
    if (Kotlin.isType(tout, Int8Array)) {
      tmp$_0 = tout;
    } else {
      var out = new Int8Array($receiver.length);
      tmp$ = out.length;
      for (var n = 0; n < tmp$; n++) {
        out[n] = $receiver[n];
      }
      tmp$_0 = out;
    }
    return tmp$_0;
  }
  function rawOsName$lambda() {
    if (get_isNodeJs()) {
      return process.platform;
    } else {
      return navigator.platform;
    }
  }
  var rawOsName;
  function get_rawOsName() {
    return rawOsName.value;
  }
  var rawPlatformName;
  function systemLanguageStrings$lambda() {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    if (get_isNodeJs()) {
      var env = process.env;
      return listOf_0((tmp$_2 = (tmp$_1 = (tmp$_0 = (tmp$ = env.LANG) != null ? tmp$ : env.LANGUAGE) != null ? tmp$_0 : env.LC_ALL) != null ? tmp$_1 : env.LC_MESSAGES) != null ? tmp$_2 : 'english');
    } else {
      return asList(window.navigator.languages);
    }
  }
  var systemLanguageStrings;
  function get_systemLanguageStrings() {
    return systemLanguageStrings.value;
  }
  var package$com = _.com || (_.com = {});
  var package$soywiz = package$com.soywiz || (package$com.soywiz = {});
  var package$korio = package$soywiz.korio || (package$soywiz.korio = {});
  package$korio.Korio_3q5nlj$ = Korio;
  Object.defineProperty(package$korio, 'Korio', {
    get: Korio_getInstance
  });
  var package$annotations = package$korio.annotations || (package$korio.annotations = {});
  package$annotations.Keep = Keep;
  var package$async = package$korio.async || (package$korio.async = {});
  package$async.AsyncByteArrayDeque = AsyncByteArrayDeque;
  package$async.AsyncCache = AsyncCache;
  package$async.AsyncCacheGen = AsyncCacheGen;
  Object.defineProperty(AsyncCloseable, 'Companion', {
    get: AsyncCloseable$Companion_getInstance
  });
  package$async.AsyncCloseable = AsyncCloseable;
  $$importsForInline$$['korio-root-korio'] = _;
  package$async.use_28kxh1$ = use;
  package$async.useIt_28kxh1$ = useIt;
  package$async.launch_hilpzi$ = launch_0;
  package$async.launchImmediately_hilpzi$ = launchImmediately;
  package$async.launchAsap_hilpzi$ = launchAsap;
  package$async.async_uddi5$ = async_0;
  package$async.asyncImmediately_uddi5$ = asyncImmediately;
  package$async.asyncAsap_uddi5$ = asyncAsap;
  package$async.launch_ykkwzu$ = launch_1;
  package$async.launchImmediately_ykkwzu$ = launchImmediately_0;
  package$async.launchAsap_ykkwzu$ = launchAsap_0;
  package$async.async_nt96rv$ = async_1;
  package$async.asyncImmediately_nt96rv$ = asyncImmediately_0;
  package$async.asyncAsap_nt96rv$ = asyncAsap_0;
  $$importsForInline$$['klock-root-klock'] = $module$klock_root_klock;
  Object.defineProperty(package$async, 'DEFAULT_SUSPEND_TEST_TIMEOUT', {
    get: function () {
      return DEFAULT_SUSPEND_TEST_TIMEOUT;
    }
  });
  package$async.suspendTest_r97y0r$ = suspendTest;
  package$async.suspendTest_3q5nlj$ = suspendTest_0;
  package$async.suspendTest_48jl5k$ = suspendTest_1;
  package$async.suspendTestNoBrowser_3q5nlj$ = suspendTestNoBrowser;
  package$async.suspendTestNoJs_3q5nlj$ = suspendTestNoJs;
  AsyncInmemoryCache.Entry = AsyncInmemoryCache$Entry;
  package$async.AsyncInmemoryCache = AsyncInmemoryCache;
  package$async.AsyncInmemoryEntry = AsyncInmemoryEntry;
  package$async.AsyncInvokable = AsyncInvokable;
  package$async.AsyncQueue = AsyncQueue;
  package$async.withContext_z63kqd$ = withContext;
  package$async.withContext_uu8uhk$ = withContext_0;
  package$async.AsyncQueueWithContext = AsyncQueueWithContext;
  package$async.AsyncThread = AsyncThread;
  package$async.AsyncThread2 = AsyncThread2;
  NamedAsyncThreads.AsyncJob = NamedAsyncThreads$AsyncJob;
  package$async.NamedAsyncThreads = NamedAsyncThreads;
  package$async.chunks_pgf0by$ = chunks;
  package$async.toChannel_7wnvza$ = toChannel;
  $$importsForInline$$['kotlinx-coroutines-core'] = $module$kotlinx_coroutines_core;
  package$async.toChannel_x2ftfk$ = toChannel_0;
  package$async.produce_g804by$ = produce_0;
  $$importsForInline$$['kmem-root-kmem'] = $module$kmem_root_kmem;
  package$async.toAsyncInputStream_xnkq86$ = toAsyncInputStream;
  Object.defineProperty(EmptyContinuation, 'Companion', {
    get: EmptyContinuation$Companion_getInstance
  });
  package$async.EmptyContinuation = EmptyContinuation;
  package$async.delay_fv8bff$ = delay_0;
  package$async.delay_boqi9f$ = delay_1;
  package$async.withTimeout_dy9d39$ = withTimeout_0;
  $$importsForInline$$['kds-root-kds'] = $module$kds_root_kds;
  package$async.ObservableProperty = ObservableProperty;
  package$async.Promise = Promise_0;
  package$async.SPromise_q0pvh2$ = SPromise;
  package$async.DeferredPromise = DeferredPromise;
  package$async.toPromise_qs6fsc$ = toPromise;
  package$async.toPromise_ge6odz$ = toPromise_0;
  package$async.toPromise_kiql2j$ = toPromise_1;
  package$async.toPromise_5dx9u$ = toPromise_2;
  package$async.toDeferred_aw8zry$ = toDeferred;
  package$async.await_aw8zry$ = await_0;
  BaseSignal.Node = BaseSignal$Node;
  package$async.BaseSignal = BaseSignal;
  package$async.AsyncSignal = AsyncSignal;
  package$async.Signal = Signal;
  package$async.waitOne_2ag0ef$ = waitOne;
  package$async.waitOne_b1yv1r$ = waitOne_0;
  package$async.mapSignal_d1llwn$ = mapSignal;
  package$async.invoke_if7m94$ = invoke;
  package$async.mapSignal_h51bwf$ = mapSignal_0;
  package$async.invoke_4l50cw$ = invoke_0;
  package$async.waitOne_ru8xum$ = waitOne_1;
  package$async.waitOneAsync_b1yv1r$ = waitOneAsync;
  package$async.waitOnePromise_b1yv1r$ = waitOnePromise;
  package$async.addSuspend_lurw3q$ = addSuspend;
  package$async.addSuspend_w4tsgb$ = addSuspend_0;
  package$async.waitOne_h7z9g6$ = waitOne_2;
  package$async.waitOneOpt_xhc6jt$ = waitOneOpt;
  var package$lang = package$korio.lang || (package$korio.lang = {});
  package$lang.close_n2ytw$ = close;
  package$async.executeAndWaitAnySignal_ratmn0$ = executeAndWaitAnySignal;
  package$async.executeAndWaitAnySignal_ebemsz$ = executeAndWaitAnySignal_0;
  package$async.executeAndWaitSignal_hfwxhy$ = executeAndWaitSignal;
  package$async.runBlockingNoSuspensions_g8ox3d$ = runBlockingNoSuspensions;
  var package$compression = package$korio.compression || (package$korio.compression = {});
  package$compression.CompressionContext = CompressionContext;
  Object.defineProperty(CompressionMethod, 'Uncompressed', {
    get: CompressionMethod$Uncompressed_getInstance
  });
  package$compression.CompressionMethod = CompressionMethod;
  package$compression.uncompress_htc1aj$ = uncompress;
  package$compression.compress_8cwrog$ = compress;
  package$compression.uncompressStream_xo6hwo$ = uncompressStream;
  package$compression.compressStream_9ceofh$ = compressStream;
  package$compression.uncompress_spqvkl$ = uncompress_0;
  package$compression.compress_ygcbe2$ = compress_0;
  package$compression.uncompress_ms6xh0$ = uncompress_1;
  package$compression.compress_t54tj5$ = compress_1;
  package$compression.uncompressed_5cyzom$ = uncompressed;
  package$compression.compressed_zbf9ff$ = compressed;
  var package$deflate = package$compression.deflate || (package$compression.deflate = {});
  Object.defineProperty(package$deflate, 'Deflate', {
    get: get_Deflate
  });
  DeflatePortable.SlidingWindowWithOutput = DeflatePortable$SlidingWindowWithOutput;
  Object.defineProperty(DeflatePortable, 'Companion', {
    get: DeflatePortable$Companion_getInstance
  });
  package$deflate.DeflatePortable = DeflatePortable;
  Object.defineProperty(GZIP, 'Companion', {
    get: GZIP$Companion_getInstance
  });
  package$deflate.GZIP = GZIP;
  Object.defineProperty(GZIPNoCrc, 'Companion', {
    get: GZIPNoCrc$Companion_getInstance
  });
  package$deflate.GZIPNoCrc = GZIPNoCrc;
  package$deflate.GZIPBase = GZIPBase;
  Object.defineProperty(ZLib, 'Companion', {
    get: ZLib$Companion_getInstance
  });
  package$deflate.ZLib = ZLib;
  var package$lzma = package$compression.lzma || (package$compression.lzma = {});
  Object.defineProperty(package$lzma, 'Lzma', {
    get: Lzma_getInstance
  });
  SevenZip.prototype.ICodeProgress = SevenZip$ICodeProgress;
  Object.defineProperty(SevenZip$BitTreeEncoder, 'Companion', {
    get: SevenZip$BitTreeEncoder$Companion_getInstance
  });
  SevenZip.prototype.BitTreeEncoder = SevenZip$BitTreeEncoder;
  Object.defineProperty(SevenZip$BitTreeDecoder, 'Companion', {
    get: SevenZip$BitTreeDecoder$Companion_getInstance
  });
  SevenZip.prototype.BitTreeDecoder = SevenZip$BitTreeDecoder;
  Object.defineProperty(SevenZip$RangeDecoder, 'Companion', {
    get: SevenZip$RangeDecoder$Companion_getInstance
  });
  SevenZip.prototype.RangeDecoder = SevenZip$RangeDecoder;
  Object.defineProperty(SevenZip$RangeEncoder, 'Companion', {
    get: SevenZip$RangeEncoder$Companion_getInstance
  });
  SevenZip.prototype.RangeEncoder = SevenZip$RangeEncoder;
  Object.defineProperty(SevenZip.prototype, 'LzmaBase', {
    get: SevenZip$LzmaBase_getInstance
  });
  SevenZip$LzmaDecoder.LenDecoder = SevenZip$LzmaDecoder$LenDecoder;
  SevenZip$LzmaDecoder$LiteralDecoder.Decoder2 = SevenZip$LzmaDecoder$LiteralDecoder$Decoder2;
  SevenZip$LzmaDecoder.LiteralDecoder = SevenZip$LzmaDecoder$LiteralDecoder;
  SevenZip.prototype.LzmaDecoder = SevenZip$LzmaDecoder;
  SevenZip$LzmaEncoder$LiteralEncoder.Encoder2 = SevenZip$LzmaEncoder$LiteralEncoder$Encoder2;
  SevenZip$LzmaEncoder.LiteralEncoder = SevenZip$LzmaEncoder$LiteralEncoder;
  SevenZip$LzmaEncoder.LenEncoder = SevenZip$LzmaEncoder$LenEncoder;
  SevenZip$LzmaEncoder.LenPriceTableEncoder = SevenZip$LzmaEncoder$LenPriceTableEncoder;
  SevenZip$LzmaEncoder.Optimal = SevenZip$LzmaEncoder$Optimal;
  Object.defineProperty(SevenZip$LzmaEncoder, 'Companion', {
    get: SevenZip$LzmaEncoder$Companion_getInstance
  });
  SevenZip.prototype.LzmaEncoder = SevenZip$LzmaEncoder;
  Object.defineProperty(SevenZip$LzBinTree, 'Companion', {
    get: SevenZip$LzBinTree$Companion_getInstance
  });
  SevenZip.prototype.LzBinTree = SevenZip$LzBinTree;
  SevenZip.prototype.LzInWindow = SevenZip$LzInWindow;
  SevenZip.prototype.LzOutWindow = SevenZip$LzOutWindow;
  Object.defineProperty(package$lzma, 'SevenZip', {
    get: SevenZip_getInstance
  });
  var package$util = package$compression.util || (package$compression.util = {});
  package$util.BitReader = BitReader;
  Object.defineProperty(HuffmanTree, 'Companion', {
    get: HuffmanTree$Companion_getInstance
  });
  package$util.HuffmanTree = HuffmanTree;
  package$util.SlidingWindow = SlidingWindow;
  Object.defineProperty(ZipFile, 'Companion', {
    get: ZipFile$Companion_getInstance
  });
  var package$zip = package$compression.zip || (package$compression.zip = {});
  package$zip.ZipFile = ZipFile;
  package$zip.DosFileDateTime = DosFileDateTime;
  package$zip.ZipEntry = ZipEntry;
  package$zip.ZipEntry2 = ZipEntry2;
  Object.defineProperty(ZipBuilder, 'Companion', {
    get: ZipBuilder$Companion_getInstance
  });
  package$zip.ZipBuilder = ZipBuilder;
  var package$concurrent = package$korio.concurrent || (package$korio.concurrent = {});
  var package$atomic = package$concurrent.atomic || (package$concurrent.atomic = {});
  package$atomic.AtomicLazyImpl = AtomicLazyImpl;
  package$atomic.atomicLazy_klfg04$ = atomicLazy;
  package$atomic.KorAtomicBase = KorAtomicBase;
  package$atomic.KorAtomicNumber = KorAtomicNumber;
  package$atomic.KorAtomicRef = KorAtomicRef;
  package$atomic.KorAtomicBoolean = KorAtomicBoolean;
  package$atomic.KorAtomicInt = KorAtomicInt;
  package$atomic.KorAtomicLong = KorAtomicLong;
  package$atomic.incrementAndGet_xn51lp$ = incrementAndGet;
  package$atomic.incrementAndGet_mhoi96$ = incrementAndGet_0;
  package$atomic.getValue_t5nv5h$ = getValue;
  package$atomic.setValue_tunzxr$ = setValue;
  package$atomic.getValue_5jquo8$ = getValue_0;
  package$atomic.setValue_wfp5b$ = setValue_0;
  package$atomic.getValue_z9yke7$ = getValue_1;
  package$atomic.setValue_kze3dd$ = setValue_1;
  package$atomic.getValue_mhf90a$ = getValue_2;
  package$atomic.setValue_86vhwj$ = setValue_2;
  var package$dynamic = package$korio.dynamic || (package$korio.dynamic = {});
  package$dynamic.KDynamic = KDynamic;
  Object.defineProperty(KDynamic, 'Companion', {
    get: KDynamic$Companion_getInstance
  });
  KDynamic.Invokable = KDynamic$Invokable;
  ObjectMapper.TypeContext = ObjectMapper$TypeContext;
  ObjectMapper.UntypeContext = ObjectMapper$UntypeContext;
  var package$mapper = package$dynamic.mapper || (package$dynamic.mapper = {});
  package$mapper.ObjectMapper = ObjectMapper;
  Object.defineProperty(package$mapper, 'Mapper', {
    get: function () {
      return Mapper;
    }
  });
  var package$serialization = package$dynamic.serialization || (package$dynamic.serialization = {});
  package$serialization.parseTyped_avcktl$ = parseTyped_0;
  var package$serialization_0 = package$korio.serialization || (package$korio.serialization = {});
  var package$json = package$serialization_0.json || (package$serialization_0.json = {});
  package$serialization.toJsonTyped_mkgadd$ = toJsonTyped;
  package$serialization.decodeToType_u5picb$ = decodeToType_0;
  var package$experimental = package$korio.experimental || (package$korio.experimental = {});
  package$experimental.KorioExperimentalApi = KorioExperimentalApi;
  var package$file = package$korio.file || (package$korio.file = {});
  package$file.PathInfo = PathInfo;
  package$file.get_pathInfo_pdl1vz$ = get_pathInfo;
  package$file.get_fullPathNormalized_a72sjq$ = get_fullPathNormalized;
  package$file.get_folder_a72sjq$ = get_folder;
  package$file.get_folderWithSlash_a72sjq$ = get_folderWithSlash;
  package$file.get_baseName_a72sjq$ = get_baseName;
  package$file.get_fullPathWithoutExtension_a72sjq$ = get_fullPathWithoutExtension;
  package$file.fullPathWithExtension_iyj1fo$ = fullPathWithExtension;
  package$file.get_baseNameWithoutExtension_a72sjq$ = get_baseNameWithoutExtension;
  package$file.get_baseNameWithoutCompoundExtension_a72sjq$ = get_baseNameWithoutCompoundExtension;
  package$file.get_fullNameWithoutExtension_a72sjq$ = get_fullNameWithoutExtension;
  package$file.get_fullNameWithoutCompoundExtension_a72sjq$ = get_fullNameWithoutCompoundExtension;
  package$file.baseNameWithExtension_iyj1fo$ = baseNameWithExtension;
  package$file.baseNameWithCompoundExtension_iyj1fo$ = baseNameWithCompoundExtension;
  package$file.get_extension_a72sjq$ = get_extension;
  package$file.get_extensionLC_a72sjq$ = get_extensionLC;
  package$file.get_compoundExtension_a72sjq$ = get_compoundExtension;
  package$file.get_compoundExtensionLC_a72sjq$ = get_compoundExtensionLC;
  package$file.get_mimeTypeByExtension_a72sjq$ = get_mimeTypeByExtension;
  package$file.getPathComponents_a72sjq$ = getPathComponents;
  package$file.getPathFullComponents_a72sjq$ = getPathFullComponents;
  package$file.get_fullName_a72sjq$ = get_fullName;
  package$file.Path = Path;
  package$file.get_fullPathNormalized_hsf53c$ = get_fullPathNormalized_0;
  package$file.get_folder_hsf53c$ = get_folder_0;
  package$file.get_folderWithSlash_hsf53c$ = get_folderWithSlash_0;
  package$file.get_baseName_hsf53c$ = get_baseName_0;
  package$file.get_fullPathWithoutExtension_hsf53c$ = get_fullPathWithoutExtension_0;
  package$file.fullPathWithExtension_cn9rna$ = fullPathWithExtension_0;
  package$file.get_fullNameWithoutExtension_hsf53c$ = get_fullNameWithoutExtension_0;
  package$file.get_baseNameWithoutExtension_hsf53c$ = get_baseNameWithoutExtension_0;
  package$file.get_fullNameWithoutCompoundExtension_hsf53c$ = get_fullNameWithoutCompoundExtension_0;
  package$file.get_baseNameWithoutCompoundExtension_hsf53c$ = get_baseNameWithoutCompoundExtension_0;
  package$file.baseNameWithExtension_cn9rna$ = baseNameWithExtension_0;
  package$file.baseNameWithCompoundExtension_cn9rna$ = baseNameWithCompoundExtension_0;
  package$file.get_extension_hsf53c$ = get_extension_0;
  package$file.get_extensionLC_hsf53c$ = get_extensionLC_0;
  package$file.get_compoundExtension_hsf53c$ = get_compoundExtension_0;
  package$file.get_compoundExtensionLC_hsf53c$ = get_compoundExtensionLC_0;
  package$file.get_mimeTypeByExtension_hsf53c$ = get_mimeTypeByExtension_0;
  package$file.getPathComponents_hsf53c$ = getPathComponents_0;
  package$file.getPathFullComponents_hsf53c$ = getPathFullComponents_0;
  package$file.get_fullName_hsf53c$ = get_fullName_0;
  package$file.VfsNamed = VfsNamed;
  package$file.parts_a72sjq$ = parts;
  package$file.normalize_a72sjq$ = normalize;
  package$file.combine_xwlvht$ = combine;
  package$file.lightCombine_xwlvht$ = lightCombine;
  package$file.isAbsolute_a72sjq$ = isAbsolute;
  package$file.normalizeAbsolute_a72sjq$ = normalizeAbsolute;
  package$file.SimpleStorage = SimpleStorage;
  Vfs.Attribute = Vfs$Attribute;
  Vfs.Proxy = Vfs$Proxy;
  Vfs.Decorator = Vfs$Decorator;
  Object.defineProperty(Vfs$FileEvent$Kind, 'DELETED', {
    get: Vfs$FileEvent$Kind$DELETED_getInstance
  });
  Object.defineProperty(Vfs$FileEvent$Kind, 'MODIFIED', {
    get: Vfs$FileEvent$Kind$MODIFIED_getInstance
  });
  Object.defineProperty(Vfs$FileEvent$Kind, 'CREATED', {
    get: Vfs$FileEvent$Kind$CREATED_getInstance
  });
  Object.defineProperty(Vfs$FileEvent$Kind, 'RENAMED', {
    get: Vfs$FileEvent$Kind$RENAMED_getInstance
  });
  Vfs$FileEvent.Kind = Vfs$FileEvent$Kind;
  Vfs.FileEvent = Vfs$FileEvent;
  package$file.Vfs = Vfs;
  package$file.VfsV2 = VfsV2;
  Object.defineProperty(VfsOpenMode, 'READ', {
    get: VfsOpenMode$READ_getInstance
  });
  Object.defineProperty(VfsOpenMode, 'WRITE', {
    get: VfsOpenMode$WRITE_getInstance
  });
  Object.defineProperty(VfsOpenMode, 'APPEND', {
    get: VfsOpenMode$APPEND_getInstance
  });
  Object.defineProperty(VfsOpenMode, 'CREATE_OR_TRUNCATE', {
    get: VfsOpenMode$CREATE_OR_TRUNCATE_getInstance
  });
  Object.defineProperty(VfsOpenMode, 'CREATE', {
    get: VfsOpenMode$CREATE_getInstance
  });
  Object.defineProperty(VfsOpenMode, 'CREATE_NEW', {
    get: VfsOpenMode$CREATE_NEW_getInstance
  });
  package$file.VfsOpenMode = VfsOpenMode;
  package$file.VfsProcessHandler = VfsProcessHandler;
  package$file.VfsProcessException = VfsProcessException;
  package$file.VfsStat = VfsStat;
  package$file.get_createDate_ybf8sm$ = get_createDate;
  package$file.get_modifiedDate_ybf8sm$ = get_modifiedDate;
  package$file.get_lastAccessDate_ybf8sm$ = get_lastAccessDate;
  package$file.writeToFile_m1iwyb$ = writeToFile;
  package$file.writeToFile_hb5vwy$ = writeToFile_0;
  package$file.VfsFile = VfsFile;
  package$file.toUnscaped_yirdke$ = toUnscaped;
  package$file.toFile_t7pgv8$ = toFile;
  package$file.FinalVfsFile_init_o2v52r$ = FinalVfsFile_init;
  package$file.FinalVfsFile = FinalVfsFile;
  package$file.useVfs_honkk5$ = useVfs;
  var package$std = package$file.std || (package$file.std = {});
  package$std.IsoVfs_3ekr7n$ = IsoVfs;
  package$std.IsoVfs_axnxby$ = IsoVfs_0;
  package$std.openAsIso_g5ykjz$ = openAsIso;
  package$std.openAsIso_yirdke$ = openAsIso_0;
  package$std.openAsIso_36n2h8$ = openAsIso_1;
  package$std.openAsIso_honkk5$ = openAsIso_2;
  package$std.IsoVfs = IsoVfs_1;
  ISO.prototype.IsoReader = ISO$IsoReader;
  ISO.prototype.IsoFile = ISO$IsoFile;
  Object.defineProperty(ISO$UdfDescriptorTag$TagId, 'Companion', {
    get: ISO$UdfDescriptorTag$TagId$Companion_getInstance
  });
  ISO$UdfDescriptorTag.TagId = ISO$UdfDescriptorTag$TagId;
  ISO.prototype.UdfDescriptorTag_init_39qel5$ = ISO$ISO$UdfDescriptorTag_init;
  ISO.prototype.UdfDescriptorTag = ISO$UdfDescriptorTag;
  ISO.prototype.UdfExtent_init_39qel5$ = ISO$ISO$UdfExtent_init;
  ISO.prototype.UdfExtent = ISO$UdfExtent;
  ISO.prototype.UdfAnchorVolumeDescriptorPointer_init_39qel5$ = ISO$ISO$UdfAnchorVolumeDescriptorPointer_init;
  ISO.prototype.UdfAnchorVolumeDescriptorPointer = ISO$UdfAnchorVolumeDescriptorPointer;
  ISO.prototype.UdfCharspec_init_39qel5$ = ISO$ISO$UdfCharspec_init;
  ISO.prototype.UdfCharspec = ISO$UdfCharspec;
  ISO.prototype.UdfEntityId_init_39qel5$ = ISO$ISO$UdfEntityId_init;
  ISO.prototype.UdfEntityId = ISO$UdfEntityId;
  ISO.prototype.UdfTimestamp_init_39qel5$ = ISO$ISO$UdfTimestamp_init;
  ISO.prototype.UdfTimestamp = ISO$UdfTimestamp;
  ISO.prototype.UdfPrimaryVolumeDescriptor_init_39qel5$ = ISO$ISO$UdfPrimaryVolumeDescriptor_init;
  ISO.prototype.UdfPrimaryVolumeDescriptor = ISO$UdfPrimaryVolumeDescriptor;
  ISO.prototype.PrimaryVolumeDescriptor_init_39qel5$ = ISO$ISO$PrimaryVolumeDescriptor_init;
  ISO.prototype.PrimaryVolumeDescriptor = ISO$PrimaryVolumeDescriptor;
  Object.defineProperty(ISO$VolumeDescriptorHeader$TypeEnum, 'Companion', {
    get: ISO$VolumeDescriptorHeader$TypeEnum$Companion_getInstance
  });
  ISO$VolumeDescriptorHeader.TypeEnum = ISO$VolumeDescriptorHeader$TypeEnum;
  ISO.prototype.VolumeDescriptorHeader_init_39qel5$ = ISO$ISO$VolumeDescriptorHeader_init;
  ISO.prototype.VolumeDescriptorHeader = ISO$VolumeDescriptorHeader;
  ISO.prototype.IsoDate_init_39qel5$ = ISO$ISO$IsoDate_init;
  ISO.prototype.IsoDate = ISO$IsoDate;
  ISO.prototype.DateStruct_init_39qel5$ = ISO$ISO$DateStruct_init;
  ISO.prototype.DateStruct = ISO$DateStruct;
  Object.defineProperty(ISO$DirectoryRecord, 'Companion', {
    get: ISO$DirectoryRecord$Companion_getInstance
  });
  ISO.prototype.DirectoryRecord = ISO$DirectoryRecord;
  Object.defineProperty(package$std, 'ISO', {
    get: ISO_getInstance
  });
  package$std.JailVfs_3ekr7n$ = JailVfs;
  Object.defineProperty(LocalVfs, 'Companion', {
    get: LocalVfs$Companion_getInstance
  });
  package$std.LocalVfs = LocalVfs;
  package$std.LocalVfsV2 = LocalVfsV2;
  Object.defineProperty(package$std, 'resourcesVfsDebug', {
    get: function () {
      return resourcesVfsDebug;
    },
    set: function (value) {
      resourcesVfsDebug = value;
    }
  });
  Object.defineProperty(package$std, 'localCurrentDirVfs', {
    get: get_localCurrentDirVfs
  });
  package$std.jailedLocalVfs_61zpoe$ = jailedLocalVfs;
  package$std.LogVfs = LogVfs;
  package$std.log_yirdke$ = log;
  package$std.toVfs_qiq1fs$ = toVfs;
  package$std.MapLikeStorageVfs = MapLikeStorageVfs;
  package$std.MemoryVfs_r2g07k$ = MemoryVfs;
  package$std.MemoryVfsMix_t3okmp$ = MemoryVfsMix;
  package$std.MemoryVfsMix_pp8hmc$ = MemoryVfsMix_0;
  package$std.asMemoryVfsFile_m1iwyb$ = asMemoryVfsFile;
  package$std.cachedToMemory_yirdke$ = cachedToMemory;
  package$std.MergedVfs = MergedVfs;
  package$std.MountableVfs_uljl60$ = MountableVfs;
  package$std.Mountable = Mountable;
  NodeVfs.Node = NodeVfs$Node;
  package$std.NodeVfs = NodeVfs;
  Object.defineProperty(package$std, 'UniversalVfs', {
    get: UniversalVfs_getInstance
  });
  package$std.UniSchema = UniSchema;
  package$std.UniSchemaProviders_init_kenoap$ = UniSchemaProviders_init;
  package$std.UniSchemaProviders_init_64wpi9$ = UniSchemaProviders_init_0;
  package$std.UniSchemaProviders = UniSchemaProviders;
  Object.defineProperty(package$std, 'defaultUniSchema', {
    get: function () {
      return defaultUniSchema;
    },
    set: function (value) {
      defaultUniSchema = value;
    }
  });
  package$std.registerUniSchema_14c58k$ = registerUniSchema;
  package$std.plus_lkui5v$ = plus_4;
  package$std.minus_lkui5v$ = minus_2;
  package$std.registerUniSchemaTemporarily_9sb2qk$ = registerUniSchemaTemporarily;
  package$std.plus_hhtshb$ = plus_3;
  package$std.minus_hhtshb$ = minus_1;
  package$std.get_uniVfs_pdl1vz$ = get_uniVfs;
  package$std.uniVfs_rgq6yn$ = uniVfs;
  package$std.UrlVfs_at2g62$ = UrlVfs;
  package$std.UrlVfs_kqzdue$ = UrlVfs_0;
  package$std.UrlVfsJailed_at2g62$ = UrlVfsJailed;
  package$std.UrlVfsJailed_kqzdue$ = UrlVfsJailed_0;
  UrlVfs_1.HttpHeaders = UrlVfs$HttpHeaders;
  package$std.UrlVfs = UrlVfs_1;
  package$std.ZipVfs_7p732o$ = ZipVfs;
  package$std.openAsZip_thwgyb$ = openAsZip;
  package$std.openAsZip_ysx5pw$ = openAsZip_0;
  package$std.openAsZip_ug4jku$ = openAsZip_1;
  package$std.openAsZip_t9avod$ = openAsZip_2;
  package$std.createZipFromTree_yirdke$ = createZipFromTree;
  package$std.createZipFromTreeTo_vg4evo$ = createZipFromTreeTo;
  var package$internal = package$korio.internal || (package$korio.internal = {});
  package$internal.indexOf_q2fl5a$ = indexOf_2;
  Object.defineProperty(package$internal, 'KORIO_VERSION_8be2vx$', {
    get: function () {
      return KORIO_VERSION;
    }
  });
  Object.defineProperty(package$internal, 'BYTES_TEMP_SIZE', {
    get: function () {
      return BYTES_TEMP_SIZE;
    }
  });
  Object.defineProperty(package$internal, 'bytesTempPool', {
    get: get_bytesTempPool
  });
  Object.defineProperty(package$internal, 'smallBytesPool', {
    get: get_smallBytesPool
  });
  package$internal.alloc2_nh0ohv$ = alloc2;
  package$internal.allocThis_nh0ohv$ = allocThis;
  package$lang.assert_6taknv$ = assert;
  Object.defineProperty(Charset, 'Companion', {
    get: Charset$Companion_getInstance
  });
  package$lang.Charset = Charset;
  package$lang.UTC8CharsetBase = UTC8CharsetBase;
  package$lang.SingleByteCharset = SingleByteCharset;
  Object.defineProperty(package$lang, 'ISO_8859_1', {
    get: ISO_8859_1_getInstance
  });
  package$lang.UTF16Charset = UTF16Charset;
  Object.defineProperty(package$lang, 'ASCII', {
    get: ASCII_getInstance
  });
  Object.defineProperty(package$lang, 'LATIN1', {
    get: function () {
      return LATIN1;
    }
  });
  Object.defineProperty(package$lang, 'UTF16_LE', {
    get: function () {
      return UTF16_LE;
    }
  });
  Object.defineProperty(package$lang, 'UTF16_BE', {
    get: function () {
      return UTF16_BE;
    }
  });
  Object.defineProperty(package$lang, 'Charsets', {
    get: Charsets_getInstance
  });
  package$lang.toByteArray_7jlb4b$ = toByteArray;
  package$lang.toString_5kit73$ = toString_2;
  package$lang.readStringz_h34x81$ = readStringz;
  package$lang.readStringz_josu3n$ = readStringz_0;
  package$lang.readString_h34x81$ = readString;
  package$lang.Disposable = Disposable;
  Object.defineProperty(Closeable, 'Companion', {
    get: Closeable$Companion_getInstance
  });
  package$lang.Closeable = Closeable;
  Object.defineProperty(package$lang, 'DummyCloseable', {
    get: DummyCloseable_getInstance
  });
  package$lang.OptionalCloseable = OptionalCloseable;
  package$lang.use_jgrjek$ = use_0;
  Cancellable.Listener = Cancellable$Listener;
  Object.defineProperty(Cancellable, 'Companion', {
    get: Cancellable$Companion_getInstance
  });
  package$lang.Cancellable = Cancellable;
  package$lang.cancel_8d280p$ = cancel;
  package$lang.cancellable_sb3lga$ = cancellable;
  package$lang.closeable_n2ytw$ = closeable;
  package$lang.cancellable_6257sj$ = cancellable_0;
  package$lang.closeable_a5y8la$ = closeable_0;
  package$lang.FileAlreadyExistsException = FileAlreadyExistsException;
  package$lang.InvalidOperationException = InvalidOperationException;
  package$lang.OutOfBoundsException = OutOfBoundsException;
  package$lang.KeyNotFoundException = KeyNotFoundException;
  package$lang.NotImplementedException = NotImplementedException;
  package$lang.InvalidArgumentException = InvalidArgumentException;
  package$lang.MustValidateCodeException = MustValidateCodeException;
  package$lang.MustOverrideException = MustOverrideException;
  package$lang.DeprecatedException = DeprecatedException;
  package$lang.UnexpectedException = UnexpectedException;
  package$lang.CancelException = CancelException;
  Object.defineProperty(package$lang, 'deprecated', {
    get: get_deprecated
  });
  Object.defineProperty(package$lang, 'mustValidate', {
    get: get_mustValidate
  });
  Object.defineProperty(package$lang, 'noImpl', {
    get: get_noImpl
  });
  Object.defineProperty(package$lang, 'invalidOp', {
    get: get_invalidOp
  });
  Object.defineProperty(package$lang, 'invalidArg', {
    get: get_invalidArg
  });
  package$lang.deprecated_61zpoe$ = deprecated;
  package$lang.mustValidate_61zpoe$ = mustValidate;
  package$lang.noImpl_61zpoe$ = noImpl;
  package$lang.invalidOp_61zpoe$ = invalidOp;
  package$lang.invalidArg_61zpoe$ = invalidArg;
  package$lang.unsupported_61zpoe$ = unsupported;
  package$lang.unsupported = unsupported_0;
  package$lang.invalidArgument_61zpoe$ = invalidArgument;
  package$lang.unexpected_61zpoe$ = unexpected;
  package$lang.printStackTrace_dbl4o4$ = printStackTrace_0;
  package$lang.runIgnoringExceptions_nkfre5$ = runIgnoringExceptions;
  package$lang.printStackTrace = printStackTrace;
  package$lang.lazyVar = lazyVar;
  package$lang.invoke_864yrg$ = invoke_1;
  package$lang.String_fromIntArray_nd5v6f$ = String_fromIntArray;
  package$lang.String_fromCharArray_8chfmy$ = String_fromCharArray;
  package$lang.format_e33kwl$ = format;
  package$lang.splitKeep_hjrgf2$ = splitKeep;
  package$lang.replaceNonPrintableCharacters_rjktp$ = replaceNonPrintableCharacters;
  package$lang.toBytez_s1p75v$ = toBytez;
  package$lang.toBytez_7jlb4b$ = toBytez_0;
  package$lang.indexOfOrNull_46w6ck$ = indexOfOrNull;
  package$lang.lastIndexOfOrNull_46w6ck$ = lastIndexOfOrNull;
  package$lang.splitInChunks_6ic1pp$ = splitInChunks;
  package$lang.substr_6ic1pp$ = substr;
  package$lang.substr_qgyqat$ = substr_0;
  package$lang.eachBuilder_n3qf5l$ = eachBuilder;
  package$lang.transform_37eajw$ = transform;
  package$lang.parseInt_pdl1vz$ = parseInt;
  package$lang.get_quoted_pdl1vz$ = get_quoted;
  package$lang.toCharArray_pdl1vz$ = toCharArray;
  package$lang.threadLocal = threadLocal;
  var package$net = package$korio.net || (package$korio.net = {});
  package$net.AsyncSocketFactory = AsyncSocketFactory;
  package$net.createTcpClient_6taknv$ = createTcpClient;
  package$net.createTcpServer_kr8lbh$ = createTcpServer;
  package$net.createTcpClient_37lk95$ = createTcpClient_0;
  Object.defineProperty(AsyncClient, 'Stats', {
    get: AsyncClient$Stats_getInstance
  });
  Object.defineProperty(AsyncClient, 'Companion', {
    get: AsyncClient$Companion_getInstance
  });
  package$net.AsyncClient = AsyncClient;
  Object.defineProperty(AsyncServer, 'Companion', {
    get: AsyncServer$Companion_getInstance
  });
  package$net.AsyncServer = AsyncServer;
  Object.defineProperty(HostWithPort, 'Companion', {
    get: HostWithPort$Companion_getInstance
  });
  package$net.HostWithPort = HostWithPort;
  Object.defineProperty(MimeType, 'Companion', {
    get: MimeType$Companion_getInstance
  });
  package$net.MimeType = MimeType;
  package$net.mimeType_yirdke$ = mimeType;
  Object.defineProperty(package$net, 'QueryString', {
    get: QueryString_getInstance
  });
  Object.defineProperty(URL_0, 'Companion', {
    get: URL$Companion_getInstance
  });
  package$net.URL = URL_0;
  package$net.createBase64URLForData_nwlife$ = createBase64URLForData;
  Object.defineProperty(Http, 'Companion', {
    get: Http$Companion_getInstance
  });
  Object.defineProperty(Http$Methods, 'ALL', {
    get: Http$Methods$ALL_getInstance
  });
  Object.defineProperty(Http$Methods, 'OPTIONS', {
    get: Http$Methods$OPTIONS_getInstance
  });
  Object.defineProperty(Http$Methods, 'GET', {
    get: Http$Methods$GET_getInstance
  });
  Object.defineProperty(Http$Methods, 'HEAD', {
    get: Http$Methods$HEAD_getInstance
  });
  Object.defineProperty(Http$Methods, 'POST', {
    get: Http$Methods$POST_getInstance
  });
  Object.defineProperty(Http$Methods, 'PUT', {
    get: Http$Methods$PUT_getInstance
  });
  Object.defineProperty(Http$Methods, 'DELETE', {
    get: Http$Methods$DELETE_getInstance
  });
  Object.defineProperty(Http$Methods, 'TRACE', {
    get: Http$Methods$TRACE_getInstance
  });
  Object.defineProperty(Http$Methods, 'CONNECT', {
    get: Http$Methods$CONNECT_getInstance
  });
  Object.defineProperty(Http$Methods, 'PATCH', {
    get: Http$Methods$PATCH_getInstance
  });
  Http.Methods = Http$Methods;
  Object.defineProperty(Http$Method, 'Companion', {
    get: Http$Method$Companion_getInstance
  });
  Http.Method = Http$Method;
  Http.CustomMethod = Http$CustomMethod;
  Object.defineProperty(Http$HttpException, 'Companion', {
    get: Http$HttpException$Companion_getInstance
  });
  Http.HttpException = Http$HttpException;
  Object.defineProperty(Http$Auth, 'Companion', {
    get: Http$Auth$Companion_getInstance
  });
  Http.Auth = Http$Auth;
  Http.Request = Http$Request;
  Http.Response = Http$Response;
  Http$Headers.Builder = Http$Headers$Builder;
  Object.defineProperty(Http$Headers, 'Companion', {
    get: Http$Headers$Companion_getInstance
  });
  Http.Headers_init_9ih0sy$ = Http$Http$Headers_init;
  Http.Headers_init_y0zsll$ = Http$Http$Headers_init_0;
  Http.Headers_init_pdl1vj$ = Http$Http$Headers_init_1;
  Http.Headers = Http$Headers;
  Http.RedirectException = Http$RedirectException;
  var package$http = package$net.http || (package$net.http = {});
  package$http.Http = Http;
  HttpClient.Response = HttpClient$Response;
  HttpClient.CompletedResponse = HttpClient$CompletedResponse;
  HttpClient.RequestConfig = HttpClient$RequestConfig;
  Object.defineProperty(HttpClient, 'Companion', {
    get: HttpClient$Companion_getInstance
  });
  package$http.HttpClient = HttpClient;
  package$http.DelayedHttpClient = DelayedHttpClient;
  package$http.delayed_mtiixe$ = delayed;
  FakeHttpClient.ResponseBuilder = FakeHttpClient$ResponseBuilder;
  FakeHttpClient.Rule = FakeHttpClient$Rule;
  package$http.FakeHttpClient = FakeHttpClient;
  package$http.LogHttpClient = LogHttpClient;
  Object.defineProperty(package$http, 'HttpStatusMessage', {
    get: HttpStatusMessage_getInstance
  });
  Object.defineProperty(package$http, 'HttpStats', {
    get: HttpStats_getInstance
  });
  package$http.HttpFactory = HttpFactory;
  package$http.ProxiedHttpFactory = ProxiedHttpFactory;
  Object.defineProperty(package$http, '_defaultHttpFactory_8be2vx$', {
    get: get__defaultHttpFactory
  });
  Object.defineProperty(package$http, 'defaultHttpFactory', {
    get: get_defaultHttpFactory
  });
  package$http.setDefaultHttpFactory_7abgn7$ = setDefaultHttpFactory;
  package$http.createClientEndpoint_o4v2s4$ = createClientEndpoint;
  package$http.createHttpClient = createHttpClient;
  package$http.createHttpServer = createHttpServer;
  package$http.createHttpClientEndpoint_61zpoe$ = createHttpClientEndpoint;
  package$http.httpError_19mbxw$ = httpError;
  package$http.HttpClientEndpoint = HttpClientEndpoint;
  Object.defineProperty(Request, 'Companion', {
    get: Request$Companion_getInstance
  });
  package$http.Request = Request;
  package$http.FakeHttpClientEndpoint = FakeHttpClientEndpoint;
  package$http.endpoint_fa4p7d$ = endpoint;
  Object.defineProperty(package$http, 'HttpPortable', {
    get: HttpPortable_getInstance
  });
  package$http.HttpRestClient = HttpRestClient;
  package$http.rest_jh038e$ = rest;
  package$http.rest_fa4p7d$ = rest_0;
  package$http.createRestClient_6hdl76$ = createRestClient;
  Object.defineProperty(HttpServer, 'Companion', {
    get: HttpServer$Companion_getInstance
  });
  HttpServer.BaseRequest = HttpServer$BaseRequest;
  HttpServer.WsRequest = HttpServer$WsRequest;
  HttpServer.RequestConfig = HttpServer$RequestConfig;
  HttpServer.Request = HttpServer$Request;
  package$http.HttpServer = HttpServer;
  package$http.FakeRequest = FakeRequest;
  var package$ws = package$net.ws || (package$net.ws = {});
  package$ws.RawSocketWebSocketClient_gtvc7r$ = RawSocketWebSocketClient;
  Object.defineProperty(WsFrame, 'Companion', {
    get: WsFrame$Companion_getInstance
  });
  package$ws.WsFrame = WsFrame;
  package$ws.RawSocketWebSocketClient = RawSocketWebSocketClient_0;
  Object.defineProperty(WsOpcode, 'Companion', {
    get: WsOpcode$Companion_getInstance
  });
  package$ws.WsOpcode = WsOpcode;
  package$ws.WebSocketClient = WebSocketClient;
  package$ws.readString_kb5b7y$ = readString_0;
  package$ws.readBinary_kb5b7y$ = readBinary;
  package$ws.WebSocketException = WebSocketException;
  Json.prototype.CustomSerializer = Json$CustomSerializer;
  Object.defineProperty(package$json, 'Json', {
    get: Json_getInstance
  });
  package$json.fromJson_pdl1vz$ = fromJson;
  package$json.toJson_ejd05u$ = toJson;
  Object.defineProperty(Xml, 'Companion', {
    get: Xml$Companion_getInstance
  });
  Object.defineProperty(Xml$Type, 'NODE', {
    get: Xml$Type$NODE_getInstance
  });
  Object.defineProperty(Xml$Type, 'TEXT', {
    get: Xml$Type$TEXT_getInstance
  });
  Object.defineProperty(Xml$Type, 'COMMENT', {
    get: Xml$Type$COMMENT_getInstance
  });
  Xml.Type = Xml$Type;
  Object.defineProperty(Xml, 'Entities', {
    get: Xml$Entities_getInstance
  });
  Xml$Stream.prototype.Xml2Iterable = Xml$Stream$Xml2Iterable;
  Xml$Stream$Element.ProcessingInstructionTag = Xml$Stream$Element$ProcessingInstructionTag;
  Xml$Stream$Element.OpenCloseTag = Xml$Stream$Element$OpenCloseTag;
  Xml$Stream$Element.OpenTag = Xml$Stream$Element$OpenTag;
  Xml$Stream$Element.CommentTag = Xml$Stream$Element$CommentTag;
  Xml$Stream$Element.CloseTag = Xml$Stream$Element$CloseTag;
  Xml$Stream$Element.Text = Xml$Stream$Element$Text;
  Xml$Stream.prototype.Element = Xml$Stream$Element;
  Object.defineProperty(Xml, 'Stream', {
    get: Xml$Stream_getInstance
  });
  var package$xml = package$serialization_0.xml || (package$serialization_0.xml = {});
  package$xml.Xml = Xml;
  package$xml.get_isText_byavcz$ = get_isText;
  package$xml.get_isComment_byavcz$ = get_isComment;
  package$xml.get_isNode_byavcz$ = get_isNode;
  package$xml.str_dzd596$ = str;
  package$xml.children_h00kq4$ = children;
  package$xml.get_allChildren_ibjdnu$ = get_allChildren;
  package$xml.get_allNodeChildren_ibjdnu$ = get_allNodeChildren;
  package$xml.get_firstText_ibjdnu$ = get_firstText;
  package$xml.get_text_ibjdnu$ = get_text;
  package$xml.get_h00kq4$ = get_0;
  package$xml.toXml_pdl1vz$ = toXml;
  package$xml.Xml_61zpoe$ = Xml_0;
  package$xml.readXml_yirdke$ = readXml;
  package$xml.XmlBuilder = XmlBuilder;
  package$xml.buildXml_iro68i$ = buildXml;
  Yaml$Token.LINE = Yaml$Token$LINE;
  Yaml$Token.ID = Yaml$Token$ID;
  Yaml$Token.STR = Yaml$Token$STR;
  Yaml$Token.SYMBOL = Yaml$Token$SYMBOL;
  Yaml.prototype.Token = Yaml$Token;
  var package$yaml = package$serialization_0.yaml || (package$serialization_0.yaml = {});
  Object.defineProperty(package$yaml, 'Yaml', {
    get: Yaml_getInstance
  });
  var package$stream = package$korio.stream || (package$korio.stream = {});
  package$stream.AsyncBaseStream = AsyncBaseStream;
  package$stream.AsyncInputOpenable = AsyncInputOpenable;
  package$stream.AsyncInputStream = AsyncInputStream;
  package$stream.AsyncOutputStream = AsyncOutputStream;
  package$stream.AsyncGetPositionStream = AsyncGetPositionStream;
  package$stream.AsyncPositionStream = AsyncPositionStream;
  package$stream.AsyncGetLengthStream = AsyncGetLengthStream;
  package$stream.AsyncLengthStream = AsyncLengthStream;
  package$stream.AsyncPositionLengthStream = AsyncPositionLengthStream;
  package$stream.AsyncInputStreamWithLength = AsyncInputStreamWithLength;
  package$stream.combine_prs3ng$ = combine_0;
  package$stream.plus_bvcuj5$ = plus_5;
  package$stream.getAvailable_86ej1l$ = getAvailable;
  package$stream.hasAvailable_86ej1l$ = hasAvailable;
  package$stream.AsyncRAInputStream = AsyncRAInputStream;
  package$stream.AsyncRAOutputStream = AsyncRAOutputStream;
  package$stream.toAsyncStream_iwjsyo$ = toAsyncStream;
  package$stream.AsyncStreamBase = AsyncStreamBase;
  package$stream.readBytes_w2vns5$ = readBytes;
  package$stream.toAsyncStream_ejtyh5$ = toAsyncStream_0;
  package$stream.AsyncStream = AsyncStream;
  package$stream.hasLength_g5ykjz$ = hasLength;
  package$stream.hasAvailable_g5ykjz$ = hasAvailable_0;
  package$stream.keepPosition_iudb3h$ = keepPosition;
  package$stream.getAvailable_2q4ayq$ = getAvailable_0;
  package$stream.eof_2q4ayq$ = eof;
  package$stream.SliceAsyncStreamBase = SliceAsyncStreamBase;
  package$stream.buffered_5vys4l$ = buffered;
  package$stream.BufferedStreamBase = BufferedStreamBase;
  package$stream.readBufferedLine_dejqr0$ = readBufferedLine;
  package$stream.bufferedInput_a0g59h$ = bufferedInput;
  package$stream.AsyncBufferedInputStream = AsyncBufferedInputStream;
  package$stream.sliceWithSize_d5z636$ = sliceWithSize;
  package$stream.sliceWithSize_j19dxo$ = sliceWithSize_0;
  package$stream.slice_n4abul$ = slice_0;
  package$stream.slice_h3xmm$ = slice_1;
  package$stream.sliceWithBounds_d5z636$ = sliceWithBounds;
  package$stream.sliceStart_t4y70x$ = sliceStart;
  package$stream.sliceHere_ysx5pw$ = sliceHere;
  package$stream.readSlice_dqczag$ = readSlice;
  package$stream.readStream_50x9bh$ = readStream;
  package$stream.readStream_dqczag$ = readStream_0;
  package$stream.readStringz_j4n3eh$ = readStringz_1;
  package$stream.readStringz_4xit9n$ = readStringz_2;
  package$stream.readString_4xit9n$ = readString_1;
  package$stream.writeStringz_wczyte$ = writeStringz;
  package$stream.writeStringz_ne9hyo$ = writeStringz_0;
  package$stream.writeString_wczyte$ = writeString;
  package$stream.readExact_8rokfb$ = readExact;
  package$internal.get_smallBytesPool = get_smallBytesPool;
  package$stream.readSmallTempExact_z17v49$ = readSmallTempExact;
  package$stream.read_30vnfr$ = read;
  package$stream.read_3934fu$ = read_0;
  Object.defineProperty(package$stream, 'EMPTY_BYTE_ARRAY', {
    get: function () {
      return EMPTY_BYTE_ARRAY;
    }
  });
  package$stream.readBytesUpToFirst_a0g59h$ = readBytesUpToFirst;
  package$stream.readBytesUpTo_a0g59h$ = readBytesUpTo;
  package$stream.readBytesExact_a0g59h$ = readBytesExact;
  package$stream.readU8_yjldv$ = readU8_0;
  package$stream.readS8_yjldv$ = readS8_0;
  package$stream.readU16LE_yjldv$ = readU16LE_0;
  package$stream.readU24LE_yjldv$ = readU24LE_0;
  package$stream.readU32LE_yjldv$ = readU32LE_0;
  package$stream.readS16LE_yjldv$ = readS16LE_0;
  package$stream.readS24LE_yjldv$ = readS24LE_0;
  package$stream.readS32LE_yjldv$ = readS32LE_0;
  package$stream.readS64LE_yjldv$ = readS64LE_0;
  package$stream.readF32LE_yjldv$ = readF32LE_0;
  package$stream.readF64LE_yjldv$ = readF64LE_0;
  package$stream.readU16BE_yjldv$ = readU16BE_0;
  package$stream.readU24BE_yjldv$ = readU24BE_0;
  package$stream.readU32BE_yjldv$ = readU32BE_0;
  package$stream.readS16BE_yjldv$ = readS16BE_0;
  package$stream.readS24BE_yjldv$ = readS24BE_0;
  package$stream.readS32BE_yjldv$ = readS32BE_0;
  package$stream.readS64BE_yjldv$ = readS64BE_0;
  package$stream.readF32BE_yjldv$ = readF32BE_0;
  package$stream.readF64BE_yjldv$ = readF64BE_0;
  package$stream.readAll_yjldv$ = readAll;
  package$stream.readAvailable_yjldv$ = readAvailable;
  package$stream.skip_a0g59h$ = skip;
  package$stream.readUByteArray_a0g59h$ = readUByteArray;
  package$stream.readShortArrayLE_a0g59h$ = readShortArrayLE_0;
  package$stream.readShortArrayBE_a0g59h$ = readShortArrayBE_0;
  package$stream.readCharArrayLE_a0g59h$ = readCharArrayLE_0;
  package$stream.readCharArrayBE_a0g59h$ = readCharArrayBE_0;
  package$stream.readIntArrayLE_a0g59h$ = readIntArrayLE_0;
  package$stream.readIntArrayBE_a0g59h$ = readIntArrayBE_0;
  package$stream.readLongArrayLE_a0g59h$ = readLongArrayLE_0;
  package$stream.readLongArrayBE_a0g59h$ = readLongArrayBE_0;
  package$stream.readFloatArrayLE_a0g59h$ = readFloatArrayLE_0;
  package$stream.readFloatArrayBE_a0g59h$ = readFloatArrayBE_0;
  package$stream.readDoubleArrayLE_a0g59h$ = readDoubleArrayLE_0;
  package$stream.readDoubleArrayBE_a0g59h$ = readDoubleArrayBE_0;
  package$stream.writeBytes_rz40do$ = writeBytes;
  package$stream.writeBytes_xuzeek$ = writeBytes_0;
  package$stream.write8_1j05bi$ = write8;
  package$stream.write16LE_1j05bi$ = write16LE_0;
  package$stream.write24LE_1j05bi$ = write24LE_0;
  package$stream.write32LE_1j05bi$ = write32LE_1;
  package$stream.write32LE_no1epl$ = write32LE_2;
  package$stream.write64LE_no1epl$ = write64LE_0;
  package$stream.writeF32LE_naqgfz$ = writeF32LE_0;
  package$stream.writeF64LE_b1blji$ = writeF64LE_0;
  package$stream.write16BE_1j05bi$ = write16BE_0;
  package$stream.write24BE_1j05bi$ = write24BE_0;
  package$stream.write32BE_1j05bi$ = write32BE_1;
  package$stream.write32BE_no1epl$ = write32BE_2;
  package$stream.write64BE_no1epl$ = write64BE_0;
  package$stream.writeF32BE_naqgfz$ = writeF32BE_0;
  package$stream.writeF64BE_b1blji$ = writeF64BE_0;
  package$stream.toAsync_ucmi9i$ = toAsync;
  package$stream.toAsync_37wh45$ = toAsync_0;
  package$stream.toAsyncInWorker_ucmi9i$ = toAsyncInWorker;
  package$stream.toAsyncInWorker_37wh45$ = toAsyncInWorker_0;
  package$stream.SyncAsyncStreamBase = SyncAsyncStreamBase;
  package$stream.SyncAsyncStreamBaseInWorker = SyncAsyncStreamBaseInWorker;
  package$stream.writeStream_b7n8o4$ = writeStream;
  package$stream.writeFile_bvymwj$ = writeFile;
  package$stream.copyTo_xwtoy$ = copyTo;
  package$stream.writeToAlign_5vys4l$ = writeToAlign;
  package$stream.skip_50x9bh$ = skip_0;
  package$stream.skipToAlign_50x9bh$ = skipToAlign;
  package$stream.truncate_g5ykjz$ = truncate;
  package$stream.writeCharArrayLE_vsk9dy$ = writeCharArrayLE;
  package$stream.writeShortArrayLE_axfcu2$ = writeShortArrayLE;
  package$stream.writeIntArrayLE_9396cn$ = writeIntArrayLE;
  package$stream.writeLongArrayLE_82d4bk$ = writeLongArrayLE;
  package$stream.writeFloatArrayLE_vsbrxi$ = writeFloatArrayLE;
  package$stream.writeDoubleArrayLE_k5yo8b$ = writeDoubleArrayLE;
  package$stream.writeCharArrayBE_vsk9dy$ = writeCharArrayBE;
  package$stream.writeShortArrayBE_axfcu2$ = writeShortArrayBE;
  package$stream.writeIntArrayBE_9396cn$ = writeIntArrayBE;
  package$stream.writeLongArrayBE_82d4bk$ = writeLongArrayBE;
  package$stream.writeFloatArrayBE_vsbrxi$ = writeFloatArrayBE;
  package$stream.writeDoubleArrayBE_k5yo8b$ = writeDoubleArrayBE;
  package$stream.readUntil_zf0ym4$ = readUntil;
  package$stream.readLine_kt587k$ = readLine;
  package$stream.toAsyncInputStream_p2awyq$ = toAsyncInputStream_0;
  package$stream.toAsyncOutputStream_tjlpjf$ = toAsyncOutputStream;
  package$stream.asVfsFile_igl5gt$ = asVfsFile;
  package$stream.readAllAsFastStream_50x9bh$ = readAllAsFastStream;
  package$stream.getWrittenRange_rj0k6g$ = getWrittenRange;
  package$stream.writeU_VL_50x9bh$ = writeU_VL;
  package$stream.writeStringVL_djs7ml$ = writeStringVL;
  package$stream.withLength_q9i8w6$ = withLength;
  package$stream.MemoryAsyncStreamBase_init_za3lpa$ = MemoryAsyncStreamBase_init;
  package$stream.MemoryAsyncStreamBase = MemoryAsyncStreamBase;
  package$stream.asyncStreamWriter_pc4256$ = asyncStreamWriter;
  package$stream.MemorySyncStreamToByteArray_l6bp58$ = MemorySyncStreamToByteArray;
  package$stream.writeSync_jbc10$ = writeSync;
  package$stream.FastByteArrayInputStream = FastByteArrayInputStream;
  package$stream.openFastStream_mrm5p$ = openFastStream;
  package$stream.SyncInputStream = SyncInputStream;
  package$stream.SyncOutputStream = SyncOutputStream;
  package$stream.SyncPositionStream = SyncPositionStream;
  package$stream.SyncLengthStream = SyncLengthStream;
  package$stream.SyncRAInputStream = SyncRAInputStream;
  package$stream.SyncRAOutputStream = SyncRAOutputStream;
  package$stream.SyncStreamBase = SyncStreamBase;
  package$stream.SyncStream = SyncStream;
  package$stream.keepPosition_1v0ofm$ = keepPosition_0;
  package$stream.SliceSyncStreamBase = SliceSyncStreamBase;
  package$stream.FillSyncStreamBase = FillSyncStreamBase;
  package$stream.FillSyncStream_6svq3l$ = FillSyncStream;
  package$stream.MemorySyncStream_fqrh44$ = MemorySyncStream;
  package$stream.MemorySyncStream_i9anm0$ = MemorySyncStream_0;
  package$stream.get_hasLength_ucmi9i$ = get_hasLength;
  package$stream.get_hasAvailable_ucmi9i$ = get_hasAvailable;
  package$stream.toByteArray_ucmi9i$ = toByteArray_0;
  package$stream.MemorySyncStreamBase_init_za3lpa$ = MemorySyncStreamBase_init;
  package$stream.MemorySyncStreamBase = MemorySyncStreamBase;
  package$stream.sliceStart_gezhyr$ = sliceStart_0;
  package$stream.sliceHere_ucmi9i$ = sliceHere_0;
  package$stream.slice_i2r7m7$ = slice_2;
  package$stream.slice_50v2io$ = slice_3;
  package$stream.sliceWithBounds_1r8368$ = sliceWithBounds_0;
  package$stream.sliceWithSize_1r8368$ = sliceWithSize_1;
  package$stream.sliceWithSize_acdave$ = sliceWithSize_2;
  package$stream.readSlice_gezhyr$ = readSlice_0;
  package$stream.readStream_hsu5ns$ = readStream_1;
  package$stream.readStream_gezhyr$ = readStream_2;
  package$stream.readStringz_4zsegu$ = readStringz_3;
  package$stream.readStringz_6ey4ts$ = readStringz_4;
  package$stream.readString_6ey4ts$ = readString_2;
  package$stream.writeString_61lhbb$ = writeString_0;
  package$stream.readExact_hz4ta6$ = readExact_0;
  package$stream.read_1fivb2$ = read_1;
  package$stream.read_omuff$ = read_2;
  package$stream.readBytesExact_xpzb7k$ = readBytesExact_0;
  package$stream.writeStringz_61lhbb$ = writeStringz_1;
  package$stream.writeStringz_5iah4l$ = writeStringz_2;
  package$stream.readBytes_xpzb7k$ = readBytes_0;
  package$stream.writeBytes_o1e1if$ = writeBytes_1;
  package$stream.writeBytes_akxjmv$ = writeBytes_2;
  package$stream.get_eof_ucmi9i$ = get_eof;
  package$stream.readU8_p2awyq$ = readU8_1;
  package$stream.readS8_p2awyq$ = readS8_1;
  package$stream.readU16LE_p2awyq$ = readU16LE_1;
  package$stream.readU24LE_p2awyq$ = readU24LE_1;
  package$stream.readU32LE_p2awyq$ = readU32LE_1;
  package$stream.readS16LE_p2awyq$ = readS16LE_1;
  package$stream.readS24LE_p2awyq$ = readS24LE_1;
  package$stream.readS32LE_p2awyq$ = readS32LE_1;
  package$stream.readS64LE_p2awyq$ = readS64LE_1;
  package$stream.readF32LE_p2awyq$ = readF32LE_1;
  package$stream.readF64LE_p2awyq$ = readF64LE_1;
  package$stream.readU16BE_p2awyq$ = readU16BE_1;
  package$stream.readU24BE_p2awyq$ = readU24BE_1;
  package$stream.readU32BE_p2awyq$ = readU32BE_1;
  package$stream.readS16BE_p2awyq$ = readS16BE_1;
  package$stream.readS24BE_p2awyq$ = readS24BE_1;
  package$stream.readS32BE_p2awyq$ = readS32BE_1;
  package$stream.readS64BE_p2awyq$ = readS64BE_1;
  package$stream.readF32BE_p2awyq$ = readF32BE_1;
  package$stream.readF64BE_p2awyq$ = readF64BE_1;
  package$stream.readAvailable_ucmi9i$ = readAvailable_0;
  package$stream.readAll_ucmi9i$ = readAll_0;
  package$stream.readUByteArray_xpzb7k$ = readUByteArray_0;
  package$stream.readShortArrayLE_xpzb7k$ = readShortArrayLE_1;
  package$stream.readShortArrayBE_xpzb7k$ = readShortArrayBE_1;
  package$stream.readCharArrayLE_xpzb7k$ = readCharArrayLE_1;
  package$stream.readCharArrayBE_xpzb7k$ = readCharArrayBE_1;
  package$stream.readIntArrayLE_xpzb7k$ = readIntArrayLE_1;
  package$stream.readIntArrayBE_xpzb7k$ = readIntArrayBE_1;
  package$stream.readLongArrayLE_xpzb7k$ = readLongArrayLE_1;
  package$stream.readLongArrayBE_xpzb7k$ = readLongArrayBE_1;
  package$stream.readFloatArrayLE_xpzb7k$ = readFloatArrayLE_1;
  package$stream.readFloatArrayBE_xpzb7k$ = readFloatArrayBE_1;
  package$stream.readDoubleArrayLE_xpzb7k$ = readDoubleArrayLE_1;
  package$stream.readDoubleArrayBE_xpzb7k$ = readDoubleArrayBE_1;
  package$stream.write8_n5df9z$ = write8_0;
  package$stream.write16LE_n5df9z$ = write16LE_1;
  package$stream.write24LE_n5df9z$ = write24LE_1;
  package$stream.write32LE_n5df9z$ = write32LE_3;
  package$stream.write32LE_7bhjh0$ = write32LE_4;
  package$stream.write64LE_7bhjh0$ = write64LE_1;
  package$stream.writeF32LE_dpexvo$ = writeF32LE_1;
  package$stream.writeF64LE_27561j$ = writeF64LE_1;
  package$stream.write16BE_n5df9z$ = write16BE_1;
  package$stream.write24BE_n5df9z$ = write24BE_1;
  package$stream.write32BE_n5df9z$ = write32BE_3;
  package$stream.write32BE_7bhjh0$ = write32BE_4;
  package$stream.write64BE_7bhjh0$ = write64BE_1;
  package$stream.writeF32BE_dpexvo$ = writeF32BE_1;
  package$stream.writeF64BE_27561j$ = writeF64BE_1;
  package$stream.toSyncStream_wrqxjw$ = toSyncStream;
  package$stream.openSync_m1iwyb$ = openSync;
  package$stream.openAsync_m1iwyb$ = openAsync;
  package$stream.openSync_7jlb4b$ = openSync_0;
  package$stream.openAsync_7jlb4b$ = openAsync_0;
  package$stream.writeStream_cyjt5w$ = writeStream_0;
  package$stream.copyTo_y2f6oo$ = copyTo_0;
  package$stream.writeToAlign_acdave$ = writeToAlign_0;
  package$stream.skip_hsu5ns$ = skip_1;
  package$stream.skipToAlign_hsu5ns$ = skipToAlign_0;
  package$stream.truncate_ucmi9i$ = truncate_0;
  package$stream.writeCharArrayLE_zattpx$ = writeCharArrayLE_0;
  package$stream.writeShortArrayLE_93fq7f$ = writeShortArrayLE_0;
  package$stream.writeIntArrayLE_4munlu$ = writeIntArrayLE_0;
  package$stream.writeLongArrayLE_c0336t$ = writeLongArrayLE_0;
  package$stream.writeFloatArrayLE_j7x705$ = writeFloatArrayLE_0;
  package$stream.writeDoubleArrayLE_wbwi8g$ = writeDoubleArrayLE_0;
  package$stream.writeCharArrayBE_zattpx$ = writeCharArrayBE_0;
  package$stream.writeShortArrayBE_93fq7f$ = writeShortArrayBE_0;
  package$stream.writeIntArrayBE_4munlu$ = writeIntArrayBE_0;
  package$stream.writeLongArrayBE_c0336t$ = writeLongArrayBE_0;
  package$stream.writeFloatArrayBE_j7x705$ = writeFloatArrayBE_0;
  package$stream.writeDoubleArrayBE_wbwi8g$ = writeDoubleArrayBE_0;
  package$stream.readU_VL_p2awyq$ = readU_VL;
  package$stream.readS_VL_p2awyq$ = readS_VL;
  package$stream.writeU_VL_n5df9z$ = writeU_VL_0;
  package$stream.writeS_VL_n5df9z$ = writeS_VL;
  package$stream.writeStringVL_61lhbb$ = writeStringVL_0;
  package$stream.readStringVL_hpdasm$ = readStringVL;
  package$stream.readExactTo_hz4ta6$ = readExactTo;
  var package$util_0 = package$korio.util || (package$korio.util = {});
  package$util_0.buildList_d20xj0$ = buildList;
  package$util_0.set_ietg8x$ = set_0;
  package$util_0.set_2iihii$ = set_1;
  package$util_0.join_fn3604$ = join;
  package$util_0.join_q9e4xk$ = join_0;
  package$util_0.join_z1p0g8$ = join_1;
  package$util_0.join_c3nfez$ = join_2;
  package$util_0.join_h31mdw$ = join_3;
  package$util_0.join_tlljdk$ = join_4;
  package$util_0.join_s13lr5$ = join_5;
  package$util_0.indexOf_kn2qny$ = indexOf_3;
  package$util_0.indexOf_t1rr2c$ = indexOf_4;
  package$util_0.indexOf_wyg44m$ = indexOf_5;
  package$util_0.indexOf_v1vpys$ = indexOf_6;
  package$util_0.indexOf_o7ltj0$ = indexOf_7;
  package$util_0.indexOf_jod3yy$ = indexOf_8;
  package$util_0.indexOf_m312e4$ = indexOf_9;
  package$util_0.isWhitespaceFast_myv2d0$ = isWhitespaceFast;
  package$util_0.isDigit_myv2d0$ = isDigit;
  package$util_0.isLetter_myv2d0$ = isLetter;
  package$util_0.isLetterOrDigit_myv2d0$ = isLetterOrDigit;
  package$util_0.isLetterOrUnderscore_myv2d0$ = isLetterOrUnderscore;
  package$util_0.isLetterDigitOrUnderscore_myv2d0$ = isLetterDigitOrUnderscore;
  package$util_0.isLetterOrDigitOrDollar_myv2d0$ = isLetterOrDigitOrDollar;
  package$util_0.get_isNumeric_myv2d0$ = get_isNumeric;
  package$util_0.isPrintable_myv2d0$ = isPrintable;
  package$util_0.get_isPossibleFloatChar_myv2d0$ = get_isPossibleFloatChar;
  package$util_0.compareToChain_ssq1th$ = compareToChain;
  package$util_0.expectException_3psp43$ = expectException;
  package$util_0.ExpectedException = ExpectedException;
  package$util_0.htmlspecialchars_pdl1vz$ = htmlspecialchars;
  Object.defineProperty(Indenter, 'INDENTS', {
    get: Indenter$INDENTS_getInstance
  });
  Indenter$Action.Text = Indenter$Action$Text;
  Indenter$Action.Marker = Indenter$Action$Marker;
  Indenter$Action.Inline = Indenter$Action$Inline;
  Indenter$Action.Line = Indenter$Action$Line;
  Indenter$Action.LineDeferred = Indenter$Action$LineDeferred;
  Object.defineProperty(Indenter$Action, 'EmptyLineOnce', {
    get: Indenter$Action$EmptyLineOnce_getInstance
  });
  Object.defineProperty(Indenter$Action, 'Indent', {
    get: Indenter$Action$Indent_getInstance
  });
  Object.defineProperty(Indenter$Action, 'Unindent', {
    get: Indenter$Action$Unindent_getInstance
  });
  Indenter.Action = Indenter$Action;
  Object.defineProperty(Indenter, 'Companion', {
    get: Indenter$Companion_getInstance
  });
  Indenter.IndenterEvaluator = Indenter$IndenterEvaluator;
  package$util_0.Indenter = Indenter;
  package$util_0.get_SEPARATOR_fuuqje$ = get_SEPARATOR;
  package$util_0.EMPTY_LINE_ONCE_fuuqje$ = EMPTY_LINE_ONCE;
  package$util_0.SEPARATOR_1hv01k$ = SEPARATOR;
  package$util_0.XmlIndenter = XmlIndenter;
  package$util_0.xml_hgpmw9$ = xml;
  package$util_0.toStringUnsigned_dqglrj$ = toStringUnsigned;
  package$util_0.toStringUnsigned_if0zpk$ = toStringUnsigned_0;
  package$util_0.get_niceStr_81szk$ = get_niceStr;
  package$util_0.get_niceStr_yrwdxr$ = get_niceStr_0;
  package$util_0.toStringDecimal_9rbwic$ = toStringDecimal;
  package$util_0.toStringDecimal_pcj351$ = toStringDecimal_0;
  Object.defineProperty(package$util_0, 'NumberParser', {
    get: NumberParser_getInstance
  });
  Object.defineProperty(package$util_0, 'OS', {
    get: OS_getInstance
  });
  package$util_0.Once = Once;
  package$util_0.SyncOnce = SyncOnce;
  package$util_0.AsyncOnce = AsyncOnce;
  Object.defineProperty(Props, 'Companion', {
    get: Props$Companion_getInstance
  });
  package$util_0.Props = Props;
  package$util_0.loadProperties_tevhe2$ = loadProperties;
  package$util_0.saveProperties_6fkccu$ = saveProperties;
  Object.defineProperty(package$util_0, 'LONG_ZERO_TO_MAX_RANGE', {
    get: function () {
      return LONG_ZERO_TO_MAX_RANGE;
    }
  });
  package$util_0.toLongRange_9tsm8a$ = toLongRange;
  package$util_0.get_length_9tsm8a$ = get_length;
  package$util_0.get_length_37ivyf$ = get_length_0;
  package$util_0.get_endExclusive_9tsm8a$ = get_endExclusive;
  package$util_0.get_endExclusive_37ivyf$ = get_endExclusive_0;
  package$util_0.get_endExclusiveClamped_37ivyf$ = get_endExclusiveClamped;
  package$util_0.RedirectField = RedirectField;
  package$util_0.RedirectMutableField = RedirectMutableField;
  package$util_0.RedirectMutableFieldGen = RedirectMutableFieldGen;
  package$util_0.RedirectFieldGen = RedirectFieldGen;
  package$util_0.redirected_f59s52$ = redirected;
  package$util_0.redirected_bb9ril$ = redirected_0;
  package$util_0.redirected_58ahrt$ = redirected_1;
  package$util_0.redirected_myrrmk$ = redirected_2;
  package$util_0.TransformedField = TransformedField;
  package$util_0.TransformedMutableField = TransformedMutableField;
  package$util_0.transformed_q0b0ro$ = transformed;
  package$util_0.transformed_xopgwm$ = transformed_0;
  package$util_0.quote_9fqtcw$ = quote;
  Object.defineProperty(StrReader, 'Companion', {
    get: StrReader$Companion_getInstance
  });
  Object.defineProperty(StrReader$Literals, 'Companion', {
    get: StrReader$Literals$Companion_getInstance
  });
  StrReader.Literals = StrReader$Literals;
  Object.defineProperty(StrReader$TRange, 'Companion', {
    get: StrReader$TRange$Companion_getInstance
  });
  StrReader.TRange = StrReader$TRange;
  package$util_0.StrReader = StrReader;
  package$util_0.reader_4hqpxb$ = reader;
  package$util_0.escape_pdl1vz$ = escape;
  package$util_0.uescape_pdl1vz$ = uescape;
  package$util_0.unescape_pdl1vz$ = unescape;
  package$util_0.uquote_5cw0du$ = uquote;
  package$util_0.quote_5cw0du$ = quote_0;
  package$util_0.isQuoted_pdl1vz$ = isQuoted;
  package$util_0.unquote_pdl1vz$ = unquote;
  package$util_0.get_quoted_5cw0du$ = get_quoted_0;
  package$util_0.get_unquoted_pdl1vz$ = get_unquoted;
  package$util_0.substringAfterOrNull_bauq2a$ = substringAfterOrNull;
  package$util_0.substringBeforeOrNull_bauq2a$ = substringBeforeOrNull;
  package$util_0.substringAfterLastOrNull_bauq2a$ = substringAfterLastOrNull;
  package$util_0.substringBeforeLastOrNull_bauq2a$ = substringBeforeLastOrNull;
  package$util_0.substringAfterOrNull_rjktp$ = substringAfterOrNull_0;
  package$util_0.substringBeforeOrNull_rjktp$ = substringBeforeOrNull_0;
  package$util_0.substringAfterLastOrNull_rjktp$ = substringAfterLastOrNull_0;
  package$util_0.substringBeforeLastOrNull_rjktp$ = substringBeforeLastOrNull_0;
  Object.defineProperty(UUID, 'Companion', {
    get: UUID$Companion_getInstance
  });
  package$util_0.UUID = UUID;
  var package$checksum = package$util_0.checksum || (package$util_0.checksum = {});
  Object.defineProperty(package$checksum, 'Adler32', {
    get: Adler32_getInstance
  });
  Object.defineProperty(package$checksum, 'CRC32', {
    get: CRC32_getInstance
  });
  package$checksum.SimpleChecksum = SimpleChecksum;
  package$checksum.compute_su2s3z$ = compute;
  package$checksum.checksum_hpq42v$ = checksum;
  package$checksum.checksum_bxo3ve$ = checksum_0;
  package$checksum.checksum_om7h9d$ = checksum_1;
  package$checksum.checksum_4d2ibp$ = checksum_2;
  var package$encoding = package$util_0.encoding || (package$util_0.encoding = {});
  Object.defineProperty(package$encoding, 'Base64', {
    get: Base64_getInstance
  });
  package$encoding.fromBase64IgnoreSpaces_pdl1vz$ = fromBase64IgnoreSpaces;
  package$encoding.fromBase64_pdl1vz$ = fromBase64;
  package$encoding.toBase64_964n91$ = toBase64;
  Object.defineProperty(package$encoding, 'Hex', {
    get: Hex_getInstance
  });
  package$encoding.get_unhexIgnoreSpaces_d2950k$ = get_unhexIgnoreSpaces;
  package$encoding.get_unhexIgnoreSpaces_pdl1vz$ = get_unhexIgnoreSpaces_0;
  package$encoding.get_unhex_pdl1vz$ = get_unhex;
  package$encoding.get_hex_964n91$ = get_hex;
  package$encoding.get_hex_s8ev3n$ = get_hex_0;
  package$encoding.get_shex_s8ev3n$ = get_shex;
  Object.defineProperty(Language, 'JAPANESE', {
    get: Language$JAPANESE_getInstance
  });
  Object.defineProperty(Language, 'ENGLISH', {
    get: Language$ENGLISH_getInstance
  });
  Object.defineProperty(Language, 'FRENCH', {
    get: Language$FRENCH_getInstance
  });
  Object.defineProperty(Language, 'SPANISH', {
    get: Language$SPANISH_getInstance
  });
  Object.defineProperty(Language, 'GERMAN', {
    get: Language$GERMAN_getInstance
  });
  Object.defineProperty(Language, 'ITALIAN', {
    get: Language$ITALIAN_getInstance
  });
  Object.defineProperty(Language, 'DUTCH', {
    get: Language$DUTCH_getInstance
  });
  Object.defineProperty(Language, 'PORTUGUESE', {
    get: Language$PORTUGUESE_getInstance
  });
  Object.defineProperty(Language, 'RUSSIAN', {
    get: Language$RUSSIAN_getInstance
  });
  Object.defineProperty(Language, 'KOREAN', {
    get: Language$KOREAN_getInstance
  });
  Object.defineProperty(Language, 'CHINESE', {
    get: Language$CHINESE_getInstance
  });
  Object.defineProperty(Language, 'Companion', {
    get: Language$Companion_getInstance
  });
  var package$i18n = package$util_0.i18n || (package$util_0.i18n = {});
  package$i18n.Language = Language;
  package$korio.createURLForData_nwlife$ = createURLForData;
  package$korio.revokeRLForData_61zpoe$ = revokeRLForData;
  package$korio.createTemporalURLForData_y2mrn0$ = createTemporalURLForData;
  Object.defineProperty(package$korio, 'jsLocalStorageVfs', {
    get: get_jsLocalStorageVfs
  });
  Object.defineProperty(package$korio, 'jsbaseUrl', {
    get: get_jsbaseUrl
  });
  Object.defineProperty(package$korio, 'globalDynamic', {
    get: function () {
      return globalDynamic;
    }
  });
  Object.defineProperty(package$korio, 'global', {
    get: function () {
      return global_0;
    }
  });
  Object.defineProperty(package$korio, 'isWeb', {
    get: get_isWeb
  });
  Object.defineProperty(package$korio, 'isWorker', {
    get: get_isWorker
  });
  Object.defineProperty(package$korio, 'isNodeJs', {
    get: get_isNodeJs
  });
  Object.defineProperty(package$korio, 'isShell', {
    get: get_isShell
  });
  package$korio.toList_sg7yuv$ = toList_4;
  package$korio.toTypedList_wl238u$ = toTypedList;
  package$korio.jsNew_za3rmp$ = jsNew;
  package$korio.jsNew_wn2jw4$ = jsNew_0;
  package$korio.jsNew_2br51b$ = jsNew_1;
  package$korio.jsNew_vl6e50$ = jsNew_2;
  package$korio.jsEnsureNumber_za3rmp$ = jsEnsureNumber;
  package$korio.jsEnsureInt_za3rmp$ = jsEnsureInt;
  package$korio.jsEmptyObj = jsEmptyObj;
  package$korio.jsEmptyArray = jsEmptyArray;
  package$korio.jsObjectKeys_za3rmp$ = jsObjectKeys;
  package$korio.jsObjectKeysArray_za3rmp$ = jsObjectKeysArray;
  package$korio.jsObjectToMap_za3rmp$ = jsObjectToMap;
  package$korio.jsToArray_za3rmp$ = jsToArray;
  package$korio.jsArray_jiburq$ = jsArray;
  package$korio.jsObject_pyyo18$ = jsObject;
  package$korio.toJsObject_t8rdy2$ = toJsObject;
  package$korio.jsToObjectMap_za3rmp$ = jsToObjectMap;
  package$korio.require_node_y4putb$ = require_node;
  package$korio.toByteArray_lye5cv$ = toByteArray_1;
  package$korio.asInt8Array_964n91$ = asInt8Array;
  package$korio.asUint8Array_964n91$ = asUint8Array;
  package$korio.toNodeJsBuffer_964n91$ = toNodeJsBuffer;
  package$korio.toNodeJsBuffer_ietg8x$ = toNodeJsBuffer_0;
  package$korio.HttpClientNodeJs = HttpClientNodeJs;
  package$korio.HttpSeverNodeJs = HttpSeverNodeJs;
  package$korio.NodeJsAsyncClient = NodeJsAsyncClient;
  package$korio.NodeJsAsyncServer = NodeJsAsyncServer;
  NodeJsLocalVfs.FD = NodeJsLocalVfs$FD;
  package$korio.NodeJsLocalVfs = NodeJsLocalVfs;
  package$korio.NodeFDStream = NodeFDStream;
  package$async.asyncEntryPoint_g2bo5h$ = asyncEntryPoint;
  package$async.Promise_8mnumz$ = Promise_1;
  package$deflate.Deflate_za3lpa$ = Deflate_0;
  package$atomic.korAtomic_mh5how$ = korAtomic;
  package$atomic.korAtomic_6taknv$ = korAtomic_0;
  package$atomic.korAtomic_za3lpa$ = korAtomic_1;
  package$atomic.korAtomic_s8cxhz$ = korAtomic_2;
  var package$lock = package$concurrent.lock || (package$concurrent.lock = {});
  package$lock.Lock = Lock;
  Object.defineProperty(package$dynamic, 'DynamicInternal', {
    get: DynamicInternal_getInstance
  });
  Object.defineProperty(package$file, 'File_separatorChar', {
    get: function () {
      return File_separatorChar;
    }
  });
  Object.defineProperty(package$std, 'tmpdir', {
    get: get_tmpdir
  });
  Object.defineProperty(package$std, 'resourcesVfs', {
    get: get_resourcesVfs
  });
  Object.defineProperty(package$std, 'rootLocalVfs', {
    get: get_rootLocalVfs
  });
  Object.defineProperty(package$std, 'applicationVfs', {
    get: get_applicationVfs
  });
  Object.defineProperty(package$std, 'applicationDataVfs', {
    get: get_applicationDataVfs
  });
  Object.defineProperty(package$std, 'cacheVfs', {
    get: get_cacheVfs
  });
  Object.defineProperty(package$std, 'externalStorageVfs', {
    get: get_externalStorageVfs
  });
  Object.defineProperty(package$std, 'userHomeVfs', {
    get: get_userHomeVfs
  });
  Object.defineProperty(package$std, 'tempVfs', {
    get: get_tempVfs
  });
  package$std.localVfs_61zpoe$ = localVfs;
  package$lang.get_portableSimpleName_1yb8b7$ = get_portableSimpleName;
  Object.defineProperty(package$lang, 'Environment', {
    get: Environment_getInstance
  });
  package$lang.IOException = IOException;
  package$lang.EOFException = EOFException;
  package$lang.FileNotFoundException = FileNotFoundException;
  package$lang.enterDebugger = enterDebugger;
  package$lang.NativeThreadLocal = NativeThreadLocal;
  Object.defineProperty(package$lang, 'currentThreadId', {
    get: get_currentThreadId
  });
  package$lang.Thread_sleep_s8cxhz$ = Thread_sleep;
  Object.defineProperty(package$lang, 'UTF8', {
    get: function () {
      return UTF8;
    }
  });
  Object.defineProperty(package$net, 'asyncSocketFactory_8be2vx$', {
    get: get_asyncSocketFactory
  });
  Object.defineProperty(package$http, 'httpFactory_8be2vx$', {
    get: get_httpFactory
  });
  package$http.HttpClientBrowserJs = HttpClientBrowserJs;
  package$ws.WebSocketClient_lj7518$ = WebSocketClient_0;
  package$ws.JsWebSocketClient = JsWebSocketClient;
  package$util_0.toByteArray_qfdq9h$ = toByteArray_2;
  package$util_0.toByteArray_1c7w7g$ = toByteArray_3;
  package$util_0.toInt8Array_964n91$ = toInt8Array;
  Object.defineProperty(package$util_0, 'rawOsName_8be2vx$', {
    get: get_rawOsName
  });
  Object.defineProperty(package$util_0, 'rawPlatformName_8be2vx$', {
    get: function () {
      return rawPlatformName;
    }
  });
  Object.defineProperty(package$i18n, 'systemLanguageStrings_8be2vx$', {
    get: get_systemLanguageStrings
  });
  AsyncByteArrayDeque.prototype.write_za3lpa$ = AsyncOutputStream.prototype.write_za3lpa$;
  AsyncByteArrayDeque.prototype.read = AsyncInputStream.prototype.read;
  AsyncByteArrayDeque.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  toAsyncInputStream$ObjectLiteral.prototype.read = AsyncInputStream.prototype.read;
  runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral.prototype.get_j3r2sn$ = ContinuationInterceptor.prototype.get_j3r2sn$;
  runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral.prototype.minusKey_yeqjby$ = ContinuationInterceptor.prototype.minusKey_yeqjby$;
  runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral.prototype.releaseInterceptedContinuation_k98bjh$ = ContinuationInterceptor.prototype.releaseInterceptedContinuation_k98bjh$;
  runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral.prototype.delay_s8cxhz$ = Delay.prototype.delay_s8cxhz$;
  runBlockingNoSuspensions$ObjectLiteral$context$ObjectLiteral.prototype.invokeOnTimeout_8irseu$ = Delay.prototype.invokeOnTimeout_8irseu$;
  CompressionMethod$Uncompressed.prototype.compress_4p3hd0$ = CompressionMethod.prototype.compress_4p3hd0$;
  DeflatePortable.prototype.compress_4p3hd0$ = CompressionMethod.prototype.compress_4p3hd0$;
  GZIPBase.prototype.compress_4p3hd0$ = CompressionMethod.prototype.compress_4p3hd0$;
  GZIPBase$uncompress$ObjectLiteral.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  AsyncInputStreamWithLength.prototype.read = AsyncInputStream.prototype.read;
  AsyncInputStreamWithLength.prototype.getPosition = AsyncGetPositionStream.prototype.getPosition;
  AsyncInputStreamWithLength.prototype.getLength = AsyncGetLengthStream.prototype.getLength;
  ZLib.prototype.compress_4p3hd0$ = CompressionMethod.prototype.compress_4p3hd0$;
  ZLib$uncompress$ObjectLiteral.prototype.write_za3lpa$ = AsyncOutputStream.prototype.write_za3lpa$;
  ZLib$uncompress$ObjectLiteral.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  Lzma.prototype.compress_4p3hd0$ = CompressionMethod.prototype.compress_4p3hd0$;
  BitReader.prototype.read = AsyncInputStreamWithLength.prototype.read;
  AsyncLengthStream.prototype.getLength = AsyncGetLengthStream.prototype.getLength;
  Cancellable$Companion$invoke$ObjectLiteral.prototype.cancel_tcv7n7$ = Cancellable.prototype.cancel_tcv7n7$;
  AsyncClient.prototype.read = AsyncInputStream.prototype.read;
  AsyncClient.prototype.write_za3lpa$ = AsyncOutputStream.prototype.write_za3lpa$;
  AsyncClient.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  FakeHttpClientEndpoint.prototype.request_v6tn8p$ = HttpClientEndpoint.prototype.request_v6tn8p$;
  endpoint$ObjectLiteral.prototype.request_v6tn8p$ = HttpClientEndpoint.prototype.request_v6tn8p$;
  HttpServer$Request.prototype.write_za3lpa$ = AsyncOutputStream.prototype.write_za3lpa$;
  HttpServer$Request.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  AsyncPositionStream.prototype.getPosition = AsyncGetPositionStream.prototype.getPosition;
  AsyncPositionLengthStream.prototype.setPosition_s8cxhz$ = AsyncPositionStream.prototype.setPosition_s8cxhz$;
  AsyncPositionLengthStream.prototype.getPosition = AsyncPositionStream.prototype.getPosition;
  AsyncPositionLengthStream.prototype.setLength_s8cxhz$ = AsyncLengthStream.prototype.setLength_s8cxhz$;
  AsyncPositionLengthStream.prototype.getLength = AsyncLengthStream.prototype.getLength;
  combine$ObjectLiteral.prototype.read = AsyncInputStreamWithLength.prototype.read;
  AsyncStream.prototype.read = AsyncInputStream.prototype.read;
  AsyncStream.prototype.write_za3lpa$ = AsyncOutputStream.prototype.write_za3lpa$;
  AsyncStream.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  toAsyncInputStream$ObjectLiteral_0.prototype.read = AsyncInputStreamWithLength.prototype.read;
  toAsyncOutputStream$ObjectLiteral.prototype.write_za3lpa$ = AsyncOutputStream.prototype.write_za3lpa$;
  toAsyncOutputStream$ObjectLiteral.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  asyncStreamWriter$lambda$ObjectLiteral.prototype.write_mj6st8$ = AsyncOutputStream.prototype.write_mj6st8$;
  SyncInputStream.prototype.close = OptionalCloseable.prototype.close;
  SyncOutputStream.prototype.close = OptionalCloseable.prototype.close;
  SyncStreamBase.prototype.flush = SyncRAOutputStream.prototype.flush;
  SyncStream.prototype.read_mj6st8$ = SyncInputStream.prototype.read_mj6st8$;
  SyncStream.prototype.write_mj6st8$ = SyncOutputStream.prototype.write_mj6st8$;
  Adler32.prototype.update_3fge6q$ = SimpleChecksum.prototype.update_3fge6q$;
  CRC32.prototype.update_3fge6q$ = SimpleChecksum.prototype.update_3fge6q$;
  NodeJsAsyncClient.prototype.read = AsyncClient.prototype.read;
  NodeJsAsyncClient.prototype.write_za3lpa$ = AsyncClient.prototype.write_za3lpa$;
  NodeJsAsyncClient.prototype.write_mj6st8$ = AsyncClient.prototype.write_mj6st8$;
  NodeJsAsyncServer.prototype.listen_lsub1v$ = AsyncServer.prototype.listen_lsub1v$;
  NodeJsAsyncServer.prototype.listen = AsyncServer.prototype.listen;
  NodeJsAsyncServer.prototype.listenFlow = AsyncServer.prototype.listenFlow;
  DEFAULT_SUSPEND_TEST_TIMEOUT = TimeSpan.Companion.fromSeconds_14dthe$(20);
  Deflate = lazy(Deflate$lambda);
  Mapper = new ObjectMapper();
  resourcesVfsDebug = false;
  defaultUniSchema = UniSchemaProviders_init_0([new UniSchema('http', defaultUniSchema$lambda), new UniSchema('https', defaultUniSchema$lambda_0), new UniSchema('file', defaultUniSchema$lambda_1)]);
  KORIO_VERSION = '1.7.0';
  BYTES_TEMP_SIZE = 65536;
  bytesTempPool = new threadLocal(bytesTempPool$lambda);
  smallBytesPool = new threadLocal(smallBytesPool$lambda);
  LATIN1 = ISO_8859_1_getInstance();
  UTF16_LE = new UTF16Charset(true);
  UTF16_BE = new UTF16Charset(false);
  formatRegex = Regex_init('%([-]?\\d+)?(\\w)');
  replaceNonPrintableCharactersRegex = lazy(replaceNonPrintableCharactersRegex$lambda);
  MimeType_byExtensions = lazy(MimeType_byExtensions$lambda);
  _defaultHttpFactory = lazy(_defaultHttpFactory$lambda);
  EMPTY_BYTE_ARRAY = new Int8Array(0);
  LONG_ZERO_TO_MAX_RANGE = L0.rangeTo(Long$Companion$MAX_VALUE);
  Language_CURRENT = lazy(Language_CURRENT$lambda);
  jsLocalStorageVfs = lazy(jsLocalStorageVfs$lambda);
  jsbaseUrl = lazy(jsbaseUrl$lambda);
  globalDynamic = typeof global !== 'undefined' ? global : self;
  global_0 = globalDynamic;
  isWeb = lazy(isWeb$lambda);
  isWorker = lazy(isWorker$lambda);
  isNodeJs = lazy(isNodeJs$lambda);
  require_req = require;
  File_separatorChar = 47;
  tmpdir = lazy(tmpdir$lambda);
  absoluteCwd = lazy(absoluteCwd$lambda);
  resourcesVfs = lazy(resourcesVfs$lambda);
  rootLocalVfs = lazy(rootLocalVfs$lambda);
  applicationVfs = lazy(applicationVfs$lambda);
  applicationDataVfs = lazy(applicationDataVfs$lambda);
  cacheVfs = lazy(cacheVfs$lambda);
  externalStorageVfs = lazy(externalStorageVfs$lambda);
  userHomeVfs = lazy(userHomeVfs$lambda);
  tempVfs = lazy(tempVfs$lambda);
  UTF8 = new UTF8$ObjectLiteral('UTF-8');
  asyncSocketFactory = lazy(asyncSocketFactory$lambda);
  httpFactory = lazy(httpFactory$lambda);
  rawOsName = lazy(rawOsName$lambda);
  var tmp$;
  if (get_isWeb())
    tmp$ = 'web.js';
  else if (get_isNodeJs())
    tmp$ = 'node.js';
  else if (get_isWorker())
    tmp$ = 'worker.js';
  else if (get_isShell())
    tmp$ = 'shell.js';
  else
    tmp$ = 'js';
  rawPlatformName = tmp$;
  systemLanguageStrings = lazy(systemLanguageStrings$lambda);
  Kotlin.defineModule('korio-root-korio', _);
  return _;
}));

//# sourceMappingURL=korio-root-korio.js.map
